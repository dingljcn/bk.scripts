(()=>{var t={814:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("linkCss",(function(t){window.linkCss(window.dinglj_home,t)})),window.defunc("linkCss",(function(t,e){var n=document.createElement("style"),o=window.mergePath(t,e);n.innerHTML=window.get(o),document.head.appendChild(n)})),window.defunc("get",(function(t){return window.get(t,{callback:null,async:!1})})),window.defunc("get",(function(t,e){var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText})),window.defunc("imgUrl",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t,e){return t.endsWith("/")||t.endsWith("\\")||(t+="/"),(e.startsWith("/")||e.startsWith("\\"))&&(e=e.substring(1)),"".concat(t).concat(e)})),window.defunc("byId",(function(t){return document.getElementById(t)})),window.defunc("byClass",(function(t){var e=[],n=document.getElementsByClassName(t);return n&&e.push.apply(e,n),e})),window.defunc("query",(function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e})),window.defunc(window,"calcTxtWidth",(function(t){if("string"==typeof t)return window.calcTxtWidth(t,"400","12px","微软雅黑");if(!t)return 0;var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)})),window.defunc(window,"calcTxtWidth",(function(t,e,n,o){var i=document.createElement("canvas").getContext("2d");i.font="".concat(e," ").concat(n," ").concat(o);var r=i.measureText(t).width;return Math.floor(r)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var o="";"string"==typeof e?o=t[e]:"function"==typeof e&&(o=e(t)),n[o]?n[o].push(t):n[o]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,o){if(null==t||null==t)return n;for(var i=t,r=0,s=e.split(".");r<s.length;r++)if(!(i=i[s[r]]))return o&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return i})),window.defunc("getConfigOrDefault",(function(t,e,n,o){return window.getConfigOrDefault(t,e,n,o,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,o,i){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var l=0,c=Object.keys(r);l<c.length;l++)a[d=c[l]]=r[d]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&i&&a.push.apply(a,s);else if("object"==typeof s&&i)for(var u=0,p=Object.keys(s);u<p.length;u++){var d;null==a[d=p[u]]&&(a[d]=s[d])}}return"NOT_FOUND"==a&&(a=o,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var o=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),i=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return o==i?e<n?-1:e>n?1:0:o-i}return e<n?-1:e>n?1:0}))},953:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,n,o,i){void 0===o&&(o=2e3),void 0===i&&(i="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=i;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)t(s[a],void 0)}var l=document.createElement("div");l.classList.add("dinglj-v-pop-msg",n),l.time=Date.now();var c=document.createElement("div");c.classList.add("dinglj-v-pop-msg-icon",n),c.innerText=n.substring(0,1).toUpperCase(),l.appendChild(c),l.innerHTML+=e,r.appendChild(l),l.animate({height:["0px",getComputedStyle(l).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),l.classList.add("active"),setTimeout((function(){t(l,r)}),o)}window.defunc("info",(function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"info",n,o)})),window.defunc("err",(function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"err",n,o)})),window.defunc("warn",(function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"warn",n,o)}))},449:()=>{Array.prototype.includesIgnoreCase=function(t){let e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((t=>"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t)).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){let e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((t=>"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t)).indexOf(e)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(){window.info(this,2e3,"10%")},String.prototype.warn=function(){window.warn(this,2e3,"10%")},String.prototype.err=function(){window.err(this,2e3,"10%")},Element.prototype.animate=function(t,e){console.log(t);const n=getComputedStyle(this).transition,o=Object.keys(t);for(let e of o)this.style[e]=t[e][0],console.log(t[e][0]);setTimeout((()=>{const i=e/1e3+"s";this.style.transition=i;for(let e of o)this.style[e]=t[e][1],console.log(t[e][1]);setTimeout((()=>{this.style.transition=n}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],n=this.children;for(let o=0;o<n.length;o++)n[o].classList.contains(t)&&e.push(n[o]);return e}}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}(()=>{"use strict";var t,e=function(){function t(){this.meta=new o}return t.prototype.$emit=function(t,e){},t.prototype.getImg=function(t){return window.imgUrl(t)},t.prototype.emit=function(t,e){this.$emit(t,{value:e,vid:this.vid})},t.prototype.build=function(){var t=this,e=new this.meta.clazz,n={data:function(){var n={vid:"",name:t.name};if(t.meta.hasField())for(var o=0,i=t.meta.fieldNames;o<i.length;o++){var r=i[o];n[r]=e[r]}return n}};if(this.meta.hasMounted()&&(n.mounted=e[this.meta.hockMounted]),this.meta.hasTemplate()&&(n.template=e[this.meta.template]),n.methods={getImg:this.getImg,emit:this.emit},this.meta.hasMethod())for(var o=0,i=this.meta.methodNames;o<i.length;o++){var r=i[o];n.methods[r]=e[r]}if(this.meta.hasCompute()){n.computed={};for(var s=0,a=this.meta.computeInfos;s<a.length;s++){var l=a[s];n.computed[l.key]=l.func}}if(this.meta.hasProp()&&(n.props=this.meta.props),this.meta.hasWatch()){n.watch={};for(var c=0,u=this.meta.watchInfos;c<u.length;c++){var p=u[c];n.watch[p.field]={handler:e[p.resolve],deep:p.deep}}}return this.meta.hasComponents()&&(n.components=this.meta.components),window.registVue(this.type,n),n},t}(),o=function(){function t(){this.fieldNames=[],this.methodNames=[],this.computeInfos=[],this.props={},this.components={},this.hockMounted="",this.template="",this.watchInfos=[]}return t.prototype.hasWatch=function(){return this.watchInfos.length>0},t.prototype.hasField=function(){return this.fieldNames.length>0},t.prototype.hasMethod=function(){return this.methodNames.length>0},t.prototype.hasCompute=function(){return this.computeInfos.length>0},t.prototype.hasProp=function(){return Object.keys(this.props).length>0},t.prototype.hasComponents=function(){return Object.keys(this.components).length>0},t.prototype.hasMounted=function(){return""!=this.hockMounted},t.prototype.hasTemplate=function(){return""!=this.template},t}(),i=function(){function t(){}return t.getComponent=function(n){var o=n;if(null!=t.lastComponentType&&t.lastComponentType==o||(n?t.lastComponentType=o:o=t.lastComponentType),t.map.has(o))return t.map.get(o);var i=new e;return i.type=o,t.map.set(o,i),i},t.map=new Map,t.lastComponentName="",t.lastComponentType=null,t}();!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress"}(t||(t={}));var r=function(){function t(t,e){if(t){t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error("未知的状态 {".concat(t.stats,"}, 结果 {").concat(t.result,"}, 请联系 dinglj 补充")):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error("未知的状态 {".concat(t.stats,"}, 请联系 dinglj 补充")):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error("未知的结果 {".concat(t.result,"}, 请联系 dinglj 补充")),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;var n=t.ticketId||t.log;this.ticket=n?parseInt(n):n,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}}return t.getCaption=function(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}},t}(),s=function(t,e){this.en=t,this.zh=e};function a(t,e){i.getComponent().meta.fieldNames.push(e)}function l(t,e,n){i.getComponent().meta.methodNames.push(e)}function c(t,e,n){return void 0===n&&(n=!1),function(o,r){i.getComponent().meta.props[r]={type:t,default:e,required:n}}}function u(t,e){i.getComponent().meta.template=e}function p(t,e){return function(n,o,r){var s=i.getComponent(e);s.meta.hockMounted=o,s.meta.clazz=t,s.name=e}}function d(t){return function(e,n){i.getComponent().meta.computeInfos.push({key:n,func:t})}}var f,h=(f=function(t,e){return f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},f(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}f(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),y=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},v=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$emit(\'on-click\')">\n        <slot></slot>\n    </div>',t}h(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:this.xType.equalsIgnoreCase("primary"),cancel:this.xType.equalsIgnoreCase("cancel"),warn:this.xType.equalsIgnoreCase("warn"),error:this.xType.equalsIgnoreCase("error")}},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.xSize.equalsIgnoreCase("small")?"1px":this.xSize.equalsIgnoreCase("normal")?"2px":"3px"}},y([p(n,t.ButtonX)],n.prototype,"mounted",null),y([u],n.prototype,"template",void 0),y([c(String,"normal")],n.prototype,"xSize",void 0),y([c(String,"primary")],n.prototype,"xType",void 0),y([l],n.prototype,"getClass",null),y([l],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),g=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},m=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="placeholder" v-model="value" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',t.value="",t}v(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},n.prototype.setValue=function(t,e){this.value=t,this.emit("on-change",t),"input"==e&&this.emit("on-input",t),"blur"==e&&this.emit("on-blur",t)},g([p(n,t.InputX)],n.prototype,"mounted",null),g([u],n.prototype,"template",void 0),g([a],n.prototype,"value",void 0),g([l],n.prototype,"getStyle",null),g([l],n.prototype,"setValue",null),g([c(String,"normal")],n.prototype,"xSize",void 0),g([c(String,"")],n.prototype,"caption",void 0),g([c(String,"")],n.prototype,"placeholder",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),w=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},C=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',t.active=!1,t}m(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},n.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},n.prototype.onclicked=function(){this.active=!this.active,this.emit("on-change",this.active),this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info()},w([p(n,t.SwitchX)],n.prototype,"mounted",null),w([u],n.prototype,"template",void 0),w([a],n.prototype,"active",void 0),w([l],n.prototype,"getStyle",null),w([l],n.prototype,"getClass",null),w([l],n.prototype,"onclicked",null),w([c(String,"normal")],n.prototype,"xSize",void 0),w([c(String,"")],n.prototype,"preText",void 0),w([c(String,"")],n.prototype,"postText",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),b=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},O=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="caption" :id="vid">\n        <input :placeholder="placeholder" type="text" :value="list.includesIgnoreCase(value) ? getValue(value) : \'\'"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in list" @click="setValue(item)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n    </div>',t.value=null,t}C(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},b([p(n,t.ComboX)],n.prototype,"mounted",null),b([u],n.prototype,"template",void 0),b([a],n.prototype,"value",void 0),b([l],n.prototype,"setValue",null),b([l],n.prototype,"getStyle",null),b([c(Array,[])],n.prototype,"list",void 0),b([c(String,"normal")],n.prototype,"xSize",void 0),b([c(String,"")],n.prototype,"caption",void 0),b([c(String,"")],n.prototype,"placeholder",void 0),b([c(Function,(function(t){return t}))],n.prototype,"getCaption",void 0),b([c(Function,(function(t){return t}))],n.prototype,"getValue",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),j=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},x=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',t.value=null,t}O(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},n.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},j([p(n,t.NavigatorX)],n.prototype,"mounted",null),j([u],n.prototype,"template",void 0),j([a],n.prototype,"value",void 0),j([l],n.prototype,"setValue",null),j([d((function(){return null!=this.value?!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.setValue(this.list[0]):this.list.length>0&&this.setValue(this.list[0]),this.value}))],n.prototype,"validItem",void 0),j([c(Array,[])],n.prototype,"list",void 0),j([c(Object,null)],n.prototype,"default",void 0),j([c(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),_=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},S=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',t}x(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},_([p(n,t.ScrollerY)],n.prototype,"mounted",null),_([u],n.prototype,"template",void 0),_([c(Number,0)],n.prototype,"size",void 0),_([c(Number,0)],n.prototype,"index",void 0),_([l],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),I=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},T=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :list="list" :get-caption="getCaption" @on-change="changed">\n        </i-navigator>\n        <div class="dinglj-v-navigator-right">\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :index="list.indexOf(active)" :size="list.length">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            <slot name="after"></slot>\n        </div>\n    </div>',t.active=null,t}S(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name)},n.prototype.changed=function(t){this.active=t.value,this.emit("on-change",t)},I([p(n,t.NavigatorView)],n.prototype,"mounted",null),I([u],n.prototype,"template",void 0),I([a],n.prototype,"active",void 0),I([l],n.prototype,"changed",null),I([c(Array,[],!0)],n.prototype,"list",void 0),I([c(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),P=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},N=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',t.value=null,t}T(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0)},n.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:this.value==t}},n.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},n.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.emit("on-change",t),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],o=window.byId(n.getId(e));o&&(t.style.width="".concat(o.offsetWidth,"px"),t.style.left="".concat(o.offsetLeft,"px"))}),50))},P([p(n,t.TabPanelX)],n.prototype,"mounted",null),P([u],n.prototype,"template",void 0),P([a],n.prototype,"value",void 0),P([l],n.prototype,"getClass",null),P([l],n.prototype,"getId",null),P([l],n.prototype,"clicked",null),P([d((function(){return!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.clicked(this.list[0],0),this.list.indexOf(this.value)}))],n.prototype,"index",void 0),P([c(Array,[],!0)],n.prototype,"list",void 0),P([c(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),k=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},R=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',t}N(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},k([p(n,t.ScrollerX)],n.prototype,"mounted",null),k([u],n.prototype,"template",void 0),k([c(Number,0)],n.prototype,"size",void 0),k([c(Number,0)],n.prototype,"index",void 0),k([l],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),D=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},A=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :list="list" :get-caption="getCaption" @on-change="changed" @mounted="tabPanelLoaded">\n            <i-scroller-x :index="index" :size="list.length">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',t.value=null,t.tabPanelId="",t}R(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},n.prototype.changed=function(t){this.value!=t.value&&(this.value=t.value,this.emit("on-change",t))},D([p(n,t.TabView)],n.prototype,"mounted",null),D([u],n.prototype,"template",void 0),D([a],n.prototype,"value",void 0),D([a],n.prototype,"tabPanelId",void 0),D([l],n.prototype,"tabPanelLoaded",null),D([l],n.prototype,"changed",null),D([d((function(){return this.list.indexOfIgnoreCase(this.value)}))],n.prototype,"index",void 0),D([c(Array,[],!0)],n.prototype,"list",void 0),D([c(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),L=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},V=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-table" :id="vid">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div class="dinglj-v-cell" :getStyle(\'\') v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div class="dinglj-v-cell" :getStyle(\'\') v-if="sequanceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div class="dinglj-v-cell" :getStyle(getColumnKey(column)) v-for="column in columns" :class="getClass(column)">\n                {{ getColumnCaption(column) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tbody">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in data" @click="checkOne(line)">\n                    <div class="dinglj-v-cell" :getStyle(\'\') v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div class="dinglj-v-cell" :getStyle(\'\') v-if="sequanceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div class="dinglj-v-cell" :getStyle(getColumnKey(column)) :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',t.cache={},t.checkAll=!1,t.checkedList=[],t}A(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"flex":"fixed",o={};return o[e]=!0,o[n]=!0,this.cache[e]=o,o},n.prototype.getStyle=function(t){return""==t||this.bestWidth[t],{}},n.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.data),this.checkAll=!this.checkAll},L([p(n,t.TableX)],n.prototype,"mounted",null),L([u],n.prototype,"template",void 0),L([a],n.prototype,"cache",void 0),L([a],n.prototype,"checkAll",void 0),L([a],n.prototype,"checkedList",void 0),L([l],n.prototype,"getClass",null),L([l],n.prototype,"getStyle",null),L([l],n.prototype,"doCheckAll",null),L([d((function(){for(var t=this,e={},n=function(n){var i=o.getColumnKey(n),r=o.getColumnCaption(n),s=[window.calcTxtWidth(r)];s.push.apply(s,o.data.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var a=Math.max.apply(Math,s);e[i]=a+30},o=this,i=0,r=this.columns;i<r.length;i++)n(r[i]);return e}))],n.prototype,"bestWidth",void 0),L([c(Array,[])],n.prototype,"flexColumns",void 0),L([c(Array,[])],n.prototype,"data",void 0),L([c(Boolean,!0)],n.prototype,"sequanceNum",void 0),L([c(Boolean,!0)],n.prototype,"selectable",void 0),L([c(Array,[])],n.prototype,"columns",void 0),L([c(Function,(function(t){return t}))],n.prototype,"getColumnKey",void 0),L([c(Function,(function(t){return t}))],n.prototype,"getColumnCaption",void 0),L([c(Function,(function(t,e){return t[e]}))],n.prototype,"getCell",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),z=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},E=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'rt' }\" v-if=\"['lt', 'rt'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'rb' }\" v-if=\"['lb', 'rb'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",t}V(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},n.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},z([p(n,t.ProgressX)],n.prototype,"mounted",null),z([u],n.prototype,"template",void 0),z([l],n.prototype,"getContainerStyle",null),z([l],n.prototype,"getProgressStyle",null),z([c(String,"5px")],n.prototype,"height",void 0),z([c(String,"100%")],n.prototype,"percent",void 0),z([c(String,"lt")],n.prototype,"position",void 0),z([c(String,"")],n.prototype,"caption",void 0)}(e),i.getComponent(t.ButtonX).build(),i.getComponent(t.InputX).build(),i.getComponent(t.SwitchX).build(),i.getComponent(t.ComboX).build(),i.getComponent(t.NavigatorX).build(),i.getComponent(t.ScrollerY).build(),i.getComponent(t.NavigatorView).build(),i.getComponent(t.TabPanelX).build(),i.getComponent(t.ScrollerX).build(),i.getComponent(t.TabView).build(),i.getComponent(t.TableX).build(),i.getComponent(t.ProgressX).build(),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),q=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},X=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input caption="搜索" placeholder="请输入关键字"\n                @on-input="data => filter.keyword = data.value">\n            </i-input>\n            <i-combo caption="状态" placeholder="请选择状态"\n                style="margin-left: 10px"\n                :list="Object.values(status)"\n                :get-value="i => i.en" \n                :get-caption="i => i.zh"\n                @on-change="s => filter.status = s">\n            </i-combo>\n            <i-combo caption="版本" placeholder="默认为当前版本"\n                style="margin-left: 10px; --width: 400px"\n                :list="versionNames"\n                @on-change="v => filter.versions = v">\n            </i-combo>\n            <div style="flex: 1"></div>\n            <i-switch pre-text="卡片视图" post-text="表格视图" @on-change="data => filter.mode = (data.value ? \'table\' : \'card\')">\n            </i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input caption="每列的卡片数" placeholder="请输入每列的卡片数量"\n                default-value="7"\n                @on-input="data => filter.cardCnt = ((isNaN(data.value) || data.value < 5) ? 5 : parseInt(data.value))">\n            </i-input>\n        </div>\n    </div>',e.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:7},e.versionList=[],e}var n;E(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.onFilterChange=function(t,e){this.emit("on-change",t)},q([p(e,"CL-Filter")],e.prototype,"mounted",null),q([u],e.prototype,"template",void 0),q([a],e.prototype,"filter",void 0),q([a],e.prototype,"versionList",void 0),q([("filter",void 0===n&&(n=!0),function(t,e){i.getComponent().meta.watchInfos.push({field:"filter",deep:n,resolve:e})})],e.prototype,"onFilterChange",null),q([d((function(){return window.readConfig()}))],e.prototype,"config",void 0),q([d((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),q([d((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),q([d((function(){if(window.isDev())return window.readVersion();if(0==this.versionList.length){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"urls.versions","",!1);this.versionList=JSON.parse(window.get(t))}return this.versionList}))],e.prototype,"versions",void 0),q([d((function(){return this.versions.map((function(t){return t.erpVersion}))}))],e.prototype,"versionNames",void 0)}(e),i.getComponent("CL-Filter").build()),F=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),B=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},M=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="statusName in statusNames">\n            <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                <div class="card-line card-title">\n                    <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                    <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                    <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                </div>\n                <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="lineCaption(_case_)" :percent="linePercent(_case_)"></i-progress>\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="stepCaption(_case_)" :percent="stepPercent(_case_)"></i-progress>\n                </div>\n                <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                    <div>耗时: {{ _case_.timeCost }}</div>\n                </div>\n            </div>\n        </div>\n    </div>',e}F(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.openCardTicket=function(t){window.open("".concat(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.ticket","",!1),"/").concat(t.ticket),"#".concat(t.ticket))},e.prototype.lineCaption=function(t){return"行进度: ".concat(t.currentRow,"/").concat(t.totalRow,", ")},e.prototype.linePercent=function(t){return"".concat(t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0,"%")},e.prototype.stepCaption=function(t){return"步数进度: ".concat(t.currentStep,"/").concat(t.totalStep,", ")},e.prototype.stepPercent=function(t){return"".concat(t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0,"%")},B([p(e,"CL-Card")],e.prototype,"mounted",null),B([u],e.prototype,"template",void 0),B([l],e.prototype,"openCardTicket",null),B([l],e.prototype,"lineCaption",null),B([l],e.prototype,"linePercent",null),B([l],e.prototype,"stepCaption",null),B([l],e.prototype,"stepPercent",null),B([d((function(){return window.readConfig()}))],e.prototype,"config",void 0),B([d((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),B([c(Object,{})],e.prototype,"groupData",void 0),B([c(Array,[])],e.prototype,"statusNames",void 0),B([c(Number,5)],e.prototype,"cardCnt",void 0)}(e),i.getComponent("CL-Card").build());n(449),n(814),n(953),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css");var W=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),U=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n    <i-nav-view :list="componentNames">\n        <template v-slot:before>\n            <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n        </template>\n        <template v-slot:content id="case-list-view">\n            <i-tab-view v-for="componentName in componentNames"\n                :list="tabTitle(componentName)"\n                :get-caption="item => item.zh">\n                <xcard  v-if="filter.data.mode == \'card\'"\n                    :status-names="statusNames(componentName)" \n                    :group-data="groupByStatus(componentName)"\n                    :card-cnt="filter.data.cardCnt">\n                </xcard>\n            </i-tab-view>\n        </template>\n        <template v-slot:after></template>\n    </i-nav-view>\n</div>',window.defunc("uuid",(function(){})),function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allVersionDatas={},e.filter={data:{mode:"card",cardCnt:7}},e}var n;W(e,t),e.prototype.mounted=function(){window.displayData=function(){console.log(this)}},e.prototype.groupByStatus=function(t){return window.groupBy(this.groupByComponent[t],(function(t){return t.status.en}))},e.prototype.statusNames=function(t){var e=this.groupByStatus(t),n=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferStatus",[],!1).map((function(t){return t.toLowerCase()}));return Object.keys(e).sort((function(t,e){return window.compareStringByArray(n,t.toLowerCase(),e.toLowerCase())}))},e.prototype.tabTitle=function(t){var e=this;return this.statusNames(t).map((function(t){return new s(t,e.status[t].zh)}))},U([(n={xfilter:X,xcard:M},function(t,e){i.getComponent().meta.components=n}),p(e,"App")],e.prototype,"mounted",null),U([a],e.prototype,"allVersionDatas",void 0),U([a],e.prototype,"filter",void 0),U([l],e.prototype,"groupByStatus",null),U([l],e.prototype,"statusNames",null),U([l],e.prototype,"tabTitle",null),U([d((function(){return window.readConfig()}))],e.prototype,"config",void 0),U([d((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),U([d((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),U([d((function(){var t,e=this,n=this.filter.data.versions||"default";if(window.isDev())return window.readData(n);if(this.allVersionDatas[n])return this.allVersionDatas[n];if("default"==n){var o=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.defaultVersionData","",!1));t=JSON.parse(o).testCaseTasks}else o=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.readVersion","",!1)+n),t=JSON.parse(o);return this.allVersionDatas[n]=t.map((function(t){return new r(t,e.status)})),this.allVersionDatas[n]}))],e.prototype,"originData",void 0),U([d((function(){var t=this,e=this.originData;return this.filter.data.keyword&&(e=e.filter((function(e){return e.caseName.includesIgnoreCase(t.filter.data.keyword)}))),this.filter.data.status&&(e=e.filter((function(e){return JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)}))),0==e.length&&"未找到任何有效数据".err(),e}))],e.prototype,"filteredData",void 0),U([d((function(){var t=window.groupBy(this.filteredData,"component"),e=this.filteredData.filter((function(t){return 0==t.level}));return e.length>0&&(t.UNIT=e),t}))],e.prototype,"groupByComponent",void 0),U([d((function(){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferComponent",[],!1).map((function(t){return t.toLowerCase()}));return t.unshift("unit"),Object.keys(this.groupByComponent).sort((function(e,n){return window.compareStringByArray(t,e.toLowerCase(),n.toLowerCase())}))}))],e.prototype,"componentNames",void 0)}(e),window.createVue(i.getComponent("App").build(),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,