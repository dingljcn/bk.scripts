/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={384:()=>{Array.prototype.includesIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).indexOf(e)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){var e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)}},144:()=>{window.defunc("linkCss",(function(t){window.linkCss(window.dinglj_home,t)})),window.defunc("linkCss",(function(t,e){var n=document.createElement("style"),i=window.mergePath(t,e);n.innerHTML=window.get(i),document.head.appendChild(n)}))},374:()=>{window.defunc("byId",(function(t){return document.getElementById(t)})),window.defunc("byClass",(function(t){var e=[],n=document.getElementsByClassName(t);return n&&e.push.apply(e,n),e})),window.defunc("query",(function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e})),window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,i){var o=document.createElement("canvas").getContext("2d");o.font="".concat(e," ").concat(n," ").concat(i);var r=o.measureText(t).width;return Math.floor(r)})),Element.prototype.animate=function(t,e){for(var n=this,i=getComputedStyle(this).transition,o=Object.keys(t),r=0,s=o;r<s.length;r++){var a=s[r];this.style[a]=t[a][0]}setTimeout((function(){var r=e/1e3+"s";n.style.transition=r;for(var s=0,a=o;s<a.length;s++){var u=a[s];n.style[u]=t[u][1]}setTimeout((function(){n.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){for(var e=[],n=this.children,i=0;i<n.length;i++)n[i].classList.contains(t)&&e.push(n[i]);return e},window.defunc("indexOfChildByClass",(function(t,e){for(var n=t.children,i=0;i<n.length;i++)if(n[i].classList.contains(e))return i;return-1}))},343:()=>{window.defunc("get",(function(t){return window.get(t,{callback:null,async:!1})})),window.defunc("get",(function(t,e){var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText}))},963:()=>{window.defunc("imgUrl",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t,e){return t.endsWith("/")||t.endsWith("\\")||(t+="/"),(e.startsWith("/")||e.startsWith("\\"))&&(e=e.substring(1)),"".concat(t).concat(e)}))},726:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var i="";"string"==typeof e?i=t[e]:"function"==typeof e&&(i=e(t)),n[i]?n[i].push(t):n[i]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,i){if(null==t||null==t)return n;for(var o=t,r=0,s=e.split(".");r<s.length;r++)if(!(o=o[s[r]]))return i&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return o})),window.defunc("getConfigOrDefault",(function(t,e,n,i){return window.getConfigOrDefault(t,e,n,i,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,i,o){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,c=Object.keys(r);u<c.length;u++)a[p=c[u]]=r[p]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&o&&a.push.apply(a,s);else if("object"==typeof s&&o)for(var l=0,h=Object.keys(s);l<h.length;l++){var p;null==a[p=h[l]]&&(a[p]=s[p])}}return"NOT_FOUND"==a&&(a=i,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var i=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),o=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return i==o?e<n?-1:e>n?1:0:i-o}return e<n?-1:e>n?1:0})),window.defunc("pushToArrayInObject",(function(t,e,n){return Array.isArray(t[e])?t[e].push(n):t[e]=[n],t})),Window.prototype.defaultConfig=function(){return window.$rsa.decryptObject(window.encodeConfig())},Window.prototype.timer=function(t,e){void 0===e&&(e=30),e=e<30?30:e;var n=setInterval((function(){t()&&clearInterval(n)}),e)},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))}},168:()=>{window.encodeConfig=function(){return{constant:{status:{TICKET:{en:"$DINGLJ-ENCODE-START$SWDK2DwUBWdGpBsfTImU7d6dUdvqvSuSHaUMWEibE6a6L57aNcwJ0/HrVjZo7a7FtpWJ5hk2txSWHqmNgG4WyTOb6eqkCD6moMCK7noWaC+1t2U4KCN8NDkiTmnRwffI1k/BuuId5Ddt14a2dOmdVHE5qwgD8dCnFv/tLnuasis=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$E1ynOZ+PTSB7D3kLj4HN1UKJJ/qnuvA0I8plOdCwe0ZmiFvWn7alFWkhg6FdHwXG+ITsERy4WTK9hulaTgkJbh+1OPogxaYd6hy0xkC9xnHgVn8IW35RVdGGycWP1uwFXyxYBaq+B8SBo/jb5e9/ExbMG1Uu8Y0M+vhnpSp6dCw=$DINGLJ-ENCODE-END$"},FAILED:{en:"$DINGLJ-ENCODE-START$YcwmSNa8HfdRfruXODMHwizzdk1bWIuH0HVxaVPe53GpT2xHviNL4dpLPZQshgxweW/wu2ZgXiJnr6F56fYQXqXWjo7xEPSEtS1vlAu5qCasc+POYN88jgJHBzm/Nwqz6aZmc6u0WmoWTCCKBa/VlrWUheAeZtuQJ05Col+6pTQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$V1STI8tZH5nhD467NJfWIcNQvSJglAIShVFbzLbj4pUCUfbgaakryeCY2Z/ObaYNwGmHqo5Ix4WY5jNZg1B3XNT0BZ7hpo68If9THmOaJivr/OSXZ9uu+s3ULb2xfrBYjcbkNQlpOqiCZyMdOq3UdMg94OVrqn1xnspMsifNdg8=$DINGLJ-ENCODE-END$"},SUCCESS:{en:"$DINGLJ-ENCODE-START$ng3O9IRoz6bWxNMHFtqHaQvM1dyjilWlcWCvjy86zdDgsPElt0cjLBRsJrq5wk9do1JbcXkgEtjcmb+wvNoqvOkHRiVowLRl+DqQ8DK/QAS32xUrN7KXq0TEB/xuv1gu3dZ9Sc6TLxcXr9MmMhRTkTVfTUzYWIIv8El6l0N2gFQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$QYqF/OI04akgr9lA1AyPNqFEdetLDNTS+KDVcDlPd4CWDJfJykPVWOtHz/D0n4L27z4vDisKJMTaww39JHkPPhy+ZudKngOXt0pZrMvr3+Dy3HzaOttaJJcWayP5vqT+6DLDj79zhbMRRg9PSD8Q8PrA628Xnj0PsL0We8urNXA=$DINGLJ-ENCODE-END$"},RUNNING:{en:"$DINGLJ-ENCODE-START$eemimj7E7vgbKL2UE3Jsqd6I8cyGHlX676eCRyHbTF1hS4If4zOq23RW6/jLBnxqVJADqhF7/ec3gqYcR1Pos/om/KGou53qEpGHDHdBt0j4uYcBMqFXw3GaHjhHVYyxV6EKt/xs9ZTKihNpjTy20wd/tFWx+wVuqp68Qk4G0FI=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$W+OnWfVHX5FRjd7Bzqhnn2kaJ/rhK/XOH+0j6RMX9Li1mf8BMpIL+zMUDxeBxh+CNxLI0tWNpNDQ2h6NIpx+VcEWEVOCErm1iNcKODaLBm4khHLh1U1Iq1HJvh9vY3j00JHrPAyEGfQ87Ln2vuAJLmEdG59ec4/7LKQZ49Fm+9M=$DINGLJ-ENCODE-END$"},SENDED:{en:"$DINGLJ-ENCODE-START$bR7qOSAjw+Kh2iJElIgaj2lV4Ev/j1TldkEIbyYwLumCRLa7lD9jWNIdPSsje1mKnNk7KYfRVLOqG+kCcT8gN0gqt1hrwCuaK8sshjBhbR2NXcYAfbguTyBfa5EB5VXLXO/i52TK6sylrULvWetZcKfRSRVZMByYKqv9typCxtA=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$c9XRDY+IXP0+TR9MyfinkN8ryv4hW4cRjMDRJhGwtgcQqn3SGMX1rGi5YfvjN/L5Br5CDfKvSbOI6MUXHFoBfL8pZDCFLuWJKSO3QdJuMRGko9nQOAqfroYQYBR8PX4p0vFmm3MrWgg59QNPK9XM+/37GcAbJ6NyuSYc1N2hTCw=$DINGLJ-ENCODE-END$"},NOTSEND:{en:"$DINGLJ-ENCODE-START$eGAdYFHx0T521gfy92DhZYQofc2zDDAlMXu8aw5/AsGZAp8PTQky8i4wv0MqTJ1cKTtXbJyhEGqMnXsPb16Qw7r6x+QME+NYdmHK4DWug7pqlYQ+SBVogMxeBUx2xeifXzI487abj+8oTJvyWsMQNuf0GCwAlB0TjPrC0oGqbAk=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$mbJ/AV1OnBNUvsFBoXkIjv2o4n414lFn3y4a0cUasyVhfuIAhlDirPzvcBbNgTsh+/5extVaijgIa/QandFULalefX2+fw67wIwWlDkAFZxv0F6ICmdFYR6OnlKM6aDNzwPH4w6MjxQDDtRp20cJkKu6V+C1WJ/pwtQoeq86O70=$DINGLJ-ENCODE-END$"},WAITTING:{en:"$DINGLJ-ENCODE-START$GH7B9Lm3faslgKGEmvksIkXyLlTx3WjlsZvLATzRe+DA8KefzG4nes4MMBjIqC2UZRQLMEkFRtYjworZTYsnqyuJoxk7+XkQyaSumxJne1L9X5X/occznR1bZ8pV32771CG/q5FmtoNbkXKe/0f+jUwylU4lCfxQtIWPm5C4Sno=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$FsF6SW79MtDRCQLcAFemaXJwN/nFa5525JCvwgQ0T6P1pSiwf+MBXYz/83wGYw9xn/0b2u1XnuI3EDFtQuk18adp/N1X8urgFaHdqG9/ykE3AS/6K7KmUcJgt7jQxYt0+5omrFuXdJCfTK1g8kJgRlhoJVk5JJNTb7B43Ig6fr8=$DINGLJ-ENCODE-END$"}}},datasource:{mysql:{DB_SERVER:"$DINGLJ-ENCODE-START$ScT2wurV227zvmKUepqjsIblZI+NIR+Q7UwsWDKuFdcyZj4DuSIjnj0QT4Bozm6m705P2YNKQcAkIc5UAU+NBZfBeN7RYOBLoLwz3MnoSSsQr1NRPJWpxmgis2Ud+giDLA0zizi/Bolo0c8ex0fSRZDyOCHqfGoqjzbs0WKxbF8=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$GJVy1zgR7N7Pkp/tmoIXcd8AxUfT+pg8dLIa4efltMmI6uI26JwMDCqnqiTtpdsaOCZ7L5WgkNy3tWRNcZDJ0EFJdFXV84SBCMAWNFcmbALSlrHvvJrU10BBS66ifcfH398/fdQV6gz99PwS7gRdbntxjRMPPrGvbPVdn0xhuMw=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$N5J5aQlKJzwO18nY+iPac7lrKRABo1fOgN5kXKEfcKq7Fe0v9bHAc5eLRoqvTgboojTrt5IqLktnxRvZnqFTU0BRokPQYGBQPlbzYDLyNWsRMdtGjbVsml0pfglkyUYj+qelor+Ilz+62OIjtC07JkEs+J83fv9O7uehCDKhzUs=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$dJbs2D207kWcNHVeBkgKHSx+U2wZNltSgDnQ0RUHa3MCr4Z5CQVfSYGE7YmRvBCyrVivItQxCmt5DB5L+7MTyjRXx9ES8Gq2oLBAuN6jiFBLj8WshkS29eMvLv0/csCid7GU0FEU+HZ+Sa7dWR3GlQnRfTHUWLJ1dIKY6dx1was=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$aGCp0kJbug0Efi3VyKJQACPTn+bg6DEs+6ZeTyLlQf3VzMczIY6O7ddyEiZER/sECssGbrseO6pWocMx2YinkP+I752wYaWU8AiG5aqV8izr7aaCXTOcO6nokPvvLmMVJ+MPoiWme6SwoCfLx6GkNKuc3Z3K1AwlxElSAJgY5Dk=$DINGLJ-ENCODE-END$"},mssql:{DB_SERVER:"$DINGLJ-ENCODE-START$jrtb66A5zaPkIHvcmfZJSsR+ZuK0b6mXUWJbSrSx6ac6JEICn2aIUX+M06rMRZOSJd3DykBFZK2bcfx/XHX+/Nm9S0cKu0Cv6AwxMsDi9nl8PThDtMa+iCSpu9teDdJuCwZpV/5h36+8MWiwnxbmgLK/t9hmcluQv5rdJL3hYc4=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$kyd0tZL+6DO9qHAyZ2LvNjCulRmLU9FPQCWTcz2dnyYjAx5nuaSV68+2eNFhGMbX9eNT/CwfwpN0b1I3EkmRhigCZD/3j3PwNljTAfqMTi6Q1xdMfcpxFo7p2aGcts5ukAQDFnjDkQwRbtSQnHOg6SEygUyggR16TNUQeEa1qFY=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$bp/4SXCp3IjRl96kdK9QcnQFJE0jvkcehW9I5s44p94MAplwDof3jkf/+ufeJ/VqL5N6PBAJH3z8g+yGOYb5Pbe8z6omIQ36Mw2YT7MV/gXXX0yfhyer6RMPORf2NWHuIRdDMGFmRZp4iGWMQu0wUJIzVXFj2yuYHE+q596bAFY=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$c3lTAvKUGHIsxRmGYbg5F2qCJDX2gI7QHXeo2kNaZVLftGVHK4XXa0e5wKbZEHDagT5reo+K/vvw12RwUPMteRV/aRVv0uY4rSPOWCyGet00i61tdp8+U6wQvb2K5dD7CuEVGWZDcfE88qQdQ0yssHVj7qHvZraehVFKcXxixP0=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$SDDc6wwLQYPoQ+MD7nTWitznj6lAS1zH64tTVwHakcU7tQtoaLmK9VOVdbxFl1UPviFCQdaFUb+XYyCqYTidB3RNNHJKVHWHIDmKFEVeS+/SdI+W31BZbYrciyNPO+3owakIcAdpB8b3TKbLJ2I0CVkUpprRnzGqvBwJffTKjb8=$DINGLJ-ENCODE-END$"},oracle:{DB_SERVER:"$DINGLJ-ENCODE-START$kP1L/rAqC6lOCmNySmSisUncRmraij9KBlT4sX9n/TCibryrSTa/rvYb9E5x5aVmhsOFqdOHtE/V7MKcVjisKlXi18rqGPy6eSKZdx37/JMHk36k4LNBPOOgKvhSwfgnXgJyQiFFyvzcgdG/vCRqFQmXA+M5hqEGa+ha3nMU7s0=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$f0jLmd24CiiWY/ZGP9gdog/UOuhC/jR9n/VpTSenuUY71SN+RV69SYIljXDdyD5blNu75KLqQk+g0QyxDtJcoklBeq5HAu06+F1fA5Xwe/TQpZxrsRJZAYjzCEao6qGmzMee0ZVmwIUI04cuAKZnHvLVARNYTGfzmfEAjUAVxl8=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$PkR3Ade8oCYCRgnRc06dkh8fv8TdovhG+Hn5FkoIgtmLm7ROqYXU8xXA+vN9jCwOThtGbGdVS84t/oqXylQMbUQ9+YmpklztmDOJS9/USPLXCEi8iZyA8m/0mSndZr5OLaoEBawxnO6cQcH39ok8dFIqDe3JHfAei8ttDJnGRWo=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$WWRHyyBZ2EOWZqL5R8XkuIPTzDc2F/vgAjMfvNlmdORjtiO4a2NwaA6rPb8K0bRQ7h1PWm+Vd+OkN/HtQw8wSWuOgZGiBMV7fb/6DZqMfzlEVytxiKhcXtcaaeXI7BVJ/b8eTeBABbroz6lJdIN/Xl7PtvEE+pTIHz15MrSnvu4=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$F522ygn1YT/VZxYt/sadPpXB50+osFZuMOEdgKsop6bJdh2hfxWBj8IlyR1gvCUkyPMr61hT7etBVwjMLO6xL0pwT2v61dB6zMT6tBS8N2UoI81lXSG7p5HADv32ZBtxk6qTSUMvHjvPF5jBApt7q9D8a9KyvuC7trI2cmltdKQ=$DINGLJ-ENCODE-END$"}},author:"dingljcn"}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{"use strict";n(726),n(384),n(144),n(374),n(343),n(963);var t=function(){function t(){this.meta=new s}return t.prototype.$emit=function(t,e){},t.prototype.getImg=function(t){return window.imgUrl(t)},t.prototype.emit=function(t,e){this.$emit(t,{value:e,vid:this.vid})},t.prototype.build=function(){var t=this,e=new this.meta.clazz,n={data:function(){var n={vid:"",name:t.name};if(t.meta.hasField())for(var i=0,o=t.meta.fieldNames;i<o.length;i++){var r=o[i];n[r]=e[r]}return n}};if(this.meta.hasMounted()&&(n.mounted=e[this.meta.hockMounted]),this.meta.hasTemplate()&&(n.template=e[this.meta.template]),n.methods={getImg:this.getImg,emit:this.emit},this.meta.hasMethod())for(var i=0,o=this.meta.methodNames;i<o.length;i++){var r=o[i];n.methods[r]=e[r]}if(this.meta.hasCompute()){n.computed={};for(var s=0,a=this.meta.computeInfos;s<a.length;s++){var u=a[s];n.computed[u.key]=u.func}}if(this.meta.hasProp()&&(n.props=this.meta.props),this.meta.hasWatch()){n.watch={};for(var c=0,l=this.meta.watchInfos;c<l.length;c++){var h=l[c];n.watch[h.field]={handler:e[h.resolve],deep:h.deep}}}return this.meta.hasComponents()&&(n.components=this.meta.components),window.registVue(this.type,n),n},t}();window.AbstractComponent=t;const e=t;var i=function(t,e){this.en=t,this.zh=e};window.LangItem=i;const o=i;var r=function(){function t(){this.fieldNames=[],this.methodNames=[],this.computeInfos=[],this.props={},this.components={},this.hockMounted="",this.template="",this.watchInfos=[]}return t.prototype.hasWatch=function(){return this.watchInfos.length>0},t.prototype.hasField=function(){return this.fieldNames.length>0},t.prototype.hasMethod=function(){return this.methodNames.length>0},t.prototype.hasCompute=function(){return this.computeInfos.length>0},t.prototype.hasProp=function(){return Object.keys(this.props).length>0},t.prototype.hasComponents=function(){return Object.keys(this.components).length>0},t.prototype.hasMounted=function(){return""!=this.hockMounted},t.prototype.hasTemplate=function(){return""!=this.template},t}();window.MetaInfo=r;const s=r;var a=function(){function t(){}return t.getComponent=function(n){var i=n;if(null!=t.lastComponentType&&t.lastComponentType==i||(n?t.lastComponentType=i:i=t.lastComponentType),t.map.has(i))return t.map.get(i);var o=new e;return o.type=i,t.map.set(i,o),o},t.map=new Map,t.lastComponentName="",t.lastComponentType=null,t}();window.Registry=a;const u=a;var c;window.RightMenu=function(t,e,n){void 0===n&&(n=function(){return!0}),this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=n},function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress"}(c||(c={})),window.ComponentType=c;const l=c;var h;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(h||(h={})),window.RsaConst=h;const p=h;String.prototype.encrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub);for(var e="'".concat(p.flag_start),n=this;;){if(n.length<100){e+=window.$rsa.encrypt(n,t);break}var i=n.substring(0,100);n=n.substring(100),e="".concat(e).concat(window.$rsa.encrypt(i,t)).concat(p.flag_split)}return"".concat(e).concat(p.flag_end,"'")},String.prototype.decrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri);var e=this.startsWith(p.flag_start);if(e!=this.endsWith(p.flag_end))return"加密配置错误: ".concat(this).err(),this;if(e){for(var n="",i=0,o=this.replace(p.flag_start,"").replace(p.flag_end,"").split(p.flag_split);i<o.length;i++){var r=o[i];n+=window.$rsa.decrypt(r,t)}return n}return this},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(){window.$tip.info(this,2e3,"10%")},String.prototype.warn=function(){window.$tip.warn(this,2e3,"10%")},String.prototype.err=function(){window.$tip.err(this,2e3,"10%")};var f={eventPool:{},eventQueue:{},sendMsg:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n));var o=window.$queue.eventPool[i];if(Array.isArray(o)){if(1==o.length)return o[0](e);for(var r=[],s=0,a=o;s<a.length;s++){var u=a[s];r.push(u(e))}}else window.pushToArrayInObject(window.$queue.eventQueue,i,e)},on:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n)),window.pushToArrayInObject(window.$queue.eventPool,i,e);var o=window.$queue.eventQueue[i];if(Array.isArray(i))for(var r=0,s=o;r<s.length;r++)e(s[r])}};window.$queue=f;var d={distoryPopMsg:function(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))},createPopMsg:function(t,e,n,i){var o=this;void 0===n&&(n=2e3),void 0===i&&(i="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=i;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)this.distoryPopMsg(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",e),u.time=Date.now();var c=document.createElement("div");c.classList.add("dinglj-v-pop-msg-icon",e),c.innerText=e.substring(0,1).toUpperCase(),u.appendChild(c),u.innerHTML+=t,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){o.distoryPopMsg(u,r)}),n)},info:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"info",e,n)},warn:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"warn",e,n)},err:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"err",e,n)}};window.$tip=d;var g="0123456789abcdefghijklmnopqrstuvwxyz";function v(t){return g.charAt(t)}function y(t,e){return t&e}function m(t,e){return t|e}function w(t,e){return t^e}function b(t,e){return t&~e}function S(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function T(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var D,E="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function C(t){var e,n,i="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),i+=E.charAt(n>>6)+E.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),i+=E.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),i+=E.charAt(n>>2)+E.charAt((3&n)<<4));(3&i.length)>0;)i+="=";return i}function O(t){var e,n="",i=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=E.indexOf(t.charAt(e));r<0||(0==i?(n+=v(r>>2),o=3&r,i=1):1==i?(n+=v(o<<2|r>>4),o=15&r,i=2):2==i?(n+=v(o),n+=v(r>>2),o=3&r,i=3):(n+=v(o<<2|r>>4),n+=v(15&r),i=0))}return 1==i&&(n+=v(o<<2)),n}var N,x={decode:function(t){var e;if(void 0===N){for(N=Object.create(null),e=0;e<64;++e)N["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(N["-"]=62,N._=63,e=0;e<9;++e)N["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],i=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=N[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);i|=r,++o>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,o=0):i<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=x.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return x.decode(t)}},I=1e13,R=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,i,o=this.buf,r=o.length;for(n=0;n<r;++n)(i=o[n]*t+e)<I?e=0:i-=(e=0|i/I)*I,o[n]=i;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,i=this.buf,o=i.length;for(e=0;e<o;++e)(n=i[e]-t)<0?(n+=I,t=1):t=0,i[e]=n;for(;0===i[i.length-1];)i.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),i=e.length-2;i>=0;--i)n+=(I+e[i]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*I+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),j=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,A=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function P(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var B,L=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var i="",o=t;o<e;++o)if(i+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:i+="  ";break;case 15:i+="\n";break;default:i+=" "}return i},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var i=this.get(n);if(i<32||i>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",i=t;i<e;++i)n+=String.fromCharCode(this.get(i));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",i=t;i<e;){var o=this.get(i++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(i++)):String.fromCharCode((15&o)<<12|(63&this.get(i++))<<6|63&this.get(i++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,i,o="",r=t;r<e;)n=this.get(r++),i=this.get(r++),o+=String.fromCharCode(n<<8|i);return o},t.prototype.parseTime=function(t,e,n){var i=this.parseStringISO(t,e),o=(n?j:A).exec(i);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),i=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(i+=":"+o[5],o[6]&&(i+=":"+o[6],o[7]&&(i+="."+o[7]))),o[8]&&(i+=" UTC","Z"!=o[8]&&(i+=o[8],o[9]&&(i+=":"+o[9]))),i):"Unrecognized time: "+i},t.prototype.parseInteger=function(t,e){for(var n,i=this.get(t),o=i>127,r=o?255:0,s="";i==r&&++t<e;)i=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(s=i,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}o&&(i-=256);for(var a=new R(i),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var i=this.get(t),o="("+((e-t-1<<3)-i)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?i:0,c=7;c>=u;--c)r+=a>>c&1?"1":"0";if(r.length>n)return o+P(r,n)}return o+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return P(this.parseStringISO(t,e),n);var i=e-t,o="("+i+" byte)\n";i>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return i>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var i="",o=new R,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===i)if((o=o.simplify())instanceof R)o.sub(80),i="2."+o.toString();else{var u=o<80?o<40?0:1:2;i=u+"."+(o-40*u)}else i+="."+o.toString();if(i.length>n)return P(i,n);o=new R,r=0}}return r>0&&(i+=".incomplete"),i},t}(),V=function(){function t(t,e,n,i,o){if(!(i instanceof _))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=i,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return P(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return P(this.stream.parseStringISO(e,e+n),t);case 30:return P(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,i=this.sub.length;n<i;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var i=0;i<n;++i)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof L?e:new L(e,0);var i=new L(n),o=new _(n),r=t.decodeLength(n),s=n.pos,a=s-i.pos,u=null,c=function(){var e=[];if(null!==r){for(var i=s+r;n.pos<i;)e[e.length]=t.decode(n);if(n.pos!=i)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)u=c();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=c();for(var l=0;l<u.length;++l)if(u[l].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(i,a,r,o,u)},t}(),_=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new R;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),k=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],M=(1<<26)/k[k.length-1],q=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,i=(1<<e)-1,o=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,r=v(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&i,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(r+=v(n));return o?r:"0"},t.prototype.negate=function(){var e=F();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+Q(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=F();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new J(e):new H(e),this.exp(t,n)},t.prototype.clone=function(){var t=F();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,i=this.DB-t*this.DB%8,o=0;if(t-- >0)for(i<this.DB&&(n=this[t]>>i)!=(this.s&this.DM)>>i&&(e[o++]=n|this.s<<this.DB-i);t>=0;)i<8?(n=(this[t]&(1<<i)-1)<<8-i,n|=this[--t]>>(i+=this.DB-8)):(n=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=F();return this.bitwiseTo(t,y,e),e},t.prototype.or=function(t){var e=F();return this.bitwiseTo(t,m,e),e},t.prototype.xor=function(t){var e=F();return this.bitwiseTo(t,w,e),e},t.prototype.andNot=function(t){var e=F();return this.bitwiseTo(t,b,e),e},t.prototype.not=function(){for(var t=F(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=F();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=F();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+S(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=T(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,m)},t.prototype.clearBit=function(t){return this.changeBit(t,b)},t.prototype.flipBit=function(t){return this.changeBit(t,w)},t.prototype.add=function(t){var e=F();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=F();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=F();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=F();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=F();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=F(),n=F();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,i,o=t.bitLength(),r=Y(1);if(o<=0)return r;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new J(e):e.isEven()?new G(e):new H(e);var s=[],a=3,u=n-1,c=(1<<n)-1;if(s[1]=i.convert(this),n>1){var l=F();for(i.sqrTo(s[1],l);a<=c;)s[a]=F(),i.mulTo(l,s[a-2],s[a]),a+=2}var h,p,f=t.t-1,d=!0,g=F();for(o=Q(t[f])-1;f>=0;){for(o>=u?h=t[f]>>o-u&c:(h=(t[f]&(1<<o+1)-1)<<u-o,f>0&&(h|=t[f-1]>>this.DB+o-u)),a=n;0==(1&h);)h>>=1,--a;if((o-=a)<0&&(o+=this.DB,--f),d)s[h].copyTo(r),d=!1;else{for(;a>1;)i.sqrTo(r,g),i.sqrTo(g,r),a-=2;a>0?i.sqrTo(r,g):(p=r,r=g,g=p),i.mulTo(g,s[h],r)}for(;f>=0&&0==(t[f]&1<<o);)i.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--f)}return i.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),r=Y(1),s=Y(0),a=Y(0),u=Y(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(o)>=0?(i.subTo(o,i),n&&r.subTo(a,r),s.subTo(u,s)):(o.subTo(i,o),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=o.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new $)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var i=e;e=n,n=i}var o=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=k[k.length-1]){for(e=0;e<k.length;++e)if(n[0]==k[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<k.length;){for(var i=k[e],o=e+1;o<k.length&&i<M;)i*=k[o++];for(i=n.modInt(i);e<o;)if(i%k[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var i;if(16==n)i=4;else if(8==n)i=3;else if(256==n)i=8;else if(2==n)i=1;else if(32==n)i=5;else{if(4!=n)return void this.fromRadix(e,n);i=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==i?255&+e[o]:Z(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,i=this.DB-n,o=(1<<i)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>i|s,s=(this[a]&o)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var i=t%this.DB,o=this.DB-i,r=(1<<i)-1;e[0]=this[n]>>i;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<o,e[s-n]=this[s]>>i;i>0&&(e[this.t-n-1]|=(this.s&r)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]-t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i-=t[n],e[n++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[n++]=this.DV+i:i>0&&(e[n++]=i),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var i=this.abs(),o=e.abs(),r=i.t;for(n.t=r+o.t;--r>=0;)n[r]=0;for(r=0;r<o.t;++r)n[r+i.t]=i.am(0,o[r],n,r,0,i.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var i=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,i,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,i){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=n&&n.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=F());var s=F(),a=this.s,u=e.s,c=this.DB-Q(o[o.t-1]);c>0?(o.lShiftTo(c,s),r.lShiftTo(c,i)):(o.copyTo(s),r.copyTo(i));var l=s.t,h=s[l-1];if(0!=h){var p=h*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/p,d=(1<<this.F1)/p,g=1<<this.F2,v=i.t,y=v-l,m=null==n?F():n;for(s.dlShiftTo(y,m),i.compareTo(m)>=0&&(i[i.t++]=1,i.subTo(m,i)),t.ONE.dlShiftTo(l,m),m.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--y>=0;){var w=i[--v]==h?this.DM:Math.floor(i[v]*f+(i[v-1]+g)*d);if((i[v]+=s.am(0,w,i,y,0,l))<w)for(s.dlShiftTo(y,m),i.subTo(m,i);i[v]<--w;)i.subTo(m,i)}null!=n&&(i.drShiftTo(l,n),a!=u&&t.ZERO.subTo(n,n)),i.t=l,i.clamp(),c>0&&i.rShiftTo(c,i),a<0&&t.ZERO.subTo(i,i)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var i=F(),o=F(),r=n.convert(this),s=Q(e)-1;for(r.copyTo(i);--s>=0;)if(n.sqrTo(i,o),(e&1<<s)>0)n.mulTo(o,r,i);else{var a=i;i=o,o=a}return n.revert(i)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=Y(n),o=F(),r=F(),s="";for(this.divRemTo(i,o,r);o.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var i=this.chunkSize(n),o=Math.pow(n,i),r=!1,s=0,a=0,u=0;u<e.length;++u){var c=Z(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+c,++s>=i&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,i){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),n.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var i,o,r=Math.min(t.t,this.t);for(i=0;i<r;++i)n[i]=e(this[i],t[i]);if(t.t<this.t){for(o=t.s&this.DM,i=r;i<this.t;++i)n[i]=e(this[i],o);n.t=this.t}else{for(o=this.s&this.DM,i=r;i<t.t;++i)n[i]=e(o,t[i]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,n,i),i},t.prototype.addTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]+t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i+=t[n],e[n++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[n++]=i:i<-1&&(e[n++]=this.DV+i),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(var o=n.t-this.t;i<o;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(o=Math.min(t.t,e);i<o;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var i=n.t=this.t+t.t-e;for(n.s=0;--i>=0;)n[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)n[this.t+i-e]=this.am(e-i,t[i],n,0,0,this.t+i-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var i=this.t-1;i>=0;--i)n=(e*n+this[i])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),i=n.getLowestSetBit();if(i<=0)return!1;var o=n.shiftRight(i);(e=e+1>>1)>k.length&&(e=k.length);for(var r=F(),s=0;s<e;++s){r.fromInt(k[Math.floor(Math.random()*k.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<i&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=F();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(n.compareTo(i)<0){var o=n;n=i,i=o}var r=n.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),i.rShiftTo(s,i));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),n.compareTo(i)>=0?(n.subTo(i,n),n.rShiftTo(1,n)):(i.subTo(n,i),i.rShiftTo(1,i)),n.signum()>0?setTimeout(a,0):(s>0&&i.lShiftTo(s,i),setTimeout((function(){e(i)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,i,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),$=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),J=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),H=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=F();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(q.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=F();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],i=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),G=function(){function t(t){this.m=t,this.r2=F(),this.q3=F(),q.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=F();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function F(){return new q(null)}function K(t,e){return new q(t,e)}var U="undefined"!=typeof navigator;U&&"Microsoft Internet Explorer"==navigator.appName?(q.prototype.am=function(t,e,n,i,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],c=this[t++]>>15,l=a*u+c*s;o=((u=s*u+((32767&l)<<15)+n[i]+(1073741823&o))>>>30)+(l>>>15)+a*c+(o>>>30),n[i++]=1073741823&u}return o},B=30):U&&"Netscape"!=navigator.appName?(q.prototype.am=function(t,e,n,i,o,r){for(;--r>=0;){var s=e*this[t++]+n[i]+o;o=Math.floor(s/67108864),n[i++]=67108863&s}return o},B=26):(q.prototype.am=function(t,e,n,i,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],c=this[t++]>>14,l=a*u+c*s;o=((u=s*u+((16383&l)<<14)+n[i]+o)>>28)+(l>>14)+a*c,n[i++]=268435455&u}return o},B=28),q.prototype.DB=B,q.prototype.DM=(1<<B)-1,q.prototype.DV=1<<B,q.prototype.FV=Math.pow(2,52),q.prototype.F1=52-B,q.prototype.F2=2*B-52;var z,X,W=[];for(z="0".charCodeAt(0),X=0;X<=9;++X)W[z++]=X;for(z="a".charCodeAt(0),X=10;X<36;++X)W[z++]=X;for(z="A".charCodeAt(0),X=10;X<36;++X)W[z++]=X;function Z(t,e){var n=W[t.charCodeAt(e)];return null==n?-1:n}function Y(t){var e=F();return e.fromInt(t),e}function Q(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}q.ZERO=Y(0),q.ONE=Y(1);var tt,et,nt=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,i;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,i=this.S[e],this.S[e]=this.S[n],this.S[n]=i;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),it=null;if(null==it){it=[],et=0;var ot=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var rt=new Uint32Array(256);for(window.crypto.getRandomValues(rt),ot=0;ot<rt.length;++ot)it[et++]=255&rt[ot]}var st=0,at=function(t){if((st=st||0)>=256||et>=256)window.removeEventListener?window.removeEventListener("mousemove",at,!1):window.detachEvent&&window.detachEvent("onmousemove",at);else try{var e=t.x+t.y;it[et++]=255&e,st+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",at,!1):window.attachEvent&&window.attachEvent("onmousemove",at))}function ut(){if(null==tt){for(tt=new nt;et<256;){var t=Math.floor(65536*Math.random());it[et++]=255&t}for(tt.init(it),et=0;et<it.length;++et)it[et]=0;et=0}return tt.next()}var ct=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=ut()},t}(),lt=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=K(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=t.length-1;i>=0&&e>0;){var o=t.charCodeAt(i--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var r=new ct,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new q(n)}(t,e);if(null==n)return null;var i=this.doPublic(n);if(null==i)return null;for(var o=i.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=K(t,16),this.e=parseInt(e,16),this.d=K(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,i,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=K(t,16),this.e=parseInt(e,16),this.d=K(n,16),this.p=K(i,16),this.q=K(o,16),this.dmp1=K(r,16),this.dmq1=K(s,16),this.coeff=K(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new ct,i=t>>1;this.e=parseInt(e,16);for(var o=new q(e,16);;){for(;this.p=new q(t-i,1,n),0!=this.p.subtract(q.ONE).gcd(o).compareTo(q.ONE)||!this.p.isProbablePrime(10););for(;this.q=new q(i,1,n),0!=this.q.subtract(q.ONE).gcd(o).compareTo(q.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(q.ONE),a=this.q.subtract(q.ONE),u=s.multiply(a);if(0==u.gcd(o).compareTo(q.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=K(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),i=0;i<n.length&&0==n[i];)++i;if(n.length-i!=e-1||2!=n[i])return null;for(++i;0!=n[i];)if(++i>=n.length)return null;for(var o="";++i<n.length;){var r=255&n[i];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&n[i+1]),++i):(o+=String.fromCharCode((15&r)<<12|(63&n[i+1])<<6|63&n[i+2]),i+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var i=new ct,o=t>>1;this.e=parseInt(e,16);var r=new q(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(q.ONE),i=s.q.subtract(q.ONE),o=e.multiply(i);0==o.gcd(r).compareTo(q.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(i),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=F(),s.q.fromNumberAsync(o,1,i,(function(){s.q.subtract(q.ONE).gcda(r,(function(t){0==t.compareTo(q.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},c=function(){s.p=F(),s.p.fromNumberAsync(t-o,1,i,(function(){s.p.subtract(q.ONE).gcda(r,(function(t){0==t.compareTo(q.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(c,0)}))}))};setTimeout(c,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var i=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,i="",o=0;o<n;o+=2)i+="ff";return K("0001"+i+"00"+t,16)}((ht[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==i)return null;var o=this.doPrivate(i);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var i=K(e,16),o=this.doPublic(i);return null==o?null:function(t){for(var e in ht)if(ht.hasOwnProperty(e)){var n=ht[e],i=n.length;if(t.substr(0,i)==n)return t.substr(i)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),ht={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},pt={};pt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var i=function(){};if(i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var n=s[o],i=e[n];"function"==typeof i&&i!=Object.prototype[n]&&(t[n]=i)}})}catch(t){}r(t.prototype,n)}}};var ft={};void 0!==ft.asn1&&ft.asn1||(ft.asn1={}),ft.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var i="",o=0;o<n;o++)i+="f";e=new q(i,16).xor(t).add(q.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=ft.asn1,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,c=e.DERUTF8String,l=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,f=e.DERIA5String,d=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var S=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+S+":"))throw"undefined key: "+S;if("bool"==S)return new n(t[S]);if("int"==S)return new i(t[S]);if("bitstr"==S)return new o(t[S]);if("octstr"==S)return new r(t[S]);if("null"==S)return new s(t[S]);if("oid"==S)return new a(t[S]);if("enum"==S)return new u(t[S]);if("utf8str"==S)return new c(t[S]);if("numstr"==S)return new l(t[S]);if("prnstr"==S)return new h(t[S]);if("telstr"==S)return new p(t[S]);if("ia5str"==S)return new f(t[S]);if("utctime"==S)return new d(t[S]);if("gentime"==S)return new g(t[S]);if("seq"==S){for(var T=t[S],D=[],E=0;E<T.length;E++){var C=w(T[E]);D.push(C)}return new v({array:D})}if("set"==S){for(T=t[S],D=[],E=0;E<T.length;E++)C=w(T[E]),D.push(C);return new y({array:D})}if("tag"==S){var O=t[S];if("[object Array]"===Object.prototype.toString.call(O)&&3==O.length){var N=w(O[2]);return new m({tag:O[0],explicit:O[1],obj:N})}var x={};if(void 0!==O.explicit&&(x.explicit=O.explicit),void 0!==O.tag&&(x.tag=O.tag),void 0===O.obj)throw"obj shall be specified for 'tag'.";return x.obj=w(O.obj),new m(x)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},ft.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),i=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);i+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new q(i,2).toString(10),i="")}return e},ft.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new q(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);return i},ft.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},ft.asn1.DERAbstractString=function(t){ft.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},pt.lang.extend(ft.asn1.DERAbstractString,ft.asn1.ASN1Object),ft.asn1.DERAbstractTime=function(t){ft.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var i=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+i(String(o.getMonth()+1),2)+i(String(o.getDate()),2)+i(String(o.getHours()),2)+i(String(o.getMinutes()),2)+i(String(o.getSeconds()),2);if(!0===n){var a=o.getMilliseconds();if(0!=a){var u=i(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,i,o,r){var s=new Date(Date.UTC(t,e-1,n,i,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},pt.lang.extend(ft.asn1.DERAbstractTime,ft.asn1.ASN1Object),ft.asn1.DERAbstractStructured=function(t){ft.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},pt.lang.extend(ft.asn1.DERAbstractStructured,ft.asn1.ASN1Object),ft.asn1.DERBoolean=function(){ft.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},pt.lang.extend(ft.asn1.DERBoolean,ft.asn1.ASN1Object),ft.asn1.DERInteger=function(t){ft.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=ft.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new q(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(ft.asn1.DERInteger,ft.asn1.ASN1Object),ft.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=ft.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}ft.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var i="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),i+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+i},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},pt.lang.extend(ft.asn1.DERBitString,ft.asn1.ASN1Object),ft.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=ft.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}ft.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},pt.lang.extend(ft.asn1.DEROctetString,ft.asn1.DERAbstractString),ft.asn1.DERNull=function(){ft.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},pt.lang.extend(ft.asn1.DERNull,ft.asn1.ASN1Object),ft.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new q(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};ft.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=i},this.setValueName=function(t){var e=ft.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},pt.lang.extend(ft.asn1.DERObjectIdentifier,ft.asn1.ASN1Object),ft.asn1.DEREnumerated=function(t){ft.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=ft.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new q(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(ft.asn1.DEREnumerated,ft.asn1.ASN1Object),ft.asn1.DERUTF8String=function(t){ft.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},pt.lang.extend(ft.asn1.DERUTF8String,ft.asn1.DERAbstractString),ft.asn1.DERNumericString=function(t){ft.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},pt.lang.extend(ft.asn1.DERNumericString,ft.asn1.DERAbstractString),ft.asn1.DERPrintableString=function(t){ft.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},pt.lang.extend(ft.asn1.DERPrintableString,ft.asn1.DERAbstractString),ft.asn1.DERTeletexString=function(t){ft.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},pt.lang.extend(ft.asn1.DERTeletexString,ft.asn1.DERAbstractString),ft.asn1.DERIA5String=function(t){ft.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},pt.lang.extend(ft.asn1.DERIA5String,ft.asn1.DERAbstractString),ft.asn1.DERUTCTime=function(t){ft.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},pt.lang.extend(ft.asn1.DERUTCTime,ft.asn1.DERAbstractTime),ft.asn1.DERGeneralizedTime=function(t){ft.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},pt.lang.extend(ft.asn1.DERGeneralizedTime,ft.asn1.DERAbstractTime),ft.asn1.DERSequence=function(t){ft.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},pt.lang.extend(ft.asn1.DERSequence,ft.asn1.DERAbstractStructured),ft.asn1.DERSet=function(t){ft.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},pt.lang.extend(ft.asn1.DERSet,ft.asn1.DERAbstractStructured),ft.asn1.DERTaggedObject=function(t){ft.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},pt.lang.extend(ft.asn1.DERTaggedObject,ft.asn1.ASN1Object);var dt,gt,vt=(dt=function(t,e){return dt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},dt(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}dt(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),yt=function(t){function e(n){var i=t.call(this)||this;return n&&("string"==typeof n?i.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&i.parsePropertiesFrom(n)),i}return vt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,i=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===D){var n="0123456789ABCDEF";for(D={},e=0;e<16;++e)D[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)D[n.charAt(e)]=e;for(e=0;e<8;++e)D[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=D[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(i[i.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return i}(t):x.unarmor(t),o=V.decode(i);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=K(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=o.sub[3].getHexStringValue();this.d=K(r,16);var s=o.sub[4].getHexStringValue();this.p=K(s,16);var a=o.sub[5].getHexStringValue();this.q=K(a,16);var u=o.sub[6].getHexStringValue();this.dmp1=K(u,16);var c=o.sub[7].getHexStringValue();this.dmq1=K(c,16);var l=o.sub[8].getHexStringValue();this.coeff=K(l,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=K(e,16),n=h.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=K(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new ft.asn1.DERInteger({int:0}),new ft.asn1.DERInteger({bigint:this.n}),new ft.asn1.DERInteger({int:this.e}),new ft.asn1.DERInteger({bigint:this.d}),new ft.asn1.DERInteger({bigint:this.p}),new ft.asn1.DERInteger({bigint:this.q}),new ft.asn1.DERInteger({bigint:this.dmp1}),new ft.asn1.DERInteger({bigint:this.dmq1}),new ft.asn1.DERInteger({bigint:this.coeff})]};return new ft.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return C(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new ft.asn1.DERSequence({array:[new ft.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new ft.asn1.DERNull]}),e=new ft.asn1.DERSequence({array:[new ft.asn1.DERInteger({bigint:this.n}),new ft.asn1.DERInteger({int:this.e})]}),n=new ft.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new ft.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return C(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(lt),mt="undefined"!=typeof process?null===(gt=process.env)||void 0===gt?void 0:gt.npm_package_version:void 0;const wt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new yt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(O(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return C(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return C(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,O(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new yt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=mt,t}();function bt(t,e){return"object"==typeof t?function(t,e){for(let n of Object.keys(t))t[n]=bt(t[n],e);return t}(t,e):"string"==typeof t?t.decrypt(e):void 0}null==window.$rsa&&(window.$rsa={}),window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const n=new wt;return n.setPrivateKey(e),n.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const n=new wt;return n.setPrivateKey(e),n.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return bt(t,e)},window.$rsa;var St={};function Tt(t,e){u.getComponent().meta.fieldNames.push(e)}function Dt(t,e,n){u.getComponent().meta.methodNames.push(e)}function Et(t,e,n){return void 0===n&&(n=!1),function(i,o){u.getComponent().meta.props[o]={type:t,default:e,required:n}}}function Ct(t,e){u.getComponent().meta.template=e}function Ot(t,e){return function(n,i,o){var r=u.getComponent(e);r.meta.hockMounted=i,r.meta.clazz=t,r.name=e}}function Nt(t){return function(e,n){u.getComponent().meta.computeInfos.push({key:n,func:t})}}St.registRightClick=function(t,e,n){var i="right-click-menu-".concat(e);t.addEventListener("contextmenu",(function(t){for(var e=0,o=window.byClass("right-menu");e<o.length;e++)o[e].remove();t.preventDefault();var r=function(t){for(var e=document.createElement("div"),n=function(t){if(!t||!t.isDisplay())return"continue";var n=document.createElement("div");n.id=t.id,n.classList.add("right-click-item"),n.innerText=t.label,n.addEventListener("click",(function(){t.event()})),e.appendChild(n)},i=0,o=t.items;i<o.length;i++)n(o[i]);return e}(n);r.id=i,r.classList.add("right-menu"),r.style.left=t.clientX+"px",r.style.top=t.clientY+"px",document.body.appendChild(r)}))},document.addEventListener("click",(function(){for(var t=0,e=window.byClass("right-menu");t<e.length;t++)e[t].remove()})),window.$menu=St;var xt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),It=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Rt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$emit(\'on-click\')">\n        <slot></slot>\n    </div>',e}xt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:this.xType.equalsIgnoreCase("primary"),cancel:this.xType.equalsIgnoreCase("cancel"),warn:this.xType.equalsIgnoreCase("warn"),error:this.xType.equalsIgnoreCase("error")}},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.xSize.equalsIgnoreCase("small")?"1px":this.xSize.equalsIgnoreCase("normal")?"2px":"3px"}},It([Ot(e,l.ButtonX)],e.prototype,"mounted",null),It([Ct],e.prototype,"template",void 0),It([Et(String,"normal")],e.prototype,"xSize",void 0),It([Et(String,"primary")],e.prototype,"xType",void 0),It([Dt],e.prototype,"getClass",null),It([Dt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},At=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',e.value="",e}Rt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("dinglj-v-input-text::clear",(function(){t.value=""}),this.vid),window.$queue.on("dinglj-v-input-text::focus",(function(){window.byId(t.vid).children[0].focus()}),this.vid)},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},e.prototype.setValue=function(t,e){this.value=t,this.emit("on-change",t),"input"==e&&this.emit("on-input",t),"blur"==e&&(this.emit("on-blur",t),this.emit("on-over",t)),"enter"==e&&(this.emit("on-enter",t),this.emit("on-over",t))},jt([Ot(e,l.InputX)],e.prototype,"mounted",null),jt([Ct],e.prototype,"template",void 0),jt([Tt],e.prototype,"value",void 0),jt([Dt],e.prototype,"getStyle",null),jt([Dt],e.prototype,"setValue",null),jt([Et(String,"normal")],e.prototype,"xSize",void 0),jt([Et(String,"")],e.prototype,"caption",void 0),jt([Et(String,"")],e.prototype,"placeholder",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Pt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Bt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',e.active=!1,e}At(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},e.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},e.prototype.onclicked=function(){this.active=!this.active,this.emit("on-change",this.active),this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info()},Pt([Ot(e,l.SwitchX)],e.prototype,"mounted",null),Pt([Ct],e.prototype,"template",void 0),Pt([Tt],e.prototype,"active",void 0),Pt([Dt],e.prototype,"getStyle",null),Pt([Dt],e.prototype,"getClass",null),Pt([Dt],e.prototype,"onclicked",null),Pt([Et(String,"normal")],e.prototype,"xSize",void 0),Pt([Et(String,"")],e.prototype,"preText",void 0),Pt([Et(String,"")],e.prototype,"postText",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Lt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Vt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="caption" :id="vid">\n        <input :placeholder="placeholder" type="text" :value="list.includesIgnoreCase(value) ? getValue(value) : \'\'"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in list" @click="setValue(item)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n    </div>',e.value=null,e}Bt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},Lt([Ot(e,l.ComboX)],e.prototype,"mounted",null),Lt([Ct],e.prototype,"template",void 0),Lt([Tt],e.prototype,"value",void 0),Lt([Dt],e.prototype,"setValue",null),Lt([Dt],e.prototype,"getStyle",null),Lt([Et(Array,[])],e.prototype,"list",void 0),Lt([Et(String,"normal")],e.prototype,"xSize",void 0),Lt([Et(String,"")],e.prototype,"caption",void 0),Lt([Et(String,"")],e.prototype,"placeholder",void 0),Lt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0),Lt([Et(Function,(function(t){return t}))],e.prototype,"getValue",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),_t=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},kt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',e.value=null,e}Vt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},_t([Ot(e,l.NavigatorX)],e.prototype,"mounted",null),_t([Ct],e.prototype,"template",void 0),_t([Tt],e.prototype,"value",void 0),_t([Dt],e.prototype,"setValue",null),_t([Nt((function(){return null!=this.value?!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.setValue(this.list[0]):this.list.length>0&&this.setValue(this.list[0]),this.value}))],e.prototype,"validItem",void 0),_t([Et(Array,[])],e.prototype,"list",void 0),_t([Et(Object,null)],e.prototype,"default",void 0),_t([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Mt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},qt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}kt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},Mt([Ot(e,l.ScrollerY)],e.prototype,"mounted",null),Mt([Ct],e.prototype,"template",void 0),Mt([Et(Number,0)],e.prototype,"size",void 0),Mt([Et(Number,0)],e.prototype,"index",void 0),Mt([Dt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),$t=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Jt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :list="list" :get-caption="getCaption" @on-change="changed">\n        </i-navigator>\n        <div class="dinglj-v-navigator-right">\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :index="list.indexOf(active)" :size="list.length">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            <slot name="after"></slot>\n        </div>\n    </div>',e.active=null,e}qt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name)},e.prototype.changed=function(t){this.active=t.value,this.emit("on-change",t)},$t([Ot(e,l.NavigatorView)],e.prototype,"mounted",null),$t([Ct],e.prototype,"template",void 0),$t([Tt],e.prototype,"active",void 0),$t([Dt],e.prototype,"changed",null),$t([Et(Array,[],!0)],e.prototype,"list",void 0),$t([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ht=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Gt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',e.value=null,e}Jt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),window.$queue.on("tab-panel:next",(function(){var e=(t.index+1+t.list.length)%t.list.length;t.clicked(t.list[e],e)}),this.vid),window.$queue.on("tab-panel:to",(function(e){var n=t.list.filter((function(t){return JSON.stringify(t)==JSON.stringify(e)}));n.length>0&&t.clicked(n[0],t.list.indexOf(n[0]))}),this.vid)},e.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},e.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},e.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.emit("on-change",t),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],i=window.byId(n.getId(e));i&&(t.style.width="".concat(i.offsetWidth,"px"),t.style.left="".concat(i.offsetLeft,"px"))}),50))},Ht([Ot(e,l.TabPanelX)],e.prototype,"mounted",null),Ht([Ct],e.prototype,"template",void 0),Ht([Tt],e.prototype,"value",void 0),Ht([Dt],e.prototype,"getClass",null),Ht([Dt],e.prototype,"getId",null),Ht([Dt],e.prototype,"clicked",null),Ht([Nt((function(){return!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.clicked(this.list[0],0),this.list.indexOf(this.value)}))],e.prototype,"index",void 0),Ht([Et(Array,[],!0)],e.prototype,"list",void 0),Ht([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ft=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Kt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}Gt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},Ft([Ot(e,l.ScrollerX)],e.prototype,"mounted",null),Ft([Ct],e.prototype,"template",void 0),Ft([Et(Number,0)],e.prototype,"size",void 0),Ft([Et(Number,0)],e.prototype,"index",void 0),Ft([Dt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ut=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},zt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :list="list" :get-caption="getCaption" @on-change="changed" @mounted="tabPanelLoaded">\n            <i-scroller-x :index="index" :size="list.length">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',e.value=null,e.tabPanelId="",e}Kt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("tab-view:next",(function(){window.$queue.sendMsg("tab-panel:next",null,t.tabPanelId)}),this.vid),window.$queue.on("tab-view:to",(function(e){window.$queue.sendMsg("tab-panel:to",e,t.tabPanelId)}),this.vid)},e.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},e.prototype.changed=function(t){this.value!=t.value&&(this.value=t.value,this.emit("on-change",t))},Ut([Ot(e,l.TabView)],e.prototype,"mounted",null),Ut([Ct],e.prototype,"template",void 0),Ut([Tt],e.prototype,"value",void 0),Ut([Tt],e.prototype,"tabPanelId",void 0),Ut([Dt],e.prototype,"tabPanelLoaded",null),Ut([Dt],e.prototype,"changed",null),Ut([Nt((function(){return this.list.indexOfIgnoreCase(this.value)}))],e.prototype,"index",void 0),Ut([Et(Array,[],!0)],e.prototype,"list",void 0),Ut([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Xt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Wt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-table" :id="vid">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" v-for="column in columns" :class="getClass(column)">\n                {{ getColumnCaption(column) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tbody">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in data" @click="checkOne(line)">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',e.cache={},e.checkAll=!1,e.checkedList=[],e.bestWidthCache=!1,e}zt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",i={"dinglj-v-cell":!0};return i[e]=!0,i[n]=!0,this.cache[e]=i,i},e.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},e.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.data),this.checkAll=!this.checkAll},e.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var i=n.getColumnKey(e),o=n.getColumnCaption(e),r=[window.calcTxtWidth("".concat(o))];r.push.apply(r,n.data.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[i]=s+30},n=this,i=0,o=this.columns;i<o.length;i++)e(o[i]);return this.bestWidthCache},Xt([Ot(e,l.TableX)],e.prototype,"mounted",null),Xt([Ct],e.prototype,"template",void 0),Xt([Tt],e.prototype,"cache",void 0),Xt([Tt],e.prototype,"checkAll",void 0),Xt([Tt],e.prototype,"checkedList",void 0),Xt([Tt],e.prototype,"bestWidthCache",void 0),Xt([Dt],e.prototype,"getClass",null),Xt([Dt],e.prototype,"getStyle",null),Xt([Dt],e.prototype,"doCheckAll",null),Xt([Dt],e.prototype,"getBestWidth",null),Xt([Et(Array,[])],e.prototype,"flexColumns",void 0),Xt([Et(Array,[])],e.prototype,"data",void 0),Xt([Et(Boolean,!0)],e.prototype,"sequanceNum",void 0),Xt([Et(Boolean,!0)],e.prototype,"selectable",void 0),Xt([Et(Array,[])],e.prototype,"columns",void 0),Xt([Et(Function,(function(t){return t}))],e.prototype,"getColumnKey",void 0),Xt([Et(Function,(function(t){return t}))],e.prototype,"getColumnCaption",void 0),Xt([Et(Function,(function(t,e){return t[e]}))],e.prototype,"getCell",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Zt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'rt' }\" v-if=\"['lt', 'rt'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'rb' }\" v-if=\"['lb', 'rb'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",e}Wt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},e.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},Zt([Ot(e,l.ProgressX)],e.prototype,"mounted",null),Zt([Ct],e.prototype,"template",void 0),Zt([Dt],e.prototype,"getContainerStyle",null),Zt([Dt],e.prototype,"getProgressStyle",null),Zt([Et(String,"5px")],e.prototype,"height",void 0),Zt([Et(String,"100%")],e.prototype,"percent",void 0),Zt([Et(String,"lt")],e.prototype,"position",void 0),Zt([Et(String,"")],e.prototype,"caption",void 0)})(e),u.getComponent(l.ButtonX).build(),u.getComponent(l.InputX).build(),u.getComponent(l.SwitchX).build(),u.getComponent(l.ComboX).build(),u.getComponent(l.NavigatorX).build(),u.getComponent(l.ScrollerY).build(),u.getComponent(l.NavigatorView).build(),u.getComponent(l.TabPanelX).build(),u.getComponent(l.ScrollerX).build(),u.getComponent(l.TabView).build(),u.getComponent(l.TableX).build(),u.getComponent(l.ProgressX).build(),window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css");var Yt={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"},Qt=function(){function t(t,e){if(t){t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error("未知的状态 {".concat(t.stats,"}, 结果 {").concat(t.result,"}, 请联系 dinglj 补充")):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error("未知的状态 {".concat(t.stats,"}, 请联系 dinglj 补充")):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error("未知的结果 {".concat(t.result,"}, 请联系 dinglj 补充")),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;var n=t.ticketId||t.log;this.ticket=n?parseInt(n):n,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}}return t.getCaption=function(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}},t._fieldMap_=Yt,t._fields_=Object.keys(Yt),t}(),te=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ee=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ne=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input caption="搜索" placeholder="请输入关键字"\n                @on-change="data => filter.keyword = data.value">\n            </i-input>\n            <i-combo caption="状态" placeholder="请选择状态"\n                style="margin-left: 10px"\n                :list="Object.values(status)"\n                :get-value="i => i.en" \n                :get-caption="i => i.zh"\n                @on-change="s => filter.status = s.value">\n            </i-combo>\n            <i-combo caption="版本" placeholder="默认为当前版本"\n                style="margin-left: 10px; --width: 400px"\n                :list="versionNames"\n                @on-change="v => filter.versions = v.value">\n            </i-combo>\n            <div class="dinglj-v-flex"></div>\n            <i-switch pre-text="卡片视图" post-text="表格视图" @on-change="data => filter.mode = (data.value ? \'table\' : \'card\')">\n            </i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input caption="每列的卡片数" placeholder="请输入每列的卡片数量"\n                default-value="7"\n                @on-input="data => filter.cardCnt = ((isNaN(data.value) || data.value < 5) ? 5 : parseInt(data.value))">\n            </i-input>\n        </div>\n    </div>',e.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:7},e.versionList=[],e}var n;te(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.onFilterChange=function(t,e){this.emit("on-change",t),console.log(t)},ee([Ot(e,"CL-Filter")],e.prototype,"mounted",null),ee([Ct],e.prototype,"template",void 0),ee([Tt],e.prototype,"filter",void 0),ee([Tt],e.prototype,"versionList",void 0),ee([("filter",void 0===n&&(n=!0),function(t,e){u.getComponent().meta.watchInfos.push({field:"filter",deep:n,resolve:e})})],e.prototype,"onFilterChange",null),ee([Nt((function(){return window.readConfig()}))],e.prototype,"config",void 0),ee([Nt((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),ee([Nt((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),ee([Nt((function(){if(window.isDev())return window.readVersion();if(0==this.versionList.length){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"urls.versions","",!1);this.versionList=JSON.parse(window.get(t))}return this.versionList}))],e.prototype,"versions",void 0),ee([Nt((function(){return this.versions.map((function(t){return t.erpVersion}))}))],e.prototype,"versionNames",void 0)}(e),u.getComponent("CL-Filter").build()),ie=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),oe=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},re=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="statusName in statusNames">\n            <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                <div class="card-line card-title">\n                    <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                    <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                    <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                </div>\n                <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="lineCaption(_case_)" :percent="linePercent(_case_)"></i-progress>\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="stepCaption(_case_)" :percent="stepPercent(_case_)"></i-progress>\n                </div>\n                <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                    <div>耗时: {{ _case_.timeCost }}</div>\n                </div>\n            </div>\n        </div>\n    </div>',e}ie(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.openCardTicket=function(t){window.open("".concat(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.ticket","",!1),"/").concat(t.ticket),"#".concat(t.ticket))},e.prototype.lineCaption=function(t){return"行进度: ".concat(t.currentRow,"/").concat(t.totalRow,", ")},e.prototype.linePercent=function(t){return"".concat(t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0,"%")},e.prototype.stepCaption=function(t){return"步数进度: ".concat(t.currentStep,"/").concat(t.totalStep,", ")},e.prototype.stepPercent=function(t){return"".concat(t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0,"%")},oe([Ot(e,"CL-Card")],e.prototype,"mounted",null),oe([Ct],e.prototype,"template",void 0),oe([Dt],e.prototype,"openCardTicket",null),oe([Dt],e.prototype,"lineCaption",null),oe([Dt],e.prototype,"linePercent",null),oe([Dt],e.prototype,"stepCaption",null),oe([Dt],e.prototype,"stepPercent",null),oe([Nt((function(){return window.readConfig()}))],e.prototype,"config",void 0),oe([Nt((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),oe([Et(Object,{})],e.prototype,"groupData",void 0),oe([Et(Array,[])],e.prototype,"statusNames",void 0),oe([Et(Number,5)],e.prototype,"cardCnt",void 0)}(e),u.getComponent("CL-Card").build()),se=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ae=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ue=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container table">\n        <i-table v-for="statusName in statusNames" class="every-tab" @mounted="onTableMounted" \n                :columns="getColumnsToDisplay(statusName)"  \n                :data="groupData[statusName]"\n                :get-column-key="col => col.en"\n                :get-column-caption="col => col.zh"\n                :flex-columns="[\'caseName\']">\n        </i-table>\n    </div>',e}se(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.onTableMounted=function(t){var e=this;window.query("#".concat(t.vid," .dinglj-v-tbody .dinglj-v-cell.ticket")).forEach((function(t){var n=t.innerText.trim();n&&(t.innerHTML="<div onclick=\"window.open('".concat(window.getConfigOrDefault(e.config,e.defaultConfig,"urls.ticket","",!1),"/").concat(n,"', '#").concat(n,"')\">#").concat(n,"</div>"))}))},e.prototype.getColumnsToDisplay=function(t){if(!this.groupData||!this.groupData[t]||!this.groupData[t].length)return[];var e=window.getConfigOrDefault(this.config,this.defaultConfig,"table.ignoreColumn",[],!1),n=this.groupData[t];return Qt._fields_.filter((function(t){if(e.includesIgnoreCase(t))return!1;for(var i=0,o=n;i<o.length;i++){var r=o[i];if(r&&r[t])return!0}return!1})).map((function(t){return new o(t,Qt._fieldMap_[t])}))},ae([Ot(e,"CL-Table")],e.prototype,"mounted",null),ae([Ct],e.prototype,"template",void 0),ae([Dt],e.prototype,"onTableMounted",null),ae([Dt],e.prototype,"getColumnsToDisplay",null),ae([Nt((function(){return window.readConfig()}))],e.prototype,"config",void 0),ae([Nt((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),ae([Et(Object,{})],e.prototype,"groupData",void 0),ae([Et(Array,[])],e.prototype,"statusNames",void 0)}(e),u.getComponent("CL-Table").build()),ce=(n(168),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),le=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n    <i-nav-view :list="componentNames">\n        <template v-slot:before>\n            <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n        </template>\n        <template v-slot:content id="case-list-view">\n            <i-tab-view v-for="componentName in componentNames"\n                :list="tabTitle(componentName)"\n                :get-caption="item => item.zh">\n                <xcard  v-if="filter.data.mode == \'card\'"\n                    :status-names="statusNames(componentName)" \n                    :group-data="groupByStatus(componentName)"\n                    :card-cnt="filter.data.cardCnt">\n                </xcard>\n                <xtable v-else\n                    :status-names="statusNames(componentName)"\n                    :group-data="groupByStatus(componentName)">\n                </xtable>\n            </i-tab-view>\n        </template>\n        <template v-slot:after></template>\n    </i-nav-view>\n</div>',function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allVersionDatas={},e.filter={data:{mode:"card",cardCnt:7}},e}var n;ce(e,t),e.prototype.mounted=function(){var t=this;window.displayData=function(){console.log(t)}},e.prototype.groupByStatus=function(t){return window.groupBy(this.groupByComponent[t],(function(t){return t.status.en}))},e.prototype.statusNames=function(t){var e=this.groupByStatus(t),n=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferStatus",[],!1).map((function(t){return t.toLowerCase()}));return Object.keys(e).sort((function(t,e){return window.compareStringByArray(n,t.toLowerCase(),e.toLowerCase())}))},e.prototype.tabTitle=function(t){var e=this;return this.statusNames(t).map((function(t){return new o(t,e.status[t].zh)}))},le([(n={xfilter:ne,xcard:re,xtable:ue},function(t,e){u.getComponent().meta.components=n}),Ot(e,"App")],e.prototype,"mounted",null),le([Tt],e.prototype,"allVersionDatas",void 0),le([Tt],e.prototype,"filter",void 0),le([Dt],e.prototype,"groupByStatus",null),le([Dt],e.prototype,"statusNames",null),le([Dt],e.prototype,"tabTitle",null),le([Nt((function(){return window.readConfig()}))],e.prototype,"config",void 0),le([Nt((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),le([Nt((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),le([Nt((function(){var t,e=this,n=this.filter.data.versions||"default";if(window.isDev())return window.readData(n);if(this.allVersionDatas[n])return this.allVersionDatas[n];if("default"==n){var i=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.defaultVersionData","",!1));t=JSON.parse(i).testCaseTasks}else i=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.readVersion","",!1)+n),t=JSON.parse(i);return this.allVersionDatas[n]=t.map((function(t){return new Qt(t,e.status)})),this.allVersionDatas[n]}))],e.prototype,"originData",void 0),le([Nt((function(){var t=this,e=this.originData;return this.filter.data.keyword&&(e=e.filter((function(e){return e.caseName.includesIgnoreCase(t.filter.data.keyword)}))),this.filter.data.status&&(e=e.filter((function(e){return JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)}))),0==e.length&&"未找到任何有效数据".err(),e}))],e.prototype,"filteredData",void 0),le([Nt((function(){var t=window.groupBy(this.filteredData,"component"),e=this.filteredData.filter((function(t){return 0==t.level}));return e.length>0&&(t.UNIT=e),t}))],e.prototype,"groupByComponent",void 0),le([Nt((function(){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferComponent",[],!1).map((function(t){return t.toLowerCase()}));return t.unshift("unit"),Object.keys(this.groupByComponent).sort((function(e,n){return window.compareStringByArray(t,e.toLowerCase(),n.toLowerCase())}))}))],e.prototype,"componentNames",void 0)}(e),window.createVue(u.getComponent("App").build(),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,