/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={176:()=>{function t(t){return"string"==typeof t?t.toLowerCase():JSON.stringify(t).toLowerCase()}Array.prototype.includesIgnoreCase=function(t){return-1!=this.indexOfIgnoreCase(t)},Array.prototype.indexOfIgnoreCase=function(e){const i=t(e);return this.map((e=>t(e))).indexOf(i)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){let e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExistByKey=function(t,e){let i=[];for(let n of this)$get(n,t)==e&&i.push(n);return i},Array.prototype.compareBy=function(t,e){if(this.length>0){let i=-1==this.indexOfIgnoreCase(t)?9999:this.indexOfIgnoreCase(t),n=-1==this.indexOfIgnoreCase(e)?9999:this.indexOfIgnoreCase(e);return i==n?t<e?-1:t>e?1:0:i-n}return t<e?-1:t>e?1:0}},228:()=>{Window.prototype.getConfigOrDefault=function(t,e,i=!0){let n=window.getVal($userConfig,t,"NOT_FOUND"),o=window.getVal($systemConfig,t,"NOT_FOUND"),r="NOT_FOUND";if("NOT_FOUND"!=n)if(Array.isArray(n))r=[...n];else{if("object"!=typeof n)return n;r={};for(let t of Object.keys(n))r[t]=n[t]}if("NOT_FOUND"!=o){if("NOT_FOUND"==r)return o;if(Array.isArray(n)&&Array.isArray(o)&&i)r.push(...o);else if("object"==typeof o&&i)for(let t of Object.keys(o))null==r[t]&&(r[t]=o[t])}return"NOT_FOUND"==r&&(r=e,console.error(`${t}: 配置不存在, 请检查脚本`)),r}},816:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t="yyyy-MM-dd HH:mm:ss"){return t.replace(/yyyy/,`${this.getFullYear()}`).replace(/yy/,""+this.getFullYear()%100).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:`0${this.getMonth()+1}`).replace(/dd/,this.getDate()>9?this.getDate():`0${this.getDate()}`).replace(/HH/,this.getHours()>9?this.getHours():`0${this.getHours()}`).replace(/mm/,this.getMinutes()>9?this.getMinutes():`0${this.getMinutes()}`).replace(/ss/,this.getSeconds()>9?this.getSeconds():`0${this.getSeconds()}`)}},599:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e=window.document){const i=[],n=e.getElementsByClassName(t);return n&&i.push(...n),i},Window.prototype.selector=function(t){let e=[];const i=document.querySelectorAll(t);return i&&e.push(...i),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){const e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"700","14px","Microsoft YaHei")})),window.defunc(window,"calcTxtWidth",(function(t,e,i,n){const o=document.createElement("canvas").getContext("2d");o.font=`${e} ${i} ${n}`;const{width:r}=o.measureText(t);return Math.floor(r)})),Element.prototype.animate=function(t,e){const i=getComputedStyle(this).transition,n=Object.keys(t);for(let e of n)this.style[e]=t[e][0];setTimeout((()=>{const o=e/1e3+"s";this.style.transition=o;for(let e of n)this.style[e]=t[e][1];setTimeout((()=>{this.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],i=this.children;for(let n=0;n<i.length;n++)i[n].classList.contains(t)&&e.push(i[n]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Element.prototype.indexByClass=function(t){return this.parentElement.indexByClassInChildren(t)},Element.prototype.indexByClassInChildren=function(t){let e=this.children;for(let i=0;i<e.length;i++)if(e[i].classList.contains(t))return i;return-1}},904:()=>{Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,i){t[e]=i},Window.prototype.pushToArray=function(t,e,i,n=!1){if(Array.isArray(t[e])){let o=t[e];n&&o.includes(i)||o.push(i)}else t[e]=[i]},Window.prototype.unshiftToArray=function(t,e,i){Array.isArray(t[e])?t[e].unshift(i):t[e]=[i]},Window.prototype.getVal=function(t,e,i,n=!1){if(null==t||null==t)return i;let o=t;for(let t of e.split("."))if(o=o[t],!o)return n&&console.error(`未能取到 ${e} 的值`),i;return o}},374:()=>{Window.prototype.uuid=function(t="",e=10){return`${t}-${(""+1e7*Math.random()).replace(".","").substring(0,e)}`},Window.prototype.groupBy=function(t,e){let i={};return t.forEach((t=>{let n="";"string"==typeof e?n=t[e]:"function"==typeof e&&(n=e(t)),i[n]?i[n].push(t):i[n]=[t]})),i},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){let e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);let i=document.createRange();i.selectNodeContents(e);const n=window.getSelection();n.addRange(i),document.execCommand("Copy",!1,null),n.removeAllRanges(),`已复制: ${t}`.info(),e.remove()};let t=null;Window.prototype.isMatch=function(){if(null!=t)return t;if(window.isDev())return t=!0;let e=window.location.href;const i=window.getConfigOrDefault("enableWebs",[]);if(0==i.length)return t=!0;let n=!1;for(let t of i)if(e.startsWith(t)){n=!0,e=e.replace(t,"");break}if(!n)return"脚本尚未适配当前网址, 请联系 dinglj 修改配置".warn(),t=!1;const o=window.getConfigOrDefault("matchList",[]);for(let i of o)if(window.createRegExp(i).test(e))return t=!0;for(let e of o)if(window.createRegExp(e).test(window.location.href))return t=!0;return console.error("脚本尚未适配当前网址, 请联系 dinglj 修改默认配置, 或自行在油猴脚本中增加 matchList 配置"),t=!1},Window.prototype.StringPool={},Window.prototype.toCache=function(t,e){e=e||window.uuid();const i={};return Window.prototype.StringPool[e]=i,e=>i[e]||(i[e]=t(e))}},506:()=>{function t(t){var e=new ArrayBuffer(t.length),i=new Uint8Array(e);for(let e=0;e!=t.length;e++)i[e]=255&t.charCodeAt(e);return e}function e(t){t=t.toLowerCase();let e=0;for(let i=0;i<t.length;i++)e+=(t.charCodeAt(i)-96)*Math.pow(26,t.length-i-1);return e}function i(t){t-=1;let e=26;const i=t=>String.fromCharCode("A".charCodeAt(0)+t);let n=1;for(;t>=e;)t-=e,e*=26,n++;let o=i(t%26);for(;t>=26;)o=i((t=Math.floor(t/26))%26)+o;return o="A".repeat(n-o.length)+o,o}window.$excel={},window.$excel.export=function(e,i){window.isEnableExcel||window.enableExcel();let n=function(e,i){let n={SheetNames:[i=i||"sheet1"],Sheets:{}};$set(n.Sheets,i,e);let o=window.XLSX.write(n,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(o)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(i));!function(t,e){let i=t;"object"==typeof i&&i instanceof Blob&&(i=URL.createObjectURL(i));var n=document.createElement("a");n.href=i,n.download=e||"",n.click()}(n,e)},window.$excel.readFile=function(t,e){return window.isEnableExcel||window.enableExcel(),window.XLSX.readFile(t,e)},window.$excel.read=function(t,e){window.isEnableExcel||window.enableExcel();const i=new FileReader;return i.onload=function(t){var i=t.target.result,n=window.XLSX.read(i,{type:"binary"});for(let t=0;t<n.SheetNames.length;t++){const e=n.SheetNames[t];n.Sheets[e]["!ref"]||n.SheetNames.splice(t,1)}e&&e(n)},i.readAsBinaryString(t),null},window.$excel.resolveSheets=function(t){for(let e of t.SheetNames)window.$excel.resolveSheet(t,e);return null},window.$excel.resolveSheet=function(t,n){const o=t.Sheets[n]["!ref"];if(!o)return[[]];const r=[],[s,a]=o.split(":"),l=/(\d+)/.exec(s)[1],u=s.replace(l,""),c=/(\d+)/.exec(a)[1],p=a.replace(c,""),h=parseInt(l),d=parseInt(c),f=e(u),g=e(p);for(let e=h;e<=d;e++){let o=[];for(let r=f;r<=g;r++){const s=i(r)+e;o.push(t.Sheets[n][s])}o.length>0&&r.push(o)}return window.pushToArray(t,"array",{sheetName:n,value:r}),r}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`);const o=$queue.eventPool[n];if(Array.isArray(o)){if(1==o.length)return o[0](e);let t=[];for(let i of o)t.push(i(e))}else pushToArray($queue.eventQueue,n,e)},$queue.on=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`),pushToArray($queue.eventPool,n,e);const o=$queue.eventQueue[n];if(Array.isArray(n))for(let t of o)e(t)}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((()=>{t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,i,n=2e3,o="10%"){let r=window.byId("dinglj-v-pop-msg-container");r||(r=document.createElement("div"),r.id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;const s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort(((t,e)=>t.time-e.time));for(let e=0;e<s.length-4;e++)t(s[e],void 0)}const a=document.createElement("div");a.classList.add("dinglj-v-pop-msg",i),a.time=Date.now();const l=document.createElement("div");l.classList.add("dinglj-v-pop-msg-icon",i),l.innerText=i.substring(0,1).toUpperCase(),a.appendChild(l),a.innerHTML+=e,r.appendChild(a),a.animate({height:["0px",getComputedStyle(a).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),a.classList.add("active"),setTimeout((()=>{t(a,r)}),n)}window.$tip={},$tip.info=function(t,i=2e3,n="10%"){e(t,"info",i,n)},$tip.warn=function(t,i=2e3,n="10%"){e(t,"warn",i,n)},$tip.err=function(t,i=2e3,n="10%"){e(t,"err",i,n)}},168:()=>{window.encodeConfig=function(){return{constant:{status:{UNKNOWN:{en:"$DINGLJ-ENCODE-START$IQyIAwvhbbIWFFfcpRqxougo2pP9OBQ6rGJt+uBf4N5JUi05H1hjSZP4IPfsUOLSmNDKMUbgm8x/FQgHwPY6sQ8lOoHx3RJoiOBFqQauLO5jpmwgoHkDKpQen+WFl5HZh+D3S6fF3s3SE5/OIHdMjV3hTO5nfTh13Qf9HIPSQac=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$DdXtRkL7Y+dIE+u3XurvGDAKYUUNxsNsyKI9/hknMmzBO6+rK9r8Fx9Qo7Z7j+cu/bvEKEz2SO20Npn9hC3pQ0MgwjZj81A4XRsTjyyzeRHk7sHGuqMK1ULeQEatNoYsayPz06a6dClu6Qh8MfUtZ+X0RvtdvK15IYEAz28r99c=$DINGLJ-ENCODE-END$"},TICKET:{en:"$DINGLJ-ENCODE-START$NuessiCoo1KqWhziEbtEh5u2DOBR9ungXNVruoy1H7vjlJegn2gF+2EIiEyA98YfVDD2u04fcr6u2qSpvvgfCxyWisqmGDUomVFnY5cnLpV7CH3p/V1OEjUS9NwYO6X4RHs1aHLa2Yp5xfmrtBGKYMYFt/iX+BbKF2mxGzzwy1Q=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$MycVroBq+gf2OWsbUTWEhkb6c/CyNiIPm6I3tIBv+Z4dmG+d7uGn2E1ouXFHEQtGo2S7VpbHQMKuGp8bb3xiEMvk0hrD3Ki4BlPQjaDliyq3iKoB+aNxo8t7DQBYsdLnPnLe2luLVckMpQFbjVNXX9aNinaTFZDtCNjMO1trIM4=$DINGLJ-ENCODE-END$"},FAILED:{en:"$DINGLJ-ENCODE-START$mm/SFYQCufQUCOda3mrPnDMC1qi4uzo5oYLKhG0awkLoHnL6HS31bZyJaHggurfepecjq7OU4T6U9rVD+nltU8na8oOeVSfhke1d3mbiDgqyTB0p5iJ4X0vku+9CgrZYzfmB+BBsWb6OCp8DKTYn8YZNtoU/D3Z7o6X6dmRiboY=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$PjoFhkswm7RKnpFdpBAtshxuXvKKMh7yCjSvS8d+Ihx275kqbtN2fDIKMZtaclT+SNowupsnylfAPxvu+sd6o9HaOod6O7aJLrnPqkIWS25tRsXoiNGTbl39EIxiNdt5MeydouRWeXsLGkX60RKKIL/rceQAXUIMD0MmXAy1n94=$DINGLJ-ENCODE-END$"},SUCCESS:{en:"$DINGLJ-ENCODE-START$TNXkSY4wHYfOoRCnifRHEnSw1YqpdLuH4Xuizz0R5LoBPexGTvPKP+KXVYhZcwZWtVO8NzqjW0pp2FmCPKz+WX6TsfDcYgf4MhXRKzMHqAvJ9/BZdK3jx0O54DK8l0wjgSz0d1yLe6hg2VUPCvoPB//Ppj7HPQuAxSATAUdehjY=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$RhOgjlVwsS64x0hu+MhGeEDgAJRa20fhXW5DDAc9ZDDPcYTnzRg52/PH7+k8XM4V4gmeuXmhI+qItQpqK14L/lwYHOsCsW+k5wDGWzejcvLV+40Ao7SZdhM+eAVj07U0lrVQrv8FN1x3hxbcnUneAypeHsYq1FgjggcA7NzUa8A=$DINGLJ-ENCODE-END$"},RUNNING:{en:"$DINGLJ-ENCODE-START$PAEwm3EDZMJEGezSy/JVdKIwNSwY7+pa2ECsBQDg5GLYqvwDlVfptPlBO5bFkSJhaaosznmQKIb67PJ5TbmDwgA6ZZ/dfQ153KiY70eLUT35Ol6vrfknVyh0HUx2U+QbVCmhoMnv7NK2tae6b1DLSCAlEyyZGjnj8iqSXXs/3aA=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$H4zs259I7rD1lmgRnMMAPVIpT4P7RAVG8QY5jVcWeOyohDqoqbYAZqT8UsMoHX/bmV/K+p26x33G7MWW74elw5uo2pxZw07MdyYQn9RIhbxo1UvfXag4D4z7yUsWNJPkYbjgrP4eaoEbuhuE1zKKBA5Js4kUpaNEtXotea0zyK4=$DINGLJ-ENCODE-END$"},SENDED:{en:"$DINGLJ-ENCODE-START$HQiAqVR1yVtzAyWiIwHrTrmQniLff6FQuDyBsJMZDk7DS7VOvzA8KbCG8koK7v1coc0B8ZRDfHu91ilz7MFpnhG15tMflhytoi5XJDa7KwkklbmPVq56zQFT17UppHbN8NDHH/76Lk8Q+Ww3qhjYw1kurp9cdy62B8cW2BCBTQo=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$UBcvCsWDfRcjl/XO4covibSexmepvltVtTqMPNpvDtsl6Pm7l1mByl6SXwkn7uHiwO3BscHXvsrcmLTfEfR9zrISBlDusuAAqGJpj0V+Ho3HZgcuI4utY3e3+07ANQhV0bu0j57iBpeiq8TtdOphR/fSiMAxgPR4cEE9YUHicKw=$DINGLJ-ENCODE-END$"},NOTSEND:{en:"$DINGLJ-ENCODE-START$Z2t3vceSNdIHZMMlMpJgbkVme7bTn4j6WbsKBirFHU3MqBW84eo7WBchP4kOhdTZKnT7azU5bcxbXHNM+d4RZo1hArNFC2S85U14SlT5KS+10hh/ZT5HjUCL/Kl9uhWjO2WUNuK3PeuKlOiCzJRQJJ5OMPTOiyVKGr2bRm1p+IQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$jLqiho2EmcW/iw/StyzVkZposOQWXJhtdmamLJcGgJ+dbmuQKoF5F6n3u0YQ1xceBjbWQx0Tt9CzYMgrHflNiMKE4y3nAUWaxGt1phGv3hund/INLcxVwP9zGJ+HTLJrsiAS1Nw6w+RFcKSufjdmKe/wzHzhmCwNlUw6zXqjlsY=$DINGLJ-ENCODE-END$"},WAITTING:{en:"$DINGLJ-ENCODE-START$HTn7m94b39u0gShZWoQ78rOxkgAZFBtglzMJmGGc9lOjy6rY6ISx7n6Qi/E2AOhXleKsuLj3WHoF1BSP5rWFRlHsxQ0Gz+aTu8OSV4QUAswBTFcWF8zyh15KtnBiKXkBgvOVuBpveXgJgckdTw/Tt24TLBQfWWmSYYHkniRJoa0=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$d1VE6NVPD7Mo5IoD3UhYKt7oHTzFHys4GLUS+mF3u8rJoDyjkhChHWRh+9BeeHjpXbG+98zsIwKE9CtfkfINZe8mOgGwAdEgQXb4NEQ9/QUvJAiuMjbMMkS31uYa3z0K3cbN3HTRI1q5lkVxTUwyKYChzlB4sxB2qBq42P1YkYk=$DINGLJ-ENCODE-END$"}}},datasource:{mysql:{DB_SERVER:"$DINGLJ-ENCODE-START$TLxFrhPfe3JVeL6YoV70Xh//RVqgtQzPYVZP4vovVu3vDGXwgySTFRPy6n1wXL7ORi6+nhBOVPtad7XQpCKo23mwbHQ3jhE63B0h8YqWihUEQSJIVsn1ziODsesRh9OWGSAJb+SJX/672C5UaeTW6EEs6ERWwzPyoN6lbIphScs=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$EIqUy1HxmADWCKlgNtpVyyazoJMgGJTiSAT7WV/bJYDMaLF5bFiO0/GssSEqV1nRIVXI63REau2Q66VH+qvzeWQvP6uNEcks9xmDaOuCeGQCxWB1cz66fplSiZU2LszGnLr1bHyXs5quRKp7uKp3qA2Yf3XHKmqVNEs6+vQpgOU=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$Mtw7DV/eWaTu4BEaYb5nvemq9s0HrQBmgayEzNaaD9wSBS9ZvtNvYj/bJF+L4/X6AWvX4uDW+Dv7/3pVwQ0TP3a/CXqMSBIgEpUP1MXCiJcyiSVpy46M5lsu9JvObP3IaEucdIGsCJTNUi86jIPJRgyRZ1fcMGENX8id2a1HlfA=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$NEYm9RzOsqx5M2l1pBD5dYrqB+Ws1vab3ho8k42zfbnxM2cu6tM+HvaSEv0ygSQtTB4VNMs0kFaLlbBvN65lxYIZKgdPUlHPelTsBUQTNqBMBMK/6+n+QMZe8CCgJQmQPwuONfzkclxfdyWCWtBxTl4rfpTkdooFjmODha1blp4=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$B+0c9acbI5/vmQJ9EKSCXIEN/5MIPpyNj4x+gaPlzbk01OSVK6lXLbeBh1HEQns4n0Txw1/Z7JATTFlGnjtFWmnSDaSmEvmmZj29EDBwZ89QTqFdWtXQQ/cT9NbzooWZrMxp0UIpeX9oeWdBPd+ZlWqDSsVRKGmYVssoMR6NO4o=$DINGLJ-ENCODE-END$"},mssql:{DB_SERVER:"$DINGLJ-ENCODE-START$FUb5xnTM9NoTxDozTiubCdAK/y5gi8jGpF8I+hFqbM4VnRbg2rClZholmRIstwTFWuQCKLXI/B4mHu4KQz3AFpLMRVVgB6fF9ekBf4HymCtsYnAduInzivo2QpbPV5UAyB0RCy4A876xmOea7cJP4kBt2A4ziQjZLQ17iBa0pLk=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$kr0ncJNhMe7XELjetN/yqruFzZVkyhp1fl6Ziaa9Gbojeb1qtctRkuiy16MNpBEq6qLlE2A8M2+h2XZsxVe0v4h0hWsnzVeREVNyODkqZGPq+wbj5NQQZh8pfB55YAwPqLSddt2HzaMCU5jOypOYcJDIC4pzcc5YuvaAmHHCtcw=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$C6C2VdfUvZKVRb0oOw3z+dA4eAZJN1xOoVPLXEUQrZGT3wL+7nc4SSMNTkeU9pu06kPtNMDSlp/gpUacJtg4k6pkywQDP+bg+cLgFwzPwkfeUhZLhlA+1Jy3ST89NJcBdfcpJ6ULKhxYljUMG2gahV91YoMwkUWYO/lkTLpJ2sY=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$iV/SYxC1excSoWhZC+CPOag0co0lA+XLAD1f4j37Sm1ZJoQoyIkslbV4Lyj/oCz4MGwHCJuRHDGUEcyZac+QIZeRL7IG+3339bYVCAQDJ+EFcrqKf6d3BGmNguc0t3wmQEqilYYclhkpNAz/nfRmO+x4YW123fUU3plARP7yJNg=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$fnX6ta68q1haDhvz27V5isDz3ZTyYS7wKmT7253DA507Vc0HPVQT9AF0Nhsh/+JJXnzWkRgE4UMdtYhi+aEhhUwkNRc3M34erzAO28x9NXH3A3BNSqi36GzXp5h0vvEScaiiVNz3a02rEApE9gbTFaWkJ3BCMzDW7rjIeh5c20Y=$DINGLJ-ENCODE-END$"},oracle:{DB_SERVER:"$DINGLJ-ENCODE-START$D7B0gSs8dr+YobjN5byrReJ2sp5DnPmoIaKJmkE9LLRTDf5GaGy2iw47v4QExiWAaiA/oLvDlWgZ2WGeqvxsfB4LfRmsJU9QXiR831lX+iouiqG9nJ1loj3wV9kjvgQuv2qneu0HYDX4+ZUcHu6QVQulvzQZ+oSFSL1imGRyj4I=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$cM7U+pgD62WlYQouWQnW4tXQX+uJ5CqyqynbVjOCTKiBt3nwhVQjcmcNoBAVq8Tt4m8ssDrXTza7IWxy0hdV8JzEVXgeRTUql/7AHuQgB50mMIp5EZU+eHNZmU+Vqd6WYM+Yn7cXyg3CeEyFJK9InckgW96gCFlsotnwek7VYPg=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$kpa1h7uyY1HOcuZW3rQY4TUfDvmQP+hm0+1L5btsxgn5m8NBounz84IVqh5bz5vJX4zajkDwcdii18rbN6kLxe1tWXZ/Dy8pjh2LWOn8uezQzp7g5uXd02uMPbPDjTOgw9vjvaKOEuwUmmtDxO1m/Hb6cxtm4ZZtD8V3DOiGyQE=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$Lstikd8NLtgUzGpMEOUT2tAKTocCrBdrevnN4o28lC0JvjhcQVjpRUHcNWuGpByaKIrZghtRBw0cmRtWXYj5mrO8uEugzoqEZ5Aq4WkJ4V7zTVjejahi8q+fBdHZw7K7wdQCiXdvajjp6uhkLGqAvRgDiYrZZ+IgM5BdjFA/kyE=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$XxzFExAOkbpq33LZuB4EMHn3u/uyr9WhaTn8g9G55LcFAR2RCLBNZATiTzIc7+1TVxJNhGm8/d82lSb3B8I2tK3D+jhi3FxlK+7q1KbC5vl3ilXU6fbTIsxy1X5DgT7QWgpQFWtPr5hb2j18sGfmWdd9/v0le9mIIfOt2Wejm4o=$DINGLJ-ENCODE-END$"}},urls:{map:{sit1:["$DINGLJ-ENCODE-START$VslAhDDU8rOl8cN9z5z9vtMuFMCj1GTh03Owywpy7ySUZBLVOaAh0dt8uEOVgBmlzvWAsUp3HbsNFoZHjrJdwF6fy3L8EV+TD/8ngF+qhRFr8xPQGL5IJNvVxQAmAelI8bSfk+RyiXpRMBiwrvGdPyWFegl/webHPjalqvgNQz4=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$IfEOY8WFWSDw6H28vYW4yHC3RkILYVl38wAKj6czF4B3vh+1Fs/Sfi4OxfNO/NyvLvbEJ9SBTe6MCKbby4Sike4TYS8dyixDY2Qo9FWe+t96SkfjILXrGxg9FevzSGIaADMns/Wm0+3SGd0quQmpnZ++xoUPscta624GgFiIBCM=$DINGLJ-ENCODE-END$"],sit2:["$DINGLJ-ENCODE-START$KMuPYIc7NfHiMOZHZgBsoUOjk6u3jX2/PQD71yv2+e39rYyTrdRWAIXYlpqOiI+Dz1eOb2FWHF+K/wcQTGsMD0Ca6idqRAhv2jbHl0XAXY1lq3/pULyjcj9Lq1EUm2XAs70TazIHOMiid69qhis5W0JbfOikiCROpcP3882Hbxc=$DINGLJ-ENCODE-END$"]},sit1:{ticket:"$DINGLJ-ENCODE-START$KuUFoBNv3zlq4nqUY0VSH9mSbIfdp/6fEnnz7P31ovGIaQ42QiUk200Sr0ZF0yJC3w5QrPlL/aat/cBVgDCd70U/UWW1uhQ5f7auewNDF9KwJG4xEcA/2Nz+EM+IMwyjOg29W9h3QIH974lRrj9nA9sO4KR2xn/w/QQrYgwCyfk=$DINGLJ-ENCODE-END$",readModule:"$DINGLJ-ENCODE-START$Z/V0EQ7LBdNhcwRNMm34FuzQnsc8kfsbawRBx/SCG/A4qqDoPqrx13nyFcU0p0vg0XOM8dKkcXe7wF1+hSE+hXvqIY4q8dskbU46kzVgxM0yc48rrKs4Rrp/KsxiB7HDkJaAHzAA69YVqyXctDVgWNOQj4hffkViXKvmPIcftmg=$DINGLJ-ENCODE-END$",defaultVersionData:"$DINGLJ-ENCODE-START$nG2EWtFGtoha3OJwgKswsNpE2ivWA/wpm4FhRPl+fhSvraZv1S/dVLw9SC3HR0YpsfEKoBBXmrpponmHQ/DTOaU0QlGQOfE/0ZalyZj6NgRPJ07haVcc/d5gpDwOd7RSlTx4JGSILrYDud5AJMh5burboarFRf8WfIpz1Jb/Ros=$DINGLJ-ENCODE-END$",versions:"$DINGLJ-ENCODE-START$P/VlDDrWadIGfiI+E7dSXILzDPgRS2HEC4fiFoWapFM7tq4jYY3a0/296NsKTJVODurpvLt6IsIGAjgsCtS0TuwDtRNmePfa5Cy/nRkxCzGMQ7u5bKTWxyt7UGI3Aryh0ex9KtJ6OoP/sQE9EIYj1VNQVzA8Jbc3ULL8TnrQ6QY=$DINGLJ-ENCODE-END$",readVersion:"$DINGLJ-ENCODE-START$TkOyVWb46D2WRp2AmE+L66hV51vgvt2JqYPW63yd3o44gxE19wUmLgKewPMQ6yEJ3JQz4CwIxNLPC3aZfhqjRDQWpthMa/b8PhFVKBBCnauWc6Qh670dBuGzee/gV8Bv6tsafeOgqNHzni8S7Hc0yor0pQ2n5tMoq6rrhqnefLc=$DINGLJ-ENCODE-END$",defaultValuePath:"$DINGLJ-ENCODE-START$HZcsdY2GplzbnnJVvs9XS9gN1pDYJaH4zYGrIrdkry1mv61wdWdzqYp5qU40CG2axaXkZQp/AlUqMubfvJhEqg8YLTW71TBWGTuK+Ebb2gUVwK1vmlDPzmkUxDnlPHTVbotZXpcKUHxq/aKW3LPoH3RScsY6DWXktAPZTY+0GTU=$DINGLJ-ENCODE-END$"},sit2:{ticket:"$DINGLJ-ENCODE-START$gePyGhaTdFLUKekXyDMkYhoMMRVUvLqn0AhSNEyJZKJaWF7Ui+KYkMZoulPL12xV5yHEsuUZLcAQO7/DgeXdAEPVGYqJmuxSWRoikcT6/RA7uZETqk2qqql6RqBc8fK0sxi0cego8NfHdh8Z2iPC12tVK7bMvURlr24WC8Be6Nc=$DINGLJ-ENCODE-END$",readModule:"$DINGLJ-ENCODE-START$edGz6SVRVRnPTnaQ/LrrKC2NhdTTQtJOr0dA/aaNYO3dSeGZnEfY/FTCBuyuSVAbxAbanGhKBbJzjypKHuYNMI4Pce/dWsPxPFnJpuoSGiJZjNL9Fdi84JQlJdQBnLYZsO0lpPyPyz8Y45RYIE6wL7iGEMkgjTKgTvJPnCuvIxE=$DINGLJ-ENCODE-END$",defaultVersionData:"$DINGLJ-ENCODE-START$MmRyg19woPave0J4/rMHEAEAh5hCk7G4SNrHx6aCYo4I6Ig56uMwnpudvnWgpsv6R0TqPPardzuSK4HkYplZB/5U5aChql4QLI1nEOKmDeQCMr2bj3zyV6+OquP44+5YDJ4iVJqJDhfX1WYUszYO+ImFqHUxd4eRYblXMPpFjq8=$DINGLJ-ENCODE-END$",versions:"$DINGLJ-ENCODE-START$munjyv7w5Mtvd4GFHgfZFL2v0qb0aYBO8Lpw4rAou/Ot0yROsK0t3Mdlm1ObdrOyuORv3AARQXbOz7+wfohmw+mGqBcE63fUK/mh3PcoX+Ys2Mfj7PKlEHTRvBpTND05FcVAYOZ1otrkVz026V/8Hzj8+PiAw7mVKxjiJwT89s4=$DINGLJ-ENCODE-END$",readVersion:"$DINGLJ-ENCODE-START$MBLbUMxxe1PSUrFDZnacpQ1rKhLEdMqXUQ5lxfWE1JrkBszv53e1vAsitY1GTZ7pxlHcRmudVeGInSjUL1FSLGZxyTbdHvoTdASFBj3Yd4P5sKi6onkH84df4m0UkziBIcjVu3qvMd4bTV6UcW1o60OAnR4eNZSwLjFO6HaIW14=$DINGLJ-ENCODE-END$",defaultValuePath:"$DINGLJ-ENCODE-START$OvaeWd9Wc73whbSqnVimyfQdH2gA7stcuAC5/2cZkjnr0jXgsmy84b+lUdE+w5r45MUPMKoFl5ypRNlkAqbrj3KRzLiA/+9f1Mu/kM8NMF1v7IxLzf0pzx0CulwTDZEXQ9HhwsEroAr4zHnpDXdbbH/bbkVx7sb1faxGazYbDFo=$DINGLJ-ENCODE-END$"}},author:"dingljcn"}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}(()=>{"use strict";i(168),i(374),i(904),i(816),i(176);const t={};String.prototype.encrypt=function(e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if($get(t,this))return $get(t,this);let i=`'${xt.flag_start}`,n=this;for(;;){if(n.length<100){i+=$rsa.encrypt(n,e);break}{let t=n.substring(0,100);n=n.substring(100),i=`${i}${$rsa.encrypt(t,e)}${xt.flag_split}`}}return $set(t,this,`${i}${xt.flag_end}'`),$get(t,this)};const e=window.toCache(((t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)())=>{let i=t.startsWith(xt.flag_start);if(i!=t.endsWith(xt.flag_end))return t;if(i){let i=t.replace(xt.flag_start,"").replace(xt.flag_end,""),n="";for(let t of i.split(xt.flag_split))n+=$rsa.decrypt(t,e);return n}return t}),"rsa-decode-map");String.prototype.decrypt=function(){return e(this)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t=2e3){$tip.info(this,t,"10%")},String.prototype.warn=function(t=2e3){$tip.warn(this,t,"10%")},String.prototype.err=function(t=2e3){$tip.err(this,t,"10%")},i(599),Window.prototype.mergePath=function(t,e=window.dinglj_home.decrypt()){return e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),`${e}${t}`},Window.prototype.timer=function(t,e){let i=30,n=null;e&&("number"==typeof e?i=e:n=e),i=i<30?30:i;let o=setInterval((()=>{t(n)&&clearInterval(o)}),i)},Window.prototype.linkCss=function(t,e=window.dinglj_home.decrypt()){const i=document.createElement("style"),n=mergePath(t,e);i.innerHTML=$net.get(n),document.head.appendChild(i)};var n="0123456789abcdefghijklmnopqrstuvwxyz";function o(t){return n.charAt(t)}function r(t,e){return t&e}function s(t,e){return t|e}function a(t,e){return t^e}function l(t,e){return t&~e}function u(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function c(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var p,h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function d(t){var e,i,n="";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),n+=h.charAt(i>>6)+h.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),n+=h.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),n+=h.charAt(i>>2)+h.charAt((3&i)<<4));(3&n.length)>0;)n+="=";return n}function f(t){var e,i="",n=0,r=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var s=h.indexOf(t.charAt(e));s<0||(0==n?(i+=o(s>>2),r=3&s,n=1):1==n?(i+=o(r<<2|s>>4),r=15&s,n=2):2==n?(i+=o(r),i+=o(s>>2),r=3&s,n=3):(i+=o(r<<2|s>>4),i+=o(15&s),n=0))}return 1==n&&(i+=o(r<<2)),i}var g,v={decode:function(t){var e;if(void 0===g){for(g=Object.create(null),e=0;e<64;++e)g["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(g["-"]=62,g._=63,e=0;e<9;++e)g["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],n=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=g[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);n|=r,++o>=4?(i[i.length]=n>>16,i[i.length]=n>>8&255,i[i.length]=255&n,n=0,o=0):n<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:i[i.length]=n>>10;break;case 3:i[i.length]=n>>16,i[i.length]=n>>8&255}return i},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=v.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return v.decode(t)}},y=1e13,m=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,n,o=this.buf,r=o.length;for(i=0;i<r;++i)(n=o[i]*t+e)<y?e=0:n-=(e=0|n/y)*y,o[i]=n;e>0&&(o[i]=e)},t.prototype.sub=function(t){var e,i,n=this.buf,o=n.length;for(e=0;e<o;++e)(i=n[e]-t)<0?(i+=y,t=1):t=0,n[e]=i;for(;0===n[n.length-1];)n.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,i=e[e.length-1].toString(),n=e.length-2;n>=0;--n)i+=(y+e[n]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*y+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),w=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,b=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function E(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var x,D=function(){function t(e,i){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var n="",o=t;o<e;++o)if(n+=this.hexByte(this.get(o)),!0!==i)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var n=this.get(i);if(n<32||n>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i="",n=t;n<e;++n)i+=String.fromCharCode(this.get(n));return i},t.prototype.parseStringUTF=function(t,e){for(var i="",n=t;n<e;){var o=this.get(n++);i+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,n,o="",r=t;r<e;)i=this.get(r++),n=this.get(r++),o+=String.fromCharCode(i<<8|n);return o},t.prototype.parseTime=function(t,e,i){var n=this.parseStringISO(t,e),o=(i?w:b).exec(n);return o?(i&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n},t.prototype.parseInteger=function(t,e){for(var i,n=this.get(t),o=n>127,r=o?255:0,s="";n==r&&++t<e;)n=this.get(t);if(0==(i=e-t))return o?-1:0;if(i>4){for(s=n,i<<=3;0==(128&(+s^r));)s=+s<<1,--i;s="("+i+" bit)\n"}o&&(n-=256);for(var a=new m(n),l=t+1;l<e;++l)a.mulAdd(256,this.get(l));return s+a.toString()},t.prototype.parseBitString=function(t,e,i){for(var n=this.get(t),o="("+((e-t-1<<3)-n)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),l=s==e-1?n:0,u=7;u>=l;--u)r+=a>>u&1?"1":"0";if(r.length>i)return o+E(r,i)}return o+r},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return E(this.parseStringISO(t,e),i);var n=e-t,o="("+n+" byte)\n";n>(i/=2)&&(e=t+i);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return n>i&&(o+="…"),o},t.prototype.parseOID=function(t,e,i){for(var n="",o=new m,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===n)if((o=o.simplify())instanceof m)o.sub(80),n="2."+o.toString();else{var l=o<80?o<40?0:1:2;n=l+"."+(o-40*l)}else n+="."+o.toString();if(n.length>i)return E(n,i);o=new m,r=0}}return r>0&&(n+=".incomplete"),n},t}(),T=function(){function t(t,e,i,n,o){if(!(n instanceof S))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=i,this.tag=n,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return E(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return E(this.stream.parseStringISO(e,e+i),t);case 30:return E(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var i=0,n=this.sub.length;i<n;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===i)return null;e=0;for(var n=0;n<i;++n)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof D?e:new D(e,0);var n=new D(i),o=new S(i),r=t.decodeLength(i),s=i.pos,a=s-n.pos,l=null,u=function(){var e=[];if(null!==r){for(var n=s+r;i.pos<n;)e[e.length]=t.decode(i);if(i.pos!=n)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(i);if(o.tag.isEOC())break;e[e.length]=o}r=s-i.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)l=u();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=i.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");l=u();for(var c=0;c<l.length;++c)if(l[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){l=null}if(null===l){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);i.pos=s+Math.abs(r)}return new t(n,a,r,o,l)},t}(),S=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new m;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],N=(1<<26)/C[C.length-1],O=function(){function t(t,e,i){null!=t&&("number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,r=!1,s="",a=this.t,l=this.DB-a*this.DB%e;if(a-- >0)for(l<this.DB&&(i=this[a]>>l)>0&&(r=!0,s=o(i));a>=0;)l<e?(i=(this[a]&(1<<l)-1)<<e-l,i|=this[--a]>>(l+=this.DB-e)):(i=this[a]>>(l-=e)&n,l<=0&&(l+=this.DB,--a)),i>0&&(r=!0),r&&(s+=o(i));return r?s:"0"},t.prototype.negate=function(){var e=A();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+G(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=A();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new R(e):new I(e),this.exp(t,i)},t.prototype.clone=function(){var t=A();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,n=this.DB-t*this.DB%8,o=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[o++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==o&&(128&this.s)!=(128&i)&&++o,(o>0||i!=this.s)&&(e[o++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=A();return this.bitwiseTo(t,r,e),e},t.prototype.or=function(t){var e=A();return this.bitwiseTo(t,s,e),e},t.prototype.xor=function(t){var e=A();return this.bitwiseTo(t,a,e),e},t.prototype.andNot=function(t){var e=A();return this.bitwiseTo(t,l,e),e},t.prototype.not=function(){for(var t=A(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=A();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=A();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+u(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=c(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,s)},t.prototype.clearBit=function(t){return this.changeBit(t,l)},t.prototype.flipBit=function(t){return this.changeBit(t,a)},t.prototype.add=function(t){var e=A();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=A();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=A();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=A();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=A();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=A(),i=A();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,n,o=t.bitLength(),r=q(1);if(o<=0)return r;i=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new R(e):e.isEven()?new $(e):new I(e);var s=[],a=3,l=i-1,u=(1<<i)-1;if(s[1]=n.convert(this),i>1){var c=A();for(n.sqrTo(s[1],c);a<=u;)s[a]=A(),n.mulTo(c,s[a-2],s[a]),a+=2}var p,h,d=t.t-1,f=!0,g=A();for(o=G(t[d])-1;d>=0;){for(o>=l?p=t[d]>>o-l&u:(p=(t[d]&(1<<o+1)-1)<<l-o,d>0&&(p|=t[d-1]>>this.DB+o-l)),a=i;0==(1&p);)p>>=1,--a;if((o-=a)<0&&(o+=this.DB,--d),f)s[p].copyTo(r),f=!1;else{for(;a>1;)n.sqrTo(r,g),n.sqrTo(g,r),a-=2;a>0?n.sqrTo(r,g):(h=r,r=g,g=h),n.mulTo(g,s[p],r)}for(;d>=0&&0==(t[d]&1<<o);)n.sqrTo(r,g),h=r,r=g,g=h,--o<0&&(o=this.DB-1,--d)}return n.revert(r)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var n=e.clone(),o=this.clone(),r=q(1),s=q(0),a=q(0),l=q(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),i?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),i?(a.isEven()&&l.isEven()||(a.addTo(this,a),l.subTo(e,l)),a.rShiftTo(1,a)):l.isEven()||l.subTo(e,l),l.rShiftTo(1,l);n.compareTo(o)>=0?(n.subTo(o,n),i&&r.subTo(a,r),s.subTo(l,s)):(o.subTo(n,o),i&&a.subTo(r,a),l.subTo(s,l))}return 0!=o.compareTo(t.ONE)?t.ZERO:l.compareTo(e)>=0?l.subtract(e):l.signum()<0?(l.addTo(e,l),l.signum()<0?l.add(e):l):l},t.prototype.pow=function(t){return this.exp(t,new P)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var o=e.getLowestSetBit(),r=i.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),i.rShiftTo(r,i));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=i.getLowestSetBit())>0&&i.rShiftTo(o,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return r>0&&i.lShiftTo(r,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(i[0]==C[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<C.length;){for(var n=C[e],o=e+1;o<C.length&&n<N;)n*=C[o++];for(n=i.modInt(n);e<o;)if(n%C[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var n;if(16==i)n=4;else if(8==i)n=3;else if(256==i)n=8;else if(2==i)n=1;else if(32==i)n=5;else{if(4!=i)return void this.fromRadix(e,i);n=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==n?255&+e[o]:k(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+n>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=n)>=this.DB&&(s-=this.DB))}8==n&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,n=this.DB-i,o=(1<<n)-1,r=Math.floor(t/this.DB),s=this.s<<i&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>n|s,s=(this[a]&o)<<i;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,o=this.DB-n,r=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&r)<<o,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&r)<<o),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var n=this.abs(),o=e.abs(),r=n.t;for(i.t=r+o.t;--r>=0;)i[r]=0;for(r=0;r<o.t;++r)i[r+n.t]=n.am(0,o[r],i,r,0,n.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,n){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=i&&i.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=A());var s=A(),a=this.s,l=e.s,u=this.DB-G(o[o.t-1]);u>0?(o.lShiftTo(u,s),r.lShiftTo(u,n)):(o.copyTo(s),r.copyTo(n));var c=s.t,p=s[c-1];if(0!=p){var h=p*(1<<this.F1)+(c>1?s[c-2]>>this.F2:0),d=this.FV/h,f=(1<<this.F1)/h,g=1<<this.F2,v=n.t,y=v-c,m=null==i?A():i;for(s.dlShiftTo(y,m),n.compareTo(m)>=0&&(n[n.t++]=1,n.subTo(m,n)),t.ONE.dlShiftTo(c,m),m.subTo(s,s);s.t<c;)s[s.t++]=0;for(;--y>=0;){var w=n[--v]==p?this.DM:Math.floor(n[v]*d+(n[v-1]+g)*f);if((n[v]+=s.am(0,w,n,y,0,c))<w)for(s.dlShiftTo(y,m),n.subTo(m,n);n[v]<--w;)n.subTo(m,n)}null!=i&&(n.drShiftTo(c,i),a!=l&&t.ZERO.subTo(i,i)),n.t=c,n.clamp(),u>0&&n.rShiftTo(u,n),a<0&&t.ZERO.subTo(n,n)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var n=A(),o=A(),r=i.convert(this),s=G(e)-1;for(r.copyTo(n);--s>=0;)if(i.sqrTo(n,o),(e&1<<s)>0)i.mulTo(o,r,n);else{var a=n;n=o,o=a}return i.revert(n)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=q(i),o=A(),r=A(),s="";for(this.divRemTo(n,o,r);o.signum()>0;)s=(i+r.intValue()).toString(t).substr(1)+s,o.divRemTo(n,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var n=this.chunkSize(i),o=Math.pow(i,n),r=!1,s=0,a=0,l=0;l<e.length;++l){var u=k(e,l);u<0?"-"==e.charAt(l)&&0==this.signum()&&(r=!0):(a=i*a+u,++s>=n&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(i,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,n){if("number"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),i.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,i){var n,o,r=Math.min(t.t,this.t);for(n=0;n<r;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(o=t.s&this.DM,n=r;n<this.t;++n)i[n]=e(this[n],o);i.t=this.t}else{for(o=this.s&this.DM,n=r;n<t.t;++n)i[n]=e(o,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var n=t.ONE.shiftLeft(e);return this.bitwiseTo(n,i,n),n},t.prototype.addTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var n=Math.min(this.t+t.t,e);for(i.s=0,i.t=n;n>0;)i[--n]=0;for(var o=i.t-this.t;n<o;++n)i[n+this.t]=this.am(0,t[n],i,n,0,this.t);for(o=Math.min(t.t,e);n<o;++n)this.am(0,t[n],i,n,0,e-n);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),n=i.getLowestSetBit();if(n<=0)return!1;var o=i.shiftRight(n);(e=e+1>>1)>C.length&&(e=C.length);for(var r=A(),s=0;s<e;++s){r.fromInt(C[Math.floor(Math.random()*C.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(i)){for(var l=1;l++<n&&0!=a.compareTo(i);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=A();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(i.compareTo(n)<0){var o=i;i=n,n=o}var r=i.getLowestSetBit(),s=n.getLowestSetBit();if(s<0)e(i);else{r<s&&(s=r),s>0&&(i.rShiftTo(s,i),n.rShiftTo(s,n));var a=function(){(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),i.compareTo(n)>=0?(i.subTo(n,i),i.rShiftTo(1,i)):(n.subTo(i,n),n.rShiftTo(1,n)),i.signum()>0?setTimeout(a,0):(s>0&&n.lShiftTo(s,n),setTimeout((function(){e(n)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,i,n,o){if("number"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);var r=this,a=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(i)?setTimeout((function(){o()}),0):setTimeout(a,0)};setTimeout(a,0)}else{var l=[],u=7&e;l.length=1+(e>>3),i.nextBytes(l),u>0?l[0]&=(1<<u)-1:l[0]=0,this.fromString(l,256)}},t}(),P=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),R=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),I=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=A();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(O.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=A();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),$=function(){function t(t){this.m=t,this.r2=A(),this.q3=A(),O.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=A();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function A(){return new O(null)}function L(t,e){return new O(t,e)}var j="undefined"!=typeof navigator;j&&"Microsoft Internet Explorer"==navigator.appName?(O.prototype.am=function(t,e,i,n,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var l=32767&this[t],u=this[t++]>>15,c=a*l+u*s;o=((l=s*l+((32767&c)<<15)+i[n]+(1073741823&o))>>>30)+(c>>>15)+a*u+(o>>>30),i[n++]=1073741823&l}return o},x=30):j&&"Netscape"!=navigator.appName?(O.prototype.am=function(t,e,i,n,o,r){for(;--r>=0;){var s=e*this[t++]+i[n]+o;o=Math.floor(s/67108864),i[n++]=67108863&s}return o},x=26):(O.prototype.am=function(t,e,i,n,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var l=16383&this[t],u=this[t++]>>14,c=a*l+u*s;o=((l=s*l+((16383&c)<<14)+i[n]+o)>>28)+(c>>14)+a*u,i[n++]=268435455&l}return o},x=28),O.prototype.DB=x,O.prototype.DM=(1<<x)-1,O.prototype.DV=1<<x,O.prototype.FV=Math.pow(2,52),O.prototype.F1=52-x,O.prototype.F2=2*x-52;var M,V,B=[];for(M="0".charCodeAt(0),V=0;V<=9;++V)B[M++]=V;for(M="a".charCodeAt(0),V=10;V<36;++V)B[M++]=V;for(M="A".charCodeAt(0),V=10;V<36;++V)B[M++]=V;function k(t,e){var i=B[t.charCodeAt(e)];return null==i?-1:i}function q(t){var e=A();return e.fromInt(t),e}function G(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}O.ZERO=q(0),O.ONE=q(1);var J,H,z=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,n;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[i],this.S[i]=n;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),F=null;if(null==F){F=[],H=0;var K=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var U=new Uint32Array(256);for(window.crypto.getRandomValues(U),K=0;K<U.length;++K)F[H++]=255&U[K]}var W=0,X=function(t){if((W=W||0)>=256||H>=256)window.removeEventListener?window.removeEventListener("mousemove",X,!1):window.detachEvent&&window.detachEvent("onmousemove",X);else try{var e=t.x+t.y;F[H++]=255&e,W+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",X,!1):window.attachEvent&&window.attachEvent("onmousemove",X))}function Y(){if(null==J){for(J=new z;H<256;){var t=Math.floor(65536*Math.random());F[H++]=255&t}for(J.init(F),H=0;H<F.length;++H)F[H]=0;H=0}return J.next()}var Q=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Y()},t}(),Z=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,i=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var i=[],n=t.length-1;n>=0&&e>0;){var o=t.charCodeAt(n--);o<128?i[--e]=o:o>127&&o<2048?(i[--e]=63&o|128,i[--e]=o>>6|192):(i[--e]=63&o|128,i[--e]=o>>6&63|128,i[--e]=o>>12|224)}i[--e]=0;for(var r=new Q,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);i[--e]=s[0]}return i[--e]=2,i[--e]=0,new O(i)}(t,e);if(null==i)return null;var n=this.doPublic(i);if(null==n)return null;for(var o=n.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16),this.d=L(i,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,i,n,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16),this.d=L(i,16),this.p=L(n,16),this.q=L(o,16),this.dmp1=L(r,16),this.dmq1=L(s,16),this.coeff=L(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var i=new Q,n=t>>1;this.e=parseInt(e,16);for(var o=new O(e,16);;){for(;this.p=new O(t-n,1,i),0!=this.p.subtract(O.ONE).gcd(o).compareTo(O.ONE)||!this.p.isProbablePrime(10););for(;this.q=new O(n,1,i),0!=this.q.subtract(O.ONE).gcd(o).compareTo(O.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(O.ONE),a=this.q.subtract(O.ONE),l=s.multiply(a);if(0==l.gcd(o).compareTo(O.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(l),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=L(t,16),i=this.doPrivate(e);return null==i?null:function(t,e){for(var i=t.toByteArray(),n=0;n<i.length&&0==i[n];)++n;if(i.length-n!=e-1||2!=i[n])return null;for(++n;0!=i[n];)if(++n>=i.length)return null;for(var o="";++n<i.length;){var r=255&i[n];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&i[n+1]),++n):(o+=String.fromCharCode((15&r)<<12|(63&i[n+1])<<6|63&i[n+2]),n+=2)}return o}(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var n=new Q,o=t>>1;this.e=parseInt(e,16);var r=new O(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(O.ONE),n=s.q.subtract(O.ONE),o=e.multiply(n);0==o.gcd(r).compareTo(O.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(n),s.coeff=s.q.modInverse(s.p),setTimeout((function(){i()}),0)):setTimeout(a,0)},l=function(){s.q=A(),s.q.fromNumberAsync(o,1,n,(function(){s.q.subtract(O.ONE).gcda(r,(function(t){0==t.compareTo(O.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(l,0)}))}))},u=function(){s.p=A(),s.p.fromNumberAsync(t-o,1,n,(function(){s.p.subtract(O.ONE).gcda(r,(function(t){0==t.compareTo(O.ONE)&&s.p.isProbablePrime(10)?setTimeout(l,0):setTimeout(u,0)}))}))};setTimeout(u,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,i){var n=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var i=e-t.length-6,n="",o=0;o<i;o+=2)n+="ff";return L("0001"+n+"00"+t,16)}((_[i]||"")+e(t).toString(),this.n.bitLength()/4);if(null==n)return null;var o=this.doPrivate(n);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,i){var n=L(e,16),o=this.doPublic(n);return null==o?null:function(t){for(var e in _)if(_.hasOwnProperty(e)){var i=_[e],n=i.length;if(t.substr(0,n)==i)return t.substr(n)}return t}(o.toString(16).replace(/^1f+00/,""))==i(t).toString()},t}(),_={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},tt={};tt.lang={extend:function(t,e,i){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i){var o;for(o in i)t.prototype[o]=i[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var i=s[o],n=e[i];"function"==typeof n&&n!=Object.prototype[i]&&(t[i]=n)}})}catch(t){}r(t.prototype,i)}}};var et={};void 0!==et.asn1&&et.asn1||(et.asn1={}),et.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var n="",o=0;o<i;o++)n+="f";e=new O(n,16).xor(t).add(O.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=et.asn1,i=e.DERBoolean,n=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,l=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,p=e.DERPrintableString,h=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var E=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+E+":"))throw"undefined key: "+E;if("bool"==E)return new i(t[E]);if("int"==E)return new n(t[E]);if("bitstr"==E)return new o(t[E]);if("octstr"==E)return new r(t[E]);if("null"==E)return new s(t[E]);if("oid"==E)return new a(t[E]);if("enum"==E)return new l(t[E]);if("utf8str"==E)return new u(t[E]);if("numstr"==E)return new c(t[E]);if("prnstr"==E)return new p(t[E]);if("telstr"==E)return new h(t[E]);if("ia5str"==E)return new d(t[E]);if("utctime"==E)return new f(t[E]);if("gentime"==E)return new g(t[E]);if("seq"==E){for(var x=t[E],D=[],T=0;T<x.length;T++){var S=w(x[T]);D.push(S)}return new v({array:D})}if("set"==E){for(x=t[E],D=[],T=0;T<x.length;T++)S=w(x[T]),D.push(S);return new y({array:D})}if("tag"==E){var C=t[E];if("[object Array]"===Object.prototype.toString.call(C)&&3==C.length){var N=w(C[2]);return new m({tag:C[0],explicit:C[1],obj:N})}var O={};if(void 0!==C.explicit&&(O.explicit=C.explicit),void 0!==C.tag&&(O.tag=C.tag),void 0===C.obj)throw"obj shall be specified for 'tag'.";return O.obj=w(C.obj),new m(O)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},et.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",i=parseInt(t.substr(0,2),16),n=(e=Math.floor(i/40)+"."+i%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);n+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new O(n,2).toString(10),n="")}return e},et.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new O(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);return n},et.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var i=e.length/2;if(i>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},et.asn1.DERAbstractString=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},tt.lang.extend(et.asn1.DERAbstractString,et.asn1.ASN1Object),et.asn1.DERAbstractTime=function(t){et.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var n=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+n(String(o.getMonth()+1),2)+n(String(o.getDate()),2)+n(String(o.getHours()),2)+n(String(o.getMinutes()),2)+n(String(o.getSeconds()),2);if(!0===i){var a=o.getMilliseconds();if(0!=a){var l=n(String(a),3);s=s+"."+(l=l.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,n,o,r){var s=new Date(Date.UTC(t,e-1,i,n,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},tt.lang.extend(et.asn1.DERAbstractTime,et.asn1.ASN1Object),et.asn1.DERAbstractStructured=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},tt.lang.extend(et.asn1.DERAbstractStructured,et.asn1.ASN1Object),et.asn1.DERBoolean=function(){et.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},tt.lang.extend(et.asn1.DERBoolean,et.asn1.ASN1Object),et.asn1.DERInteger=function(t){et.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DERInteger,et.asn1.ASN1Object),et.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}et.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var i="0"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+="0";var n="";for(i=0;i<t.length-1;i+=8){var o=t.substr(i,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),n+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",i=0;i<t.length;i++)1==t[i]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},tt.lang.extend(et.asn1.DERBitString,et.asn1.ASN1Object),et.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}et.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},tt.lang.extend(et.asn1.DEROctetString,et.asn1.DERAbstractString),et.asn1.DERNull=function(){et.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},tt.lang.extend(et.asn1.DERNull,et.asn1.ASN1Object),et.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new O(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};et.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=n},this.setValueName=function(t){var e=et.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},tt.lang.extend(et.asn1.DERObjectIdentifier,et.asn1.ASN1Object),et.asn1.DEREnumerated=function(t){et.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DEREnumerated,et.asn1.ASN1Object),et.asn1.DERUTF8String=function(t){et.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},tt.lang.extend(et.asn1.DERUTF8String,et.asn1.DERAbstractString),et.asn1.DERNumericString=function(t){et.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},tt.lang.extend(et.asn1.DERNumericString,et.asn1.DERAbstractString),et.asn1.DERPrintableString=function(t){et.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},tt.lang.extend(et.asn1.DERPrintableString,et.asn1.DERAbstractString),et.asn1.DERTeletexString=function(t){et.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},tt.lang.extend(et.asn1.DERTeletexString,et.asn1.DERAbstractString),et.asn1.DERIA5String=function(t){et.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},tt.lang.extend(et.asn1.DERIA5String,et.asn1.DERAbstractString),et.asn1.DERUTCTime=function(t){et.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},tt.lang.extend(et.asn1.DERUTCTime,et.asn1.DERAbstractTime),et.asn1.DERGeneralizedTime=function(t){et.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},tt.lang.extend(et.asn1.DERGeneralizedTime,et.asn1.DERAbstractTime),et.asn1.DERSequence=function(t){et.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},tt.lang.extend(et.asn1.DERSequence,et.asn1.DERAbstractStructured),et.asn1.DERSet=function(t){et.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},tt.lang.extend(et.asn1.DERSet,et.asn1.DERAbstractStructured),et.asn1.DERTaggedObject=function(t){et.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},tt.lang.extend(et.asn1.DERTaggedObject,et.asn1.ASN1Object);var it,nt,ot=(it=function(t,e){return it=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},it(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}it(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),rt=function(t){function e(i){var n=t.call(this)||this;return i&&("string"==typeof i?n.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&n.parsePropertiesFrom(i)),n}return ot(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,n=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===p){var i="0123456789ABCDEF";for(p={},e=0;e<16;++e)p[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)p[i.charAt(e)]=e;for(e=0;e<8;++e)p[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=p[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(n[n.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return n}(t):v.unarmor(t),o=T.decode(n);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=L(e,16),i=o.sub[2].getHexStringValue(),this.e=parseInt(i,16);var r=o.sub[3].getHexStringValue();this.d=L(r,16);var s=o.sub[4].getHexStringValue();this.p=L(s,16);var a=o.sub[5].getHexStringValue();this.q=L(a,16);var l=o.sub[6].getHexStringValue();this.dmp1=L(l,16);var u=o.sub[7].getHexStringValue();this.dmq1=L(u,16);var c=o.sub[8].getHexStringValue();this.coeff=L(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=L(e,16),i=h.sub[1].getHexStringValue(),this.e=parseInt(i,16)}else e=o.sub[0].getHexStringValue(),this.n=L(e,16),i=o.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new et.asn1.DERInteger({int:0}),new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e}),new et.asn1.DERInteger({bigint:this.d}),new et.asn1.DERInteger({bigint:this.p}),new et.asn1.DERInteger({bigint:this.q}),new et.asn1.DERInteger({bigint:this.dmp1}),new et.asn1.DERInteger({bigint:this.dmq1}),new et.asn1.DERInteger({bigint:this.coeff})]};return new et.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return d(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new et.asn1.DERSequence({array:[new et.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new et.asn1.DERNull]}),e=new et.asn1.DERSequence({array:[new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e})]}),i=new et.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new et.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return d(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(i,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(Z),st="undefined"!=typeof process?null===(nt=process.env)||void 0===nt?void 0:nt.npm_package_version:void 0;const at=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new rt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(f(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return d(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,i){try{return d(this.getKey().sign(t,e,i))}catch(t){return!1}},t.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,f(e),i)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new rt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=st,t}();function lt(t,e){return"object"==typeof t?function(t,e){for(let i of Object.keys(t))t[i]=lt(t[i],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const i=new at;return i.setPrivateKey(e),i.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const i=new at;return i.setPrivateKey(e),i.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return lt(t,e)},i(506),i(676),i(894),window.$net={},window.$net.get=function(t,e={callback:null,async:!1}){const i=new XMLHttpRequest;return i.open("GET",t,!!e.async),i.send(),4==i.readyState&&200==i.status&&e.callback&&e.callback(i.responseText),i.responseText},window.$store={},window.$store.getStorage=function(t,e=void 0){let i=localStorage.getItem(t);if(i){const n=JSON.parse(i);return n.timeout>0&&Date.now()-n.savetime>n.timeout?(`本地缓存${t}已过期`.warn(),e):n.data}return e},window.$store.setStorage=function(t,e,i=-1){let n={savetime:Date.now(),timeout:i,data:e};localStorage.setItem(t,JSON.stringify(n))},i(228);class ut{getImg(t){return""}emit(t,e){}}window.BasicProperty=ut;const ct=ut;class pt extends ct{}window.AbstractComponent=pt;const ht=pt;var dt;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu",t.FileTreeX="I-File-Tree",t.TreeView="I-Tree-View",t.TextAreaX="I-Text-Area"}(dt||(dt={})),window.ComponentType=dt;const ft=dt;class gt extends ct{constructor(){super(...arguments),this.components={},this.fieldNames=[],this.methodNames=[],this.computes=[],this.watchs=[],this.propMap=new Map}getInstance(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null}getFields(){const t=this,e=this.getInstance();return function(){const i={$class:e,vid:"",name:t.name};for(let n of t.fieldNames)$set(i,n,$get(e,n));return i}}getMethods(){const t=this.getInstance(),e={getImg:function(t){return mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):()=>{}};for(let i of this.methodNames)e[i]=$get(t,i);return e}getComputeds(){let t={};for(let e of this.computes)t[e.fieldName]=e.func;return t}setProp(t,e){this.propMap.set(t,e)}getProps(){const t={};return this.propMap.forEach(((e,i)=>{$set(t,i,e)})),t}getMounted(){return function(){const t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(()=>t),t.vid),t.appMounted()}}getTemplate(){return $get(this.getInstance(),this.template)}getWatchs(){const t=this.getInstance();let e={};for(let i of this.watchs)e[i.target]={handler:$get(t,i.funcName),deep:i.deep};return e}getComponents(){return this.components}}window.MetaData=gt;const vt=gt;let yt=null;const mt=new Map;window.$registry={},$registry.getComponent=function(t){return t&&yt?(mt.set(t,yt),yt=null,mt.get(t)):yt||(yt=new vt,yt)},$registry.buildComponent=function(t){const e=mt.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){const e=mt.get(t),i=$registry.buildComponent(t);return window.registVue(e.name,i)};class wt{constructor(t,e){this.en=t,this.zh=e}}window.LangItem=wt;const bt=wt;var Et;window.RightMenu=class{constructor(t,e=function(t,e){},i=function(t,e){return!0}){this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=i}},function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(Et||(Et={})),window.RsaConst=Et;const xt=Et;window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,i){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,i=!1){return function(n,o){$registry.getComponent().propMap.set(o,{type:t,default:e,required:i})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,i){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,i){$registry.getComponent().computes.push({fieldName:i,func:t})}},window.Component=function(t){return function(e,i){$registry.getComponent().components=t}},window.Watch=function(t,e=!0){return function(i,n){$registry.getComponent().watchs.push({target:t,deep:e,funcName:n})}},window.Service=function(t,e,i){return function(n){const o=$registry.getComponent(e);o.clazz=t,o.name=e,o.setProp("iProps",{type:Object,default:{},required:!!i})}};var Dt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Tt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 按钮 --\x3e\n    <div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>'}getClass(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}}getStyle(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}}};Dt([Template],Tt.prototype,"template",void 0),Dt([Method],Tt.prototype,"getClass",null),Dt([Method],Tt.prototype,"getStyle",null),Dt([Compute((t=>t.iProps.singleClick||(t=>{})))],Tt.prototype,"$singleClick",void 0),Dt([Compute((t=>t.iProps.size||"normal"))],Tt.prototype,"$size",void 0),Dt([Compute((t=>t.iProps.type||"primary"))],Tt.prototype,"$type",void 0),Tt=Dt([Service(Tt,ft.ButtonX,!0)],Tt),$registry.buildAndRegist(ft.ButtonX);var St=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ct=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 文本输入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        \x3c!-- 文本输入框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',this.value=""}mounted(){$queue.on("dinglj-v-input-text::clear",(()=>{this.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(()=>{window.byId(this.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}};St([Mounted],Ct.prototype,"mounted",null),St([Template],Ct.prototype,"template",void 0),St([Field],Ct.prototype,"value",void 0),St([Method],Ct.prototype,"getStyle",null),St([Method],Ct.prototype,"setValue",null),St([Compute((t=>t.iProps.size||"normal"))],Ct.prototype,"$size",void 0),St([Compute((t=>t.iProps.caption||""))],Ct.prototype,"$caption",void 0),St([Compute((t=>t.iProps.placeholder||`请输入${t.$caption}`))],Ct.prototype,"$placeholder",void 0),Ct=St([Service(Ct,ft.InputX,!0)],Ct),$registry.buildAndRegist(ft.InputX);var Nt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ot=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 开关 --\x3e\n    <div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',this.active=!1}getStyle(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}}getClass(){return{"dinglj-v-switch-btn":!0,active:this.active}}onclicked(){this.active=!this.active,this.active?this.postText&&`已切换至: ${this.postText}`.info():this.preText&&`已切换至: ${this.preText}`.info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})}};Nt([Template],Ot.prototype,"template",void 0),Nt([Field],Ot.prototype,"active",void 0),Nt([Method],Ot.prototype,"getStyle",null),Nt([Method],Ot.prototype,"getClass",null),Nt([Method],Ot.prototype,"onclicked",null),Nt([Compute((t=>t.iProps.size||"normal"))],Ot.prototype,"xSize",void 0),Nt([Compute((t=>t.iProps.preTxt||""))],Ot.prototype,"preText",void 0),Nt([Compute((t=>t.iProps.postTxt||""))],Ot.prototype,"postText",void 0),Ot=Nt([Service(Ot,ft.SwitchX,!0)],Ot),$registry.buildAndRegist(ft.SwitchX);var Pt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Rt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 下拉框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        \x3c!-- 下拉框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        \x3c!-- 下拉框选项集合 --\x3e\n        <div class="dinglj-v-combo-selections">\n            \x3c!-- 下拉框选项 --\x3e\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',this.value=null}setValue(t){this.value!=t&&(this.value=t,this.$onChange(t))}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}$onChange(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})}};Pt([Template],Rt.prototype,"template",void 0),Pt([Field],Rt.prototype,"value",void 0),Pt([Method],Rt.prototype,"setValue",null),Pt([Method],Rt.prototype,"getStyle",null),Pt([Method],Rt.prototype,"$onChange",null),Pt([Compute((t=>t.iProps.list||[]))],Rt.prototype,"$list",void 0),Pt([Compute((t=>t.iProps.size||"normal"))],Rt.prototype,"$size",void 0),Pt([Compute((t=>t.iProps.caption||""))],Rt.prototype,"$caption",void 0),Pt([Compute((t=>t.iProps.placeholder||`请选择${t.$caption}`))],Rt.prototype,"$placeholder",void 0),Pt([Compute((t=>t.iProps.getLabel||(t=>t)))],Rt.prototype,"$getLabel",void 0),Pt([Compute((t=>t.iProps.getValue||(t=>t)))],Rt.prototype,"$getValue",void 0),Rt=Pt([Service(Rt,ft.ComboX,!0)],Rt),$registry.buildAndRegist(ft.ComboX);var It=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let $t=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 导航菜单 --\x3e\n    <div id="dinglj-v-navigator">\n        \x3c!-- 每一个菜单 --\x3e\n        <div class="dinglj-v-navigator-item" v-for="item in list" @click="setValue(item)" :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',this.value=null}mounted(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])}setValue(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))}};It([Mounted],$t.prototype,"mounted",null),It([Template],$t.prototype,"template",void 0),It([Field],$t.prototype,"value",void 0),It([Method],$t.prototype,"setValue",null),It([Compute((t=>(null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value)))],$t.prototype,"validItem",void 0),It([Compute((t=>t.iProps.list||[]))],$t.prototype,"list",void 0),It([Compute((t=>t.iProps.default||(t.list.length>0?t.list[0]:null)))],$t.prototype,"default",void 0),It([Compute((t=>t.iProps.getCaption||(t=>t)))],$t.prototype,"getCaption",void 0),$t=It([Service($t,ft.NavigatorX,!0)],$t),$registry.buildAndRegist(ft.NavigatorX);var At=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Lt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 纵向滚动视图 --\x3e\n    <div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{top:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,height:`${this.size}00%`}}};At([Template],Lt.prototype,"template",void 0),At([Compute((t=>t.iProps.size||0))],Lt.prototype,"size",void 0),At([Compute((t=>t.iProps.index||0))],Lt.prototype,"index",void 0),At([Method],Lt.prototype,"getStyle",null),Lt=At([Service(Lt,ft.ScrollerY,!0)],Lt),$registry.buildAndRegist(ft.ScrollerY);var jt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Mt=class extends ht{constructor(){super(...arguments),this.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content" :active="active"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',this.active=null}};jt([Template],Mt.prototype,"template",void 0),jt([Field],Mt.prototype,"active",void 0),jt([Compute((t=>({list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}})))],Mt.prototype,"navigatorProps",void 0),jt([Compute((t=>({size:t.list.length,index:t.list.indexOf(t.active)})))],Mt.prototype,"scrollyProps",void 0),jt([Compute((t=>t.iProps.list||[]))],Mt.prototype,"list",void 0),Mt=jt([Service(Mt,ft.NavigatorView,!0)],Mt),$registry.buildAndRegist(ft.NavigatorView);var Vt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Bt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- Tab --\x3e\n    <div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        \x3c!-- Tab 页标题 --\x3e\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\x3c!-- Tab 页标题的浮动下划线 --\x3e\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        \x3c!-- Tab 页具体内容 --\x3e\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',this.value=null}mounted(){Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(()=>{const t=(this.index+1+this.list.length)%this.list.length;this.clicked(this.list[t],t)}),this.vid),$queue.on("tab-panel:to",(t=>{const e=this.list.filter((e=>JSON.stringify(e)==JSON.stringify(t)));e.length>0&&this.clicked(e[0],this.list.indexOf(e[0]))}),this.vid)}getClass(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}}getId(t){return`${this.vid}-${t}`}clicked(t,e){t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),window.timer((t=>{const i=window.selector(`#${t.vid} .dinglj-v-tab-float`);if(!i)return!1;const n=i[0],o=window.byId(t.getId(e));return o&&(n.style.width=`${o.offsetWidth}px`,n.style.left=`${o.offsetLeft}px`),!0}),this))}};Vt([Mounted],Bt.prototype,"mounted",null),Vt([Template],Bt.prototype,"template",void 0),Vt([Field],Bt.prototype,"value",void 0),Vt([Method],Bt.prototype,"getClass",null),Vt([Method],Bt.prototype,"getId",null),Vt([Method],Bt.prototype,"clicked",null),Vt([Compute((t=>(!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value))))],Bt.prototype,"index",void 0),Vt([Compute((t=>{if(!t.iProps.list)return[];let e=!1;for(let i of t.iProps.list)if(JSON.stringify(t.value)==JSON.stringify(i)){e=!0;break}return e||t.clicked(t.iProps.list[0],0),t.iProps.list}))],Bt.prototype,"list",void 0),Vt([Compute((t=>t.iProps.getLabel||(t=>t)))],Bt.prototype,"getLabel",void 0),Bt=Vt([Service(Bt,ft.TabPanelX,!0)],Bt),$registry.buildAndRegist(ft.TabPanelX);var kt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let qt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 横向滚动视图 --\x3e\n    <div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{left:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,width:`${this.size}00%`}}};kt([Template],qt.prototype,"template",void 0),kt([Compute((t=>t.iProps.size||0))],qt.prototype,"size",void 0),kt([Compute((t=>t.iProps.index||0))],qt.prototype,"index",void 0),kt([Method],qt.prototype,"getStyle",null),qt=kt([Service(qt,ft.ScrollerX,!0)],qt),$registry.buildAndRegist(ft.ScrollerX);var Gt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Jt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- Tab 页视图 --\x3e\n    <div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',this.value=null,this.tabPanelId=""}mounted(){$queue.on("tab-view:next",(()=>{$queue.sendMsg("tab-panel:next",null,this.tabPanelId)}),this.vid),$queue.on("tab-view:to",(t=>{$queue.sendMsg("tab-panel:to",t,this.tabPanelId)}),this.vid)}tabPanelLoaded(t){this.tabPanelId=t.value}};Gt([Mounted],Jt.prototype,"mounted",null),Gt([Template],Jt.prototype,"template",void 0),Gt([Compute((t=>({size:t.list.length,index:t.index})))],Jt.prototype,"scrollxProps",void 0),Gt([Compute((t=>({list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}})))],Jt.prototype,"tabPanelProps",void 0),Gt([Field],Jt.prototype,"value",void 0),Gt([Field],Jt.prototype,"tabPanelId",void 0),Gt([Method],Jt.prototype,"tabPanelLoaded",null),Gt([Compute((t=>t.list.indexOfIgnoreCase(t.value)))],Jt.prototype,"index",void 0),Gt([Compute((t=>t.iProps.list||[]))],Jt.prototype,"list",void 0),Jt=Gt([Service(Jt,ft.TabView,!0)],Jt),$registry.buildAndRegist(ft.TabView);var Ht=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let zt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 表格 --\x3e\n    <div class="dinglj-v-table" :id="vid" :data-title="title">\n        \x3c!-- 表头 --\x3e\n        <div class="dinglj-v-thead dinglj-v-tr">\n            \x3c!-- 复选框 --\x3e\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            \x3c!-- 序号 --\x3e\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            \x3c!-- 表头的每一列 --\x3e\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                \x3c!-- 表头的右键菜单 --\x3e\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        \x3c!-- 表体 --\x3e\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                \x3c!-- 表格的每一行内容 --\x3e\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    \x3c!-- 复选框 --\x3e\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    \x3c!-- 序号 --\x3e\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    \x3c!-- 表格中的每一列 --\x3e\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    \x3c!-- 表格每一行的右键菜单 --\x3e\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                \x3c!-- 表格空白处的右键菜单 --\x3e\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',this.cache={},this.checkAll=!1,this.checkedList=[],this.bestWidthCache=!1}mounted(){const t=this;window.timer((()=>{const e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)}genHeadProps(t){return{bindId:`${this.vid}-Col-${this.getColumnKey(t)}`,data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}}genLineProps(t,e){return{bindId:`${this.vid}-${e}`,data:t,list:this.rowMenus}}genBodyProps(){return{bindId:`${this.vid}-Body`,data:this.list,list:this.bodyMenus}}checkOne(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))}getClass(t){const e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];let i=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed";const n={"dinglj-v-cell":!0};return n[e]=!0,n[i]=!0,this.cache[e]=n,n}getStyle(t){let e;return e=""==t?80:this.getBestWidth()[t],{width:`${e}px`}}doCheckAll(){this.checkedList.length=0,this.checkAll||this.checkedList.push(...this.list),this.checkAll=!this.checkAll}getBestWidth(){if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(let t of this.columns){const e=this.getColumnKey(t),i=this.getColumnLabel(t);let n=[window.calcTxtWidth(`${i}`)];n.push(...this.list.map((t=>{const i=this.getCell(t,e);return window.calcTxtWidth(i)})));const o=Math.max(...n);this.bestWidthCache[e]=o+20}return this.bestWidthCache}exportToExcel(){const t=this;window.timer((function(){const e=window.byId(t.vid);if(!e)return!1;let i="";for(let t of e.children[0].children)t.classList.contains("dinglj-v-table-select")||(i+=t.innerText);i+="\n";for(let t of e.children[1].children[0].children){for(let e of t.children)e.classList.contains("dinglj-v-table-select")||(i+=e.innerText);i+="\n"}return console.log(i),!0}))}};Ht([Mounted],zt.prototype,"mounted",null),Ht([Template],zt.prototype,"template",void 0),Ht([Field],zt.prototype,"cache",void 0),Ht([Field],zt.prototype,"checkAll",void 0),Ht([Field],zt.prototype,"checkedList",void 0),Ht([Field],zt.prototype,"bestWidthCache",void 0),Ht([Method],zt.prototype,"genHeadProps",null),Ht([Method],zt.prototype,"genLineProps",null),Ht([Method],zt.prototype,"genBodyProps",null),Ht([Method],zt.prototype,"checkOne",null),Ht([Method],zt.prototype,"getClass",null),Ht([Method],zt.prototype,"getStyle",null),Ht([Method],zt.prototype,"doCheckAll",null),Ht([Method],zt.prototype,"getBestWidth",null),Ht([Method],zt.prototype,"exportToExcel",null),Ht([Compute((t=>t.iProps.title||""))],zt.prototype,"title",void 0),Ht([Compute((t=>t.iProps.flexColumns||[]))],zt.prototype,"flexColumns",void 0),Ht([Compute((t=>t.iProps.list||[]))],zt.prototype,"list",void 0),Ht([Compute((t=>t.iProps.sequenceNum||!0))],zt.prototype,"sequenceNum",void 0),Ht([Compute((t=>t.iProps.selectable||!0))],zt.prototype,"selectable",void 0),Ht([Compute((t=>t.iProps.columns||[]))],zt.prototype,"columns",void 0),Ht([Compute((t=>t.iProps.getColumnKey||(t=>t)))],zt.prototype,"getColumnKey",void 0),Ht([Compute((t=>t.iProps.getColumnLabel||(t=>t)))],zt.prototype,"getColumnLabel",void 0),Ht([Compute((t=>t.iProps.getCell||((e,i)=>{let n=t.iProps.getColumnKey(i);return $get(e,n)})))],zt.prototype,"getCell",void 0),Ht([Compute((t=>t.iProps.rowMenus||[]))],zt.prototype,"rowMenus",void 0),Ht([Compute((t=>t.iProps.bodyMenus||[]))],zt.prototype,"bodyMenus",void 0),Ht([Compute((t=>t.iProps.titleColumnMenus||[]))],zt.prototype,"titleColumnMenus",void 0),zt=Ht([Service(zt,ft.TableX,!0)],zt),$registry.buildAndRegist(ft.TableX);var Ft=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Kt=class extends ht{constructor(){super(...arguments),this.template="\x3c!-- 进度条 --\x3e\n    <div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        \x3c!-- 上方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        \x3c!-- 进度条本体 --\x3e\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        \x3c!-- 下方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>"}getContainerStyle(){return{"--bar-height":this.height}}getProgressStyle(){return window.timer((t=>{const e=window.byId(t.vid);return!!e&&(e.findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent,!0)}),this),{width:"0%"}}};Ft([Template],Kt.prototype,"template",void 0),Ft([Method],Kt.prototype,"getContainerStyle",null),Ft([Method],Kt.prototype,"getProgressStyle",null),Ft([Compute((t=>(t.iProps.height||5)+"px"))],Kt.prototype,"height",void 0),Ft([Compute((t=>t.iProps.percent||"100%"))],Kt.prototype,"percent",void 0),Ft([Compute((t=>t.iProps.txtPosition||"TopLeft"))],Kt.prototype,"position",void 0),Ft([Compute((t=>t.iProps.caption||""))],Kt.prototype,"caption",void 0),Kt=Ft([Service(Kt,ft.ProgressX,!0)],Kt),$registry.buildAndRegist(ft.ProgressX);var Ut=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Wt=class extends ht{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 对话框这招背景遮罩 --\x3e\n        <div class="dinglj-v-modal-mask"></div>\n        \x3c!-- 对话框 --\x3e\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            \x3c!-- 标题 --\x3e\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            \x3c!-- 内容 --\x3e\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            \x3c!-- 按钮 --\x3e\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',this.position={x:-1,y:-1}}mounted(){window.addEventListener("mouseup",this.cleanXY)}getStyle(){return{width:`${this.width}px`,height:`${this.height}px`}}closeModal(){this.iProps.onClose()}recordXY(t){const e=window.byId(this.vid);if(!e)return void this.cleanXY();let i=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(i.left),y:t.screenY-parseInt(i.top)}}moveXY(t){if(window.getVal(this.position,"x",-1)>=0){const e=window.byId(this.vid);e.style.left=t.screenX-this.position.x+"px",e.style.top=t.screenY-this.position.y+"px"}}cleanXY(){this.position={x:-1,y:-1}}};Ut([Mounted],Wt.prototype,"mounted",null),Ut([Template],Wt.prototype,"template",void 0),Ut([Field],Wt.prototype,"position",void 0),Ut([Method],Wt.prototype,"getStyle",null),Ut([Method],Wt.prototype,"closeModal",null),Ut([Method],Wt.prototype,"recordXY",null),Ut([Method],Wt.prototype,"moveXY",null),Ut([Method],Wt.prototype,"cleanXY",null),Ut([Compute((t=>({type:"cancel",singleClick:function(e){t.cancel()}})))],Wt.prototype,"cancelProps",void 0),Ut([Compute((t=>({singleClick:function(e){t.ok()}})))],Wt.prototype,"okProps",void 0),Ut([Compute((t=>t.iProps.display||!1))],Wt.prototype,"display",void 0),Ut([Compute((t=>t.iProps.ok||t.closeModal))],Wt.prototype,"ok",void 0),Ut([Compute((t=>t.iProps.cancel||t.closeModal))],Wt.prototype,"cancel",void 0),Ut([Compute((t=>t.iProps.width||600))],Wt.prototype,"width",void 0),Ut([Compute((t=>t.iProps.height||300))],Wt.prototype,"height",void 0),Wt=Ut([Service(Wt,ft.ModalX,!0)],Wt),$registry.buildAndRegist(ft.ModalX);var Xt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Yt=class extends ht{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 右键菜单 --\x3e\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            \x3c!-- 右键菜单集合 --\x3e\n            <div v-for="item in $list">\n                \x3c!-- 每一个右键菜单 --\x3e\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',this.display=!1,this.position={top:"0px",left:"0px",opacity:"0"}}mounted(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()}binding(){const t=this;window.timer((()=>!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){t.$list&&0!=t.$list.length&&($queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){let e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)})))})),!0))),500)}hidden(){this.position.opacity="0",this.display=!1}conditionIfDisplay(t){return t.isDisplay(this.$ctx,this.element)}execCommand(t){t.event(this.$ctx,this.element),this.hidden()}};Xt([Mounted],Yt.prototype,"mounted",null),Xt([Template],Yt.prototype,"template",void 0),Xt([Field],Yt.prototype,"display",void 0),Xt([Field],Yt.prototype,"element",void 0),Xt([Field],Yt.prototype,"position",void 0),Xt([Method],Yt.prototype,"binding",null),Xt([Method],Yt.prototype,"hidden",null),Xt([Method],Yt.prototype,"conditionIfDisplay",null),Xt([Method],Yt.prototype,"execCommand",null),Xt([Compute((t=>t.iProps.list||[]))],Yt.prototype,"$list",void 0),Xt([Compute((t=>t.iProps.data||{}))],Yt.prototype,"$ctx",void 0),Yt=Xt([Service(Yt,ft.ContextMenuX,!0)],Yt),$registry.buildAndRegist(ft.ContextMenuX);var Qt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Zt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 树形导航菜单 --\x3e\n    <div :style="{ \'margin-left\': root ? \'0px\' : indent + \'px\' }" v-for="item in list" :data-title="item.label">\n        <div class="dinglj-v-tree-label" @click.stop="expand($event, item)">\n            <img class="dinglj-v-menu-icon" v-if="item.type == \'entry\'" :src="getImg(\'folder.png\')"/>\n            <img class="dinglj-v-menu-icon" v-else :src="getImg(\'excel.png\')"/>\n            <span>{{ item.label }}</span>\n        </div>\n        <div class="dinglj-v-tree-children">\n            <div>\n                <i-file-tree :i-props="iProps4Children(item)"></i-file-tree>\n            </div>\n        </div>\n    </div>'}iProps4Children(t){const e=this;return{root:!1,indent:this.indent,list:t.children,parent:t,select:function(t){console.log(t),e.iProps.parent&&t.unshift(e.iProps.parent),e.iProps.select(t)}}}expand(t,e){if("entry"==e.type){let e=t.target;e.classList.contains("dinglj-v-tree-label")?e=e.nextElementSibling:"SPAN"==e.tagName&&e.parentElement.classList.contains("dinglj-v-tree-label")&&(e=e.parentElement.nextElementSibling),e.classList.contains("expand")?e.classList.remove("expand"):e.classList.add("expand")}else{const t=[e];this.iProps.parent&&t.unshift(this.iProps.parent),this.iProps.select(t)}}};Qt([Template],Zt.prototype,"template",void 0),Qt([Compute((t=>null==t.iProps.root))],Zt.prototype,"root",void 0),Qt([Compute((t=>t.iProps.list||[]))],Zt.prototype,"list",void 0),Qt([Compute((t=>t.iProps.indent||20))],Zt.prototype,"indent",void 0),Qt([Method],Zt.prototype,"iProps4Children",null),Qt([Method],Zt.prototype,"expand",null),Zt=Qt([Service(Zt,ft.FileTreeX,!0)],Zt),$registry.buildAndRegist(ft.FileTreeX);var _t=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let te=class extends ht{constructor(){super(...arguments),this.temp='\x3c!-- 树形视图 --\x3e\n    <div class="dinglj-v-tree-view">\n        <div class="dinglj-v-tree-nav">\n            <i-file-tree :i-props="iProps4Tree()"></i-file-tree>\n        </div>\n        <div class="dinglj-v-spliter" @mousedown="mousedown"></div>\n        <div class="dinglj-v-main-view">\n            <i-tab-view :i-props="tabProps()">\n                <div v-for="item in selectList">\n                    <slot name="content" :item="item.value"></slot>\n                </div>\n            </i-tab-view>\n        </div>\n    </div>',this.selectList=[],this.position={x:-1,width:0}}mounted(){const t=this;window.addEventListener("mousemove",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`})),window.addEventListener("mouseup",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`,t.position={x:-1,width:0}}))}mousedown(t){const e=window.selector(".dinglj-v-tree-nav")[0];this.position={x:t.clientX,width:e?e.offsetWidth:0}}iProps4Tree(){const t=this;return{list:t.iProps.list,indent:t.iProps.indent,parent:t.iProps.parent,root:t.iProps.root,select:function(e){e.length>0&&(t.selected=e[e.length-1],t.selectList.pushNew(t.selected)),t.iProps.select(e,t.selected)}}}tabProps(){return{list:this.selectList.filter((t=>t)).map((t=>t.label))}}};_t([Mounted],te.prototype,"mounted",null),_t([Template],te.prototype,"temp",void 0),_t([Field],te.prototype,"selectList",void 0),_t([Field],te.prototype,"selected",void 0),_t([Field],te.prototype,"position",void 0),_t([Method],te.prototype,"mousedown",null),_t([Method],te.prototype,"iProps4Tree",null),_t([Method],te.prototype,"tabProps",null),te=_t([Service(te,ft.TreeView,!0)],te),$registry.buildAndRegist(ft.TreeView);var ee=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let ie=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 文本域入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text-area" :caption="caption" :style="getStyle()" :id="vid">\n        <textarea\n            :placeholder="placeholder"\n            v-model="value"\n            @keyup.enter="setValue(value, \'enter\')"\n            @input="setValue(value, \'input\')"\n            @blur="setValue(value, \'blur\')"\n            @change="setValue(value, \'change\')"/>\n    </div>',this.value=""}mounted(){this.value=this.iProps.defaultValue||""}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}getStyle(){return{"--text-area-height":this.height}}};ee([Mounted],ie.prototype,"mounted",null),ee([Template],ie.prototype,"template",void 0),ee([Field],ie.prototype,"value",void 0),ee([Compute((t=>t.iProps.caption))],ie.prototype,"caption",void 0),ee([Compute((t=>t.iProps.placeholder))],ie.prototype,"placeholder",void 0),ee([Compute((t=>{const e=t.iProps.height||0;if(isNaN(e))return e;const i=parseInt(e);return e<100?"100px":`${i}px`}))],ie.prototype,"height",void 0),ee([Method],ie.prototype,"setValue",null),ee([Method],ie.prototype,"getStyle",null),ie=ee([Service(ie,ft.TextAreaX,!0)],ie),$registry.buildAndRegist(ft.TextAreaX);const ne={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"};class oe{constructor(t,e){if(!t)return;t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:(this.status=e.UNKNOWN,console.error(`未知的状态 {${t.stats}}, 结果 {${t.result}}, 请联系 dinglj 补充`)):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:(this.status=e.UNKNOWN,console.error(`未知的状态 {${t.stats}}, 请联系 dinglj 补充`)):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:(this.status=e.UNKNOWN,console.error(`未知的结果 {${t.result}}, 请联系 dinglj 补充`)),this.status==e.UNKNOWN&&console.error(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;let i=t.ticketId||t.log;this.ticket=i?parseInt(i):i,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}static getCaption(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}}}oe._fieldMap_=ne,oe._fields_=Object.keys(ne);class re{exec(t,e,i,n,o=""){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,n):this.func(t,e,i,o);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(o)}return!1}}window.defunc("RowFilter",((t,e,i)=>{let n=new re;return n.isRow=!0,n.groupRegExp=t,n.tabRegExp=e,n.func=i,n})),window.defunc("ColFilter",((t,e,i)=>{let n=new re;return n.isRow=!1,n.groupRegExp=t,n.tabRegExp=e,Array.isArray(i)?(n.ignoreColumns=i,n.type="array"):"function"==typeof i?(n.func=i,n.type="function"):(n.ignoreColumns=[i],n.type="single"),n}));class se{exec(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""}}window.defunc("GroupStrategy",((t,e,i)=>{let n=new se;return n.fieldKey=t,n.expectValue=e,n.groupName=i,Array.isArray(e)?n.expectValue=e:n.expectValue=[e],n})),window.defunc("GroupStrategy",(t=>{let e=new se;return e.func=t,e}));class ae{exec(t,e,i,n){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,i,n):this.expectValue.compareBy(i.get(this.fieldKey),n.get(this.fieldKey))}}window.defunc("OrderTicket",((t,e,i,n)=>{let o=new ae;return o.groupRegExp=t,o.tabRegExp=e,o.fieldKey=i,Array.isArray(n)?o.expectValue=n:o.expectValue=[n],o})),window.defunc("OrderTicket",((t,e,i)=>{let n=new ae;return n.groupRegExp=t,n.tabRegExp=e,n.func=i,n}));class le{exec(t,e){let i=this.groupRegExp.test(t);if(this.reverse&&(i=!i),i){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""}}window.defunc("TabPageStrategy",((t,e,i,n)=>window.TabPageStrategy(t,e,i,n,!1))),window.defunc("TabPageStrategy",((t,e,i,n,o)=>{const r=new le;return r.groupRegExp=t,r.fieldKey=e,r.tabName=n,r.reverse=o,Array.isArray(i)?r.expectValue=i:r.expectValue=[i],r})),window.defunc("TabPageStrategy",((t,e)=>window.TabPageStrategy(t,e,!1))),window.defunc("TabPageStrategy",((t,e,i)=>{const n=new le;return n.groupRegExp=t,n.func=e,n.reverse=i,n}));const ue={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",needbuild:"需打包",devtype:"开发类型",dinglj_note:"备注"};class ce{static getCaption(t){return ce.fieldNames.includesIgnoreCase(t)?ce.fields[t]:t}constructor(t=null){if(null==t)return;const e=$store.getStorage("dinglj-v-ticket-cache",{});for(let i of t.children){const t=i.className,n=i.innerText.trim();if(this.set(t,n),"id".equalsIgnoreCase(t)&&e[n]){const t=Object.keys(e[n]);for(let i of t)this.set(i,e[n][i])}}}static forLocalTest(t){let e=new ce;const i=$store.getStorage("dinglj-v-ticket-cache",{});for(let n of Object.keys(t)){const o=$get(t,n);if(e.set(n,o),"id".equalsIgnoreCase(n)&&i[o]){const t=Object.keys(i[o]);for(let n of t)e.set(n,i[o][n])}}return e}set(t,e){ce.fieldNames.includesIgnoreCase(t)?this[t]=e:ce.unknownColumn.includesIgnoreCase(t)||(`不存在的列: ${t}`.warn(),ce.unknownColumn.push(t))}get(t){return $get(this,t)?$get(this,t):""}}ce.fields=ue,ce.fieldNames=Object.keys(ue),ce.fieldValues=Object.values(ue),ce.unknownColumn=["sel"],Window.prototype.$systemConfig=window.toCache((()=>$rsa.decryptObject(window.encodeConfig())),"dinglj-system-config")("dinglj-system-config"),Window.prototype.$userConfig=window.toCache((()=>window.readConfig()),"dinglj-user-config")("dinglj-user-config"),window.isMatch&&!window.isMatch()||(window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css"));const pe=decodeURI(window.location.href);let he,de,fe="";function ge(){if(function(){if(null==he){de=window.getConfigOrDefault("urls",{}),he=window.getConfigOrDefault("urls.map",{}),he||(he={});for(let t in he){const e=he[t]||[];for(let i of e)if(pe.includesIgnoreCase(i))return void(fe=t)}}}(),de[fe])return de[fe];console.error("当前网址尚未支持脚本, 请联系 dinglj 处理")}function ve(){return ge().ticket}var ye=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let me=class extends ht{constructor(){super(...arguments),this.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input :i-props="keywordProps"></i-input>\n            <i-combo style="margin-left: 10px" :i-props="statusProps"></i-combo>\n            <i-combo style="margin-left: 10px; --width: 400px" :i-props="versionProps"></i-combo>\n            <div class="dinglj-v-flex"></div>\n            <i-switch :i-props="modeProps"></i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input :i-props="cardCntProps"></i-input>\n        </div>\n    </div>',this.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:"7"},this.versionList=[]}onFilterChange(t,e){this.emit("on-change",t)}};ye([Template],me.prototype,"template",void 0),ye([Field],me.prototype,"filter",void 0),ye([Field],me.prototype,"versionList",void 0),ye([Compute((t=>({caption:"搜索",placeholder:"请输入关键字",onChange:e=>t.filter.keyword=e.value})))],me.prototype,"keywordProps",void 0),ye([Compute((t=>({caption:"状态",list:Object.values(t.status),getValue:t=>t.en,getLabel:t=>t.zh,onChange:e=>t.filter.status=e.value})))],me.prototype,"statusProps",void 0),ye([Compute((t=>({caption:"版本",placeholder:"默认为当前版本",list:t.versionNames,onChange:e=>t.filter.status=e.value})))],me.prototype,"versionProps",void 0),ye([Compute((t=>({preTxt:"卡片视图",postTxt:"表格视图",onChange:e=>t.filter.mode=e.value?"table":"card"})))],me.prototype,"modeProps",void 0),ye([Compute((t=>({caption:"每列的卡片数",placeholder:"请输入每列的卡片数量",defaultValue:"7",onChange:e=>t.filter.cardCnt=e.value})))],me.prototype,"cardCntProps",void 0),ye([Compute((t=>window.getConfigOrDefault("constant.status",[],!0)))],me.prototype,"status",void 0),ye([Compute((t=>window.isDev()?window.readVersion():(0==t.versionList.length&&(t.versionList=JSON.parse($net.get(ge().versions))),t.versionList)))],me.prototype,"versions",void 0),ye([Compute((t=>t.versions.map((t=>t.erpVersion))))],me.prototype,"versionNames",void 0),ye([Watch("filter")],me.prototype,"onFilterChange",null),me=ye([Service(me,"CL-Filter")],me);const we=$registry.buildComponent("CL-Filter");var be=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ee=class extends ht{constructor(){super(...arguments),this.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="(statusName, idx) in statusNames">\n            <template v-if="iProps.isActive || idx == 0">\n                <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                    <div class="card-line card-title">\n                        <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                        <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                        <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                    </div>\n                    <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                        <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getLineProgressProps(_case_)"></i-progress>\n                        <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getStepProgressProps(_case_)"></i-progress>\n                    </div>\n                    <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                        <div>耗时: {{ _case_.timeCost }}</div>\n                    </div>\n                </div>\n            </template>\n        </div>\n    </div>'}getLineProgressProps(t){return{caption:`行进度: ${t.currentRow}/${t.totalRow}, `,percent:`${t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0}%`}}getStepProgressProps(t){return{caption:`步数进度: ${t.currentStep}/${t.totalStep}, `,percent:`${t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0}%`}}openCardTicket(t){window.open(`${ve()}/${t.ticket}`,`#${t.ticket}`)}};be([Template],Ee.prototype,"template",void 0),be([Method],Ee.prototype,"getLineProgressProps",null),be([Method],Ee.prototype,"getStepProgressProps",null),be([Method],Ee.prototype,"openCardTicket",null),be([Compute((t=>t.iProps.groupData||{}))],Ee.prototype,"groupData",void 0),be([Compute((t=>t.iProps.statusNames||[]))],Ee.prototype,"statusNames",void 0),be([Compute((t=>t.iProps.cardCnt||"5"))],Ee.prototype,"cardCnt",void 0),Ee=be([Service(Ee,"AppCard",!0)],Ee);const xe=$registry.buildComponent("AppCard");var De=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Te=class extends ht{constructor(){super(...arguments),this.template='<div class="mode-container table">\n        <template v-for="(statusName, idx) in statusNames">\n            <div v-if="iProps.isActive || idx == 0" style="height: 100%">\n                <i-table class="every-tab" :i-props="tableProps(statusName)"></i-table>\n            </div>\n        </template>\n    </div>'}tableProps(t){return{list:this.groupData[t],columns:this.getColumnsToDisplay(t),flexColumns:["caseName"],getColumnKey:t=>t.en,getColumnLabel:t=>t.zh,getCell:(t,e)=>e instanceof bt?$get(t,e.en):$get(t,e),loaded:t=>{window.selector(`#${t.vid} .dinglj-v-tbody .dinglj-v-cell.ticket`).forEach((t=>{const e=t.innerText.trim();e&&(t.innerHTML=`<div onclick="window.open('${ve()}/${e}', '#${e}')">#${e}</div>`)}))}}}getColumnsToDisplay(t){if(!this.groupData||!this.groupData[t]||!this.groupData[t].length)return[];let e=window.getConfigOrDefault("table.ignoreColumn",[],!1);const i=this.groupData[t];return oe._fields_.filter((t=>{if(e.includesIgnoreCase(t))return!1;for(let e of i)if(e&&e[t])return!0;return!1})).map((t=>new bt(t,oe._fieldMap_[t])))}};De([Template],Te.prototype,"template",void 0),De([Method],Te.prototype,"tableProps",null),De([Method],Te.prototype,"getColumnsToDisplay",null),De([Compute((t=>t.iProps.groupData||{}))],Te.prototype,"groupData",void 0),De([Compute((t=>t.iProps.statusNames||[]))],Te.prototype,"statusNames",void 0),Te=De([Service(Te,"AppTable",!0)],Te);const Se=$registry.buildComponent("AppTable");var Ce=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};null!=ge()&&(window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n        <i-nav-view :i-props="navProps">\n            <template v-slot:before>\n                <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n            </template>\n            <template #content="{ active }" id="case-list-view">\n                <i-tab-view v-for="componentName in componentNames" :i-props="tabViewProps(componentName, active)">\n                    <xcard  v-if="filter.data.mode == \'card\'" :i-props="cardModeProps(componentName, active)"></xcard>\n                    <xtable v-else :i-props="tableModeProps(componentName, active)"></xtable>\n                </i-tab-view>\n            </template>\n            <template v-slot:after></template>\n        </i-nav-view>\n    </div>');let Ne=class extends ht{constructor(){super(...arguments),this.allVersionDatas={},this.filter={data:{mode:"card",cardCnt:"7",versions:"",keyword:"",status:""}}}mounted(){const t=this;window.displayData=function(){console.log(t)}}groupByStatus(t){return window.groupBy(this.groupByComponent[t],(t=>t.status.en))}statusNames(t){const e=this.groupByStatus(t);let i=window.getConfigOrDefault("order.preferStatus",[],!1).map((t=>t.toLowerCase()));return Object.keys(e).sort(((t,e)=>i.compareBy(t.toLowerCase(),e.toLowerCase())))}tabTitle(t){return this.statusNames(t).map((t=>new bt(t,this.status[t].zh)))}tabViewProps(t,e){return{list:this.tabTitle(t),isActive:t==e,getLabel:t=>t.zh}}cardModeProps(t,e){return{isActive:t==e,statusNames:this.statusNames(t),groupData:this.groupByStatus(t),cardCnt:this.filter.data.cardCnt}}tableModeProps(t,e){return{isActive:t==e,statusNames:this.statusNames(t),groupData:this.groupByStatus(t)}}};Ce([Component({xfilter:we,xcard:xe,xtable:Se}),Mounted],Ne.prototype,"mounted",null),Ce([Field],Ne.prototype,"allVersionDatas",void 0),Ce([Field],Ne.prototype,"filter",void 0),Ce([Method],Ne.prototype,"groupByStatus",null),Ce([Method],Ne.prototype,"statusNames",null),Ce([Method],Ne.prototype,"tabTitle",null),Ce([Compute((t=>({list:t.componentNames})))],Ne.prototype,"navProps",void 0),Ce([Method],Ne.prototype,"tabViewProps",null),Ce([Method],Ne.prototype,"cardModeProps",null),Ce([Method],Ne.prototype,"tableModeProps",null),Ce([Compute((t=>window.getConfigOrDefault("constant.status",[],!0)))],Ne.prototype,"status",void 0),Ce([Compute((t=>{const e=t.filter.data.versions||"default";if(window.isDev())return window.readData(e);if(t.allVersionDatas[e])return t.allVersionDatas[e];let i;if("default"==e){const t=$net.get(ge().defaultVersionData);i=function(t,e){const i=ge().defaultValuePath;return i?window.getVal(t,i,[]):t}(JSON.parse(t))}else{const t=$net.get(ge().readVersion+e);i=JSON.parse(t)}return t.allVersionDatas[e]=i.map((e=>new oe(e,t.status))),t.allVersionDatas[e]}))],Ne.prototype,"originData",void 0),Ce([Compute((t=>{let e=t.originData;return t.filter.data.keyword&&(e=e.filter((e=>e.caseName.includesIgnoreCase(t.filter.data.keyword)))),t.filter.data.status&&(e=e.filter((e=>JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)))),0==e.length&&"未找到任何有效数据".err(),e}))],Ne.prototype,"filteredData",void 0),Ce([Compute((t=>{let e=window.groupBy(t.filteredData,"component");const i=t.filteredData.filter((t=>0==t.level));return i.length>0&&(e.UNIT=i),e}))],Ne.prototype,"groupByComponent",void 0),Ce([Compute((t=>{let e=window.getConfigOrDefault("order.preferComponent",[],!1).map((t=>t.toLowerCase()));return e.unshift("unit"),Object.keys(t.groupByComponent).sort(((t,i)=>e.compareBy(t.toLowerCase(),i.toLowerCase())))}))],Ne.prototype,"componentNames",void 0),Ne=Ce([Service(Ne,"App")],Ne),window.createVue($registry.buildComponent("App"),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,