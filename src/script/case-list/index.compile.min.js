/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={176:()=>{function t(t){return"string"==typeof t?t.toLowerCase():JSON.stringify(t).toLowerCase()}Array.prototype.includesIgnoreCase=function(t){return-1!=this.indexOfIgnoreCase(t)},Array.prototype.indexOfIgnoreCase=function(e){const i=t(e);return this.map((e=>t(e))).indexOf(i)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){let e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExistByKey=function(t,e){let i=[];for(let n of this)$get(n,t)==e&&i.push(n);return i},Array.prototype.compareBy=function(t,e){if(this.length>0){let i=-1==this.indexOfIgnoreCase(t)?9999:this.indexOfIgnoreCase(t),n=-1==this.indexOfIgnoreCase(e)?9999:this.indexOfIgnoreCase(e);return i==n?t<e?-1:t>e?1:0:i-n}return t<e?-1:t>e?1:0}},228:()=>{Window.prototype.getConfigOrDefault=function(t,e,i=!0){let n=window.getVal($userConfig,t,"NOT_FOUND"),o=window.getVal($systemConfig,t,"NOT_FOUND"),r="NOT_FOUND";if("NOT_FOUND"!=n)if(Array.isArray(n))r=[...n];else{if("object"!=typeof n)return n;r={};for(let t of Object.keys(n))r[t]=n[t]}if("NOT_FOUND"!=o){if("NOT_FOUND"==r)return o;if(Array.isArray(n)&&Array.isArray(o)&&i)r.push(...o);else if("object"==typeof o&&i)for(let t of Object.keys(o))null==r[t]&&(r[t]=o[t])}return"NOT_FOUND"==r&&(r=e,console.error(`${t}: 配置不存在, 请检查脚本`)),r}},816:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t="yyyy-MM-dd HH:mm:ss"){return t.replace(/yyyy/,`${this.getFullYear()}`).replace(/yy/,""+this.getFullYear()%100).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:`0${this.getMonth()+1}`).replace(/dd/,this.getDate()>9?this.getDate():`0${this.getDate()}`).replace(/HH/,this.getHours()>9?this.getHours():`0${this.getHours()}`).replace(/mm/,this.getMinutes()>9?this.getMinutes():`0${this.getMinutes()}`).replace(/ss/,this.getSeconds()>9?this.getSeconds():`0${this.getSeconds()}`)}},599:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e=window.document){const i=[],n=e.getElementsByClassName(t);return n&&i.push(...n),i},Window.prototype.selector=function(t){let e=[];const i=document.querySelectorAll(t);return i&&e.push(...i),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){const e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"700","14px","Microsoft YaHei")})),window.defunc(window,"calcTxtWidth",(function(t,e,i,n){const o=document.createElement("canvas").getContext("2d");o.font=`${e} ${i} ${n}`;const{width:r}=o.measureText(t);return Math.floor(r)})),Element.prototype.animate=function(t,e){const i=getComputedStyle(this).transition,n=Object.keys(t);for(let e of n)this.style[e]=t[e][0];setTimeout((()=>{const o=e/1e3+"s";this.style.transition=o;for(let e of n)this.style[e]=t[e][1];setTimeout((()=>{this.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],i=this.children;for(let n=0;n<i.length;n++)i[n].classList.contains(t)&&e.push(i[n]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Element.prototype.indexByClass=function(t){return this.parentElement.indexByClassInChildren(t)},Element.prototype.indexByClassInChildren=function(t){let e=this.children;for(let i=0;i<e.length;i++)if(e[i].classList.contains(t))return i;return-1}},904:()=>{Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,i){t[e]=i},Window.prototype.pushToArray=function(t,e,i,n=!1){if(Array.isArray(t[e])){let o=t[e];n&&o.includes(i)||o.push(i)}else t[e]=[i]},Window.prototype.unshiftToArray=function(t,e,i){Array.isArray(t[e])?t[e].unshift(i):t[e]=[i]},Window.prototype.getVal=function(t,e,i,n=!1){if(null==t||null==t)return i;let o=t;for(let t of e.split("."))if(o=o[t],!o)return n&&console.error(`未能取到 ${e} 的值`),i;return o}},374:()=>{Window.prototype.uuid=function(t="",e=10){return`${t}-${(""+1e7*Math.random()).replace(".","").substring(0,e)}`},Window.prototype.groupBy=function(t,e){let i={};return t.forEach((t=>{let n="";"string"==typeof e?n=t[e]:"function"==typeof e&&(n=e(t)),i[n]?i[n].push(t):i[n]=[t]})),i},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){let e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);let i=document.createRange();i.selectNodeContents(e);const n=window.getSelection();n.addRange(i),document.execCommand("Copy",!1,null),n.removeAllRanges(),`已复制: ${t}`.info(),e.remove()};let t=null;Window.prototype.isMatch=function(){if(null!=t)return t;if(window.isDev())return t=!0;let e=window.location.href;const i=window.getConfigOrDefault("enableWebs",[]);if(0==i.length)return t=!0;let n=!1;for(let t of i)if(e.startsWith(t)){n=!0,e=e.replace(t,"");break}if(!n)return"脚本尚未适配当前网址, 请联系 dinglj 修改配置".warn(),t=!1;const o=window.getConfigOrDefault("matchList",[]);for(let i of o)if(window.createRegExp(i).test(e))return t=!0;for(let e of o)if(window.createRegExp(e).test(window.location.href))return t=!0;return console.error("脚本尚未适配当前网址, 请联系 dinglj 修改默认配置, 或自行在油猴脚本中增加 matchList 配置"),t=!1},Window.prototype.StringPool={},Window.prototype.toCache=function(t,e){e=e||window.uuid();const i={};return Window.prototype.StringPool[e]=i,e=>i[e]||(i[e]=t(e))}},506:()=>{function t(t){var e=new ArrayBuffer(t.length),i=new Uint8Array(e);for(let e=0;e!=t.length;e++)i[e]=255&t.charCodeAt(e);return e}function e(t){t=t.toLowerCase();let e=0;for(let i=0;i<t.length;i++)e+=(t.charCodeAt(i)-96)*Math.pow(26,t.length-i-1);return e}function i(t){t-=1;let e=26;const i=t=>String.fromCharCode("A".charCodeAt(0)+t);let n=1;for(;t>=e;)t-=e,e*=26,n++;let o=i(t%26);for(;t>=26;)o=i((t=Math.floor(t/26))%26)+o;return o="A".repeat(n-o.length)+o,o}window.$excel={},window.$excel.export=function(e,i){window.isEnableExcel||window.enableExcel();let n=function(e,i){let n={SheetNames:[i=i||"sheet1"],Sheets:{}};$set(n.Sheets,i,e);let o=window.XLSX.write(n,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(o)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(i));!function(t,e){let i=t;"object"==typeof i&&i instanceof Blob&&(i=URL.createObjectURL(i));var n=document.createElement("a");n.href=i,n.download=e||"",n.click()}(n,e)},window.$excel.readFile=function(t,e){return window.isEnableExcel||window.enableExcel(),window.XLSX.readFile(t,e)},window.$excel.read=function(t,e){window.isEnableExcel||window.enableExcel();const i=new FileReader;return i.onload=function(t){var i=t.target.result,n=window.XLSX.read(i,{type:"binary"});for(let t=0;t<n.SheetNames.length;t++){const e=n.SheetNames[t];n.Sheets[e]["!ref"]||n.SheetNames.splice(t,1)}e&&e(n)},i.readAsBinaryString(t),null},window.$excel.resolveSheets=function(t){for(let e of t.SheetNames)window.$excel.resolveSheet(t,e);return null},window.$excel.resolveSheet=function(t,n){const o=t.Sheets[n]["!ref"];if(!o)return[[]];const r=[],[s,a]=o.split(":"),l=/(\d+)/.exec(s)[1],u=s.replace(l,""),c=/(\d+)/.exec(a)[1],p=a.replace(c,""),h=parseInt(l),d=parseInt(c),f=e(u),g=e(p);for(let e=h;e<=d;e++){let o=[];for(let r=f;r<=g;r++){const s=i(r)+e;o.push(t.Sheets[n][s])}o.length>0&&r.push(o)}return window.pushToArray(t,"array",{sheetName:n,value:r}),r}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`);const o=$queue.eventPool[n];if(Array.isArray(o)){if(1==o.length)return o[0](e);let t=[];for(let i of o)t.push(i(e))}else pushToArray($queue.eventQueue,n,e)},$queue.on=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`),pushToArray($queue.eventPool,n,e);const o=$queue.eventQueue[n];if(Array.isArray(n))for(let t of o)e(t)}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((()=>{t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,i,n=2e3,o="10%"){let r=window.byId("dinglj-v-pop-msg-container");r||(r=document.createElement("div"),r.id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;const s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort(((t,e)=>t.time-e.time));for(let e=0;e<s.length-4;e++)t(s[e],void 0)}const a=document.createElement("div");a.classList.add("dinglj-v-pop-msg",i),a.time=Date.now();const l=document.createElement("div");l.classList.add("dinglj-v-pop-msg-icon",i),l.innerText=i.substring(0,1).toUpperCase(),a.appendChild(l),a.innerHTML+=e,r.appendChild(a),a.animate({height:["0px",getComputedStyle(a).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),a.classList.add("active"),setTimeout((()=>{t(a,r)}),n)}window.$tip={},$tip.info=function(t,i=2e3,n="10%"){e(t,"info",i,n)},$tip.warn=function(t,i=2e3,n="10%"){e(t,"warn",i,n)},$tip.err=function(t,i=2e3,n="10%"){e(t,"err",i,n)}},168:()=>{window.encodeConfig=function(){return{constant:{status:{UNKNOWN:{en:"$DINGLJ-ENCODE-START$IQyIAwvhbbIWFFfcpRqxougo2pP9OBQ6rGJt+uBf4N5JUi05H1hjSZP4IPfsUOLSmNDKMUbgm8x/FQgHwPY6sQ8lOoHx3RJoiOBFqQauLO5jpmwgoHkDKpQen+WFl5HZh+D3S6fF3s3SE5/OIHdMjV3hTO5nfTh13Qf9HIPSQac=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$DdXtRkL7Y+dIE+u3XurvGDAKYUUNxsNsyKI9/hknMmzBO6+rK9r8Fx9Qo7Z7j+cu/bvEKEz2SO20Npn9hC3pQ0MgwjZj81A4XRsTjyyzeRHk7sHGuqMK1ULeQEatNoYsayPz06a6dClu6Qh8MfUtZ+X0RvtdvK15IYEAz28r99c=$DINGLJ-ENCODE-END$"},TICKET:{en:"$DINGLJ-ENCODE-START$NuessiCoo1KqWhziEbtEh5u2DOBR9ungXNVruoy1H7vjlJegn2gF+2EIiEyA98YfVDD2u04fcr6u2qSpvvgfCxyWisqmGDUomVFnY5cnLpV7CH3p/V1OEjUS9NwYO6X4RHs1aHLa2Yp5xfmrtBGKYMYFt/iX+BbKF2mxGzzwy1Q=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$MycVroBq+gf2OWsbUTWEhkb6c/CyNiIPm6I3tIBv+Z4dmG+d7uGn2E1ouXFHEQtGo2S7VpbHQMKuGp8bb3xiEMvk0hrD3Ki4BlPQjaDliyq3iKoB+aNxo8t7DQBYsdLnPnLe2luLVckMpQFbjVNXX9aNinaTFZDtCNjMO1trIM4=$DINGLJ-ENCODE-END$"},FAILED:{en:"$DINGLJ-ENCODE-START$mm/SFYQCufQUCOda3mrPnDMC1qi4uzo5oYLKhG0awkLoHnL6HS31bZyJaHggurfepecjq7OU4T6U9rVD+nltU8na8oOeVSfhke1d3mbiDgqyTB0p5iJ4X0vku+9CgrZYzfmB+BBsWb6OCp8DKTYn8YZNtoU/D3Z7o6X6dmRiboY=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$PjoFhkswm7RKnpFdpBAtshxuXvKKMh7yCjSvS8d+Ihx275kqbtN2fDIKMZtaclT+SNowupsnylfAPxvu+sd6o9HaOod6O7aJLrnPqkIWS25tRsXoiNGTbl39EIxiNdt5MeydouRWeXsLGkX60RKKIL/rceQAXUIMD0MmXAy1n94=$DINGLJ-ENCODE-END$"},SUCCESS:{en:"$DINGLJ-ENCODE-START$TNXkSY4wHYfOoRCnifRHEnSw1YqpdLuH4Xuizz0R5LoBPexGTvPKP+KXVYhZcwZWtVO8NzqjW0pp2FmCPKz+WX6TsfDcYgf4MhXRKzMHqAvJ9/BZdK3jx0O54DK8l0wjgSz0d1yLe6hg2VUPCvoPB//Ppj7HPQuAxSATAUdehjY=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$RhOgjlVwsS64x0hu+MhGeEDgAJRa20fhXW5DDAc9ZDDPcYTnzRg52/PH7+k8XM4V4gmeuXmhI+qItQpqK14L/lwYHOsCsW+k5wDGWzejcvLV+40Ao7SZdhM+eAVj07U0lrVQrv8FN1x3hxbcnUneAypeHsYq1FgjggcA7NzUa8A=$DINGLJ-ENCODE-END$"},RUNNING:{en:"$DINGLJ-ENCODE-START$PAEwm3EDZMJEGezSy/JVdKIwNSwY7+pa2ECsBQDg5GLYqvwDlVfptPlBO5bFkSJhaaosznmQKIb67PJ5TbmDwgA6ZZ/dfQ153KiY70eLUT35Ol6vrfknVyh0HUx2U+QbVCmhoMnv7NK2tae6b1DLSCAlEyyZGjnj8iqSXXs/3aA=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$H4zs259I7rD1lmgRnMMAPVIpT4P7RAVG8QY5jVcWeOyohDqoqbYAZqT8UsMoHX/bmV/K+p26x33G7MWW74elw5uo2pxZw07MdyYQn9RIhbxo1UvfXag4D4z7yUsWNJPkYbjgrP4eaoEbuhuE1zKKBA5Js4kUpaNEtXotea0zyK4=$DINGLJ-ENCODE-END$"},SENDED:{en:"$DINGLJ-ENCODE-START$HQiAqVR1yVtzAyWiIwHrTrmQniLff6FQuDyBsJMZDk7DS7VOvzA8KbCG8koK7v1coc0B8ZRDfHu91ilz7MFpnhG15tMflhytoi5XJDa7KwkklbmPVq56zQFT17UppHbN8NDHH/76Lk8Q+Ww3qhjYw1kurp9cdy62B8cW2BCBTQo=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$UBcvCsWDfRcjl/XO4covibSexmepvltVtTqMPNpvDtsl6Pm7l1mByl6SXwkn7uHiwO3BscHXvsrcmLTfEfR9zrISBlDusuAAqGJpj0V+Ho3HZgcuI4utY3e3+07ANQhV0bu0j57iBpeiq8TtdOphR/fSiMAxgPR4cEE9YUHicKw=$DINGLJ-ENCODE-END$"},NOTSEND:{en:"$DINGLJ-ENCODE-START$Z2t3vceSNdIHZMMlMpJgbkVme7bTn4j6WbsKBirFHU3MqBW84eo7WBchP4kOhdTZKnT7azU5bcxbXHNM+d4RZo1hArNFC2S85U14SlT5KS+10hh/ZT5HjUCL/Kl9uhWjO2WUNuK3PeuKlOiCzJRQJJ5OMPTOiyVKGr2bRm1p+IQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$jLqiho2EmcW/iw/StyzVkZposOQWXJhtdmamLJcGgJ+dbmuQKoF5F6n3u0YQ1xceBjbWQx0Tt9CzYMgrHflNiMKE4y3nAUWaxGt1phGv3hund/INLcxVwP9zGJ+HTLJrsiAS1Nw6w+RFcKSufjdmKe/wzHzhmCwNlUw6zXqjlsY=$DINGLJ-ENCODE-END$"},WAITTING:{en:"$DINGLJ-ENCODE-START$HTn7m94b39u0gShZWoQ78rOxkgAZFBtglzMJmGGc9lOjy6rY6ISx7n6Qi/E2AOhXleKsuLj3WHoF1BSP5rWFRlHsxQ0Gz+aTu8OSV4QUAswBTFcWF8zyh15KtnBiKXkBgvOVuBpveXgJgckdTw/Tt24TLBQfWWmSYYHkniRJoa0=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$d1VE6NVPD7Mo5IoD3UhYKt7oHTzFHys4GLUS+mF3u8rJoDyjkhChHWRh+9BeeHjpXbG+98zsIwKE9CtfkfINZe8mOgGwAdEgQXb4NEQ9/QUvJAiuMjbMMkS31uYa3z0K3cbN3HTRI1q5lkVxTUwyKYChzlB4sxB2qBq42P1YkYk=$DINGLJ-ENCODE-END$"}}},datasource:{mysql:{DB_SERVER:"$DINGLJ-ENCODE-START$TLxFrhPfe3JVeL6YoV70Xh//RVqgtQzPYVZP4vovVu3vDGXwgySTFRPy6n1wXL7ORi6+nhBOVPtad7XQpCKo23mwbHQ3jhE63B0h8YqWihUEQSJIVsn1ziODsesRh9OWGSAJb+SJX/672C5UaeTW6EEs6ERWwzPyoN6lbIphScs=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$EIqUy1HxmADWCKlgNtpVyyazoJMgGJTiSAT7WV/bJYDMaLF5bFiO0/GssSEqV1nRIVXI63REau2Q66VH+qvzeWQvP6uNEcks9xmDaOuCeGQCxWB1cz66fplSiZU2LszGnLr1bHyXs5quRKp7uKp3qA2Yf3XHKmqVNEs6+vQpgOU=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$Mtw7DV/eWaTu4BEaYb5nvemq9s0HrQBmgayEzNaaD9wSBS9ZvtNvYj/bJF+L4/X6AWvX4uDW+Dv7/3pVwQ0TP3a/CXqMSBIgEpUP1MXCiJcyiSVpy46M5lsu9JvObP3IaEucdIGsCJTNUi86jIPJRgyRZ1fcMGENX8id2a1HlfA=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$NEYm9RzOsqx5M2l1pBD5dYrqB+Ws1vab3ho8k42zfbnxM2cu6tM+HvaSEv0ygSQtTB4VNMs0kFaLlbBvN65lxYIZKgdPUlHPelTsBUQTNqBMBMK/6+n+QMZe8CCgJQmQPwuONfzkclxfdyWCWtBxTl4rfpTkdooFjmODha1blp4=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$B+0c9acbI5/vmQJ9EKSCXIEN/5MIPpyNj4x+gaPlzbk01OSVK6lXLbeBh1HEQns4n0Txw1/Z7JATTFlGnjtFWmnSDaSmEvmmZj29EDBwZ89QTqFdWtXQQ/cT9NbzooWZrMxp0UIpeX9oeWdBPd+ZlWqDSsVRKGmYVssoMR6NO4o=$DINGLJ-ENCODE-END$"},mssql:{DB_SERVER:"$DINGLJ-ENCODE-START$FUb5xnTM9NoTxDozTiubCdAK/y5gi8jGpF8I+hFqbM4VnRbg2rClZholmRIstwTFWuQCKLXI/B4mHu4KQz3AFpLMRVVgB6fF9ekBf4HymCtsYnAduInzivo2QpbPV5UAyB0RCy4A876xmOea7cJP4kBt2A4ziQjZLQ17iBa0pLk=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$kr0ncJNhMe7XELjetN/yqruFzZVkyhp1fl6Ziaa9Gbojeb1qtctRkuiy16MNpBEq6qLlE2A8M2+h2XZsxVe0v4h0hWsnzVeREVNyODkqZGPq+wbj5NQQZh8pfB55YAwPqLSddt2HzaMCU5jOypOYcJDIC4pzcc5YuvaAmHHCtcw=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$C6C2VdfUvZKVRb0oOw3z+dA4eAZJN1xOoVPLXEUQrZGT3wL+7nc4SSMNTkeU9pu06kPtNMDSlp/gpUacJtg4k6pkywQDP+bg+cLgFwzPwkfeUhZLhlA+1Jy3ST89NJcBdfcpJ6ULKhxYljUMG2gahV91YoMwkUWYO/lkTLpJ2sY=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$iV/SYxC1excSoWhZC+CPOag0co0lA+XLAD1f4j37Sm1ZJoQoyIkslbV4Lyj/oCz4MGwHCJuRHDGUEcyZac+QIZeRL7IG+3339bYVCAQDJ+EFcrqKf6d3BGmNguc0t3wmQEqilYYclhkpNAz/nfRmO+x4YW123fUU3plARP7yJNg=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$fnX6ta68q1haDhvz27V5isDz3ZTyYS7wKmT7253DA507Vc0HPVQT9AF0Nhsh/+JJXnzWkRgE4UMdtYhi+aEhhUwkNRc3M34erzAO28x9NXH3A3BNSqi36GzXp5h0vvEScaiiVNz3a02rEApE9gbTFaWkJ3BCMzDW7rjIeh5c20Y=$DINGLJ-ENCODE-END$"},oracle:{DB_SERVER:"$DINGLJ-ENCODE-START$D7B0gSs8dr+YobjN5byrReJ2sp5DnPmoIaKJmkE9LLRTDf5GaGy2iw47v4QExiWAaiA/oLvDlWgZ2WGeqvxsfB4LfRmsJU9QXiR831lX+iouiqG9nJ1loj3wV9kjvgQuv2qneu0HYDX4+ZUcHu6QVQulvzQZ+oSFSL1imGRyj4I=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$cM7U+pgD62WlYQouWQnW4tXQX+uJ5CqyqynbVjOCTKiBt3nwhVQjcmcNoBAVq8Tt4m8ssDrXTza7IWxy0hdV8JzEVXgeRTUql/7AHuQgB50mMIp5EZU+eHNZmU+Vqd6WYM+Yn7cXyg3CeEyFJK9InckgW96gCFlsotnwek7VYPg=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$kpa1h7uyY1HOcuZW3rQY4TUfDvmQP+hm0+1L5btsxgn5m8NBounz84IVqh5bz5vJX4zajkDwcdii18rbN6kLxe1tWXZ/Dy8pjh2LWOn8uezQzp7g5uXd02uMPbPDjTOgw9vjvaKOEuwUmmtDxO1m/Hb6cxtm4ZZtD8V3DOiGyQE=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$Lstikd8NLtgUzGpMEOUT2tAKTocCrBdrevnN4o28lC0JvjhcQVjpRUHcNWuGpByaKIrZghtRBw0cmRtWXYj5mrO8uEugzoqEZ5Aq4WkJ4V7zTVjejahi8q+fBdHZw7K7wdQCiXdvajjp6uhkLGqAvRgDiYrZZ+IgM5BdjFA/kyE=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$XxzFExAOkbpq33LZuB4EMHn3u/uyr9WhaTn8g9G55LcFAR2RCLBNZATiTzIc7+1TVxJNhGm8/d82lSb3B8I2tK3D+jhi3FxlK+7q1KbC5vl3ilXU6fbTIsxy1X5DgT7QWgpQFWtPr5hb2j18sGfmWdd9/v0le9mIIfOt2Wejm4o=$DINGLJ-ENCODE-END$"}},urls:{map:{sit1:["$DINGLJ-ENCODE-START$VslAhDDU8rOl8cN9z5z9vtMuFMCj1GTh03Owywpy7ySUZBLVOaAh0dt8uEOVgBmlzvWAsUp3HbsNFoZHjrJdwF6fy3L8EV+TD/8ngF+qhRFr8xPQGL5IJNvVxQAmAelI8bSfk+RyiXpRMBiwrvGdPyWFegl/webHPjalqvgNQz4=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$IfEOY8WFWSDw6H28vYW4yHC3RkILYVl38wAKj6czF4B3vh+1Fs/Sfi4OxfNO/NyvLvbEJ9SBTe6MCKbby4Sike4TYS8dyixDY2Qo9FWe+t96SkfjILXrGxg9FevzSGIaADMns/Wm0+3SGd0quQmpnZ++xoUPscta624GgFiIBCM=$DINGLJ-ENCODE-END$"],sit2:["$DINGLJ-ENCODE-START$KMuPYIc7NfHiMOZHZgBsoUOjk6u3jX2/PQD71yv2+e39rYyTrdRWAIXYlpqOiI+Dz1eOb2FWHF+K/wcQTGsMD0Ca6idqRAhv2jbHl0XAXY1lq3/pULyjcj9Lq1EUm2XAs70TazIHOMiid69qhis5W0JbfOikiCROpcP3882Hbxc=$DINGLJ-ENCODE-END$"]},sit1:{ticket:"$DINGLJ-ENCODE-START$KuUFoBNv3zlq4nqUY0VSH9mSbIfdp/6fEnnz7P31ovGIaQ42QiUk200Sr0ZF0yJC3w5QrPlL/aat/cBVgDCd70U/UWW1uhQ5f7auewNDF9KwJG4xEcA/2Nz+EM+IMwyjOg29W9h3QIH974lRrj9nA9sO4KR2xn/w/QQrYgwCyfk=$DINGLJ-ENCODE-END$",readModule:"$DINGLJ-ENCODE-START$Z/V0EQ7LBdNhcwRNMm34FuzQnsc8kfsbawRBx/SCG/A4qqDoPqrx13nyFcU0p0vg0XOM8dKkcXe7wF1+hSE+hXvqIY4q8dskbU46kzVgxM0yc48rrKs4Rrp/KsxiB7HDkJaAHzAA69YVqyXctDVgWNOQj4hffkViXKvmPIcftmg=$DINGLJ-ENCODE-END$",defaultVersionData:"$DINGLJ-ENCODE-START$nG2EWtFGtoha3OJwgKswsNpE2ivWA/wpm4FhRPl+fhSvraZv1S/dVLw9SC3HR0YpsfEKoBBXmrpponmHQ/DTOaU0QlGQOfE/0ZalyZj6NgRPJ07haVcc/d5gpDwOd7RSlTx4JGSILrYDud5AJMh5burboarFRf8WfIpz1Jb/Ros=$DINGLJ-ENCODE-END$",versions:"$DINGLJ-ENCODE-START$P/VlDDrWadIGfiI+E7dSXILzDPgRS2HEC4fiFoWapFM7tq4jYY3a0/296NsKTJVODurpvLt6IsIGAjgsCtS0TuwDtRNmePfa5Cy/nRkxCzGMQ7u5bKTWxyt7UGI3Aryh0ex9KtJ6OoP/sQE9EIYj1VNQVzA8Jbc3ULL8TnrQ6QY=$DINGLJ-ENCODE-END$",readVersion:"$DINGLJ-ENCODE-START$TkOyVWb46D2WRp2AmE+L66hV51vgvt2JqYPW63yd3o44gxE19wUmLgKewPMQ6yEJ3JQz4CwIxNLPC3aZfhqjRDQWpthMa/b8PhFVKBBCnauWc6Qh670dBuGzee/gV8Bv6tsafeOgqNHzni8S7Hc0yor0pQ2n5tMoq6rrhqnefLc=$DINGLJ-ENCODE-END$",defaultValuePath:"$DINGLJ-ENCODE-START$HZcsdY2GplzbnnJVvs9XS9gN1pDYJaH4zYGrIrdkry1mv61wdWdzqYp5qU40CG2axaXkZQp/AlUqMubfvJhEqg8YLTW71TBWGTuK+Ebb2gUVwK1vmlDPzmkUxDnlPHTVbotZXpcKUHxq/aKW3LPoH3RScsY6DWXktAPZTY+0GTU=$DINGLJ-ENCODE-END$"},sit2:{ticket:"$DINGLJ-ENCODE-START$gePyGhaTdFLUKekXyDMkYhoMMRVUvLqn0AhSNEyJZKJaWF7Ui+KYkMZoulPL12xV5yHEsuUZLcAQO7/DgeXdAEPVGYqJmuxSWRoikcT6/RA7uZETqk2qqql6RqBc8fK0sxi0cego8NfHdh8Z2iPC12tVK7bMvURlr24WC8Be6Nc=$DINGLJ-ENCODE-END$",readModule:"$DINGLJ-ENCODE-START$edGz6SVRVRnPTnaQ/LrrKC2NhdTTQtJOr0dA/aaNYO3dSeGZnEfY/FTCBuyuSVAbxAbanGhKBbJzjypKHuYNMI4Pce/dWsPxPFnJpuoSGiJZjNL9Fdi84JQlJdQBnLYZsO0lpPyPyz8Y45RYIE6wL7iGEMkgjTKgTvJPnCuvIxE=$DINGLJ-ENCODE-END$",defaultVersionData:"$DINGLJ-ENCODE-START$MmRyg19woPave0J4/rMHEAEAh5hCk7G4SNrHx6aCYo4I6Ig56uMwnpudvnWgpsv6R0TqPPardzuSK4HkYplZB/5U5aChql4QLI1nEOKmDeQCMr2bj3zyV6+OquP44+5YDJ4iVJqJDhfX1WYUszYO+ImFqHUxd4eRYblXMPpFjq8=$DINGLJ-ENCODE-END$",versions:"$DINGLJ-ENCODE-START$munjyv7w5Mtvd4GFHgfZFL2v0qb0aYBO8Lpw4rAou/Ot0yROsK0t3Mdlm1ObdrOyuORv3AARQXbOz7+wfohmw+mGqBcE63fUK/mh3PcoX+Ys2Mfj7PKlEHTRvBpTND05FcVAYOZ1otrkVz026V/8Hzj8+PiAw7mVKxjiJwT89s4=$DINGLJ-ENCODE-END$",readVersion:"$DINGLJ-ENCODE-START$MBLbUMxxe1PSUrFDZnacpQ1rKhLEdMqXUQ5lxfWE1JrkBszv53e1vAsitY1GTZ7pxlHcRmudVeGInSjUL1FSLGZxyTbdHvoTdASFBj3Yd4P5sKi6onkH84df4m0UkziBIcjVu3qvMd4bTV6UcW1o60OAnR4eNZSwLjFO6HaIW14=$DINGLJ-ENCODE-END$",defaultValuePath:"$DINGLJ-ENCODE-START$OvaeWd9Wc73whbSqnVimyfQdH2gA7stcuAC5/2cZkjnr0jXgsmy84b+lUdE+w5r45MUPMKoFl5ypRNlkAqbrj3KRzLiA/+9f1Mu/kM8NMF1v7IxLzf0pzx0CulwTDZEXQ9HhwsEroAr4zHnpDXdbbH/bbkVx7sb1faxGazYbDFo=$DINGLJ-ENCODE-END$"}},author:"dingljcn"}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}(()=>{"use strict";i(168),i(374),i(904),i(816),i(176);const t={};String.prototype.encrypt=function(e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if($get(t,this))return $get(t,this);let i=`'${xt.flag_start}`,n=this;for(;;){if(n.length<100){i+=$rsa.encrypt(n,e);break}{let t=n.substring(0,100);n=n.substring(100),i=`${i}${$rsa.encrypt(t,e)}${xt.flag_split}`}}return $set(t,this,`${i}${xt.flag_end}'`),$get(t,this)};const e=window.toCache(((t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)())=>{let i=t.startsWith(xt.flag_start);if(i!=t.endsWith(xt.flag_end))return t;if(i){let i=t.replace(xt.flag_start,"").replace(xt.flag_end,""),n="";for(let t of i.split(xt.flag_split))n+=$rsa.decrypt(t,e);return n}return t}),"rsa-decode-map");String.prototype.decrypt=function(){return e(this)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t=2e3){$tip.info(this,t,"10%")},String.prototype.warn=function(t=2e3){$tip.warn(this,t,"10%")},String.prototype.err=function(t=2e3){$tip.err(this,t,"10%")},i(599),Window.prototype.mergePath=function(t,e=window.dinglj_home.decrypt()){return e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),`${e}${t}`},Window.prototype.timer=function(t,e){let i=30,n=null;e&&("number"==typeof e?i=e:n=e),i=i<30?30:i;let o=setInterval((()=>{t(n)&&clearInterval(o)}),i)},Window.prototype.linkCss=function(t,e=window.dinglj_home.decrypt()){const i=document.createElement("style"),n=mergePath(t,e);i.innerHTML=$net.get(n),document.head.appendChild(i)};var n="0123456789abcdefghijklmnopqrstuvwxyz";function o(t){return n.charAt(t)}function r(t,e){return t&e}function s(t,e){return t|e}function a(t,e){return t^e}function l(t,e){return t&~e}function u(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function c(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var p,h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function d(t){var e,i,n="";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),n+=h.charAt(i>>6)+h.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),n+=h.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),n+=h.charAt(i>>2)+h.charAt((3&i)<<4));(3&n.length)>0;)n+="=";return n}function f(t){var e,i="",n=0,r=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var s=h.indexOf(t.charAt(e));s<0||(0==n?(i+=o(s>>2),r=3&s,n=1):1==n?(i+=o(r<<2|s>>4),r=15&s,n=2):2==n?(i+=o(r),i+=o(s>>2),r=3&s,n=3):(i+=o(r<<2|s>>4),i+=o(15&s),n=0))}return 1==n&&(i+=o(r<<2)),i}var g,v={decode:function(t){var e;if(void 0===g){for(g=Object.create(null),e=0;e<64;++e)g["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(g["-"]=62,g._=63,e=0;e<9;++e)g["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],n=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=g[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);n|=r,++o>=4?(i[i.length]=n>>16,i[i.length]=n>>8&255,i[i.length]=255&n,n=0,o=0):n<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:i[i.length]=n>>10;break;case 3:i[i.length]=n>>16,i[i.length]=n>>8&255}return i},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=v.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return v.decode(t)}},y=1e13,m=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,n,o=this.buf,r=o.length;for(i=0;i<r;++i)(n=o[i]*t+e)<y?e=0:n-=(e=0|n/y)*y,o[i]=n;e>0&&(o[i]=e)},t.prototype.sub=function(t){var e,i,n=this.buf,o=n.length;for(e=0;e<o;++e)(i=n[e]-t)<0?(i+=y,t=1):t=0,n[e]=i;for(;0===n[n.length-1];)n.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,i=e[e.length-1].toString(),n=e.length-2;n>=0;--n)i+=(y+e[n]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*y+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),w=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,b=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function E(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var x,D=function(){function t(e,i){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var n="",o=t;o<e;++o)if(n+=this.hexByte(this.get(o)),!0!==i)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var n=this.get(i);if(n<32||n>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i="",n=t;n<e;++n)i+=String.fromCharCode(this.get(n));return i},t.prototype.parseStringUTF=function(t,e){for(var i="",n=t;n<e;){var o=this.get(n++);i+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,n,o="",r=t;r<e;)i=this.get(r++),n=this.get(r++),o+=String.fromCharCode(i<<8|n);return o},t.prototype.parseTime=function(t,e,i){var n=this.parseStringISO(t,e),o=(i?w:b).exec(n);return o?(i&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n},t.prototype.parseInteger=function(t,e){for(var i,n=this.get(t),o=n>127,r=o?255:0,s="";n==r&&++t<e;)n=this.get(t);if(0==(i=e-t))return o?-1:0;if(i>4){for(s=n,i<<=3;0==(128&(+s^r));)s=+s<<1,--i;s="("+i+" bit)\n"}o&&(n-=256);for(var a=new m(n),l=t+1;l<e;++l)a.mulAdd(256,this.get(l));return s+a.toString()},t.prototype.parseBitString=function(t,e,i){for(var n=this.get(t),o="("+((e-t-1<<3)-n)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),l=s==e-1?n:0,u=7;u>=l;--u)r+=a>>u&1?"1":"0";if(r.length>i)return o+E(r,i)}return o+r},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return E(this.parseStringISO(t,e),i);var n=e-t,o="("+n+" byte)\n";n>(i/=2)&&(e=t+i);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return n>i&&(o+="…"),o},t.prototype.parseOID=function(t,e,i){for(var n="",o=new m,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===n)if((o=o.simplify())instanceof m)o.sub(80),n="2."+o.toString();else{var l=o<80?o<40?0:1:2;n=l+"."+(o-40*l)}else n+="."+o.toString();if(n.length>i)return E(n,i);o=new m,r=0}}return r>0&&(n+=".incomplete"),n},t}(),T=function(){function t(t,e,i,n,o){if(!(n instanceof S))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=i,this.tag=n,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return E(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return E(this.stream.parseStringISO(e,e+i),t);case 30:return E(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var i=0,n=this.sub.length;i<n;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===i)return null;e=0;for(var n=0;n<i;++n)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof D?e:new D(e,0);var n=new D(i),o=new S(i),r=t.decodeLength(i),s=i.pos,a=s-n.pos,l=null,u=function(){var e=[];if(null!==r){for(var n=s+r;i.pos<n;)e[e.length]=t.decode(i);if(i.pos!=n)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(i);if(o.tag.isEOC())break;e[e.length]=o}r=s-i.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)l=u();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=i.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");l=u();for(var c=0;c<l.length;++c)if(l[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){l=null}if(null===l){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);i.pos=s+Math.abs(r)}return new t(n,a,r,o,l)},t}(),S=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new m;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],N=(1<<26)/C[C.length-1],O=function(){function t(t,e,i){null!=t&&("number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,r=!1,s="",a=this.t,l=this.DB-a*this.DB%e;if(a-- >0)for(l<this.DB&&(i=this[a]>>l)>0&&(r=!0,s=o(i));a>=0;)l<e?(i=(this[a]&(1<<l)-1)<<e-l,i|=this[--a]>>(l+=this.DB-e)):(i=this[a]>>(l-=e)&n,l<=0&&(l+=this.DB,--a)),i>0&&(r=!0),r&&(s+=o(i));return r?s:"0"},t.prototype.negate=function(){var e=A();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+G(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=A();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new R(e):new I(e),this.exp(t,i)},t.prototype.clone=function(){var t=A();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,n=this.DB-t*this.DB%8,o=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[o++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==o&&(128&this.s)!=(128&i)&&++o,(o>0||i!=this.s)&&(e[o++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=A();return this.bitwiseTo(t,r,e),e},t.prototype.or=function(t){var e=A();return this.bitwiseTo(t,s,e),e},t.prototype.xor=function(t){var e=A();return this.bitwiseTo(t,a,e),e},t.prototype.andNot=function(t){var e=A();return this.bitwiseTo(t,l,e),e},t.prototype.not=function(){for(var t=A(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=A();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=A();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+u(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=c(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,s)},t.prototype.clearBit=function(t){return this.changeBit(t,l)},t.prototype.flipBit=function(t){return this.changeBit(t,a)},t.prototype.add=function(t){var e=A();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=A();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=A();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=A();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=A();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=A(),i=A();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,n,o=t.bitLength(),r=q(1);if(o<=0)return r;i=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new R(e):e.isEven()?new $(e):new I(e);var s=[],a=3,l=i-1,u=(1<<i)-1;if(s[1]=n.convert(this),i>1){var c=A();for(n.sqrTo(s[1],c);a<=u;)s[a]=A(),n.mulTo(c,s[a-2],s[a]),a+=2}var p,h,d=t.t-1,f=!0,g=A();for(o=G(t[d])-1;d>=0;){for(o>=l?p=t[d]>>o-l&u:(p=(t[d]&(1<<o+1)-1)<<l-o,d>0&&(p|=t[d-1]>>this.DB+o-l)),a=i;0==(1&p);)p>>=1,--a;if((o-=a)<0&&(o+=this.DB,--d),f)s[p].copyTo(r),f=!1;else{for(;a>1;)n.sqrTo(r,g),n.sqrTo(g,r),a-=2;a>0?n.sqrTo(r,g):(h=r,r=g,g=h),n.mulTo(g,s[p],r)}for(;d>=0&&0==(t[d]&1<<o);)n.sqrTo(r,g),h=r,r=g,g=h,--o<0&&(o=this.DB-1,--d)}return n.revert(r)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var n=e.clone(),o=this.clone(),r=q(1),s=q(0),a=q(0),l=q(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),i?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),i?(a.isEven()&&l.isEven()||(a.addTo(this,a),l.subTo(e,l)),a.rShiftTo(1,a)):l.isEven()||l.subTo(e,l),l.rShiftTo(1,l);n.compareTo(o)>=0?(n.subTo(o,n),i&&r.subTo(a,r),s.subTo(l,s)):(o.subTo(n,o),i&&a.subTo(r,a),l.subTo(s,l))}return 0!=o.compareTo(t.ONE)?t.ZERO:l.compareTo(e)>=0?l.subtract(e):l.signum()<0?(l.addTo(e,l),l.signum()<0?l.add(e):l):l},t.prototype.pow=function(t){return this.exp(t,new P)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var o=e.getLowestSetBit(),r=i.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),i.rShiftTo(r,i));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=i.getLowestSetBit())>0&&i.rShiftTo(o,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return r>0&&i.lShiftTo(r,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(i[0]==C[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<C.length;){for(var n=C[e],o=e+1;o<C.length&&n<N;)n*=C[o++];for(n=i.modInt(n);e<o;)if(n%C[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var n;if(16==i)n=4;else if(8==i)n=3;else if(256==i)n=8;else if(2==i)n=1;else if(32==i)n=5;else{if(4!=i)return void this.fromRadix(e,i);n=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==n?255&+e[o]:k(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+n>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=n)>=this.DB&&(s-=this.DB))}8==n&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,n=this.DB-i,o=(1<<n)-1,r=Math.floor(t/this.DB),s=this.s<<i&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>n|s,s=(this[a]&o)<<i;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,o=this.DB-n,r=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&r)<<o,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&r)<<o),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var n=this.abs(),o=e.abs(),r=n.t;for(i.t=r+o.t;--r>=0;)i[r]=0;for(r=0;r<o.t;++r)i[r+n.t]=n.am(0,o[r],i,r,0,n.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,n){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=i&&i.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=A());var s=A(),a=this.s,l=e.s,u=this.DB-G(o[o.t-1]);u>0?(o.lShiftTo(u,s),r.lShiftTo(u,n)):(o.copyTo(s),r.copyTo(n));var c=s.t,p=s[c-1];if(0!=p){var h=p*(1<<this.F1)+(c>1?s[c-2]>>this.F2:0),d=this.FV/h,f=(1<<this.F1)/h,g=1<<this.F2,v=n.t,y=v-c,m=null==i?A():i;for(s.dlShiftTo(y,m),n.compareTo(m)>=0&&(n[n.t++]=1,n.subTo(m,n)),t.ONE.dlShiftTo(c,m),m.subTo(s,s);s.t<c;)s[s.t++]=0;for(;--y>=0;){var w=n[--v]==p?this.DM:Math.floor(n[v]*d+(n[v-1]+g)*f);if((n[v]+=s.am(0,w,n,y,0,c))<w)for(s.dlShiftTo(y,m),n.subTo(m,n);n[v]<--w;)n.subTo(m,n)}null!=i&&(n.drShiftTo(c,i),a!=l&&t.ZERO.subTo(i,i)),n.t=c,n.clamp(),u>0&&n.rShiftTo(u,n),a<0&&t.ZERO.subTo(n,n)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var n=A(),o=A(),r=i.convert(this),s=G(e)-1;for(r.copyTo(n);--s>=0;)if(i.sqrTo(n,o),(e&1<<s)>0)i.mulTo(o,r,n);else{var a=n;n=o,o=a}return i.revert(n)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=q(i),o=A(),r=A(),s="";for(this.divRemTo(n,o,r);o.signum()>0;)s=(i+r.intValue()).toString(t).substr(1)+s,o.divRemTo(n,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var n=this.chunkSize(i),o=Math.pow(i,n),r=!1,s=0,a=0,l=0;l<e.length;++l){var u=k(e,l);u<0?"-"==e.charAt(l)&&0==this.signum()&&(r=!0):(a=i*a+u,++s>=n&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(i,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,n){if("number"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),i.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,i){var n,o,r=Math.min(t.t,this.t);for(n=0;n<r;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(o=t.s&this.DM,n=r;n<this.t;++n)i[n]=e(this[n],o);i.t=this.t}else{for(o=this.s&this.DM,n=r;n<t.t;++n)i[n]=e(o,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var n=t.ONE.shiftLeft(e);return this.bitwiseTo(n,i,n),n},t.prototype.addTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var n=Math.min(this.t+t.t,e);for(i.s=0,i.t=n;n>0;)i[--n]=0;for(var o=i.t-this.t;n<o;++n)i[n+this.t]=this.am(0,t[n],i,n,0,this.t);for(o=Math.min(t.t,e);n<o;++n)this.am(0,t[n],i,n,0,e-n);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),n=i.getLowestSetBit();if(n<=0)return!1;var o=i.shiftRight(n);(e=e+1>>1)>C.length&&(e=C.length);for(var r=A(),s=0;s<e;++s){r.fromInt(C[Math.floor(Math.random()*C.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(i)){for(var l=1;l++<n&&0!=a.compareTo(i);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=A();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(i.compareTo(n)<0){var o=i;i=n,n=o}var r=i.getLowestSetBit(),s=n.getLowestSetBit();if(s<0)e(i);else{r<s&&(s=r),s>0&&(i.rShiftTo(s,i),n.rShiftTo(s,n));var a=function(){(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),i.compareTo(n)>=0?(i.subTo(n,i),i.rShiftTo(1,i)):(n.subTo(i,n),n.rShiftTo(1,n)),i.signum()>0?setTimeout(a,0):(s>0&&n.lShiftTo(s,n),setTimeout((function(){e(n)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,i,n,o){if("number"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);var r=this,a=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(i)?setTimeout((function(){o()}),0):setTimeout(a,0)};setTimeout(a,0)}else{var l=[],u=7&e;l.length=1+(e>>3),i.nextBytes(l),u>0?l[0]&=(1<<u)-1:l[0]=0,this.fromString(l,256)}},t}(),P=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),R=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),I=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=A();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(O.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=A();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),$=function(){function t(t){this.m=t,this.r2=A(),this.q3=A(),O.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=A();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function A(){return new O(null)}function L(t,e){return new O(t,e)}var j="undefined"!=typeof navigator;j&&"Microsoft Internet Explorer"==navigator.appName?(O.prototype.am=function(t,e,i,n,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var l=32767&this[t],u=this[t++]>>15,c=a*l+u*s;o=((l=s*l+((32767&c)<<15)+i[n]+(1073741823&o))>>>30)+(c>>>15)+a*u+(o>>>30),i[n++]=1073741823&l}return o},x=30):j&&"Netscape"!=navigator.appName?(O.prototype.am=function(t,e,i,n,o,r){for(;--r>=0;){var s=e*this[t++]+i[n]+o;o=Math.floor(s/67108864),i[n++]=67108863&s}return o},x=26):(O.prototype.am=function(t,e,i,n,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var l=16383&this[t],u=this[t++]>>14,c=a*l+u*s;o=((l=s*l+((16383&c)<<14)+i[n]+o)>>28)+(c>>14)+a*u,i[n++]=268435455&l}return o},x=28),O.prototype.DB=x,O.prototype.DM=(1<<x)-1,O.prototype.DV=1<<x,O.prototype.FV=Math.pow(2,52),O.prototype.F1=52-x,O.prototype.F2=2*x-52;var M,V,B=[];for(M="0".charCodeAt(0),V=0;V<=9;++V)B[M++]=V;for(M="a".charCodeAt(0),V=10;V<36;++V)B[M++]=V;for(M="A".charCodeAt(0),V=10;V<36;++V)B[M++]=V;function k(t,e){var i=B[t.charCodeAt(e)];return null==i?-1:i}function q(t){var e=A();return e.fromInt(t),e}function G(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}O.ZERO=q(0),O.ONE=q(1);var J,H,z=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,n;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[i],this.S[i]=n;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),F=null;if(null==F){F=[],H=0;var K=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var U=new Uint32Array(256);for(window.crypto.getRandomValues(U),K=0;K<U.length;++K)F[H++]=255&U[K]}var W=0,X=function(t){if((W=W||0)>=256||H>=256)window.removeEventListener?window.removeEventListener("mousemove",X,!1):window.detachEvent&&window.detachEvent("onmousemove",X);else try{var e=t.x+t.y;F[H++]=255&e,W+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",X,!1):window.attachEvent&&window.attachEvent("onmousemove",X))}function Y(){if(null==J){for(J=new z;H<256;){var t=Math.floor(65536*Math.random());F[H++]=255&t}for(J.init(F),H=0;H<F.length;++H)F[H]=0;H=0}return J.next()}var Q=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Y()},t}(),Z=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,i=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var i=[],n=t.length-1;n>=0&&e>0;){var o=t.charCodeAt(n--);o<128?i[--e]=o:o>127&&o<2048?(i[--e]=63&o|128,i[--e]=o>>6|192):(i[--e]=63&o|128,i[--e]=o>>6&63|128,i[--e]=o>>12|224)}i[--e]=0;for(var r=new Q,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);i[--e]=s[0]}return i[--e]=2,i[--e]=0,new O(i)}(t,e);if(null==i)return null;var n=this.doPublic(i);if(null==n)return null;for(var o=n.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16),this.d=L(i,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,i,n,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=L(t,16),this.e=parseInt(e,16),this.d=L(i,16),this.p=L(n,16),this.q=L(o,16),this.dmp1=L(r,16),this.dmq1=L(s,16),this.coeff=L(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var i=new Q,n=t>>1;this.e=parseInt(e,16);for(var o=new O(e,16);;){for(;this.p=new O(t-n,1,i),0!=this.p.subtract(O.ONE).gcd(o).compareTo(O.ONE)||!this.p.isProbablePrime(10););for(;this.q=new O(n,1,i),0!=this.q.subtract(O.ONE).gcd(o).compareTo(O.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(O.ONE),a=this.q.subtract(O.ONE),l=s.multiply(a);if(0==l.gcd(o).compareTo(O.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(l),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=L(t,16),i=this.doPrivate(e);return null==i?null:function(t,e){for(var i=t.toByteArray(),n=0;n<i.length&&0==i[n];)++n;if(i.length-n!=e-1||2!=i[n])return null;for(++n;0!=i[n];)if(++n>=i.length)return null;for(var o="";++n<i.length;){var r=255&i[n];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&i[n+1]),++n):(o+=String.fromCharCode((15&r)<<12|(63&i[n+1])<<6|63&i[n+2]),n+=2)}return o}(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var n=new Q,o=t>>1;this.e=parseInt(e,16);var r=new O(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(O.ONE),n=s.q.subtract(O.ONE),o=e.multiply(n);0==o.gcd(r).compareTo(O.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(n),s.coeff=s.q.modInverse(s.p),setTimeout((function(){i()}),0)):setTimeout(a,0)},l=function(){s.q=A(),s.q.fromNumberAsync(o,1,n,(function(){s.q.subtract(O.ONE).gcda(r,(function(t){0==t.compareTo(O.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(l,0)}))}))},u=function(){s.p=A(),s.p.fromNumberAsync(t-o,1,n,(function(){s.p.subtract(O.ONE).gcda(r,(function(t){0==t.compareTo(O.ONE)&&s.p.isProbablePrime(10)?setTimeout(l,0):setTimeout(u,0)}))}))};setTimeout(u,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,i){var n=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var i=e-t.length-6,n="",o=0;o<i;o+=2)n+="ff";return L("0001"+n+"00"+t,16)}((_[i]||"")+e(t).toString(),this.n.bitLength()/4);if(null==n)return null;var o=this.doPrivate(n);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,i){var n=L(e,16),o=this.doPublic(n);return null==o?null:function(t){for(var e in _)if(_.hasOwnProperty(e)){var i=_[e],n=i.length;if(t.substr(0,n)==i)return t.substr(n)}return t}(o.toString(16).replace(/^1f+00/,""))==i(t).toString()},t}(),_={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},tt={};tt.lang={extend:function(t,e,i){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i){var o;for(o in i)t.prototype[o]=i[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var i=s[o],n=e[i];"function"==typeof n&&n!=Object.prototype[i]&&(t[i]=n)}})}catch(t){}r(t.prototype,i)}}};var et={};void 0!==et.asn1&&et.asn1||(et.asn1={}),et.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var n="",o=0;o<i;o++)n+="f";e=new O(n,16).xor(t).add(O.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=et.asn1,i=e.DERBoolean,n=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,l=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,p=e.DERPrintableString,h=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var E=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+E+":"))throw"undefined key: "+E;if("bool"==E)return new i(t[E]);if("int"==E)return new n(t[E]);if("bitstr"==E)return new o(t[E]);if("octstr"==E)return new r(t[E]);if("null"==E)return new s(t[E]);if("oid"==E)return new a(t[E]);if("enum"==E)return new l(t[E]);if("utf8str"==E)return new u(t[E]);if("numstr"==E)return new c(t[E]);if("prnstr"==E)return new p(t[E]);if("telstr"==E)return new h(t[E]);if("ia5str"==E)return new d(t[E]);if("utctime"==E)return new f(t[E]);if("gentime"==E)return new g(t[E]);if("seq"==E){for(var x=t[E],D=[],T=0;T<x.length;T++){var S=w(x[T]);D.push(S)}return new v({array:D})}if("set"==E){for(x=t[E],D=[],T=0;T<x.length;T++)S=w(x[T]),D.push(S);return new y({array:D})}if("tag"==E){var C=t[E];if("[object Array]"===Object.prototype.toString.call(C)&&3==C.length){var N=w(C[2]);return new m({tag:C[0],explicit:C[1],obj:N})}var O={};if(void 0!==C.explicit&&(O.explicit=C.explicit),void 0!==C.tag&&(O.tag=C.tag),void 0===C.obj)throw"obj shall be specified for 'tag'.";return O.obj=w(C.obj),new m(O)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},et.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",i=parseInt(t.substr(0,2),16),n=(e=Math.floor(i/40)+"."+i%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);n+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new O(n,2).toString(10),n="")}return e},et.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new O(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);return n},et.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var i=e.length/2;if(i>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},et.asn1.DERAbstractString=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},tt.lang.extend(et.asn1.DERAbstractString,et.asn1.ASN1Object),et.asn1.DERAbstractTime=function(t){et.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var n=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+n(String(o.getMonth()+1),2)+n(String(o.getDate()),2)+n(String(o.getHours()),2)+n(String(o.getMinutes()),2)+n(String(o.getSeconds()),2);if(!0===i){var a=o.getMilliseconds();if(0!=a){var l=n(String(a),3);s=s+"."+(l=l.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,n,o,r){var s=new Date(Date.UTC(t,e-1,i,n,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},tt.lang.extend(et.asn1.DERAbstractTime,et.asn1.ASN1Object),et.asn1.DERAbstractStructured=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},tt.lang.extend(et.asn1.DERAbstractStructured,et.asn1.ASN1Object),et.asn1.DERBoolean=function(){et.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},tt.lang.extend(et.asn1.DERBoolean,et.asn1.ASN1Object),et.asn1.DERInteger=function(t){et.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DERInteger,et.asn1.ASN1Object),et.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}et.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var i="0"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+="0";var n="";for(i=0;i<t.length-1;i+=8){var o=t.substr(i,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),n+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",i=0;i<t.length;i++)1==t[i]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},tt.lang.extend(et.asn1.DERBitString,et.asn1.ASN1Object),et.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}et.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},tt.lang.extend(et.asn1.DEROctetString,et.asn1.DERAbstractString),et.asn1.DERNull=function(){et.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},tt.lang.extend(et.asn1.DERNull,et.asn1.ASN1Object),et.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new O(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};et.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=n},this.setValueName=function(t){var e=et.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},tt.lang.extend(et.asn1.DERObjectIdentifier,et.asn1.ASN1Object),et.asn1.DEREnumerated=function(t){et.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DEREnumerated,et.asn1.ASN1Object),et.asn1.DERUTF8String=function(t){et.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},tt.lang.extend(et.asn1.DERUTF8String,et.asn1.DERAbstractString),et.asn1.DERNumericString=function(t){et.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},tt.lang.extend(et.asn1.DERNumericString,et.asn1.DERAbstractString),et.asn1.DERPrintableString=function(t){et.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},tt.lang.extend(et.asn1.DERPrintableString,et.asn1.DERAbstractString),et.asn1.DERTeletexString=function(t){et.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},tt.lang.extend(et.asn1.DERTeletexString,et.asn1.DERAbstractString),et.asn1.DERIA5String=function(t){et.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},tt.lang.extend(et.asn1.DERIA5String,et.asn1.DERAbstractString),et.asn1.DERUTCTime=function(t){et.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},tt.lang.extend(et.asn1.DERUTCTime,et.asn1.DERAbstractTime),et.asn1.DERGeneralizedTime=function(t){et.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},tt.lang.extend(et.asn1.DERGeneralizedTime,et.asn1.DERAbstractTime),et.asn1.DERSequence=function(t){et.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},tt.lang.extend(et.asn1.DERSequence,et.asn1.DERAbstractStructured),et.asn1.DERSet=function(t){et.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},tt.lang.extend(et.asn1.DERSet,et.asn1.DERAbstractStructured),et.asn1.DERTaggedObject=function(t){et.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},tt.lang.extend(et.asn1.DERTaggedObject,et.asn1.ASN1Object);var it,nt,ot=(it=function(t,e){return it=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},it(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}it(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),rt=function(t){function e(i){var n=t.call(this)||this;return i&&("string"==typeof i?n.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&n.parsePropertiesFrom(i)),n}return ot(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,n=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===p){var i="0123456789ABCDEF";for(p={},e=0;e<16;++e)p[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)p[i.charAt(e)]=e;for(e=0;e<8;++e)p[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=p[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(n[n.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return n}(t):v.unarmor(t),o=T.decode(n);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=L(e,16),i=o.sub[2].getHexStringValue(),this.e=parseInt(i,16);var r=o.sub[3].getHexStringValue();this.d=L(r,16);var s=o.sub[4].getHexStringValue();this.p=L(s,16);var a=o.sub[5].getHexStringValue();this.q=L(a,16);var l=o.sub[6].getHexStringValue();this.dmp1=L(l,16);var u=o.sub[7].getHexStringValue();this.dmq1=L(u,16);var c=o.sub[8].getHexStringValue();this.coeff=L(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=L(e,16),i=h.sub[1].getHexStringValue(),this.e=parseInt(i,16)}else e=o.sub[0].getHexStringValue(),this.n=L(e,16),i=o.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new et.asn1.DERInteger({int:0}),new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e}),new et.asn1.DERInteger({bigint:this.d}),new et.asn1.DERInteger({bigint:this.p}),new et.asn1.DERInteger({bigint:this.q}),new et.asn1.DERInteger({bigint:this.dmp1}),new et.asn1.DERInteger({bigint:this.dmq1}),new et.asn1.DERInteger({bigint:this.coeff})]};return new et.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return d(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new et.asn1.DERSequence({array:[new et.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new et.asn1.DERNull]}),e=new et.asn1.DERSequence({array:[new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e})]}),i=new et.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new et.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return d(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(i,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(Z),st="undefined"!=typeof process?null===(nt=process.env)||void 0===nt?void 0:nt.npm_package_version:void 0;const at=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new rt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(f(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return d(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,i){try{return d(this.getKey().sign(t,e,i))}catch(t){return!1}},t.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,f(e),i)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new rt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=st,t}();function lt(t,e){return"object"==typeof t?function(t,e){for(let i of Object.keys(t))t[i]=lt(t[i],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const i=new at;return i.setPrivateKey(e),i.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const i=new at;return i.setPrivateKey(e),i.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return lt(t,e)},i(506),i(676),i(894),window.$net={},window.$net.get=function(t,e={callback:null,async:!1}){const i=new XMLHttpRequest;return i.open("GET",t,!!e.async),i.send(),4==i.readyState&&200==i.status&&e.callback&&e.callback(i.responseText),i.responseText},window.$store={},window.$store.getStorage=function(t,e=void 0){let i=localStorage.getItem(t);if(i){const n=JSON.parse(i);return n.timeout>0&&Date.now()-n.savetime>n.timeout?(`本地缓存${t}已过期`.warn(),e):n.data}return e},window.$store.setStorage=function(t,e,i=-1){let n={savetime:Date.now(),timeout:i,data:e};localStorage.setItem(t,JSON.stringify(n))},i(228);class ut{getImg(t){return""}emit(t,e){}}window.BasicProperty=ut;const ct=ut;class pt extends ct{}window.AbstractComponent=pt;const ht=pt;var dt;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu",t.FileTreeX="I-File-Tree",t.TreeView="I-Tree-View",t.TextAreaX="I-Text-Area"}(dt||(dt={})),window.ComponentType=dt;const ft=dt;class gt extends ct{constructor(){super(...arguments),this.components={},this.fieldNames=[],this.methodNames=[],this.computes=[],this.watchs=[],this.propMap=new Map}getInstance(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null}getFields(){const t=this,e=this.getInstance();return function(){const i={$class:e,vid:"",name:t.name};for(let n of t.fieldNames)$set(i,n,$get(e,n));return i}}getMethods(){const t=this.getInstance(),e={getImg:function(t){return mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):()=>{}};for(let i of this.methodNames)e[i]=$get(t,i);return e}getComputeds(){let t={};for(let e of this.computes)t[e.fieldName]=e.func;return t}setProp(t,e){this.propMap.set(t,e)}getProps(){const t={};return this.propMap.forEach(((e,i)=>{$set(t,i,e)})),t}getMounted(){return function(){const t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(()=>t),t.vid),t.appMounted()}}getTemplate(){return $get(this.getInstance(),this.template)}getWatchs(){const t=this.getInstance();let e={};for(let i of this.watchs)e[i.target]={handler:$get(t,i.funcName),deep:i.deep};return e}getComponents(){return this.components}}window.MetaData=gt;const vt=gt;let yt=null;const mt=new Map;window.$registry={},$registry.getComponent=function(t){return t&&yt?(mt.set(t,yt),yt=null,mt.get(t)):yt||(yt=new vt,yt)},$registry.buildComponent=function(t){const e=mt.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){const e=mt.get(t),i=$registry.buildComponent(t);return window.registVue(e.name,i)};class wt{constructor(t,e){this.en=t,this.zh=e}}window.LangItem=wt;const bt=wt;var Et;window.RightMenu=class{constructor(t,e=function(t,e){},i=function(t,e){return!0}){this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=i}},function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(Et||(Et={})),window.RsaConst=Et;const xt=Et;window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,i){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,i=!1){return function(n,o){$registry.getComponent().propMap.set(o,{type:t,default:e,required:i})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,i){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,i){$registry.getComponent().computes.push({fieldName:i,func:t})}},window.Component=function(t){return function(e,i){$registry.getComponent().components=t}},window.Watch=function(t,e=!0){return function(i,n){$registry.getComponent().watchs.push({target:t,deep:e,funcName:n})}},window.Service=function(t,e,i){return function(n){const o=$registry.getComponent(e);o.clazz=t,o.name=e,o.setProp("iProps",{type:Object,default:{},required:!!i})}};var Dt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Tt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 按钮 --\x3e\n    <div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>'}getClass(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}}getStyle(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}}};Dt([Template],Tt.prototype,"template",void 0),Dt([Method],Tt.prototype,"getClass",null),Dt([Method],Tt.prototype,"getStyle",null),Dt([Compute((t=>t.iProps.singleClick||(t=>{})))],Tt.prototype,"$singleClick",void 0),Dt([Compute((t=>t.iProps.size||"normal"))],Tt.prototype,"$size",void 0),Dt([Compute((t=>t.iProps.type||"primary"))],Tt.prototype,"$type",void 0),Tt=Dt([Service(Tt,ft.ButtonX,!0)],Tt),$registry.buildAndRegist(ft.ButtonX);var St=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ct=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 文本输入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        \x3c!-- 文本输入框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',this.value=""}mounted(){$queue.on("dinglj-v-input-text::clear",(()=>{this.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(()=>{window.byId(this.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}};St([Mounted],Ct.prototype,"mounted",null),St([Template],Ct.prototype,"template",void 0),St([Field],Ct.prototype,"value",void 0),St([Method],Ct.prototype,"getStyle",null),St([Method],Ct.prototype,"setValue",null),St([Compute((t=>t.iProps.size||"normal"))],Ct.prototype,"$size",void 0),St([Compute((t=>t.iProps.caption||""))],Ct.prototype,"$caption",void 0),St([Compute((t=>t.iProps.placeholder||`请输入${t.$caption}`))],Ct.prototype,"$placeholder",void 0),Ct=St([Service(Ct,ft.InputX,!0)],Ct),$registry.buildAndRegist(ft.InputX);var Nt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ot=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 开关 --\x3e\n    <div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',this.active=!1}getStyle(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}}getClass(){return{"dinglj-v-switch-btn":!0,active:this.active}}onclicked(){this.active=!this.active,this.active?this.postText&&`已切换至: ${this.postText}`.info():this.preText&&`已切换至: ${this.preText}`.info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})}};Nt([Template],Ot.prototype,"template",void 0),Nt([Field],Ot.prototype,"active",void 0),Nt([Method],Ot.prototype,"getStyle",null),Nt([Method],Ot.prototype,"getClass",null),Nt([Method],Ot.prototype,"onclicked",null),Nt([Compute((t=>t.iProps.size||"normal"))],Ot.prototype,"xSize",void 0),Nt([Compute((t=>t.iProps.preTxt||""))],Ot.prototype,"preText",void 0),Nt([Compute((t=>t.iProps.postTxt||""))],Ot.prototype,"postText",void 0),Ot=Nt([Service(Ot,ft.SwitchX,!0)],Ot),$registry.buildAndRegist(ft.SwitchX);var Pt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Rt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 下拉框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        \x3c!-- 下拉框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        \x3c!-- 下拉框选项集合 --\x3e\n        <div class="dinglj-v-combo-selections">\n            \x3c!-- 下拉框选项 --\x3e\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',this.value=null}setValue(t){this.value!=t&&(this.value=t,this.$onChange(t))}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}$onChange(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})}};Pt([Template],Rt.prototype,"template",void 0),Pt([Field],Rt.prototype,"value",void 0),Pt([Method],Rt.prototype,"setValue",null),Pt([Method],Rt.prototype,"getStyle",null),Pt([Method],Rt.prototype,"$onChange",null),Pt([Compute((t=>t.iProps.list||[]))],Rt.prototype,"$list",void 0),Pt([Compute((t=>t.iProps.size||"normal"))],Rt.prototype,"$size",void 0),Pt([Compute((t=>t.iProps.caption||""))],Rt.prototype,"$caption",void 0),Pt([Compute((t=>t.iProps.placeholder||`请选择${t.$caption}`))],Rt.prototype,"$placeholder",void 0),Pt([Compute((t=>t.iProps.getLabel||(t=>t)))],Rt.prototype,"$getLabel",void 0),Pt([Compute((t=>t.iProps.getValue||(t=>t)))],Rt.prototype,"$getValue",void 0),Rt=Pt([Service(Rt,ft.ComboX,!0)],Rt),$registry.buildAndRegist(ft.ComboX);var It=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let $t=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 导航菜单 --\x3e\n    <div id="dinglj-v-navigator">\n        \x3c!-- 每一个菜单 --\x3e\n        <div class="dinglj-v-navigator-item" v-for="item in list" @click="setValue(item)" :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',this.value=null}mounted(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])}setValue(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))}};It([Mounted],$t.prototype,"mounted",null),It([Template],$t.prototype,"template",void 0),It([Field],$t.prototype,"value",void 0),It([Method],$t.prototype,"setValue",null),It([Compute((t=>(null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value)))],$t.prototype,"validItem",void 0),It([Compute((t=>t.iProps.list||[]))],$t.prototype,"list",void 0),It([Compute((t=>t.iProps.default||(t.list.length>0?t.list[0]:null)))],$t.prototype,"default",void 0),It([Compute((t=>t.iProps.getCaption||(t=>t)))],$t.prototype,"getCaption",void 0),$t=It([Service($t,ft.NavigatorX,!0)],$t),$registry.buildAndRegist(ft.NavigatorX);var At=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Lt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 纵向滚动视图 --\x3e\n    <div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{top:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,height:`${this.size}00%`}}};At([Template],Lt.prototype,"template",void 0),At([Compute((t=>t.iProps.size||0))],Lt.prototype,"size",void 0),At([Compute((t=>t.iProps.index||0))],Lt.prototype,"index",void 0),At([Method],Lt.prototype,"getStyle",null),Lt=At([Service(Lt,ft.ScrollerY,!0)],Lt),$registry.buildAndRegist(ft.ScrollerY);var jt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Mt=class extends ht{constructor(){super(...arguments),this.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content" :active="active"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',this.active=null}};jt([Template],Mt.prototype,"template",void 0),jt([Field],Mt.prototype,"active",void 0),jt([Compute((t=>({list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}})))],Mt.prototype,"navigatorProps",void 0),jt([Compute((t=>({size:t.list.length,index:t.list.indexOf(t.active)})))],Mt.prototype,"scrollyProps",void 0),jt([Compute((t=>t.iProps.list||[]))],Mt.prototype,"list",void 0),Mt=jt([Service(Mt,ft.NavigatorView,!0)],Mt),$registry.buildAndRegist(ft.NavigatorView);var Vt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Bt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- Tab --\x3e\n    <div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        \x3c!-- Tab 页标题 --\x3e\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\x3c!-- Tab 页标题的浮动下划线 --\x3e\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        \x3c!-- Tab 页具体内容 --\x3e\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',this.value=null}mounted(){Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(()=>{const t=(this.index+1+this.list.length)%this.list.length;this.clicked(this.list[t],t)}),this.vid),$queue.on("tab-panel:to",(t=>{const e=this.list.filter((e=>JSON.stringify(e)==JSON.stringify(t)));e.length>0&&this.clicked(e[0],this.list.indexOf(e[0]))}),this.vid)}getClass(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}}getId(t){return`${this.vid}-${t}`}clicked(t,e){t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),window.timer((t=>{const i=window.selector(`#${t.vid} .dinglj-v-tab-float`);if(!i)return!1;const n=i[0],o=window.byId(t.getId(e));return o&&(n.style.width=`${o.offsetWidth}px`,n.style.left=`${o.offsetLeft}px`),!0}),this))}};Vt([Mounted],Bt.prototype,"mounted",null),Vt([Template],Bt.prototype,"template",void 0),Vt([Field],Bt.prototype,"value",void 0),Vt([Method],Bt.prototype,"getClass",null),Vt([Method],Bt.prototype,"getId",null),Vt([Method],Bt.prototype,"clicked",null),Vt([Compute((t=>(!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value))))],Bt.prototype,"index",void 0),Vt([Compute((t=>{if(!t.iProps.list)return[];let e=!1;for(let i of t.iProps.list)if(JSON.stringify(t.value)==JSON.stringify(i)){e=!0;break}return e||t.clicked(t.iProps.list[0],0),t.iProps.list}))],Bt.prototype,"list",void 0),Vt([Compute((t=>t.iProps.getLabel||(t=>t)))],Bt.prototype,"getLabel",void 0),Bt=Vt([Service(Bt,ft.TabPanelX,!0)],Bt),$registry.buildAndRegist(ft.TabPanelX);var kt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let qt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 横向滚动视图 --\x3e\n    <div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{left:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,width:`${this.size}00%`}}};kt([Template],qt.prototype,"template",void 0),kt([Compute((t=>t.iProps.size||0))],qt.prototype,"size",void 0),kt([Compute((t=>t.iProps.index||0))],qt.prototype,"index",void 0),kt([Method],qt.prototype,"getStyle",null),qt=kt([Service(qt,ft.ScrollerX,!0)],qt),$registry.buildAndRegist(ft.ScrollerX);var Gt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Jt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- Tab 页视图 --\x3e\n    <div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',this.value=null,this.tabPanelId=""}mounted(){$queue.on("tab-view:next",(()=>{$queue.sendMsg("tab-panel:next",null,this.tabPanelId)}),this.vid),$queue.on("tab-view:to",(t=>{$queue.sendMsg("tab-panel:to",t,this.tabPanelId)}),this.vid)}tabPanelLoaded(t){this.tabPanelId=t.value}};Gt([Mounted],Jt.prototype,"mounted",null),Gt([Template],Jt.prototype,"template",void 0),Gt([Compute((t=>({size:t.list.length,index:t.index})))],Jt.prototype,"scrollxProps",void 0),Gt([Compute((t=>({list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}})))],Jt.prototype,"tabPanelProps",void 0),Gt([Field],Jt.prototype,"value",void 0),Gt([Field],Jt.prototype,"tabPanelId",void 0),Gt([Method],Jt.prototype,"tabPanelLoaded",null),Gt([Compute((t=>t.list.indexOfIgnoreCase(t.value)))],Jt.prototype,"index",void 0),Gt([Compute((t=>t.iProps.list||[]))],Jt.prototype,"list",void 0),Jt=Gt([Service(Jt,ft.TabView,!0)],Jt),$registry.buildAndRegist(ft.TabView);var Ht=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let zt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 表格 --\x3e\n    <div class="dinglj-v-table" :id="vid" :data-title="title">\n        \x3c!-- 表头 --\x3e\n        <div class="dinglj-v-thead dinglj-v-tr">\n            \x3c!-- 复选框 --\x3e\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            \x3c!-- 序号 --\x3e\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            \x3c!-- 表头的每一列 --\x3e\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                \x3c!-- 表头的右键菜单 --\x3e\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        \x3c!-- 表体 --\x3e\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                \x3c!-- 表格的每一行内容 --\x3e\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    \x3c!-- 复选框 --\x3e\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    \x3c!-- 序号 --\x3e\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    \x3c!-- 表格中的每一列 --\x3e\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    \x3c!-- 表格每一行的右键菜单 --\x3e\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                \x3c!-- 表格空白处的右键菜单 --\x3e\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',this.cache={},this.checkAll=!1,this.checkedList=[],this.bestWidthCache=!1}mounted(){const t=this;window.timer((()=>{const e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)}genHeadProps(t){return{bindId:`${this.vid}-Col-${this.getColumnKey(t)}`,data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}}genLineProps(t,e){return{bindId:`${this.vid}-${e}`,data:t,list:this.rowMenus}}genBodyProps(){return{bindId:`${this.vid}-Body`,data:this.list,list:this.bodyMenus}}checkOne(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))}getClass(t){const e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];let i=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed";const n={"dinglj-v-cell":!0};return n[e]=!0,n[i]=!0,this.cache[e]=n,n}getStyle(t){let e;return e=""==t?80:this.getBestWidth()[t],{width:`${e}px`}}doCheckAll(){this.checkedList.length=0,this.checkAll||this.checkedList.push(...this.list),this.checkAll=!this.checkAll}getBestWidth(){if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(let t of this.columns){const e=this.getColumnKey(t),i=this.getColumnLabel(t);let n=[window.calcTxtWidth(`${i}`)];n.push(...this.list.map((t=>{const i=this.getCell(t,e);return window.calcTxtWidth(i)})));const o=Math.max(...n);this.bestWidthCache[e]=o+20}return this.bestWidthCache}exportToExcel(){const t=this;window.timer((function(){const e=window.byId(t.vid);if(!e)return!1;let i="";for(let t of e.children[0].children)t.classList.contains("dinglj-v-table-select")||(i+=t.innerText);i+="\n";for(let t of e.children[1].children[0].children){for(let e of t.children)e.classList.contains("dinglj-v-table-select")||(i+=e.innerText);i+="\n"}return console.log(i),!0}))}};Ht([Mounted],zt.prototype,"mounted",null),Ht([Template],zt.prototype,"template",void 0),Ht([Field],zt.prototype,"cache",void 0),Ht([Field],zt.prototype,"checkAll",void 0),Ht([Field],zt.prototype,"checkedList",void 0),Ht([Field],zt.prototype,"bestWidthCache",void 0),Ht([Method],zt.prototype,"genHeadProps",null),Ht([Method],zt.prototype,"genLineProps",null),Ht([Method],zt.prototype,"genBodyProps",null),Ht([Method],zt.prototype,"checkOne",null),Ht([Method],zt.prototype,"getClass",null),Ht([Method],zt.prototype,"getStyle",null),Ht([Method],zt.prototype,"doCheckAll",null),Ht([Method],zt.prototype,"getBestWidth",null),Ht([Method],zt.prototype,"exportToExcel",null),Ht([Compute((t=>t.iProps.title||""))],zt.prototype,"title",void 0),Ht([Compute((t=>t.iProps.flexColumns||[]))],zt.prototype,"flexColumns",void 0),Ht([Compute((t=>t.iProps.list||[]))],zt.prototype,"list",void 0),Ht([Compute((t=>t.iProps.sequenceNum||!0))],zt.prototype,"sequenceNum",void 0),Ht([Compute((t=>t.iProps.selectable||!0))],zt.prototype,"selectable",void 0),Ht([Compute((t=>t.iProps.columns||[]))],zt.prototype,"columns",void 0),Ht([Compute((t=>t.iProps.getColumnKey||(t=>t)))],zt.prototype,"getColumnKey",void 0),Ht([Compute((t=>t.iProps.getColumnLabel||(t=>t)))],zt.prototype,"getColumnLabel",void 0),Ht([Compute((t=>t.iProps.getCell||((e,i)=>{let n=t.iProps.getColumnKey(i);return $get(e,n)})))],zt.prototype,"getCell",void 0),Ht([Compute((t=>t.iProps.rowMenus||[]))],zt.prototype,"rowMenus",void 0),Ht([Compute((t=>t.iProps.bodyMenus||[]))],zt.prototype,"bodyMenus",void 0),Ht([Compute((t=>t.iProps.titleColumnMenus||[]))],zt.prototype,"titleColumnMenus",void 0),zt=Ht([Service(zt,ft.TableX,!0)],zt),$registry.buildAndRegist(ft.TableX);var Ft=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Kt=class extends ht{constructor(){super(...arguments),this.template="\x3c!-- 进度条 --\x3e\n    <div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        \x3c!-- 上方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        \x3c!-- 进度条本体 --\x3e\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        \x3c!-- 下方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>"}getContainerStyle(){return{"--bar-height":this.height}}getProgressStyle(){return window.timer((t=>{const e=window.byId(t.vid);return!!e&&(e.findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent,!0)}),this),{width:"0%"}}};Ft([Template],Kt.prototype,"template",void 0),Ft([Method],Kt.prototype,"getContainerStyle",null),Ft([Method],Kt.prototype,"getProgressStyle",null),Ft([Compute((t=>(t.iProps.height||5)+"px"))],Kt.prototype,"height",void 0),Ft([Compute((t=>t.iProps.percent||"100%"))],Kt.prototype,"percent",void 0),Ft([Compute((t=>t.iProps.txtPosition||"TopLeft"))],Kt.prototype,"position",void 0),Ft([Compute((t=>t.iProps.caption||""))],Kt.prototype,"caption",void 0),Kt=Ft([Service(Kt,ft.ProgressX,!0)],Kt),$registry.buildAndRegist(ft.ProgressX);var Ut=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Wt=class extends ht{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 对话框这招背景遮罩 --\x3e\n        <div class="dinglj-v-modal-mask"></div>\n        \x3c!-- 对话框 --\x3e\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            \x3c!-- 标题 --\x3e\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            \x3c!-- 内容 --\x3e\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            \x3c!-- 按钮 --\x3e\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',this.position={x:-1,y:-1}}mounted(){window.addEventListener("mouseup",this.cleanXY)}getStyle(){return{width:`${this.width}px`,height:`${this.height}px`}}closeModal(){this.iProps.onClose()}recordXY(t){const e=window.byId(this.vid);if(!e)return void this.cleanXY();let i=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(i.left),y:t.screenY-parseInt(i.top)}}moveXY(t){if(window.getVal(this.position,"x",-1)>=0){const e=window.byId(this.vid);e.style.left=t.screenX-this.position.x+"px",e.style.top=t.screenY-this.position.y+"px"}}cleanXY(){this.position={x:-1,y:-1}}};Ut([Mounted],Wt.prototype,"mounted",null),Ut([Template],Wt.prototype,"template",void 0),Ut([Field],Wt.prototype,"position",void 0),Ut([Method],Wt.prototype,"getStyle",null),Ut([Method],Wt.prototype,"closeModal",null),Ut([Method],Wt.prototype,"recordXY",null),Ut([Method],Wt.prototype,"moveXY",null),Ut([Method],Wt.prototype,"cleanXY",null),Ut([Compute((t=>({type:"cancel",singleClick:function(e){t.cancel()}})))],Wt.prototype,"cancelProps",void 0),Ut([Compute((t=>({singleClick:function(e){t.ok()}})))],Wt.prototype,"okProps",void 0),Ut([Compute((t=>t.iProps.display||!1))],Wt.prototype,"display",void 0),Ut([Compute((t=>t.iProps.ok||t.closeModal))],Wt.prototype,"ok",void 0),Ut([Compute((t=>t.iProps.cancel||t.closeModal))],Wt.prototype,"cancel",void 0),Ut([Compute((t=>t.iProps.width||600))],Wt.prototype,"width",void 0),Ut([Compute((t=>t.iProps.height||300))],Wt.prototype,"height",void 0),Wt=Ut([Service(Wt,ft.ModalX,!0)],Wt),$registry.buildAndRegist(ft.ModalX);var Xt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Yt=class extends ht{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 右键菜单 --\x3e\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            \x3c!-- 右键菜单集合 --\x3e\n            <div v-for="item in $list">\n                \x3c!-- 每一个右键菜单 --\x3e\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',this.display=!1,this.position={top:"0px",left:"0px",opacity:"0"}}mounted(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()}binding(){const t=this;window.timer((()=>!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){t.$list&&0!=t.$list.length&&($queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){let e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)})))})),!0))),500)}hidden(){this.position.opacity="0",this.display=!1}conditionIfDisplay(t){return t.isDisplay(this.$ctx,this.element)}execCommand(t){t.event(this.$ctx,this.element),this.hidden()}};Xt([Mounted],Yt.prototype,"mounted",null),Xt([Template],Yt.prototype,"template",void 0),Xt([Field],Yt.prototype,"display",void 0),Xt([Field],Yt.prototype,"element",void 0),Xt([Field],Yt.prototype,"position",void 0),Xt([Method],Yt.prototype,"binding",null),Xt([Method],Yt.prototype,"hidden",null),Xt([Method],Yt.prototype,"conditionIfDisplay",null),Xt([Method],Yt.prototype,"execCommand",null),Xt([Compute((t=>t.iProps.list||[]))],Yt.prototype,"$list",void 0),Xt([Compute((t=>t.iProps.data||{}))],Yt.prototype,"$ctx",void 0),Yt=Xt([Service(Yt,ft.ContextMenuX,!0)],Yt),$registry.buildAndRegist(ft.ContextMenuX);var Qt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Zt=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 树形导航菜单 --\x3e\n    <div :style="{ \'margin-left\': root ? \'0px\' : indent + \'px\' }" v-for="item in list" :data-title="item.label">\n        <div class="dinglj-v-tree-label" @click.stop="expand($event, item)">\n            <img class="dinglj-v-menu-icon" v-if="item.type == \'entry\'" :src="getImg(\'folder.png\')"/>\n            <img class="dinglj-v-menu-icon" v-else :src="getImg(\'excel.png\')"/>\n            <span>{{ item.label }}</span>\n        </div>\n        <div class="dinglj-v-tree-children">\n            <div>\n                <i-file-tree :i-props="iProps4Children(item)"></i-file-tree>\n            </div>\n        </div>\n    </div>'}iProps4Children(t){const e=this;return{root:!1,indent:this.indent,list:t.children,parent:t,select:function(t){console.log(t),e.iProps.parent&&t.unshift(e.iProps.parent),e.iProps.select(t)}}}expand(t,e){if("entry"==e.type){let e=t.target;e.classList.contains("dinglj-v-tree-label")?e=e.nextElementSibling:"SPAN"==e.tagName&&e.parentElement.classList.contains("dinglj-v-tree-label")&&(e=e.parentElement.nextElementSibling),e.classList.contains("expand")?e.classList.remove("expand"):e.classList.add("expand")}else{const t=[e];this.iProps.parent&&t.unshift(this.iProps.parent),this.iProps.select(t)}}};Qt([Template],Zt.prototype,"template",void 0),Qt([Compute((t=>null==t.iProps.root))],Zt.prototype,"root",void 0),Qt([Compute((t=>t.iProps.list||[]))],Zt.prototype,"list",void 0),Qt([Compute((t=>t.iProps.indent||20))],Zt.prototype,"indent",void 0),Qt([Method],Zt.prototype,"iProps4Children",null),Qt([Method],Zt.prototype,"expand",null),Zt=Qt([Service(Zt,ft.FileTreeX,!0)],Zt),$registry.buildAndRegist(ft.FileTreeX);var _t=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let te=class extends ht{constructor(){super(...arguments),this.temp='\x3c!-- 树形视图 --\x3e\n    <div class="dinglj-v-tree-view">\n        <div class="dinglj-v-tree-nav">\n            <i-file-tree :i-props="iProps4Tree()"></i-file-tree>\n        </div>\n        <div class="dinglj-v-spliter" @mousedown="mousedown"></div>\n        <div class="dinglj-v-main-view">\n            <i-tab-view :i-props="tabProps()">\n                <div v-for="item in selectList">\n                    <slot name="content" :item="item.value"></slot>\n                </div>\n            </i-tab-view>\n        </div>\n    </div>',this.selectList=[],this.position={x:-1,width:0}}mounted(){const t=this;window.addEventListener("mousemove",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`})),window.addEventListener("mouseup",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`,t.position={x:-1,width:0}}))}mousedown(t){const e=window.selector(".dinglj-v-tree-nav")[0];this.position={x:t.clientX,width:e?e.offsetWidth:0}}iProps4Tree(){const t=this;return{list:t.iProps.list,indent:t.iProps.indent,parent:t.iProps.parent,root:t.iProps.root,select:function(e){e.length>0&&(t.selected=e[e.length-1],t.selectList.pushNew(t.selected)),t.iProps.select(e,t.selected)}}}tabProps(){return{list:this.selectList.filter((t=>t)).map((t=>t.label))}}};_t([Mounted],te.prototype,"mounted",null),_t([Template],te.prototype,"temp",void 0),_t([Field],te.prototype,"selectList",void 0),_t([Field],te.prototype,"selected",void 0),_t([Field],te.prototype,"position",void 0),_t([Method],te.prototype,"mousedown",null),_t([Method],te.prototype,"iProps4Tree",null),_t([Method],te.prototype,"tabProps",null),te=_t([Service(te,ft.TreeView,!0)],te),$registry.buildAndRegist(ft.TreeView);var ee=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let ie=class extends ht{constructor(){super(...arguments),this.template='\x3c!-- 文本域入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text-area" :caption="caption" :style="getStyle()" :id="vid">\n        <textarea\n            :placeholder="placeholder"\n            v-model="value"\n            @keyup.enter="setValue(value, \'enter\')"\n            @input="setValue(value, \'input\')"\n            @blur="setValue(value, \'blur\')"\n            @change="setValue(value, \'change\')"/>\n    </div>',this.value=""}mounted(){this.value=this.iProps.defaultValue||""}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}getStyle(){return{"--text-area-height":this.height}}};ee([Mounted],ie.prototype,"mounted",null),ee([Template],ie.prototype,"template",void 0),ee([Field],ie.prototype,"value",void 0),ee([Compute((t=>t.iProps.caption))],ie.prototype,"caption",void 0),ee([Compute((t=>t.iProps.placeholder))],ie.prototype,"placeholder",void 0),ee([Compute((t=>{const e=t.iProps.height||0;if(isNaN(e))return e;const i=parseInt(e);return e<100?"100px":`${i}px`}))],ie.prototype,"height",void 0),ee([Method],ie.prototype,"setValue",null),ee([Method],ie.prototype,"getStyle",null),ie=ee([Service(ie,ft.TextAreaX,!0)],ie),$registry.buildAndRegist(ft.TextAreaX);const ne={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"};class oe{constructor(t,e){if(!t)return;t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:(this.status=e.UNKNOWN,console.error(`未知的状态 {${t.stats}}, 结果 {${t.result}}, 请联系 dinglj 补充`)):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:(this.status=e.UNKNOWN,console.error(`未知的状态 {${t.stats}}, 请联系 dinglj 补充`)):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:(this.status=e.UNKNOWN,console.error(`未知的结果 {${t.result}}, 请联系 dinglj 补充`)),this.status==e.UNKNOWN&&console.error(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;let i=t.ticketId||t.log;this.ticket=i?parseInt(i):i,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}static getCaption(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}}}oe._fieldMap_=ne,oe._fields_=Object.keys(ne);class re{exec(t,e,i,n,o=""){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,n):this.func(t,e,i,o);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(o)}return!1}}window.defunc("RowFilter",((t,e,i)=>{let n=new re;return n.isRow=!0,n.groupRegExp=t,n.tabRegExp=e,n.func=i,n})),window.defunc("ColFilter",((t,e,i)=>{let n=new re;return n.isRow=!1,n.groupRegExp=t,n.tabRegExp=e,Array.isArray(i)?(n.ignoreColumns=i,n.type="array"):"function"==typeof i?(n.func=i,n.type="function"):(n.ignoreColumns=[i],n.type="single"),n}));class se{exec(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""}}window.defunc("GroupStrategy",((t,e,i)=>{let n=new se;return n.fieldKey=t,n.expectValue=e,n.groupName=i,Array.isArray(e)?n.expectValue=e:n.expectValue=[e],n})),window.defunc("GroupStrategy",(t=>{let e=new se;return e.func=t,e}));class ae{exec(t,e,i,n){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,i,n):this.expectValue.compareBy(i.get(this.fieldKey),n.get(this.fieldKey))}}window.defunc("OrderTicket",((t,e,i,n)=>{let o=new ae;return o.groupRegExp=t,o.tabRegExp=e,o.fieldKey=i,Array.isArray(n)?o.expectValue=n:o.expectValue=[n],o})),window.defunc("OrderTicket",((t,e,i)=>{let n=new ae;return n.groupRegExp=t,n.tabRegExp=e,n.func=i,n}));class le{exec(t,e){let i=this.groupRegExp.test(t);if(this.reverse&&(i=!i),i){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""}}window.defunc("TabPageStrategy",((t,e,i,n)=>window.TabPageStrategy(t,e,i,n,!1))),window.defunc("TabPageStrategy",((t,e,i,n,o)=>{const r=new le;return r.groupRegExp=t,r.fieldKey=e,r.tabName=n,r.reverse=o,Array.isArray(i)?r.expectValue=i:r.expectValue=[i],r})),window.defunc("TabPageStrategy",((t,e)=>window.TabPageStrategy(t,e,!1))),window.defunc("TabPageStrategy",((t,e,i)=>{const n=new le;return n.groupRegExp=t,n.func=e,n.reverse=i,n}));const ue={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",needbuild:"需打包",devtype:"开发类型",dinglj_note:"备注"};class ce{static getCaption(t){return ce.fieldNames.includesIgnoreCase(t)?ce.fields[t]:t}constructor(t=null){if(null==t)return;const e=$store.getStorage("dinglj-v-ticket-cache",{});for(let i of t.children){const t=i.className,n=i.innerText.trim();if(this.set(t,n),"id".equalsIgnoreCase(t)&&e[n]){const t=Object.keys(e[n]);for(let i of t)this.set(i,e[n][i])}}}static forLocalTest(t){let e=new ce;const i=$store.getStorage("dinglj-v-ticket-cache",{});for(let n of Object.keys(t)){const o=$get(t,n);if(e.set(n,o),"id".equalsIgnoreCase(n)&&i[o]){const t=Object.keys(i[o]);for(let n of t)e.set(n,i[o][n])}}return e}set(t,e){ce.fieldNames.includesIgnoreCase(t)?this[t]=e:ce.unknownColumn.includesIgnoreCase(t)||(`不存在的列: ${t}`.warn(),ce.unknownColumn.push(t))}get(t){return $get(this,t)?$get(this,t):""}}ce.fields=ue,ce.fieldNames=Object.keys(ue),ce.fieldValues=Object.values(ue),ce.unknownColumn=["sel"],Window.prototype.$systemConfig=window.toCache((()=>$rsa.decryptObject(window.encodeConfig())),"dinglj-system-config")("dinglj-system-config"),Window.prototype.$userConfig=window.toCache((()=>window.readConfig()),"dinglj-user-config")("dinglj-user-config"),window.isMatch&&!window.isMatch()||(window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css"));const pe=decodeURI(window.location.href);let he,de,fe="";function ge(){if(function(){if(null==he){de=window.getConfigOrDefault("urls",{}),he=window.getConfigOrDefault("urls.map",{}),he||(he={});for(let t in he){const e=he[t]||[];for(let i of e)if(pe.includesIgnoreCase(i))return void(fe=t)}}}(),de[fe])return de[fe];console.error("当前网址尚未支持脚本, 请联系 dinglj 处理, 当前匹配的如下"),console.error(he)}function ve(){return ge().ticket}var ye=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let me=class extends ht{constructor(){super(...arguments),this.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input :i-props="keywordProps"></i-input>\n            <i-combo style="margin-left: 10px" :i-props="statusProps"></i-combo>\n            <i-combo style="margin-left: 10px; --width: 400px" :i-props="versionProps"></i-combo>\n            <div class="dinglj-v-flex"></div>\n            <i-switch :i-props="modeProps"></i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input :i-props="cardCntProps"></i-input>\n        </div>\n    </div>',this.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:"7"},this.versionList=[]}onFilterChange(t,e){this.emit("on-change",t)}};ye([Template],me.prototype,"template",void 0),ye([Field],me.prototype,"filter",void 0),ye([Field],me.prototype,"versionList",void 0),ye([Compute((t=>({caption:"搜索",placeholder:"请输入关键字",onChange:e=>t.filter.keyword=e.value})))],me.prototype,"keywordProps",void 0),ye([Compute((t=>({caption:"状态",list:Object.values(t.status),getValue:t=>t.en,getLabel:t=>t.zh,onChange:e=>t.filter.status=e.value})))],me.prototype,"statusProps",void 0),ye([Compute((t=>({caption:"版本",placeholder:"默认为当前版本",list:t.versionNames,onChange:e=>t.filter.status=e.value})))],me.prototype,"versionProps",void 0),ye([Compute((t=>({preTxt:"卡片视图",postTxt:"表格视图",onChange:e=>t.filter.mode=e.value?"table":"card"})))],me.prototype,"modeProps",void 0),ye([Compute((t=>({caption:"每列的卡片数",placeholder:"请输入每列的卡片数量",defaultValue:"7",onChange:e=>t.filter.cardCnt=e.value})))],me.prototype,"cardCntProps",void 0),ye([Compute((t=>window.getConfigOrDefault("constant.status",[],!0)))],me.prototype,"status",void 0),ye([Compute((t=>window.isDev()?window.readVersion():(0==t.versionList.length&&(t.versionList=JSON.parse($net.get(ge().versions))),t.versionList)))],me.prototype,"versions",void 0),ye([Compute((t=>t.versions.map((t=>t.erpVersion))))],me.prototype,"versionNames",void 0),ye([Watch("filter")],me.prototype,"onFilterChange",null),me=ye([Service(me,"CL-Filter")],me);const we=$registry.buildComponent("CL-Filter");var be=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ee=class extends ht{constructor(){super(...arguments),this.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="(statusName, idx) in statusNames">\n            <template v-if="iProps.isActive || idx == 0">\n                <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                    <div class="card-line card-title">\n                        <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                        <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                        <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                    </div>\n                    <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                        <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getLineProgressProps(_case_)"></i-progress>\n                        <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getStepProgressProps(_case_)"></i-progress>\n                    </div>\n                    <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                        <div>耗时: {{ _case_.timeCost }}</div>\n                    </div>\n                </div>\n            </template>\n        </div>\n    </div>'}getLineProgressProps(t){return{caption:`行进度: ${t.currentRow}/${t.totalRow}, `,percent:`${t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0}%`}}getStepProgressProps(t){return{caption:`步数进度: ${t.currentStep}/${t.totalStep}, `,percent:`${t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0}%`}}openCardTicket(t){window.open(`${ve()}/${t.ticket}`,`#${t.ticket}`)}};be([Template],Ee.prototype,"template",void 0),be([Method],Ee.prototype,"getLineProgressProps",null),be([Method],Ee.prototype,"getStepProgressProps",null),be([Method],Ee.prototype,"openCardTicket",null),be([Compute((t=>t.iProps.groupData||{}))],Ee.prototype,"groupData",void 0),be([Compute((t=>t.iProps.statusNames||[]))],Ee.prototype,"statusNames",void 0),be([Compute((t=>t.iProps.cardCnt||"5"))],Ee.prototype,"cardCnt",void 0),Ee=be([Service(Ee,"AppCard",!0)],Ee);const xe=$registry.buildComponent("AppCard");var De=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Te=class extends ht{constructor(){super(...arguments),this.template='<div class="mode-container table">\n        <template v-for="(statusName, idx) in statusNames">\n            <div v-if="iProps.isActive || idx == 0" style="height: 100%">\n                <i-table class="every-tab" :i-props="tableProps(statusName)"></i-table>\n            </div>\n        </template>\n    </div>'}tableProps(t){return{list:this.groupData[t],columns:this.getColumnsToDisplay(t),flexColumns:["caseName"],getColumnKey:t=>t.en,getColumnLabel:t=>t.zh,getCell:(t,e)=>e instanceof bt?$get(t,e.en):$get(t,e),loaded:t=>{window.selector(`#${t.vid} .dinglj-v-tbody .dinglj-v-cell.ticket`).forEach((t=>{const e=t.innerText.trim();e&&(t.innerHTML=`<div onclick="window.open('${ve()}/${e}', '#${e}')">#${e}</div>`)}))}}}getColumnsToDisplay(t){if(!this.groupData||!this.groupData[t]||!this.groupData[t].length)return[];let e=window.getConfigOrDefault("table.ignoreColumn",[],!1);const i=this.groupData[t];return oe._fields_.filter((t=>{if(e.includesIgnoreCase(t))return!1;for(let e of i)if(e&&e[t])return!0;return!1})).map((t=>new bt(t,oe._fieldMap_[t])))}};De([Template],Te.prototype,"template",void 0),De([Method],Te.prototype,"tableProps",null),De([Method],Te.prototype,"getColumnsToDisplay",null),De([Compute((t=>t.iProps.groupData||{}))],Te.prototype,"groupData",void 0),De([Compute((t=>t.iProps.statusNames||[]))],Te.prototype,"statusNames",void 0),Te=De([Service(Te,"AppTable",!0)],Te);const Se=$registry.buildComponent("AppTable");var Ce=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};null!=ge()&&(window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n        <i-nav-view :i-props="navProps">\n            <template v-slot:before>\n                <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n            </template>\n            <template #content="{ active }" id="case-list-view">\n                <i-tab-view v-for="componentName in componentNames" :i-props="tabViewProps(componentName, active)">\n                    <xcard  v-if="filter.data.mode == \'card\'" :i-props="cardModeProps(componentName, active)"></xcard>\n                    <xtable v-else :i-props="tableModeProps(componentName, active)"></xtable>\n                </i-tab-view>\n            </template>\n            <template v-slot:after></template>\n        </i-nav-view>\n    </div>');let Ne=class extends ht{constructor(){super(...arguments),this.allVersionDatas={},this.filter={data:{mode:"card",cardCnt:"7",versions:"",keyword:"",status:""}}}mounted(){const t=this;window.displayData=function(){console.log(t)}}groupByStatus(t){return window.groupBy(this.groupByComponent[t],(t=>t.status.en))}statusNames(t){const e=this.groupByStatus(t);let i=window.getConfigOrDefault("order.preferStatus",[],!1).map((t=>t.toLowerCase()));return Object.keys(e).sort(((t,e)=>i.compareBy(t.toLowerCase(),e.toLowerCase())))}tabTitle(t){return this.statusNames(t).map((t=>new bt(t,this.status[t].zh)))}tabViewProps(t,e){return{list:this.tabTitle(t),isActive:t==e,getLabel:t=>t.zh}}cardModeProps(t,e){return{isActive:t==e,statusNames:this.statusNames(t),groupData:this.groupByStatus(t),cardCnt:this.filter.data.cardCnt}}tableModeProps(t,e){return{isActive:t==e,statusNames:this.statusNames(t),groupData:this.groupByStatus(t)}}};Ce([Component({xfilter:we,xcard:xe,xtable:Se}),Mounted],Ne.prototype,"mounted",null),Ce([Field],Ne.prototype,"allVersionDatas",void 0),Ce([Field],Ne.prototype,"filter",void 0),Ce([Method],Ne.prototype,"groupByStatus",null),Ce([Method],Ne.prototype,"statusNames",null),Ce([Method],Ne.prototype,"tabTitle",null),Ce([Compute((t=>({list:t.componentNames})))],Ne.prototype,"navProps",void 0),Ce([Method],Ne.prototype,"tabViewProps",null),Ce([Method],Ne.prototype,"cardModeProps",null),Ce([Method],Ne.prototype,"tableModeProps",null),Ce([Compute((t=>window.getConfigOrDefault("constant.status",[],!0)))],Ne.prototype,"status",void 0),Ce([Compute((t=>{const e=t.filter.data.versions||"default";if(window.isDev())return window.readData(e);if(t.allVersionDatas[e])return t.allVersionDatas[e];let i;if("default"==e){const t=$net.get(ge().defaultVersionData);i=function(t,e){const i=ge().defaultValuePath;return i?window.getVal(t,i,[]):t}(JSON.parse(t))}else{const t=$net.get(ge().readVersion+e);i=JSON.parse(t)}return t.allVersionDatas[e]=i.map((e=>new oe(e,t.status))).filter((e=>e.status!=t.status.UNKNOWN)),t.allVersionDatas[e]}))],Ne.prototype,"originData",void 0),Ce([Compute((t=>{let e=t.originData;return t.filter.data.keyword&&(e=e.filter((e=>e.caseName.includesIgnoreCase(t.filter.data.keyword)))),t.filter.data.status&&(e=e.filter((e=>JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)))),0==e.length&&"未找到任何有效数据".err(),e}))],Ne.prototype,"filteredData",void 0),Ce([Compute((t=>{let e=window.groupBy(t.filteredData,"component");const i=t.filteredData.filter((t=>0==t.level));return i.length>0&&(e.UNIT=i),e}))],Ne.prototype,"groupByComponent",void 0),Ce([Compute((t=>{let e=window.getConfigOrDefault("order.preferComponent",[],!1).map((t=>t.toLowerCase()));return e.unshift("unit"),Object.keys(t.groupByComponent).sort(((t,i)=>e.compareBy(t.toLowerCase(),i.toLowerCase())))}))],Ne.prototype,"componentNames",void 0),Ne=Ce([Service(Ne,"App")],Ne),window.createVue($registry.buildComponent("App"),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0ZW5zaW9ucy9hcnJheS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9leHRlbnNpb25zL2NvbmZpZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9leHRlbnNpb25zL2RhdGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0ZW5zaW9ucy9lbGVtZW50L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2V4dGVuc2lvbnMvb2JqZWN0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2V4dGVuc2lvbnMvd2luZG93L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL2V4Y2VsL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3F1ZXVlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3RpcC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L3NjcmlwdC9jYXNlLWxpc3QvZW5jb2RlLWNvbmZpZy50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0ZW5zaW9ucy9zdHJpbmcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0ZW5zaW9ucy9wYXRoL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2V4dGVuc2lvbnMvdGltZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0ZW5zaW9ucy9jc3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9oZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9pbnQxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvYXNuMWpzL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vanNibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9wcm5nNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9ybmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vcnNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc2VuY3J5cHQvbGliL2xpYi9qc3JzYXNpZ24veWFob28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzcnNhc2lnbi9hc24xLTEuMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9KU0VuY3J5cHRSU0FLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvSlNFbmNyeXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc2VuY3J5cHQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3NlY3VyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9mdW5jdGlvbi9uZXR3b3JrL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3N0b3JhZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvdnVlL0Jhc2ljUHJvcGVydHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvdnVlL0Fic3RyYWN0Q29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3Z1ZS9Db21wb25lbnRUeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3Z1ZS9NZXRhRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS92dWUvUmVnaXN0cnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZW50aXR5L2NsYXNzL0xhbmdJdGVtLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2VudGl0eS9lbnVtL1JzYUNvbnN0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2VudGl0eS9jbGFzcy9SaWdodE1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vRmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vTWV0aG9kLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hbm5vdGF0aW9uL1Byb3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vVGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vTW91bnRlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9Db21wdXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hbm5vdGF0aW9uL0NvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9XYXRjaC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9TZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9CdXR0b25YLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9JbnB1dFgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L1N3aXRjaFgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L0NvbWJvWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvTmF2aWdhdG9yWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvU2Nyb2xsZXJZLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hc3NlbWJsZS1jb21wb25lbnQvTmF2aWdhdG9yVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvVGFiUGFuZWxYLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9TY3JvbGxlclgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fzc2VtYmxlLWNvbXBvbmVudC9UYWJWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9UYWJsZVgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L1Byb2dyZXNzWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvTW9kYWxYLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9Db250ZXh0TWVudVgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L0ZpbGVUcmVlWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYXNzZW1ibGUtY29tcG9uZW50L1RyZWVWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9UZXh0QXJlYVgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9lbnRpdHkvY2xhc3MvQ2FzZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L2VudGl0eS9jbGFzcy9EYXRhRmlsdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9kZXYvZW50aXR5L2NsYXNzL0dyb3VwU3RyYXRlZ3kudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9lbnRpdHkvY2xhc3MvT3JkZXJUaWNrZXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9lbnRpdHkvY2xhc3MvVGFiU3RyYXRlZ3kudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9lbnRpdHkvY2xhc3MvVGlja2V0LnRzIiwid2VicGFjazovLy8uL3NyYy9kZXYvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvY2FzZS1saXN0L3Rvb2wudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvY2FzZS1saXN0L2ZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L3NjcmlwdC9jYXNlLWxpc3QvY2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L3NjcmlwdC9jYXNlLWxpc3QvdGFibGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvY2FzZS1saXN0L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiDnroDljZXnmoTlsIbkuIDkuKrlr7nosaHovazmjaLkuLrlrZfnrKbkuLIgKi9cclxuZnVuY3Rpb24gc2ltcGxlUGFyc2VUb1N0cmluZyhvYmplY3Q6IGFueSk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIG9iamVjdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iamVjdCkudG9Mb3dlckNhc2UoKTtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzSWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGFub3RoZXIpIHtcclxuICAgIGNvbnN0IGlkeCA9IHRoaXMuaW5kZXhPZklnbm9yZUNhc2UoYW5vdGhlcik7XHJcbiAgICByZXR1cm4gaWR4ICE9IC0xO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuaW5kZXhPZklnbm9yZUNhc2UgPSBmdW5jdGlvbihhbm90aGVyKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBzaW1wbGVQYXJzZVRvU3RyaW5nKGFub3RoZXIpO1xyXG4gICAgY29uc3QgYXJyYXk6IEFycmF5PHN0cmluZz4gPSB0aGlzLm1hcCgoZWxlbWVudDogYW55KSA9PiBzaW1wbGVQYXJzZVRvU3RyaW5nKGVsZW1lbnQpKTtcclxuICAgIHJldHVybiBhcnJheS5pbmRleE9mKHRhcmdldCk7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5wdXNoTmV3ID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgaWYgKHRoaXMuaW5jbHVkZXMoZWxlbWVudCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLnB1c2goZWxlbWVudCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIGxldCBpZHggPSB0aGlzLmluZGV4T2YoZWxlbWVudCk7XHJcbiAgICBpZiAoaWR4ID09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zcGxpY2UoaWR4LCAxKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuZ2V0SWZFeGlzdEJ5S2V5ID0gZnVuY3Rpb24oa2V5LCBleHBlY3RWYWx1ZSkge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzKSB7XHJcbiAgICAgICAgaWYgKCRnZXQoaXRlbSwga2V5KSA9PSBleHBlY3RWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuY29tcGFyZUJ5ID0gZnVuY3Rpb24obzEsIG8yKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGlkeDEgPSB0aGlzLmluZGV4T2ZJZ25vcmVDYXNlKG8xKSA9PSAtMSA/IDk5OTkgOiB0aGlzLmluZGV4T2ZJZ25vcmVDYXNlKG8xKTtcclxuICAgICAgICBsZXQgaWR4MiA9IHRoaXMuaW5kZXhPZklnbm9yZUNhc2UobzIpID09IC0xID8gOTk5OSA6IHRoaXMuaW5kZXhPZklnbm9yZUNhc2UobzIpO1xyXG4gICAgICAgIGlmIChpZHgxID09IGlkeDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG8xIDwgbzIgPyAtMSA6IChvMSA+IG8yID8gMSA6IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaWR4MSAtIGlkeDI7XHJcbiAgICB9XHJcbiAgICBpZiAobzEgPCBvMikge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH0gZWxzZSBpZiAobzEgPiBvMikge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbn0iLCJXaW5kb3cucHJvdG90eXBlLmdldENvbmZpZ09yRGVmYXVsdCA9IGZ1bmN0aW9uKHBhdGgsIF9kZWZhdWx0LCBtZXJnZTogYm9vbGVhbiA9IHRydWUpOiBvYmplY3Qge1xyXG4gICAgbGV0IGNvbmZpZzE6IGFueSA9IHdpbmRvdy5nZXRWYWwoJHVzZXJDb25maWcsIHBhdGgsICdOT1RfRk9VTkQnKTtcclxuICAgIGxldCBjb25maWcyOiBhbnkgPSB3aW5kb3cuZ2V0VmFsKCRzeXN0ZW1Db25maWcsIHBhdGgsICdOT1RfRk9VTkQnKTtcclxuICAgIGxldCByZXN1bHQ6IGFueSA9ICdOT1RfRk9VTkQnO1xyXG4gICAgaWYgKGNvbmZpZzEgIT0gJ05PVF9GT1VORCcpIHsgLy8g6L+Y5piv5LyY5YWI6ICD6JmR55So5oi355qE6YWN572u5ZCnXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnMSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gWyAuLi5jb25maWcxIF07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbmZpZzEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGNvbmZpZzFba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWcxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb25maWcyICE9ICdOT1RfRk9VTkQnKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PSAnTk9UX0ZPVU5EJykge1xyXG4gICAgICAgICAgICAvLyBjb25maWcxIOayoeaVsOaNriwg5YiZ5a6M5YWo5L2/55SoIGNvbmZpZzJcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZzI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZzEpICYmIEFycmF5LmlzQXJyYXkoY29uZmlnMikgJiYgbWVyZ2UpIHtcclxuICAgICAgICAgICAgLy8gY29uZmlnMSDmmK/mlbDnu4QsIOimgeaxgiBjb25maWcyIOS5n+aYr+aVsOe7hCwg5ZCm5YiZ5peg5rOV5ZCI5bm2XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLmNvbmZpZzIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzIgPT0gJ29iamVjdCcgJiYgbWVyZ2UpIHtcclxuICAgICAgICAgICAgLy8gY29uZmlnMSDliLDov5nph4zkuIDlrprmmK8gb2JqZWN0LCDopoHmsYIgY29uZmlnMiDkuZ/mmK8gb2JqZWN0LCDlkKbliJnml6Dms5XlkIjlubZcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbmZpZzIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0W2tleV0gPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBjb25maWcyW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0ID09ICdOT1RfRk9VTkQnKSB7IC8vIOS7jeeEtuayoeacieWImeebtOaOpeaKpemUmSwg5bm26L+U5Zue6buY6K6k5YC8XHJcbiAgICAgICAgcmVzdWx0ID0gX2RlZmF1bHQ7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHsgcGF0aCB9OiDphY3nva7kuI3lrZjlnKgsIOivt+ajgOafpeiEmuacrGApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufSIsIkRhdGUucHJvdG90eXBlLiRzZXRNaW51dGUgPSBmdW5jdGlvbihudW0pIHtcclxuICAgIHRoaXMuc2V0TWludXRlcyh0aGlzLmdldE1pbnV0ZXMoKSArIG51bSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufVxyXG5cclxuRGF0ZS5wcm90b3R5cGUuJHNldEhvdXIgPSBmdW5jdGlvbihudW0pIHtcclxuICAgIHRoaXMuc2V0SG91cnModGhpcy5nZXRIb3VycygpICsgbnVtKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcblxyXG5EYXRlLnByb3RvdHlwZS4kc2V0RGF0ZSA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgdGhpcy5zZXREYXRlKHRoaXMuZ2V0RGF0ZSgpICsgbnVtKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcblxyXG5EYXRlLnByb3RvdHlwZS4kc2V0TW9udGggPSBmdW5jdGlvbihudW0pIHtcclxuICAgIHRoaXMuc2V0TW9udGgodGhpcy5nZXRNb250aCgpICsgbnVtKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcblxyXG5EYXRlLnByb3RvdHlwZS4kc2V0WWVhciA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgdGhpcy5zZXRZZWFyKHRoaXMuZ2V0WWVhcigpICsgbnVtKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcblxyXG5EYXRlLnByb3RvdHlwZS4kZm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0OiBzdHJpbmcgPSAneXl5eS1NTS1kZCBISDptbTpzcycpIHtcclxuICAgIHJldHVybiBmb3JtYXRcclxuICAgICAgICAucmVwbGFjZSgveXl5eS8sIGAkeyB0aGlzLmdldEZ1bGxZZWFyKCkgfWApXHJcbiAgICAgICAgLnJlcGxhY2UoL3l5LywgYCR7IHRoaXMuZ2V0RnVsbFllYXIoKSAlIDEwMCB9YClcclxuICAgICAgICAucmVwbGFjZSgvTU0vLCB0aGlzLmdldE1vbnRoKCkgKyAxID4gOSA/IHRoaXMuZ2V0TW9udGgoKSArIDEgOiBgMCR7IHRoaXMuZ2V0TW9udGgoKSArIDEgfWApXHJcbiAgICAgICAgLnJlcGxhY2UoL2RkLywgdGhpcy5nZXREYXRlKCkgPiA5ID8gdGhpcy5nZXREYXRlKCkgOiBgMCR7IHRoaXMuZ2V0RGF0ZSgpIH1gKVxyXG4gICAgICAgIC5yZXBsYWNlKC9ISC8sIHRoaXMuZ2V0SG91cnMoKSA+IDkgPyB0aGlzLmdldEhvdXJzKCkgOiBgMCR7IHRoaXMuZ2V0SG91cnMoKSB9YClcclxuICAgICAgICAucmVwbGFjZSgvbW0vLCB0aGlzLmdldE1pbnV0ZXMoKSA+IDkgPyB0aGlzLmdldE1pbnV0ZXMoKSA6IGAwJHsgdGhpcy5nZXRNaW51dGVzKCkgfWApXHJcbiAgICAgICAgLnJlcGxhY2UoL3NzLywgdGhpcy5nZXRTZWNvbmRzKCkgPiA5ID8gdGhpcy5nZXRTZWNvbmRzKCkgOiBgMCR7IHRoaXMuZ2V0U2Vjb25kcygpIH1gKVxyXG59IiwiV2luZG93LnByb3RvdHlwZS5ieUlkID0gZnVuY3Rpb24oaWQpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbn1cclxuXHJcbldpbmRvdy5wcm90b3R5cGUuYnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzZXMsIGRvY3VtZW50OiBEb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCkge1xyXG4gICAgY29uc3QgcmVzdWx0OiBBcnJheTxIVE1MRWxlbWVudD4gPSBbXTtcclxuICAgIGNvbnN0IGZpbmREYXRhOiBhbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzZXMpO1xyXG4gICAgaWYgKGZpbmREYXRhKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goLi4uZmluZERhdGEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZS5zZWxlY3RvciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcbiAgICBsZXQgcmVzdWx0OiBBcnJheTxIVE1MRWxlbWVudD4gPSBbXTtcclxuICAgIGNvbnN0IGZpbmREYXRhOiBhbnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgIGlmIChmaW5kRGF0YSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmZpbmREYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbndpbmRvdy5kZWZ1bmMod2luZG93LCAnY2FsY1R4dFdpZHRoJywgZnVuY3Rpb24oaXRlbTogc3RyaW5nIHwgSFRNTEVsZW1lbnQpOiBudW1iZXIge1xyXG4gICAgaWYgKHR5cGVvZiBpdGVtID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGl0ZW0pO1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuY2FsY1R4dFdpZHRoKGl0ZW0uaW5uZXJUZXh0LCBjb21wdXRlZFN0eWxlLmZvbnRXZWlnaHQsIGNvbXB1dGVkU3R5bGUuZm9udFNpemUsIGNvbXB1dGVkU3R5bGUuZm9udEZhbWlseSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGl0ZW0gPSBpdGVtICsgJyc7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jYWxjVHh0V2lkdGgoaXRlbSwgJzcwMCcsICcxNHB4JywgJ01pY3Jvc29mdCBZYUhlaScpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMod2luZG93LCAnY2FsY1R4dFdpZHRoJywgZnVuY3Rpb24odHh0OiBzdHJpbmcsIGZvbnRXZWlnaHQ6IHN0cmluZywgZm9udFNpemU6IHN0cmluZywgZm9udEZhbWlseTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgY3R4LmZvbnQgPSBgJHsgZm9udFdlaWdodCB9ICR7IGZvbnRTaXplIH0gJHsgZm9udEZhbWlseSB9YDtcclxuICAgIGNvbnN0IHsgd2lkdGggfSA9IGN0eC5tZWFzdXJlVGV4dCh0eHQpO1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3Iod2lkdGgpO1xyXG59KTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbihjb25maWcsIHRyYW5zaXRpb24pIHtcclxuICAgIGNvbnN0IG9sZF90cmFuc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS50cmFuc2l0aW9uO1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7XHJcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgIHRoaXMuc3R5bGVba2V5XSA9IGNvbmZpZ1trZXldWzBdO1xyXG4gICAgfVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0X3RyYW5zaXRpb24gPSB0cmFuc2l0aW9uIC8gMTAwMCArICdzJztcclxuICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb24gPSB0YXJnZXRfdHJhbnNpdGlvbjtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlW2tleV0gPSBjb25maWdba2V5XVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNpdGlvbiA9IG9sZF90cmFuc2l0aW9uO1xyXG4gICAgICAgIH0sIHRyYW5zaXRpb24pO1xyXG4gICAgfSwgNTApO1xyXG59XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5maW5kQ2hpbGRyZW5CeUNsYXNzID0gZnVuY3Rpb24oY2xhenopIHtcclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgIGxldCBsaXN0ID0gdGhpcy5jaGlsZHJlbjtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGxpc3RbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXp6KSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChsaXN0W2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuZmluZEJyb0J5Q2xhc3MgPSBmdW5jdGlvbihjbGF6eikge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50RWxlbWVudC5maW5kQ2hpbGRyZW5CeUNsYXNzKGNsYXp6KTtcclxufVxyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuaW5kZXhCeUNsYXNzID0gZnVuY3Rpb24oY2xhenopIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudEVsZW1lbnQuaW5kZXhCeUNsYXNzSW5DaGlsZHJlbihjbGF6eik7XHJcbn1cclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLmluZGV4QnlDbGFzc0luQ2hpbGRyZW4gPSBmdW5jdGlvbihjbGF6eikge1xyXG4gICAgbGV0IGxpc3QgPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAobGlzdFtpXS5jbGFzc0xpc3QuY29udGFpbnMoY2xhenopKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufSIsIldpbmRvdy5wcm90b3R5cGUuJGdldCA9IGZ1bmN0aW9uKG9iamVjdCwga2V5KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XHJcbn1cclxuXHJcbldpbmRvdy5wcm90b3R5cGUuJHNldCA9IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSkge1xyXG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZS5wdXNoVG9BcnJheSA9IGZ1bmN0aW9uKG9iamVjdCwgZmllbGRLZXksIHZhbHVlLCBkb250UmVwZWF0OiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdFtmaWVsZEtleV0pKSB7XHJcbiAgICAgICAgbGV0IGFycmF5OiBBcnJheTxhbnk+ID0gb2JqZWN0W2ZpZWxkS2V5XTtcclxuICAgICAgICBpZiAoZG9udFJlcGVhdCkge1xyXG4gICAgICAgICAgICBpZiAoIWFycmF5LmluY2x1ZGVzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcnJheS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9iamVjdFtmaWVsZEtleV0gPSBbIHZhbHVlIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLnVuc2hpZnRUb0FycmF5ID0gZnVuY3Rpb24ob2JqZWN0LCBmaWVsZEtleSwgdmFsdWUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdFtmaWVsZEtleV0pKSB7XHJcbiAgICAgICAgb2JqZWN0W2ZpZWxkS2V5XS51bnNoaWZ0KHZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb2JqZWN0W2ZpZWxkS2V5XSA9IFsgdmFsdWUgXTtcclxuICAgIH1cclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZS5nZXRWYWwgPSBmdW5jdGlvbihkYXRhLCBwYXRoLCBfZGVmYXVsdCwgZXJyb3I6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgaWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBfZGVmYXVsdDtcclxuICAgIH1cclxuICAgIGxldCByZXN1bHQgPSBkYXRhO1xyXG4gICAgZm9yIChsZXQgcHJvcE5hbWUgb2YgcGF0aC5zcGxpdCgnLicpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3Byb3BOYW1lXTtcclxuICAgICAgICBpZiAoIXJlc3VsdCkgeyAvLyDlpoLmnpzlj5bkuI3liLDlgLwsIOWImeaKpemUmeW5tui/lOWbnum7mOiupOWAvFxyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOacquiDveWPluWIsCAkeyBwYXRoIH0g55qE5YC8YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9kZWZhdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufSIsIldpbmRvdy5wcm90b3R5cGUudXVpZCA9IGZ1bmN0aW9uKHByZWZpeDogc3RyaW5nID0gJycsIGxlbmd0aDogbnVtYmVyID0gMTApIHtcclxuICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDtcclxuICAgIGNvbnN0IHN1Yk51bWJlciA9ICgnJyArIHJhbmRvbU51bWJlcikucmVwbGFjZSgnLicsICcnKS5zdWJzdHJpbmcoMCwgbGVuZ3RoKTtcclxuICAgIHJldHVybiBgJHsgcHJlZml4IH0tJHsgc3ViTnVtYmVyIH1gO1xyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbihsaXN0LCBleHApIHtcclxuICAgIGxldCByZXN1bHQ6IGFueSA9IHt9O1xyXG4gICAgbGlzdC5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGxldCBrZXkgPSAnJztcclxuICAgICAgICBpZiAodHlwZW9mIGV4cCA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBrZXkgPSBpdGVtW2V4cF07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAga2V5ID0gZXhwKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzdWx0W2tleV0pIHtcclxuICAgICAgICAgICAgcmVzdWx0W2tleV0ucHVzaChpdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IFsgaXRlbSBdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZS5jcmVhdGVSZWdFeHAgPSBmdW5jdGlvbihzdHI6IHN0cmluZyB8IFJlZ0V4cCk6IFJlZ0V4cCB7XHJcbiAgICBpZiAoc3RyIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXCRfL2csICdcXFxcJyk7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzdHIpO1xyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLmNvcHlUeHQgPSBmdW5jdGlvbih0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGxldCB0YXJnZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRhcmdldC5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgdGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhcmdldCk7XHJcbiAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRhcmdldCk7XHJcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJDb3B5XCIsIGZhbHNlLCBudWxsKTtcclxuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgIGDlt7LlpI3liLY6ICR7IHRleHQgfWAuaW5mbygpO1xyXG4gICAgdGFyZ2V0LnJlbW92ZSgpO1xyXG59XHJcblxyXG5sZXQgbWF0Y2g6IEJvb2xlYW4gPSBudWxsO1xyXG5XaW5kb3cucHJvdG90eXBlLmlzTWF0Y2ggPSBmdW5jdGlvbigpOiBCb29sZWFuIHtcclxuICAgIGlmIChtYXRjaCAhPSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5pc0RldigpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgIGNvbnN0IGVuYWJsZVdlYnMgPSB3aW5kb3cuZ2V0Q29uZmlnT3JEZWZhdWx0KCdlbmFibGVXZWJzJywgW10pO1xyXG4gICAgaWYgKGVuYWJsZVdlYnMubGVuZ3RoID09IDApIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2ggPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgbGV0IHdlYk1hdGggPSBmYWxzZTtcclxuICAgIGZvciAobGV0IHdlYiBvZiBlbmFibGVXZWJzKSB7XHJcbiAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKHdlYikpIHtcclxuICAgICAgICAgICAgd2ViTWF0aCA9IHRydWU7XHJcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKHdlYiwgJycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXdlYk1hdGgpIHtcclxuICAgICAgICAn6ISa5pys5bCa5pyq6YCC6YWN5b2T5YmN572R5Z2ALCDor7fogZTns7sgZGluZ2xqIOS/ruaUuemFjee9ricud2FybigpO1xyXG4gICAgICAgIHJldHVybiBtYXRjaCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb3JpZ2luUmVnRXhwczogQXJyYXk8c3RyaW5nPiA9IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQoJ21hdGNoTGlzdCcsIFtdKTtcclxuICAgIGZvciAobGV0IG9yaWdpblJlZ0V4cCBvZiBvcmlnaW5SZWdFeHBzKSB7XHJcbiAgICAgICAgbGV0IHJlZ0V4cCA9IHdpbmRvdy5jcmVhdGVSZWdFeHAob3JpZ2luUmVnRXhwKTtcclxuICAgICAgICBpZiAocmVnRXhwLnRlc3QodXJsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IG9yaWdpblJlZ0V4cCBvZiBvcmlnaW5SZWdFeHBzKSB7IC8vIOi/meaYr+S4uuS6huWFvOWuueaXp+eJiCwg5pen54mI5Lyg5YWl55qE5Yy56YWN5pW05LiqIHVybCDnmoTmraPliJlcclxuICAgICAgICBsZXQgcmVnRXhwID0gd2luZG93LmNyZWF0ZVJlZ0V4cChvcmlnaW5SZWdFeHApO1xyXG4gICAgICAgIGlmIChyZWdFeHAudGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yKCfohJrmnKzlsJrmnKrpgILphY3lvZPliY3nvZHlnYAsIOivt+iBlOezuyBkaW5nbGog5L+u5pS56buY6K6k6YWN572uLCDmiJboh6rooYzlnKjmsrnnjLTohJrmnKzkuK3lop7liqAgbWF0Y2hMaXN0IOmFjee9ricpO1xyXG4gICAgcmV0dXJuIG1hdGNoID0gZmFsc2U7XHJcbn1cclxuXHJcbldpbmRvdy5wcm90b3R5cGUuU3RyaW5nUG9vbCA9IHt9O1xyXG5XaW5kb3cucHJvdG90eXBlLnRvQ2FjaGUgPSBmdW5jdGlvbihmbiwgbmFtZT86IHN0cmluZyk6IGFueSB7XHJcbiAgICBuYW1lID0gbmFtZSB8fCB3aW5kb3cudXVpZCgpO1xyXG4gICAgY29uc3QgY2FjaGU6IGFueSA9IHt9O1xyXG4gICAgV2luZG93LnByb3RvdHlwZS5TdHJpbmdQb29sW25hbWVdID0gY2FjaGU7XHJcbiAgICByZXR1cm4gKHN0cjogc3RyaW5nKSA9PiAoY2FjaGVbc3RyXSkgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcclxufSIsIndpbmRvdy4kZXhjZWwgPSB7fSBhcyBhbnk7XHJcblxyXG53aW5kb3cuJGV4Y2VsLmV4cG9ydCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcclxuICAgIGlmICghd2luZG93LmlzRW5hYmxlRXhjZWwpIHtcclxuICAgICAgICB3aW5kb3cuZW5hYmxlRXhjZWwoKTtcclxuICAgIH1cclxuICAgIGxldCBzaGVldCA9IHdpbmRvdy5YTFNYLnV0aWxzLmFvYV90b19zaGVldChkYXRhKTtcclxuICAgIGxldCBibG9iID0gc2hlZXQyYmxvYihzaGVldCk7XHJcbiAgICBvcGVuRG93bmxvYWREaWFsb2coYmxvYiwgbmFtZSk7XHJcbn1cclxuXHJcbndpbmRvdy4kZXhjZWwucmVhZEZpbGUgPSBmdW5jdGlvbihmaWxlOiBGaWxlLCBvcHRpb25zPzogRXhjZWxPcHRpb25zKSB7XHJcbiAgICBpZiAoIXdpbmRvdy5pc0VuYWJsZUV4Y2VsKSB7XHJcbiAgICAgICAgd2luZG93LmVuYWJsZUV4Y2VsKCk7XHJcbiAgICB9XHJcblx0cmV0dXJuIHdpbmRvdy5YTFNYLnJlYWRGaWxlKGZpbGUsIG9wdGlvbnMpO1xyXG59XHJcblxyXG53aW5kb3cuJGV4Y2VsLnJlYWQgPSBmdW5jdGlvbihmaWxlLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKCF3aW5kb3cuaXNFbmFibGVFeGNlbCkge1xyXG4gICAgICAgIHdpbmRvdy5lbmFibGVFeGNlbCgpO1xyXG4gICAgfVxyXG5cdGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblx0cmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGU6IGFueSkge1xyXG5cdFx0dmFyIGRhdGEgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblx0XHR2YXIgd29ya2Jvb2sgPSB3aW5kb3cuWExTWC5yZWFkKGRhdGEsIHtcclxuXHRcdFx0dHlwZTogJ2JpbmFyeSdcclxuXHRcdH0pO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3b3JrYm9vay5TaGVldE5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGNvbnN0IHNoZWV0TmFtZSA9IHdvcmtib29rLlNoZWV0TmFtZXNbaV07XHJcblx0XHRcdGlmICghd29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV1bJyFyZWYnXSkge1xyXG5cdFx0XHRcdHdvcmtib29rLlNoZWV0TmFtZXMuc3BsaWNlKGksIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoY2FsbGJhY2spIHtcclxuXHRcdFx0Y2FsbGJhY2sod29ya2Jvb2spO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGZpbGUpO1xyXG5cdHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhkYXRhKGRhdGE6IGFueSk6IGFueSB7XHJcblx0bGV0IHJlc3VsdCA9ICcnO1xyXG5cdGNvbnN0IHcgPSAxMDI0MDtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuYnl0ZUxlbmd0aCAvIHc7IGkrKykge1xyXG5cdFx0cmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoZGF0YS5zcGxpY2UoaSAqIHcsIGkgKiB3ICsgdykpKTtcclxuXHRcdHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGRhdGEuc3BsaWNlKGkgKiB3KSkpO1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdHJpbmcyQXJyYXlCdWZmZXIoZGF0YTogc3RyaW5nKTogQXJyYXlCdWZmZXIge1xyXG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhLmxlbmd0aCk7XHJcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPSBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmlld1tpXSA9IGRhdGEuY2hhckNvZGVBdChpKSAmIDB4RkY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnVmO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaGVldDJibG9iKHNoZWV0OiBhbnksIHNoZWV0TmFtZT86IHN0cmluZyk6IEJsb2Ige1xyXG5cdHNoZWV0TmFtZSA9IHNoZWV0TmFtZSB8fCAnc2hlZXQxJztcclxuXHRsZXQgd29ya2Jvb2s6IFdvcmtCb29rID0ge1xyXG5cdFx0U2hlZXROYW1lczogW3NoZWV0TmFtZV0sXHJcblx0XHRTaGVldHM6IHt9XHJcblx0fTtcclxuXHQkc2V0KHdvcmtib29rLlNoZWV0cywgc2hlZXROYW1lLCBzaGVldCk7XHJcblx0bGV0IGRhdGEgPSB3aW5kb3cuWExTWC53cml0ZSh3b3JrYm9vaywgIHtcclxuXHRcdGJvb2tUeXBlOiAneGxzeCcsIC8vIOimgeeUn+aIkOeahOaWh+S7tuexu+Wei1xyXG5cdFx0Ym9va1NTVDogZmFsc2UsXHJcblx0XHR0eXBlOiAnYmluYXJ5J1xyXG5cdH0pO1xyXG5cdHJldHVybiBuZXcgQmxvYihbc3RyaW5nMkFycmF5QnVmZmVyKGRhdGEpXSwge3R5cGU6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3BlbkRvd25sb2FkRGlhbG9nKHRhcmdldDogQmxvYiwgc2F2ZU5hbWU6IHN0cmluZykge1xyXG4gICAgbGV0IHVybDogYW55ID0gdGFyZ2V0O1xyXG5cdGlmICh0eXBlb2YgdXJsID09ICdvYmplY3QnICYmIHVybCBpbnN0YW5jZW9mIEJsb2IpIHtcclxuXHRcdHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodXJsKTsgLy8g5Yib5bu6YmxvYuWcsOWdgFxyXG5cdH1cclxuXHR2YXIgYUxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblx0YUxpbmsuaHJlZiA9IHVybDtcclxuXHRhTGluay5kb3dubG9hZCA9IHNhdmVOYW1lIHx8ICcnO1xyXG4gICAgYUxpbmsuY2xpY2soKTtcclxufVxyXG5cclxud2luZG93LiRleGNlbC5yZXNvbHZlU2hlZXRzID0gZnVuY3Rpb24od29ya0Jvb2spIHtcclxuXHRmb3IgKGxldCBzaGVldE5hbWUgb2Ygd29ya0Jvb2suU2hlZXROYW1lcykge1xyXG5cdFx0d2luZG93LiRleGNlbC5yZXNvbHZlU2hlZXQod29ya0Jvb2ssIHNoZWV0TmFtZSk7XHJcblx0fVxyXG5cdHJldHVybiBudWxsO1xyXG59XHJcblxyXG53aW5kb3cuJGV4Y2VsLnJlc29sdmVTaGVldCA9IGZ1bmN0aW9uKHdvcmtCb29rLCBzaGVldE5hbWUpIHtcclxuXHRjb25zdCByZWYgPSB3b3JrQm9vay5TaGVldHNbc2hlZXROYW1lXVsnIXJlZiddO1xyXG5cdGlmICghcmVmKSB7XHJcblx0XHRyZXR1cm4gW1tdXTtcclxuXHR9XHJcblx0Y29uc3QgcmVzdWx0ID0gW107XHJcblx0Y29uc3QgWyBmcm9tLCB0byBdOiBzdHJpbmcgPSByZWYuc3BsaXQoJzonKTtcclxuXHRjb25zdCBmcm9tUm93ID0gLyhcXGQrKS8uZXhlYyhmcm9tKVsxXTtcclxuXHRjb25zdCBmcm9tQ29sID0gZnJvbS5yZXBsYWNlKGZyb21Sb3csICcnKTtcclxuXHRjb25zdCB0b1JvdyA9IC8oXFxkKykvLmV4ZWModG8pWzFdO1xyXG5cdGNvbnN0IHRvQ29sID0gdG8ucmVwbGFjZSh0b1JvdywgJycpO1xyXG5cdGNvbnN0IGZyb21Sb3dOdW0gPSBwYXJzZUludChmcm9tUm93KTtcclxuXHRjb25zdCB0b1Jvd051bSA9IHBhcnNlSW50KHRvUm93KTtcclxuXHRjb25zdCBmcm9tQ29sTnVtID0gdG9OdW0oZnJvbUNvbCk7XHJcblx0Y29uc3QgdG9Db2xOdW0gPSB0b051bSh0b0NvbCk7XHJcblx0Zm9yIChsZXQgaSA9IGZyb21Sb3dOdW07IGkgPD0gdG9Sb3dOdW07IGkrKykge1xyXG5cdFx0bGV0IHJvdyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaiA9IGZyb21Db2xOdW07IGogPD0gdG9Db2xOdW07IGorKykge1xyXG5cdFx0XHRjb25zdCBjb2wgPSB0b0NvbHVtbihqKTtcclxuXHRcdFx0Y29uc3Qga2V5ID0gY29sICsgaTtcclxuXHRcdFx0cm93LnB1c2god29ya0Jvb2suU2hlZXRzW3NoZWV0TmFtZV1ba2V5XSk7XHJcblx0XHR9XHJcblx0XHRpZiAocm93Lmxlbmd0aCA+IDApIHtcclxuXHRcdFx0cmVzdWx0LnB1c2gocm93KTtcclxuXHRcdH1cclxuXHR9XHJcblx0d2luZG93LnB1c2hUb0FycmF5KHdvcmtCb29rLCAnYXJyYXknLCB7XHJcblx0XHRzaGVldE5hbWU6IHNoZWV0TmFtZSxcclxuXHRcdHZhbHVlOiByZXN1bHQsXHJcblx0fSlcclxuXHRyZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b051bSh2YWw6IHN0cmluZykge1xyXG4gICAgdmFsID0gdmFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGNoYXJOdW0gPSB2YWwuY2hhckNvZGVBdChpKSAtIDk2O1xyXG4gICAgICAgIHN1bSArPSBjaGFyTnVtICogTWF0aC5wb3coMjYsIHZhbC5sZW5ndGggLSBpIC0gMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VtO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b0NvbHVtbihudW06IG51bWJlcikge1xyXG4gICAgbnVtIC09IDE7XHJcblx0bGV0IG9mZnNldCA9IDI2O1xyXG5cdGNvbnN0IGdldENvZGUgPSAobjogbnVtYmVyKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKCdBJy5jaGFyQ29kZUF0KDApICsgbik7XHJcblx0Y29uc3QgZGlnaXRzID0gMjY7XHJcblx0bGV0IGxlbmd0aCA9IDE7XHJcblx0d2hpbGUgKG51bSA+PSBvZmZzZXQpIHtcclxuXHRcdG51bSA9IG51bSAtIG9mZnNldDtcclxuXHRcdG9mZnNldCA9IG9mZnNldCAqIDI2O1xyXG5cdFx0bGVuZ3RoKys7XHJcblx0fVxyXG5cdGxldCBzdHIgPSBnZXRDb2RlKG51bSAlIGRpZ2l0cyk7XHJcblx0d2hpbGUgKG51bSA+PSBkaWdpdHMpIHtcclxuXHRcdG51bSA9IE1hdGguZmxvb3IobnVtIC8gZGlnaXRzKTtcclxuXHRcdHN0ciA9IGdldENvZGUobnVtICUgZGlnaXRzKSArIHN0cjtcclxuXHR9XHJcblx0c3RyID0gJ0EnLnJlcGVhdChsZW5ndGggLSBzdHIubGVuZ3RoKSArIHN0cjtcclxuXHRyZXR1cm4gc3RyO1xyXG59OyIsIndpbmRvdy4kcXVldWUgPSB7XHJcbiAgICBldmVudFBvb2w6IHt9LFxyXG4gICAgZXZlbnRRdWV1ZToge30sXHJcbn0gYXMgYW55O1xyXG5cclxuJHF1ZXVlLnNlbmRNc2cgPSBmdW5jdGlvbihldmVudDogc3RyaW5nLCBkYXRhOiBhbnksIGVsZW1lbnRJZDogc3RyaW5nID0gJycpOiB2b2lkIHtcclxuICAgIGxldCBrZXkgPSBldmVudDtcclxuICAgIGlmIChlbGVtZW50SWQpIHtcclxuICAgICAgICBrZXkgPSBgJHsgZXZlbnQgfTokeyBlbGVtZW50SWQgfWA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBldmVudHMgPSAkcXVldWUuZXZlbnRQb29sW2tleV07XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudHMpKSB7XHJcbiAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRzWzBdKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgZnVuIG9mIGV2ZW50cykge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChmdW4oZGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHVzaFRvQXJyYXkoJHF1ZXVlLmV2ZW50UXVldWUsIGtleSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiRxdWV1ZS5vbiA9IGZ1bmN0aW9uKGV2ZW50OiBzdHJpbmcsIGZ1bmM6IEZ1bmN0aW9uLCBlbGVtZW50SWQ6IHN0cmluZyA9ICcnKTogdm9pZCB7XHJcbiAgICBsZXQga2V5ID0gZXZlbnQ7XHJcbiAgICBpZiAoZWxlbWVudElkKSB7XHJcbiAgICAgICAga2V5ID0gYCR7IGV2ZW50IH06JHsgZWxlbWVudElkIH1gO1xyXG4gICAgfVxyXG4gICAgcHVzaFRvQXJyYXkoJHF1ZXVlLmV2ZW50UG9vbCwga2V5LCBmdW5jKTtcclxuICAgIGNvbnN0IGV2ZW50cyA9ICRxdWV1ZS5ldmVudFF1ZXVlW2tleV07XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YSBvZiBldmVudHMpIHtcclxuICAgICAgICAgICAgZnVuYyhkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwid2luZG93LiR0aXAgPSB7fSBhcyBhbnlcclxuXHJcbmZ1bmN0aW9uIGRpc3RvcnlQb3BNc2coZWxlbWVudDogRWxlbWVudCwgY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudC5hbmltYXRlKHtcclxuICAgICAgICBvcGFjaXR5OiBbJzEnLCAnMCddLFxyXG4gICAgICAgIGhlaWdodDogW2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuaGVpZ2h0LCAnMHB4J10sXHJcbiAgICAgICAgbWFyZ2luOiBbZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5tYXJnaW4sICcwcHgnXSxcclxuICAgICAgICBwYWRkaW5nOiBbZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wYWRkaW5nLCAnMHB4J10sXHJcbiAgICB9LCAxMDAwKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIDMwMClcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUG9wTXNnKG1zZzogc3RyaW5nLCB0eXBlOiBUaXBDYXRlZ29yeSwgdGltZW91dCA9IDIwMDAsIG1hcmdpblRvcCA9ICcxMCUnKSB7XHJcbiAgICAvLyDliJvlu7rlrrnlmahcclxuICAgIGxldCBjb250YWluZXI6IEhUTUxFbGVtZW50ID0gd2luZG93LmJ5SWQoJ2Rpbmdsai12LXBvcC1tc2ctY29udGFpbmVyJyk7XHJcbiAgICBpZiAoIWNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnRhaW5lci5pZCA9ICdkaW5nbGotdi1wb3AtbXNnLWNvbnRhaW5lcic7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG4gICAgfVxyXG4gICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IG1hcmdpblRvcDtcclxuICAgIGNvbnN0IG1zZ0xpc3Q6IEFycmF5PEhUTUxFbGVtZW50PiA9IHdpbmRvdy5ieUNsYXNzKCdkaW5nbGotdi1wb3AtbXNnJyk7XHJcbiAgICAvLyDlrrnlmajmnIDlpJrlkIzml7bmmL7npLogNSDmnaHmtojmga8sIOi2hei/hyA1IOadoeaXtuWIoOmZpOacgOaXqeeahFxyXG4gICAgaWYgKG1zZ0xpc3QubGVuZ3RoID49IDUpIHtcclxuICAgICAgICBtc2dMaXN0LnNvcnQoKG4xLCBuMikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbjEudGltZSAtIG4yLnRpbWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtc2dMaXN0Lmxlbmd0aCAtIDQ7IGkrKykge1xyXG4gICAgICAgICAgICBkaXN0b3J5UG9wTXNnKG1zZ0xpc3RbaV0sIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5Yib5bu65LiA5p2h5o+Q56S65L+h5oGvXHJcbiAgICBjb25zdCBuZXdFbGVtZW5ldDogRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbmV3RWxlbWVuZXQuY2xhc3NMaXN0LmFkZCgnZGluZ2xqLXYtcG9wLW1zZycsIHR5cGUpXHJcbiAgICBuZXdFbGVtZW5ldC50aW1lID0gRGF0ZS5ub3coKTtcclxuICAgIC8vIOWIm+W7uuaPkOekuiBpY29uLCDku6Xooajovr7mj5DnpLrnmoTnsbvlnotcclxuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGljb24uY2xhc3NMaXN0LmFkZCgnZGluZ2xqLXYtcG9wLW1zZy1pY29uJywgdHlwZSk7XHJcbiAgICBpY29uLmlubmVyVGV4dCA9IHR5cGUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICBuZXdFbGVtZW5ldC5hcHBlbmRDaGlsZChpY29uKTtcclxuICAgIC8vIOi/veWKoOaPkOekuueahOS/oeaBr1xyXG4gICAgbmV3RWxlbWVuZXQuaW5uZXJIVE1MICs9IG1zZztcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdFbGVtZW5ldCk7XHJcbiAgICBuZXdFbGVtZW5ldC5hbmltYXRlKHtcclxuICAgICAgICBoZWlnaHQ6IFsnMHB4JywgZ2V0Q29tcHV0ZWRTdHlsZShuZXdFbGVtZW5ldCkuaGVpZ2h0XSxcclxuICAgICAgICBwYWRkaW5nOiBbJzBweCA1cHgnLCAnNXB4IDVweCddLFxyXG4gICAgICAgIG1hcmdpbkJvdHRvbTogWycwcHgnLCAnNXB4J10sXHJcbiAgICAgICAgb3BhY2l0eTogWycwJywgJzEnXSxcclxuICAgICAgICB0b3A6IFsnNTBweCcsICcwcHgnXSxcclxuICAgIH0sIDEwMDApO1xyXG4gICAgLy8g5YmN6Z2i6YO95YeG5aSH5bCx57uqLCDmv4DmtLvor6Xmtojmga9cclxuICAgIG5ld0VsZW1lbmV0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgLy8g5LiA5a6a5pe26Ze05ZCO6ZSA5q+B6K+l5raI5oGvXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBkaXN0b3J5UG9wTXNnKG5ld0VsZW1lbmV0LCBjb250YWluZXIpO1xyXG4gICAgfSwgdGltZW91dCk7XHJcbn1cclxuXHJcbiR0aXAuaW5mbyA9IGZ1bmN0aW9uKG1zZzogc3RyaW5nLCB0aW1lb3V0ID0gMjAwMCwgb2Zmc2V0VG9wID0gJzEwJScpOiB2b2lkIHtcclxuICAgIGNyZWF0ZVBvcE1zZyhtc2csICdpbmZvJywgdGltZW91dCwgb2Zmc2V0VG9wKTtcclxufVxyXG5cclxuJHRpcC53YXJuID0gZnVuY3Rpb24obXNnOiBzdHJpbmcsIHRpbWVvdXQgPSAyMDAwLCBvZmZzZXRUb3AgPSAnMTAlJyk6IHZvaWQge1xyXG4gICAgY3JlYXRlUG9wTXNnKG1zZywgJ3dhcm4nLCB0aW1lb3V0LCBvZmZzZXRUb3ApO1xyXG59XHJcblxyXG4kdGlwLmVyciA9IGZ1bmN0aW9uKG1zZzogc3RyaW5nLCB0aW1lb3V0ID0gMjAwMCwgb2Zmc2V0VG9wID0gJzEwJScpOiB2b2lkIHtcclxuICAgIGNyZWF0ZVBvcE1zZyhtc2csICdlcnInLCB0aW1lb3V0LCBvZmZzZXRUb3ApO1xyXG59Iiwid2luZG93LmVuY29kZUNvbmZpZyA9IGZ1bmN0aW9uKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uc3RhbnQ6IHtcbiAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICAgIFVOS05PV046IHtcbiAgICAgICAgICAgICAgICAgICAgZW46ICckRElOR0xKLUVOQ09ERS1TVEFSVCRJUXlJQXd2aGJiSVdGRmZjcFJxeG91Z28ycFA5T0JRNnJHSnQrdUJmNE41SlVpMDVIMWhqU1pQNElQZnNVT0xTbU5ES01VYmdtOHgvRlFnSHdQWTZzUThsT29IeDNSSm9pT0JGcVFhdUxPNWpwbXdnb0hrREtwUWVuK1dGbDVIWmgrRDNTNmZGM3MzU0U1L09JSGRNalYzaFRPNW5mVGgxM1FmOUhJUFNRYWM9JERJTkdMSi1FTkNPREUtRU5EJCcsIFxuICAgICAgICAgICAgICAgICAgICB6aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJERkWHRSa0w3WStkSUUrdTNYdXJ2R0RBS1lVVU54c05zeUtJOS9oa25NbXpCTzYrcks5cjhGeDlRbzdaN2orY3UvYnZFS0V6MlNPMjBOcG45aEMzcFEwTWd3alpqODFBNFhSc1RqeXl6ZVJIazdzSEd1cU1LMVVMZVFFYXROb1lzYXlQejA2YTZkQ2x1NlFoOE1mVXRaK1gwUnZ0ZHZLMTVJWUVBejI4cjk5Yz0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgVElDS0VUOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkTnVlc3NpQ29vMUtxV2h6aUVidEVoNXUyRE9CUjl1bmdYTlZydW95MUg3dmpsSmVnbjJnRisyRUlpRXlBOThZZlZERDJ1MDRmY3I2dTJxU3B2dmdmQ3h5V2lzcW1HRFVvbVZGblk1Y25McFY3Q0gzcC9WMU9FalVTOU53WU82WDRSSHMxYUhMYTJZcDV4Zm1ydEJHS1lNWUZ0L2lYK0JiS0YybXhHenp3eTFRPSRESU5HTEotRU5DT0RFLUVORCQnLCBcbiAgICAgICAgICAgICAgICAgICAgemg6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRNeWNWcm9CcStnZjJPV3NiVVRXRWhrYjZjL0N5TmlJUG02STN0SUJ2K1o0ZG1HK2Q3dUduMkUxb3VYRkhFUXRHbzJTN1ZwYkhRTUt1R3A4YmIzeGlFTXZrMGhyRDNLaTRCbFBRamFEbGl5cTNpS29CK2FOeG84dDdEUUJZc2RMblBuTGUybHVMVmNrTXBRRmJqVk5YWDlhTmluYVRGWkR0Q05qTU8xdHJJTTQ9JERJTkdMSi1FTkNPREUtRU5EJCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEZBSUxFRDoge1xuICAgICAgICAgICAgICAgICAgICBlbjogJyRESU5HTEotRU5DT0RFLVNUQVJUJG1tL1NGWVFDdWZRVUNPZGEzbXJQbkRNQzFxaTR1em81b1lMS2hHMGF3a0xvSG5MNkhTMzFiWnlKYUhnZ3VyZmVwZWNqcTdPVTRUNlU5clZEK25sdFU4bmE4b09lVlNmaGtlMWQzbWJpRGdxeVRCMHA1aUo0WDB2a3UrOUNnclpZemZtQitCQnNXYjZPQ3A4REtUWW44WVpOdG9VL0QzWjdvNlg2ZG1SaWJvWT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICAgICAgemg6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRQam9GaGtzd203UktucEZkcEJBdHNoeHVYdktLTWg3eUNqU3ZTOGQrSWh4Mjc1a3FidE4yZkRJS01adGFjbFQrU05vd3Vwc255bGZBUHh2dStzZDZvOUhhT29kNk83YUpMcm5QcWtJV1MyNXRSc1hvaU5HVGJsMzlFSXhpTmR0NU1leWRvdVJXZVhzTEdrWDYwUktLSUwvcmNlUUFYVUlNRDBNbVhBeTFuOTQ9JERJTkdMSi1FTkNPREUtRU5EJCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFNVQ0NFU1M6IHtcbiAgICAgICAgICAgICAgICAgICAgZW46ICckRElOR0xKLUVOQ09ERS1TVEFSVCRUTlhrU1k0d0hZZk9vUkNuaWZSSEVuU3cxWXFwZEx1SDRYdWl6ejBSNUxvQlBleEdUdlBLUCtLWFZZaFpjd1pXdFZPOE56cWpXMHBwMkZtQ1BLeitXWDZUc2ZEY1lnZjRNaFhSS3pNSHFBdko5L0JaZEszangwTzU0REs4bDB3amdTejBkMXlMZTZoZzJWVVBDdm9QQi8vUHBqN0hQUXVBeFNBVEFVZGVoalk9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgICAgIHpoOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkUmhPZ2psVndzUzY0eDBodStNaEdlRURnQUpSYTIwZmhYVzVEREFjOVpERFBjWVRuelJnNTIvUEg3K2s4WE00VjRnbWV1WG1oSStxSXRRcHFLMTRML2x3WUhPc0NzVytrNXdER1d6ZWpjdkxWKzQwQW83U1pkaE0rZUFWajA3VTBsclZRcnY4Rk4xeDNoeGJjblVuZUF5cGVIc1lxMUZnamdnY0E3TnpVYThBPSRESU5HTEotRU5DT0RFLUVORCQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSVU5OSU5HOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkUEFFd20zRURaTUpFR2V6U3kvSlZkS0l3TlN3WTcrcGEyRUNzQlFEZzVHTFlxdndEbFZmcHRQbEJPNWJGa1NKaGFhb3N6bm1RS0liNjdQSjVUYm1Ed2dBNlpaL2RmUTE1M0tpWTcwZUxVVDM1T2w2dnJma25WeWgwSFV4MlUrUWJWQ21ob01udjdOSzJ0YWU2YjFETFNDQWxFeXlaR2puajhpcVNYWHMvM2FBPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgICAgICB6aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJEg0enMyNTlJN3JEMWxtZ1JuTU1BUFZJcFQ0UDdSQVZHOFFZNWpWY1dlT3lvaERxb3FiWUFacVQ4VXNNb0hYL2JtVi9LK3AyNngzM0c3TVdXNzRlbHc1dW8ycHhadzA3TWR5WVFuOVJJaGJ4bzFVdmZYYWc0RDR6N3lVc1dOSlBrWWJqZ3JQNGVhb0VidWh1RTF6S0tCQTVKczRrVXBhTkV0WG90ZWEwenlLND0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgU0VOREVEOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkSFFpQXFWUjF5VnR6QXlXaUl3SHJUcm1RbmlMZmY2RlF1RHlCc0pNWkRrN0RTN1ZPdnpBOEtiQ0c4a29LN3YxY29jMEI4WlJEZkh1OTFpbHo3TUZwbmhHMTV0TWZsaHl0b2k1WEpEYTdLd2trbGJtUFZxNTZ6UUZUMTdVcHBIYk44TkRISC83NkxrOFErV3czcWhqWXcxa3VycDljZHk2MkI4Y1cyQkNCVFFvPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgICAgICB6aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJFVCY3ZDc1dEZlJjamwvWE80Y292aWJTZXhtZXB2bHRWdFRxTVBOcHZEdHNsNlBtN2wxbUJ5bDZTWHdrbjd1SGl3TzNCc2NIWHZzcmNtTFRmRWZSOXpySVNCbER1c3VBQXFHSnBqMFYrSG8zSFpnY3VJNHV0WTNlMyswN0FOUWhWMGJ1MGo1N2lCcGVpcThUdGRPcGhSL2ZTaU1BeGdQUjRjRUU5WVVIaWNLdz0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgTk9UU0VORDoge1xuICAgICAgICAgICAgICAgICAgICBlbjogJyRESU5HTEotRU5DT0RFLVNUQVJUJFoydDN2Y2VTTmRJSFpNTWxNcEpnYmtWbWU3YlRuNGo2V2JzS0JpckZIVTNNcUJXODRlbzdXQmNoUDRrT2hkVFpLblQ3YXpVNWJjeGJYSE5NK2Q0UlpvMWhBck5GQzJTODVVMTRTbFQ1S1MrMTBoaC9aVDVIalVDTC9LbDl1aFdqTzJXVU51SzNQZXVLbE9pQ3pKUlFKSjVPTVBUT2l5VktHcjJiUm0xcCtJUT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICAgICAgemg6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRqTHFpaG8yRW1jVy9pdy9TdHl6VmtacG9zT1FXWEpodGRtYW1MSmNHZ0orZGJtdVFLb0Y1RjZuM3UwWVExeGNlQmpiV1F4MFR0OUN6WU1nckhmbE5pTUtFNHkzbkFVV2F4R3QxcGhHdjNodW5kL0lOTGN4VndQOXpHSitIVExKcnNpQVMxTnc2dytSRmNLU3VmamRtS2Uvd3pIemhtQ3dObFV3NnpYcWpsc1k9JERJTkdMSi1FTkNPREUtRU5EJCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFdBSVRUSU5HOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkSFRuN205NGIzOXUwZ1NoWldvUTc4ck94a2dBWkZCdGdsek1KbUdHYzlsT2p5NnJZNklTeDduNlFpL0UyQU9oWGxlS3N1TGozV0hvRjFCU1A1cldGUmxIc3hRMEd6K2FUdThPU1Y0UVVBc3dCVEZjV0Y4enloMTVLdG5CaUtYa0Jndk9WdUJwdmVYZ0pnY2tkVHcvVHQyNFRMQlFmV1dtU1lZSGtuaVJKb2EwPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgICAgICB6aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJGQxVkU2TlZQRDdNbzVJb0QzVWhZS3Q3b0hUekZIeXM0R0xVUyttRjN1OHJKb0R5amtoQ2hIV1JoKzlCZWVIanBYYkcrOTh6c0l3S0U5Q3Rma2ZJTlplOG1PZ0d3QWRFZ1FYYjRORVE5L1FVdkpBaXVNamJNTWtTMzF1WWEzejBLM2NiTjNIVFJJMXE1bGtWeFRVd3lLWUNoemxCNHN4QjJxQnE0MlAxWWtZaz0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFzb3VyY2U6IHtcbiAgICAgICAgICAgIG15c3FsOiB7XG4gICAgICAgICAgICAgICAgREJfU0VSVkVSOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkVEx4RnJoUGZlM0pWZUw2WW9WNzBYaC8vUlZxZ3RRelBZVlpQNHZvdlZ1M3ZER1h3Z3lTVEZSUHk2bjF3WEw3T1JpNituaEJPVlB0YWQ3WFFwQ0tvMjNtd2JIUTNqaEU2M0IwaDhZcVdpaFVFUVNKSVZzbjF6aU9Ec2VzUmg5T1dHU0FKYitTSlgvNjcyQzVVYWVUVzZFRXM2RVJXd3pQeW9ONmxiSXBoU2NzPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgIERCX1BBU1M6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRFSXFVeTFIeG1BRFdDS2xnTnRwVnl5YXpvSk1nR0pUaVNBVDdXVi9iSllETWFMRjViRmlPMC9Hc3NTRXFWMW5SSVZYSTYzUkVhdTJRNjZWSCtxdnplV1F2UDZ1TkVja3M5eG1EYU91Q2VHUUN4V0IxY3o2NmZwbFNpWlUyTHN6R25McjFiSHlYczVxdVJLcDd1S3AzcUEyWWYzWEhLbXFWTkVzNit2UXBnT1U9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgREJfVFlQRTogJyRESU5HTEotRU5DT0RFLVNUQVJUJE10dzdEVi9lV2FUdTRCRWFZYjVudmVtcTlzMEhyUUJtZ2F5RXpOYWFEOXdTQlM5WnZ0TnZZai9iSkYrTDQvWDZBV3ZYNHVEVytEdjcvM3BWd1EwVFAzYS9DWHFNU0JJZ0VwVVAxTVhDaUpjeWlTVnB5NDZNNWxzdTlKdk9iUDNJYUV1Y2RJR3NDSlROVWk4NmpJUEpSZ3lSWjFmY01HRU5YOGlkMmExSGxmQT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBEQl9VU0VSOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkTkVZbTlSek9zcXg1TTJsMXBCRDVkWXJxQitXczF2YWIzaG84azQyemZibnhNMmN1NnRNK0h2YVNFdjB5Z1NRdFRCNFZOTXMwa0ZhTGxiQnZONjVseFlJWktnZFBVbEhQZWxUc0JVUVROcUJNQk1LLzYrbitRTVplOENDZ0pRbVFQd3VPTmZ6a2NseGZkeVdDV3RCeFRsNHJmcFRrZG9vRmptT0RoYTFibHA0PSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgIERCX05BTUU6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRCKzBjOWFjYkk1L3ZtUUo5RUtTQ1hJRU4vNU1JUHB5Tmo0eCtnYVBsemJrMDFPU1ZLNmxYTGJlQmgxSEVRbnM0bjBUeHcxL1o3SkFUVEZsR25qdEZXbW5TRGFTbUV2bW1aajI5RURCd1o4OVFUcUZkV3RYUVEvY1Q5TmJ6b29XWnJNeHAwVUlwZVg5b2VXZEJQZCtabFdxRFNzVlJLR21ZVnNzb01SNk5PNG89JERJTkdMSi1FTkNPREUtRU5EJCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtc3NxbDoge1xuICAgICAgICAgICAgICAgIERCX1NFUlZFUjogJyRESU5HTEotRU5DT0RFLVNUQVJUJEZVYjV4blRNOU5vVHhEb3pUaXViQ2RBSy95NWdpOGpHcEY4SStoRnFiTTRWblJiZzJyQ2xaaG9sbVJJc3R3VEZXdVFDS0xYSS9CNG1IdTRLUXozQUZwTE1SVlZnQjZmRjlla0JmNEh5bUN0c1luQWR1SW56aXZvMlFwYlBWNVVBeUIwUkN5NEE4NzZ4bU9lYTdjSlA0a0J0MkE0emlRalpMUTE3aUJhMHBMaz0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBEQl9QQVNTOiAnJERJTkdMSi1FTkNPREUtU1RBUlQka3IwbmNKTmhNZTdYRUxqZXROL3lxcnVGelpWa3locDFmbDZaaWFhOUdib2plYjFxdGN0Umt1aXkxNk1OcEJFcTZxTGxFMkE4TTIraDJYWnN4VmUwdjRoMGhXc256VmVSRVZOeU9Ea3FaR1BxK3diajVOUVFaaDhwZkI1NVlBd1BxTFNkZHQySHphTUNVNWpPeXBPWWNKRElDNHB6Y2M1WXV2YUFtSEhDdGN3PSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgIERCX1RZUEU6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRDNkMyVmRmVXZaS1ZSYjBvT3czeitkQTRlQVpKTjF4T29WUExYRVVRclpHVDN3TCs3bmM0U1NNTlRrZVU5cHUwNmtQdE5NRFNscC9ncFVhY0p0ZzRrNnBreXdRRFArYmcrY0xnRnd6UHdrZmVVaFpMaGxBKzFKeTNTVDg5TkpjQmRmY3BKNlVMS2h4WWxqVU1HMmdhaFY5MVlvTXdrVVdZTy9sa1RMcEoyc1k9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgREJfVVNFUjogJyRESU5HTEotRU5DT0RFLVNUQVJUJGlWL1NZeEMxZXhjU29XaFpDK0NQT2FnMGNvMGxBK1hMQUQxZjRqMzdTbTFaSm9Rb3lJa3NsYlY0THlqL29DejRNR3dIQ0p1UkhER1VFY3laYWMrUUlaZVJMN0lHKzMzMzliWVZDQVFESitFRmNycUtmNmQzQkdtTmd1YzB0M3dtUUVxaWxZWWNsaGtwTkF6L25mUm1PK3g0WVcxMjNmVVUzcGxBUlA3eUpOZz0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBEQl9OQU1FOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkZm5YNnRhNjhxMWhhRGh2ejI3VjVpc0R6M1pUeVlTN3dLbVQ3MjUzREE1MDdWYzBIUFZRVDlBRjBOaHNoLytKSlhueldrUmdFNFVNZHRZaGkrYUVoaFV3a05SYzNNMzRlcnpBTzI4eDlOWEgzQTNCTlNxaTM2R3pYcDVoMHZ2RVNjYWlpVk56M2EwMnJFQXBFOWdiVEZhV2tKM0JDTXpEVzdyakllaDVjMjBZPSRESU5HTEotRU5DT0RFLUVORCQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3JhY2xlOiB7XG4gICAgICAgICAgICAgICAgREJfU0VSVkVSOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkRDdCMGdTczhkcitZb2JqTjVieXJSZUoyc3A1RG5QbW9JYUtKbWtFOUxMUlREZjVHYUd5Mml3NDd2NFFFeGlXQWFpQS9vTHZEbFdnWjJXR2VxdnhzZkI0TGZSbXNKVTlRWGlSODMxbFgraW91aXFHOW5KMWxvajN3VjlranZnUXV2MnFuZXUwSFlEWDQrWlVjSHU2UVZRdWx2elFaK29TRlNMMWltR1J5ajRJPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgIERCX1BBU1M6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRjTTdVK3BnRDYyV2xZUW91V1FuVzR0WFFYK3VKNUNxeXF5bmJWak9DVEtpQnQzbndoVlFqY21jTm9CQVZxOFR0NG04c3NEclhUemE3SVd4eTBoZFY4SnpFVlhnZVJUVXFsLzdBSHVRZ0I1MG1NSXA1RVpVK2VITlptVStWcWQ2V1lNK1luN2NYeWczQ2VFeUZKSzlJbmNrZ1c5NmdDRmxzb3Rud2VrN1ZZUGc9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgREJfVFlQRTogJyRESU5HTEotRU5DT0RFLVNUQVJUJGtwYTFoN3V5WTFIT2N1WlczclFZNFRVZkR2bVFQK2htMCsxTDVidHN4Z241bThOQm91bno4NElWcWg1Yno1dkpYNHphamtEd2NkaWkxOHJiTjZrTHhlMXRXWFovRHk4cGpoMkxXT244dWV6UXpwN2c1dVhkMDJ1TVBiUERqVE9ndzl2anZhS09FdXdVbW10RHhPMW0vSGI2Y3h0bTRaWnREOFYzRE9pR3lRRT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBEQl9VU0VSOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkTHN0aWtkOE5MdGdVekdwTUVPVVQydEFLVG9jQ3JCZHJldm5ONG8yOGxDMEp2amhjUVZqcFJVSGNOV3VHcEJ5YUtJclpnaHRSQncwY21SdFdYWWo1bXJPOHVFdWd6b3FFWjVBcTRXa0o0Vjd6VFZqZWphaGk4cStmQmRIWnc3Szd3ZFFDaVhkdmFqanA2dWhrTEdxQXZSZ0RpWXJaWitJZ001QmRqRkEva3lFPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgICAgIERCX05BTUU6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRYeHpGRXhBT2ticHEzM0xadUI0RU1IbjN1L3V5cjlXaGFUbjhnOUc1NUxjRkFSMlJDTEJOWkFUaVR6SWM3KzFUVnhKTmhHbTgvZDgybFNiM0I4STJ0SzNEK2poaTNGeGxLKzdxMUtiQzV2bDNpbFhVNmZiVElzeHkxWDVEZ1Q3UVdncFFGV3RQcjVoYjJqMThzR2ZtV2RkOS92MGxlOW1JSWZPdDJXZWptNG89JERJTkdMSi1FTkNPREUtRU5EJCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHVybHM6IHtcbiAgICAgICAgICAgIG1hcDoge1xuICAgICAgICAgICAgICAgIHNpdDE6IFsgLy8g5YyF5ZCr5ZOq5LqbIHVybCDkvb/nlKjor6XmlrnmoYhcbiAgICAgICAgICAgICAgICAgICAgJyRESU5HTEotRU5DT0RFLVNUQVJUJFZzbEFoRERVOHJPbDhjTjl6NXo5dnRNdUZNQ2oxR1RoMDNPd3l3cHk3eVNVWkJMVk9hQWgwZHQ4dUVPVmdCbWx6dldBc1VwM0hic05Gb1pIanJKZHdGNmZ5M0w4RVYrVEQvOG5nRitxaFJGcjh4UFFHTDVJSk52VnhRQW1BZWxJOGJTZmsrUnlpWHBSTUJpd3J2R2RQeVdGZWdsL3dlYkhQamFscXZnTlF6ND0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICAgICAgJyRESU5HTEotRU5DT0RFLVNUQVJUJElmRU9ZOFdGV1NEdzZIMjh2WVc0eUhDM1JrSUxZVmwzOHdBS2o2Y3pGNEIzdmgrMUZzL1NmaTRPeGZOTy9OeXZMdmJFSjlTQlRlNk1DS2JieTRTaWtlNFRZUzhkeWl4RFkyUW85RldlK3Q5NlNrZmpJTFhyR3hnOUZldnpTR0lhQURNbnMvV20wKzNTR2QwcXVRbXBuWisreG9VUHNjdGE2MjRHZ0ZpSUJDTT0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgc2l0MjogWyAvLyDljIXlkKvlk6rkupsgdXJsIOS9v+eUqOivpeaWueahiFxuICAgICAgICAgICAgICAgICAgICAnJERJTkdMSi1FTkNPREUtU1RBUlQkS011UFlJYzdOZkhpTU9aSFpnQnNvVU9qazZ1M2pYMi9QUUQ3MXl2MitlMzlyWXlUcmRSV0FJWFlscHFPaUkrRHoxZU9iMkZXSEYrSy93Y1FUR3NNRDBDYTZpZHFSQWh2MmpiSGwwWEFYWTFscTMvcFVMeWpjajlMcTFFVW0yWEFzNzBUYXpJSE9NaWlkNjlxaGlzNVcwSmJmT2lraUNST3BjUDM4ODJIYnhjPSRESU5HTEotRU5DT0RFLUVORCQnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpdDE6IHtcbiAgICAgICAgICAgICAgICB0aWNrZXQ6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRLdVVGb0JOdjN6bHE0bnFVWTBWU0g5bVNiSWZkcC82ZkVubno3UDMxb3ZHSWFRNDJRaVVrMjAwU3IwWkYweUpDM3c1UXJQbEwvYWF0L2NCVmdEQ2Q3MFUvVVdXMXVoUTVmN2F1ZXdOREY5S3dKRzR4RWNBLzJOeitFTStJTXd5ak9nMjlXOWgzUUlIOTc0bFJyajluQTlzTzRLUjJ4bi93L1FRcllnd0N5Zms9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgcmVhZE1vZHVsZTogJyRESU5HTEotRU5DT0RFLVNUQVJUJFovVjBFUTdMQmROaGN3Uk5NbTM0RnV6UW5zYzhrZnNiYXdSQngvU0NHL0E0cXFEb1BxcngxM255RmNVMHAwdmcwWE9NOGRLa2NYZTd3RjEraFNFK2hYdnFJWTRxOGRza2JVNDZrelZneE0weWM0OHJyS3M0UnJwL0tzeGlCN0hEa0phQUh6QUE2OVlWcXlYY3REVmdXTk9RajRoZmZrVmlYS3ZtUEljZnRtZz0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmVyc2lvbkRhdGE6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRuRzJFV3RGR3RvaGEzT0p3Z0tzd3NOcEUyaXZXQS93cG00RmhSUGwrZmhTdnJhWnYxUy9kVkx3OVNDM0hSMFlwc2ZFS29CQlhtcnBwb25tSFEvRFRPYVUwUWxHUU9mRS8wWmFseVpqNk5nUlBKMDdoYVZjYy9kNWdwRHdPZDdSU2xUeDRKR1NJTHJZRHVkNUFKTWg1YnVyYm9hckZSZjhXZklwejFKYi9Sb3M9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgdmVyc2lvbnM6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRQL1ZsRERyV2FkSUdmaUkrRTdkU1hJTHpEUGdSUzJIRUM0ZmlGb1dhcEZNN3RxNGpZWTNhMC8yOTZOc0tUSlZPRHVycHZMdDZJc0lHQWpnc0N0UzBUdXdEdFJObWVQZmE1Q3kvblJreEN6R01RN3U1YktUV3h5dDdVR0kzQXJ5aDBleDlLdEo2T29QL3NRRTlFSVlqMVZOUVZ6QThKYmMzVUxMOFRuclE2UVk9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgcmVhZFZlcnNpb246ICckRElOR0xKLUVOQ09ERS1TVEFSVCRUa095VldiNDZEMldScDJBbUUrTDY2aFY1MXZndnQySnFZUFc2M3lkM280NGd4RTE5d1VtTGdLZXdQTVE2eUVKM0pRejRDd0l4TkxQQzNhWmZocWpSRFFXcHRoTWEvYjhQaEZWS0JCQ25hdVdjNlFoNjcwZEJ1R3plZS9nVjhCdjZ0c2FmZU9ncU5Iem5pOFM3SGMweW9yMHBRMm41dE1vcTZycmhxbmVmTGM9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlUGF0aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJEhaY3NkWTJHcGx6Ym5uSlZ2czlYUzlnTjFwRFlKYUg0ellHcklyZGtyeTFtdjYxd2RXZHpxWXA1cVU0MENHMmF4YVhrWlFwL0FsVXFNdWJmdkpoRXFnOFlMVFc3MVRCV0dUdUsrRWJiMmdVVndLMXZtbERQem1rVXhEbmxQSFRWYm90WlhwY0tVSHhxL2FLVzNMUG9IM1JTY3NZNkRXWGt0QVBaVFkrMEdUVT0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpdDI6IHtcbiAgICAgICAgICAgICAgICB0aWNrZXQ6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRnZVB5R2hhVGRGTFVLZWtYeURNa1lob01NUlZVdkxxbjBBaFNORXlKWktKYVdGN1VpK0tZa01ab3VsUEwxMnhWNXlIRXN1VVpMY0FRTzcvRGdlWGRBRVBWR1lxSm11eFNXUm9pa2NUNi9SQTd1WkVUcWsycXFxbDZScUJjOGZLMHN4aTBjZWdvOE5mSGRoOFoyaVBDMTJ0Vks3Yk12VVJscjI0V0M4QmU2TmM9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgcmVhZE1vZHVsZTogJyRESU5HTEotRU5DT0RFLVNUQVJUJGVkR3o2U1ZSVlJuUFRuYVEvTHJyS0MyTmhkVFRRdEpPcjBkQS9hYU5ZTzNkU2VHWm5FZlkvRlRDQnV5dVNWQWJ4QWJhbkdoS0JiSnpqeXBLSHVZTk1JNFBjZS9kV3NQeFBGbkpwdW9TR2lKWmpOTDlGZGk4NEpRbEpkUUJuTFlac08wbHBQeVB5ejhZNDVSWUlFNndMN2lHRU1rZ2pUS2dUdkpQbkN1dkl4RT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmVyc2lvbkRhdGE6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRNbVJ5ZzE5d29QYXZlMEo0L3JNSEVBRUFoNWhDazdHNFNOckh4NmFDWW80STZJZzU2dU13bnB1ZHZuV2dwc3Y2UjBUcVBQYXJkenVTSzRIa1lwbFpCLzVVNWFDaHFsNFFMSTFuRU9LbURlUUNNcjJiajN6eVY2K09xdVA0NCs1WURKNGlWSnFKRGhmWDFXWVVzellPK0ltRnFIVXhkNGVSWWJsWE1QcEZqcTg9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgdmVyc2lvbnM6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRtdW5qeXY3dzVNdHZkNEdGSGdmWkZMMnYwcWIwYVlCTzhMcHc0ckFvdS9PdDB5Uk9zSzB0M01kbG0xT2Jkck95dU9SdjNBQVJRWGJPejcrd2ZvaG13K21HcUJjRTYzZlVLL21oM1Bjb1grWXMyTWZqN1BLbEVIVFJ2QnBUTkQwNUZjVkFZT1oxb3Rya1Z6MDI2Vi84SHpqOCtQaUF3N21WS3hqaUp3VDg5czQ9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgcmVhZFZlcnNpb246ICckRElOR0xKLUVOQ09ERS1TVEFSVCRNQkxiVU14eGUxUFNVckZEWm5hY3BRMXJLaExFZE1xWFVRNWx4ZldFMUpya0JzenY1M2UxdkFzaXRZMUdUWjdweGxIY1JtdWRWZUdJblNqVUwxRlNMR1p4eVRiZEh2b1RkQVNGQmozWWQ0UDVzS2k2b25rSDg0ZGY0bTBVa3ppQkljalZ1M3F2TWQ0YlRWNlVjVzFvNjBPQW5SNGVOWlN3TGpGTzZIYUlXMTQ9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlUGF0aDogJyRESU5HTEotRU5DT0RFLVNUQVJUJE92YWVXZDlXYzczd2hiU3FuVmlteWZRZEgyZ0E3c3RjdUFDNS8yY1pram5yMGpYZ3NteTg0YitsVWRFK3c1cjQ1TVVQTUtvRmw1eXBSTmxrQXFicmozS1J6TGlBLys5ZjFNdS9rTThOTUYxdjdJeEx6ZjBwengwQ3Vsd1REWkVYUTlIaHdzRXJvQXI0ekhucERYZGJiSC9iYmtWeDdzYjFmYXhHYXpZYkRGbz0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhdXRob3I6ICdkaW5nbGpjbidcbiAgICB9XG59XG5cbmlmICghd2luZG93LnJlYWRDb25maWcpIHtcbiAgICB3aW5kb3cucmVhZENvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuICAgICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJpbXBvcnQgeyBSc2FDb25zdCB9IGZyb20gJ2NvcmUnO1xyXG5cclxuY29uc3QgZW5jcnlwdE1hcCA9IHt9O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocHVibGljS2V5OiBzdHJpbmcgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wdWI7XHJcbn0pKCkpOiBzdHJpbmcge1xyXG4gICAgaWYgKCRnZXQoZW5jcnlwdE1hcCwgdGhpcykpIHtcclxuICAgICAgICByZXR1cm4gJGdldChlbmNyeXB0TWFwLCB0aGlzKTtcclxuICAgIH1cclxuICAgIGxldCByZXN1bHQgPSBgJyR7IFJzYUNvbnN0LmZsYWdfc3RhcnQgfWA7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgIGlmIChfdGhpcy5sZW5ndGggPCAxMDApIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9ICRyc2EuZW5jcnlwdChfdGhpcywgcHVibGljS2V5KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHRtcCA9IF90aGlzLnN1YnN0cmluZygwLCAxMDApO1xyXG4gICAgICAgICAgICBfdGhpcyA9IF90aGlzLnN1YnN0cmluZygxMDApO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBgJHsgcmVzdWx0IH0keyAkcnNhLmVuY3J5cHQodG1wLCBwdWJsaWNLZXkpIH0keyBSc2FDb25zdC5mbGFnX3NwbGl0IH1gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICRzZXQoZW5jcnlwdE1hcCwgdGhpcywgYCR7IHJlc3VsdCB9JHsgUnNhQ29uc3QuZmxhZ19lbmQgfSdgKTtcclxuICAgIHJldHVybiAkZ2V0KGVuY3J5cHRNYXAsIHRoaXMpO1xyXG59XHJcblxyXG5jb25zdCBkZWNvZGUgPSB3aW5kb3cudG9DYWNoZSgoc3RyOiBzdHJpbmcsIHByaXZhdGVLZXk6IHN0cmluZyA9ICgoKSA9PiB7XHJcbiAgICBpZiAod2luZG93LnJzYSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhbGVydCgn6K+35pu05paw6ISa5pysLCDmt7vliqAgcnNhIOWvhumSpeeahOmFjee9ricpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB3aW5kb3cucnNhLnByaTtcclxufSkoKSkgPT4ge1xyXG4gICAgbGV0IGZsYWcxID0gc3RyLnN0YXJ0c1dpdGgoUnNhQ29uc3QuZmxhZ19zdGFydCk7XHJcbiAgICBsZXQgZmxhZzIgPSBzdHIuZW5kc1dpdGgoUnNhQ29uc3QuZmxhZ19lbmQpO1xyXG4gICAgaWYgKGZsYWcxICE9IGZsYWcyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIGlmIChmbGFnMSkge1xyXG4gICAgICAgIGxldCB0bXAgPSBzdHIucmVwbGFjZShSc2FDb25zdC5mbGFnX3N0YXJ0LCAnJykucmVwbGFjZShSc2FDb25zdC5mbGFnX2VuZCwgJycpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBvbmVPZiBvZiB0bXAuc3BsaXQoUnNhQ29uc3QuZmxhZ19zcGxpdCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9ICRyc2EuZGVjcnlwdChvbmVPZiwgcHJpdmF0ZUtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59LCAncnNhLWRlY29kZS1tYXAnKTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gZGVjb2RlKHRoaXMpO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmVxdWFsc0lnbm9yZUNhc2UgPSBmdW5jdGlvbihhbm90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpID09IGFub3RoZXIudG9Mb3dlckNhc2UoKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc0lnbm9yZUNhc2UgPSBmdW5jdGlvbihhbm90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFub3RoZXIudG9Mb3dlckNhc2UoKSk7XHJcbn1cclxuXHJcblN0cmluZy5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uKGRpc3BsYXlUaW1lOiBudW1iZXIgPSAyMDAwKSB7XHJcbiAgICAkdGlwLmluZm8odGhpcywgZGlzcGxheVRpbWUsICcxMCUnKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24oZGlzcGxheVRpbWU6IG51bWJlciA9IDIwMDApIHtcclxuICAgICR0aXAud2Fybih0aGlzLCBkaXNwbGF5VGltZSwgJzEwJScpO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmVyciA9IGZ1bmN0aW9uKGRpc3BsYXlUaW1lOiBudW1iZXIgPSAyMDAwKSB7XHJcbiAgICAkdGlwLmVycih0aGlzLCBkaXNwbGF5VGltZSwgJzEwJScpO1xyXG59IiwiZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOaLvOaOpei3r+W+hCAqL1xyXG4gICAgZnVuY3Rpb24gbWVyZ2VQYXRoKHJlbGF0aXZlUGF0aDogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgZnVuY3Rpb24gbWVyZ2VQYXRoKHJlbGF0aXZlUGF0aDogc3RyaW5nLCBwYXJlbnRQYXRoOiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog5ou85o6l6Lev5b6EICovXHJcbiAgICAgICAgbWVyZ2VQYXRoKHJlbGF0aXZlUGF0aDogc3RyaW5nKTogc3RyaW5nLFxyXG4gICAgICAgIG1lcmdlUGF0aChyZWxhdGl2ZVBhdGg6IHN0cmluZywgcGFyZW50UGF0aDogc3RyaW5nKTogc3RyaW5nLFxyXG4gICAgfVxyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLm1lcmdlUGF0aCA9IGZ1bmN0aW9uKHJlbGF0aXZlUGF0aDogc3RyaW5nLCBwYXJlbnRQYXRoOiBzdHJpbmcgPSB3aW5kb3cuZGluZ2xqX2hvbWUuZGVjcnlwdCgpKTogc3RyaW5nIHtcclxuICAgIGlmICghcGFyZW50UGF0aC5lbmRzV2l0aCgnLycpICYmICFwYXJlbnRQYXRoLmVuZHNXaXRoKCdcXFxcJykpIHtcclxuICAgICAgICBwYXJlbnRQYXRoID0gcGFyZW50UGF0aCArICcvJztcclxuICAgIH1cclxuICAgIGlmIChyZWxhdGl2ZVBhdGguc3RhcnRzV2l0aCgnLycpIHx8IHJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKCdcXFxcJykpIHtcclxuICAgICAgICByZWxhdGl2ZVBhdGggPSByZWxhdGl2ZVBhdGguc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAkeyBwYXJlbnRQYXRoIH0keyByZWxhdGl2ZVBhdGggfWA7XHJcbn1cclxuXHJcbmV4cG9ydCB7fSIsImRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDlkajmnJ/mgKfmiafooYzku7vliqFcclxuICAgICAgICAgKiBAcGFyYW0gZm4g5omn6KGM5Ye95pWwLCDov5Tlm54gdHJ1ZSDml7bnu5PmnZ/ku7vliqFcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aW1lcjxUPihmbjogRnVuY3Rpb24pOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDlkajmnJ/mgKfmiafooYzku7vliqFcclxuICAgICAgICAgKiBAcGFyYW0gZm4g5omn6KGM5Ye95pWwLCDov5Tlm54gdHJ1ZSDml7bnu5PmnZ/ku7vliqFcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSDmr4/lpJrlsJHmr6vnp5LmiafooYzkuIDmrKFcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aW1lcjxUPihmbjogRnVuY3Rpb24sIHRpbWU6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOWRqOacn+aAp+aJp+ihjOS7u+WKoVxyXG4gICAgICAgICAqIEBwYXJhbSBmbiDmiafooYzlh73mlbAsIOi/lOWbniB0cnVlIOaXtue7k+adn+S7u+WKoVxyXG4gICAgICAgICAqIEBwYXJhbSBvYmplY3Qg5omn6KGM55qE5Li75L2T5a+56LGhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGltZXI8VD4oZm46IEZ1bmN0aW9uLCBvYmplY3Q6IFQpOiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLnRpbWVyID0gZnVuY3Rpb248VD4oZm46IEZ1bmN0aW9uLCBwYXJhbT86IG51bWJlciB8IFQpIHtcclxuICAgIGxldCB0aW1lOiBudW1iZXIgPSAzMDtcclxuICAgIGxldCBvYmplY3Q6IFQgPSBudWxsO1xyXG4gICAgaWYgKHBhcmFtKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aW1lID0gcGFyYW07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqZWN0ID0gcGFyYW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGltZSA9IHRpbWUgPCAzMCA/IDMwIDogdGltZTtcclxuICAgIGxldCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAoZm4ob2JqZWN0KSkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0aW1lKTtcclxufVxyXG5cclxuZXhwb3J0IHt9IiwiZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgLyoqIOa3u+WKoCBjc3Mg5qC35byPLCDpu5jorqTnm7jlr7nkuo4gZGluZ2xqX2hvbWUgKi9cclxuICAgICAgICBsaW5rQ3NzKHJlbGF0aXZlUGF0aDogc3RyaW5nKTogdm9pZDtcclxuICAgICAgICAvKiog5re75YqgIGNzcyDmoLflvI8gKi9cclxuICAgICAgICBsaW5rQ3NzKHJlbGF0aXZlUGF0aDogc3RyaW5nLCBwYXJlbnRQYXRoOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLmxpbmtDc3MgPSBmdW5jdGlvbihyZWxhdGl2ZVBhdGg6IHN0cmluZywgcGFyZW50UGF0aDogc3RyaW5nID0gd2luZG93LmRpbmdsal9ob21lLmRlY3J5cHQoKSk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3R5bGVFbGVtZW50OiBIVE1MU3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgIGNvbnN0IHVybCA9IG1lcmdlUGF0aChyZWxhdGl2ZVBhdGgsIHBhcmVudFBhdGgpO1xyXG4gICAgc3R5bGVFbGVtZW50LmlubmVySFRNTCA9ICRuZXQuZ2V0PHN0cmluZz4odXJsKTtcclxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxufVxyXG5cclxuZXhwb3J0IHt9IiwidmFyIEJJX1JNID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbmV4cG9ydCBmdW5jdGlvbiBpbnQyY2hhcihuKSB7XG4gICAgcmV0dXJuIEJJX1JNLmNoYXJBdChuKTtcbn1cbi8vI3JlZ2lvbiBCSVRfT1BFUkFUSU9OU1xuLy8gKHB1YmxpYykgdGhpcyAmIGFcbmV4cG9ydCBmdW5jdGlvbiBvcF9hbmQoeCwgeSkge1xuICAgIHJldHVybiB4ICYgeTtcbn1cbi8vIChwdWJsaWMpIHRoaXMgfCBhXG5leHBvcnQgZnVuY3Rpb24gb3Bfb3IoeCwgeSkge1xuICAgIHJldHVybiB4IHwgeTtcbn1cbi8vIChwdWJsaWMpIHRoaXMgXiBhXG5leHBvcnQgZnVuY3Rpb24gb3BfeG9yKHgsIHkpIHtcbiAgICByZXR1cm4geCBeIHk7XG59XG4vLyAocHVibGljKSB0aGlzICYgfmFcbmV4cG9ydCBmdW5jdGlvbiBvcF9hbmRub3QoeCwgeSkge1xuICAgIHJldHVybiB4ICYgfnk7XG59XG4vLyByZXR1cm4gaW5kZXggb2YgbG93ZXN0IDEtYml0IGluIHgsIHggPCAyXjMxXG5leHBvcnQgZnVuY3Rpb24gbGJpdCh4KSB7XG4gICAgaWYgKHggPT0gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHggJiAweGZmZmYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gMTY7XG4gICAgICAgIHIgKz0gMTY7XG4gICAgfVxuICAgIGlmICgoeCAmIDB4ZmYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gODtcbiAgICAgICAgciArPSA4O1xuICAgIH1cbiAgICBpZiAoKHggJiAweGYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gNDtcbiAgICAgICAgciArPSA0O1xuICAgIH1cbiAgICBpZiAoKHggJiAzKSA9PSAwKSB7XG4gICAgICAgIHggPj49IDI7XG4gICAgICAgIHIgKz0gMjtcbiAgICB9XG4gICAgaWYgKCh4ICYgMSkgPT0gMCkge1xuICAgICAgICArK3I7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuLy8gcmV0dXJuIG51bWJlciBvZiAxIGJpdHMgaW4geFxuZXhwb3J0IGZ1bmN0aW9uIGNiaXQoeCkge1xuICAgIHZhciByID0gMDtcbiAgICB3aGlsZSAoeCAhPSAwKSB7XG4gICAgICAgIHggJj0geCAtIDE7XG4gICAgICAgICsrcjtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG4vLyNlbmRyZWdpb24gQklUX09QRVJBVElPTlNcbiIsImltcG9ydCB7IGludDJjaGFyIH0gZnJvbSBcIi4vdXRpbFwiO1xudmFyIGI2NG1hcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xudmFyIGI2NHBhZCA9IFwiPVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGhleDJiNjQoaCkge1xuICAgIHZhciBpO1xuICAgIHZhciBjO1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgKyAzIDw9IGgubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgYyA9IHBhcnNlSW50KGguc3Vic3RyaW5nKGksIGkgKyAzKSwgMTYpO1xuICAgICAgICByZXQgKz0gYjY0bWFwLmNoYXJBdChjID4+IDYpICsgYjY0bWFwLmNoYXJBdChjICYgNjMpO1xuICAgIH1cbiAgICBpZiAoaSArIDEgPT0gaC5sZW5ndGgpIHtcbiAgICAgICAgYyA9IHBhcnNlSW50KGguc3Vic3RyaW5nKGksIGkgKyAxKSwgMTYpO1xuICAgICAgICByZXQgKz0gYjY0bWFwLmNoYXJBdChjIDw8IDIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpICsgMiA9PSBoLmxlbmd0aCkge1xuICAgICAgICBjID0gcGFyc2VJbnQoaC5zdWJzdHJpbmcoaSwgaSArIDIpLCAxNik7XG4gICAgICAgIHJldCArPSBiNjRtYXAuY2hhckF0KGMgPj4gMikgKyBiNjRtYXAuY2hhckF0KChjICYgMykgPDwgNCk7XG4gICAgfVxuICAgIHdoaWxlICgocmV0Lmxlbmd0aCAmIDMpID4gMCkge1xuICAgICAgICByZXQgKz0gYjY0cGFkO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLy8gY29udmVydCBhIGJhc2U2NCBzdHJpbmcgdG8gaGV4XG5leHBvcnQgZnVuY3Rpb24gYjY0dG9oZXgocykge1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIHZhciBpO1xuICAgIHZhciBrID0gMDsgLy8gYjY0IHN0YXRlLCAwLTNcbiAgICB2YXIgc2xvcCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHMuY2hhckF0KGkpID09IGI2NHBhZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHYgPSBiNjRtYXAuaW5kZXhPZihzLmNoYXJBdChpKSk7XG4gICAgICAgIGlmICh2IDwgMCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgPT0gMCkge1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKHYgPj4gMik7XG4gICAgICAgICAgICBzbG9wID0gdiAmIDM7XG4gICAgICAgICAgICBrID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrID09IDEpIHtcbiAgICAgICAgICAgIHJldCArPSBpbnQyY2hhcigoc2xvcCA8PCAyKSB8ICh2ID4+IDQpKTtcbiAgICAgICAgICAgIHNsb3AgPSB2ICYgMHhmO1xuICAgICAgICAgICAgayA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoayA9PSAyKSB7XG4gICAgICAgICAgICByZXQgKz0gaW50MmNoYXIoc2xvcCk7XG4gICAgICAgICAgICByZXQgKz0gaW50MmNoYXIodiA+PiAyKTtcbiAgICAgICAgICAgIHNsb3AgPSB2ICYgMztcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKChzbG9wIDw8IDIpIHwgKHYgPj4gNCkpO1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKHYgJiAweGYpO1xuICAgICAgICAgICAgayA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGsgPT0gMSkge1xuICAgICAgICByZXQgKz0gaW50MmNoYXIoc2xvcCA8PCAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbi8vIGNvbnZlcnQgYSBiYXNlNjQgc3RyaW5nIHRvIGEgYnl0ZS9udW1iZXIgYXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBiNjR0b0JBKHMpIHtcbiAgICAvLyBwaWdneWJhY2sgb24gYjY0dG9oZXggZm9yIG5vdywgb3B0aW1pemUgbGF0ZXJcbiAgICB2YXIgaCA9IGI2NHRvaGV4KHMpO1xuICAgIHZhciBpO1xuICAgIHZhciBhID0gW107XG4gICAgZm9yIChpID0gMDsgMiAqIGkgPCBoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFbaV0gPSBwYXJzZUludChoLnN1YnN0cmluZygyICogaSwgMiAqIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbiIsIi8vIEhleCBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDEzIExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG52YXIgZGVjb2RlcjtcbmV4cG9ydCB2YXIgSGV4ID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChkZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBoZXggPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgICAgICAgICAgIHZhciBpZ25vcmUgPSBcIiBcXGZcXG5cXHJcXHRcXHUwMEEwXFx1MjAyOFxcdTIwMjlcIjtcbiAgICAgICAgICAgIGRlY29kZXIgPSB7fTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltoZXguY2hhckF0KGkpXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZXggPSBoZXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDEwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgICAgIGRlY29kZXJbaGV4LmNoYXJBdChpKV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlnbm9yZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGRlY29kZXJbaWdub3JlLmNoYXJBdChpKV0gPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBiaXRzID0gMDtcbiAgICAgICAgdmFyIGNoYXJfY291bnQgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBhLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChjID09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjID0gZGVjb2RlcltjXTtcbiAgICAgICAgICAgIGlmIChjID09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXIgYXQgb2Zmc2V0IFwiICsgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaXRzIHw9IGM7XG4gICAgICAgICAgICBpZiAoKytjaGFyX2NvdW50ID49IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGNoYXJfY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYml0cyA8PD0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcl9jb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kaW5nIGluY29tcGxldGU6IDQgYml0cyBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufTtcbiIsIi8vIEJhc2U2NCBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDEzIExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG52YXIgZGVjb2RlcjtcbmV4cG9ydCB2YXIgQmFzZTY0ID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChkZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBiNjQgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgICAgICAgICAgIHZhciBpZ25vcmUgPSBcIj0gXFxmXFxuXFxyXFx0XFx1MDBBMFxcdTIwMjhcXHUyMDI5XCI7XG4gICAgICAgICAgICBkZWNvZGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltiNjQuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNvZGVyWyctJ10gPSA2MjsgLy8rXG4gICAgICAgICAgICBkZWNvZGVyWydfJ10gPSA2MzsgLy8tXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWdub3JlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltpZ25vcmUuY2hhckF0KGkpXSA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgdmFyIGJpdHMgPSAwO1xuICAgICAgICB2YXIgY2hhcl9jb3VudCA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGEuY2hhckF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgPSBkZWNvZGVyW2NdO1xuICAgICAgICAgICAgaWYgKGMgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGNoYXJhY3RlciBhdCBvZmZzZXQgXCIgKyBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpdHMgfD0gYztcbiAgICAgICAgICAgIGlmICgrK2NoYXJfY291bnQgPj0gNCkge1xuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDE2KTtcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSAoYml0cyA+PiA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gYml0cyAmIDB4RkY7XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAgICAgY2hhcl9jb3VudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaXRzIDw8PSA2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoY2hhcl9jb3VudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhc2U2NCBlbmNvZGluZyBpbmNvbXBsZXRlOiBhdCBsZWFzdCAyIGJpdHMgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSAoYml0cyA+PiAxMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gKGJpdHMgPj4gMTYpO1xuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgcmU6IC8tLS0tLUJFR0lOIFteLV0rLS0tLS0oW0EtWmEtejAtOStcXC89XFxzXSspLS0tLS1FTkQgW14tXSstLS0tLXxiZWdpbi1iYXNlNjRbXlxcbl0rXFxuKFtBLVphLXowLTkrXFwvPVxcc10rKT09PT0vLFxuICAgIHVuYXJtb3I6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBtID0gQmFzZTY0LnJlLmV4ZWMoYSk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICBpZiAobVsxXSkge1xuICAgICAgICAgICAgICAgIGEgPSBtWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobVsyXSkge1xuICAgICAgICAgICAgICAgIGEgPSBtWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVnRXhwIG91dCBvZiBzeW5jXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCYXNlNjQuZGVjb2RlKGEpO1xuICAgIH1cbn07XG4iLCIvLyBCaWcgaW50ZWdlciBiYXNlLTEwIHByaW50aW5nIGxpYnJhcnlcbi8vIENvcHlyaWdodCAoYykgMjAxNCBMYXBvIEx1Y2hpbmkgPGxhcG9AbGFwby5pdD5cbi8vIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxuLy8gcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZVxuLy8gY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFU1xuLy8gV0lUSCBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1Jcbi8vIEFOWSBTUEVDSUFMLCBESVJFQ1QsIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVNcbi8vIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0Zcbi8vIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIGltbWVkOiB0cnVlLCBsYXRlZGVmOiB0cnVlLCB1bmRlZjogdHJ1ZSwgcmVnZXhkYXNoOiBmYWxzZSAqL1xudmFyIG1heCA9IDEwMDAwMDAwMDAwMDAwOyAvLyBiaWdnZXN0IGludGVnZXIgdGhhdCBjYW4gc3RpbGwgZml0IDJeNTMgd2hlbiBtdWx0aXBsaWVkIGJ5IDI1NlxudmFyIEludDEwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludDEwKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmID0gWyt2YWx1ZSB8fCAwXTtcbiAgICB9XG4gICAgSW50MTAucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIChtLCBjKSB7XG4gICAgICAgIC8vIGFzc2VydChtIDw9IDI1NilcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIGwgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICB0ID0gYltpXSAqIG0gKyBjO1xuICAgICAgICAgICAgaWYgKHQgPCBtYXgpIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGMgPSAwIHwgKHQgLyBtYXgpO1xuICAgICAgICAgICAgICAgIHQgLT0gYyAqIG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID4gMCkge1xuICAgICAgICAgICAgYltpXSA9IGM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyBhc3NlcnQobSA8PSAyNTYpXG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciBsID0gYi5sZW5ndGg7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdCA9IGJbaV0gLSBjO1xuICAgICAgICAgICAgaWYgKHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgdCArPSBtYXg7XG4gICAgICAgICAgICAgICAgYyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChiW2IubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAgIGIucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChiYXNlKSB7XG4gICAgICAgIGlmICgoYmFzZSB8fCAxMCkgIT0gMTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9ubHkgYmFzZSAxMCBpcyBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIHMgPSBiW2IubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMjsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHMgKz0gKG1heCArIGJbaV0pLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgSW50MTAucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciB2ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHYgPSB2ICogbWF4ICsgYltpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zaW1wbGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgcmV0dXJuIChiLmxlbmd0aCA9PSAxKSA/IGJbMF0gOiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEludDEwO1xufSgpKTtcbmV4cG9ydCB7IEludDEwIH07XG4iLCIvLyBBU04uMSBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDE0IExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG4vKmdsb2JhbCBvaWRzICovXG5pbXBvcnQgeyBJbnQxMCB9IGZyb20gXCIuL2ludDEwXCI7XG52YXIgZWxsaXBzaXMgPSBcIlxcdTIwMjZcIjtcbnZhciByZVRpbWVTID0gL14oXFxkXFxkKSgwWzEtOV18MVswLTJdKSgwWzEtOV18WzEyXVxcZHwzWzAxXSkoWzAxXVxcZHwyWzAtM10pKD86KFswLTVdXFxkKSg/OihbMC01XVxcZCkoPzpbLixdKFxcZHsxLDN9KSk/KT8pPyhafFstK10oPzpbMF1cXGR8MVswLTJdKShbMC01XVxcZCk/KT8kLztcbnZhciByZVRpbWVMID0gL14oXFxkXFxkXFxkXFxkKSgwWzEtOV18MVswLTJdKSgwWzEtOV18WzEyXVxcZHwzWzAxXSkoWzAxXVxcZHwyWzAtM10pKD86KFswLTVdXFxkKSg/OihbMC01XVxcZCkoPzpbLixdKFxcZHsxLDN9KSk/KT8pPyhafFstK10oPzpbMF1cXGR8MVswLTJdKShbMC01XVxcZCk/KT8kLztcbmZ1bmN0aW9uIHN0cmluZ0N1dChzdHIsIGxlbikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gbGVuKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgbGVuKSArIGVsbGlwc2lzO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxudmFyIFN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHJlYW0oZW5jLCBwb3MpIHtcbiAgICAgICAgdGhpcy5oZXhEaWdpdHMgPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgICAgICAgaWYgKGVuYyBpbnN0YW5jZW9mIFN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5lbmMgPSBlbmMuZW5jO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBlbmMucG9zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jIHNob3VsZCBiZSBhbiBhcnJheSBvciBhIGJpbmFyeSBzdHJpbmdcbiAgICAgICAgICAgIHRoaXMuZW5jID0gZW5jO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3RyZWFtLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9zID0gdGhpcy5wb3MrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zID49IHRoaXMuZW5jLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGluZyBieXRlIG9mZnNldCBcIi5jb25jYXQocG9zLCBcIiBvbiBhIHN0cmVhbSBvZiBsZW5ndGggXCIpLmNvbmNhdCh0aGlzLmVuYy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGlzLmVuYykgPyB0aGlzLmVuYy5jaGFyQ29kZUF0KHBvcykgOiB0aGlzLmVuY1twb3NdO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5oZXhCeXRlID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGV4RGlnaXRzLmNoYXJBdCgoYiA+PiA0KSAmIDB4RikgKyB0aGlzLmhleERpZ2l0cy5jaGFyQXQoYiAmIDB4Rik7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmhleER1bXAgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcmF3KSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIHMgKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KGkpKTtcbiAgICAgICAgICAgIGlmIChyYXcgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkgJiAweEYpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDc6XG4gICAgICAgICAgICAgICAgICAgICAgICBzICs9IFwiICBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4RjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBcIiBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmlzQVNDSUkgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldChpKTtcbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDE3Nikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VTdHJpbmdJU08gPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZVN0cmluZ1VURiA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOykge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldChpKyspO1xuICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoYyA+IDE5MSkgJiYgKGMgPCAyMjQpKSB7XG4gICAgICAgICAgICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MUYpIDw8IDYpIHwgKHRoaXMuZ2V0KGkrKykgJiAweDNGKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgwRikgPDwgMTIpIHwgKCh0aGlzLmdldChpKyspICYgMHgzRikgPDwgNikgfCAodGhpcy5nZXQoaSsrKSAmIDB4M0YpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VTdHJpbmdCTVAgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgc3RyID0gXCJcIjtcbiAgICAgICAgdmFyIGhpO1xuICAgICAgICB2YXIgbG87XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDspIHtcbiAgICAgICAgICAgIGhpID0gdGhpcy5nZXQoaSsrKTtcbiAgICAgICAgICAgIGxvID0gdGhpcy5nZXQoaSsrKTtcbiAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChoaSA8PCA4KSB8IGxvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZVRpbWUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgc2hvcnRZZWFyKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5wYXJzZVN0cmluZ0lTTyhzdGFydCwgZW5kKTtcbiAgICAgICAgdmFyIG0gPSAoc2hvcnRZZWFyID8gcmVUaW1lUyA6IHJlVGltZUwpLmV4ZWMocyk7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiVW5yZWNvZ25pemVkIHRpbWU6IFwiICsgcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvcnRZZWFyKSB7XG4gICAgICAgICAgICAvLyB0byBhdm9pZCBxdWVyeWluZyB0aGUgdGltZXIsIHVzZSB0aGUgZml4ZWQgcmFuZ2UgWzE5NzAsIDIwNjldXG4gICAgICAgICAgICAvLyBpdCB3aWxsIGNvbmZvcm0gd2l0aCBJVFUgWC40MDAgWy0xMCwgKzQwXSBzbGlkaW5nIHdpbmRvdyB1bnRpbCAyMDMwXG4gICAgICAgICAgICBtWzFdID0gK21bMV07XG4gICAgICAgICAgICBtWzFdICs9ICgrbVsxXSA8IDcwKSA/IDIwMDAgOiAxOTAwO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBtWzFdICsgXCItXCIgKyBtWzJdICsgXCItXCIgKyBtWzNdICsgXCIgXCIgKyBtWzRdO1xuICAgICAgICBpZiAobVs1XSkge1xuICAgICAgICAgICAgcyArPSBcIjpcIiArIG1bNV07XG4gICAgICAgICAgICBpZiAobVs2XSkge1xuICAgICAgICAgICAgICAgIHMgKz0gXCI6XCIgKyBtWzZdO1xuICAgICAgICAgICAgICAgIGlmIChtWzddKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgKz0gXCIuXCIgKyBtWzddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobVs4XSkge1xuICAgICAgICAgICAgcyArPSBcIiBVVENcIjtcbiAgICAgICAgICAgIGlmIChtWzhdICE9IFwiWlwiKSB7XG4gICAgICAgICAgICAgICAgcyArPSBtWzhdO1xuICAgICAgICAgICAgICAgIGlmIChtWzldKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgKz0gXCI6XCIgKyBtWzldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VJbnRlZ2VyID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIHYgPSB0aGlzLmdldChzdGFydCk7XG4gICAgICAgIHZhciBuZWcgPSAodiA+IDEyNyk7XG4gICAgICAgIHZhciBwYWQgPSBuZWcgPyAyNTUgOiAwO1xuICAgICAgICB2YXIgbGVuO1xuICAgICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICAgIC8vIHNraXAgdW51c2VmdWwgYml0cyAobm90IGFsbG93ZWQgaW4gREVSKVxuICAgICAgICB3aGlsZSAodiA9PSBwYWQgJiYgKytzdGFydCA8IGVuZCkge1xuICAgICAgICAgICAgdiA9IHRoaXMuZ2V0KHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBlbmQgLSBzdGFydDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5lZyA/IC0xIDogMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93IGJpdCBsZW5ndGggb2YgaHVnZSBpbnRlZ2Vyc1xuICAgICAgICBpZiAobGVuID4gNCkge1xuICAgICAgICAgICAgcyA9IHY7XG4gICAgICAgICAgICBsZW4gPDw9IDM7XG4gICAgICAgICAgICB3aGlsZSAoKCgrcyBeIHBhZCkgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcyA9ICtzIDw8IDE7XG4gICAgICAgICAgICAgICAgLS1sZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzID0gXCIoXCIgKyBsZW4gKyBcIiBiaXQpXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVjb2RlIHRoZSBpbnRlZ2VyXG4gICAgICAgIGlmIChuZWcpIHtcbiAgICAgICAgICAgIHYgPSB2IC0gMjU2O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gbmV3IEludDEwKHYpO1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQgKyAxOyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIG4ubXVsQWRkKDI1NiwgdGhpcy5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzICsgbi50b1N0cmluZygpO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZUJpdFN0cmluZyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHVudXNlZEJpdCA9IHRoaXMuZ2V0KHN0YXJ0KTtcbiAgICAgICAgdmFyIGxlbkJpdCA9ICgoZW5kIC0gc3RhcnQgLSAxKSA8PCAzKSAtIHVudXNlZEJpdDtcbiAgICAgICAgdmFyIGludHJvID0gXCIoXCIgKyBsZW5CaXQgKyBcIiBiaXQpXFxuXCI7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgMTsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYiA9IHRoaXMuZ2V0KGkpO1xuICAgICAgICAgICAgdmFyIHNraXAgPSAoaSA9PSBlbmQgLSAxKSA/IHVudXNlZEJpdCA6IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gNzsgaiA+PSBza2lwOyAtLWopIHtcbiAgICAgICAgICAgICAgICBzICs9IChiID4+IGopICYgMSA/IFwiMVwiIDogXCIwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50cm8gKyBzdHJpbmdDdXQocywgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50cm8gKyBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZU9jdGV0U3RyaW5nID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIG1heExlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5pc0FTQ0lJKHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nQ3V0KHRoaXMucGFyc2VTdHJpbmdJU08oc3RhcnQsIGVuZCksIG1heExlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICB2YXIgcyA9IFwiKFwiICsgbGVuICsgXCIgYnl0ZSlcXG5cIjtcbiAgICAgICAgbWF4TGVuZ3RoIC89IDI7IC8vIHdlIHdvcmsgaW4gYnl0ZXNcbiAgICAgICAgaWYgKGxlbiA+IG1heExlbmd0aCkge1xuICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBtYXhMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIHMgKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KGkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBzICs9IGVsbGlwc2lzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZU9JRCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHMgPSBcIlwiO1xuICAgICAgICB2YXIgbiA9IG5ldyBJbnQxMCgpO1xuICAgICAgICB2YXIgYml0cyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMuZ2V0KGkpO1xuICAgICAgICAgICAgbi5tdWxBZGQoMTI4LCB2ICYgMHg3Rik7XG4gICAgICAgICAgICBiaXRzICs9IDc7XG4gICAgICAgICAgICBpZiAoISh2ICYgMHg4MCkpIHsgLy8gZmluaXNoZWRcbiAgICAgICAgICAgICAgICBpZiAocyA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBuID0gbi5zaW1wbGlmeSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIEludDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnN1Yig4MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gXCIyLlwiICsgbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBuIDwgODAgPyBuIDwgNDAgPyAwIDogMSA6IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gbSArIFwiLlwiICsgKG4gLSBtICogNDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzICs9IFwiLlwiICsgbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dChzLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuID0gbmV3IEludDEwKCk7XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgICBzICs9IFwiLmluY29tcGxldGVcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW07XG59KCkpO1xuZXhwb3J0IHsgU3RyZWFtIH07XG52YXIgQVNOMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBU04xKHN0cmVhbSwgaGVhZGVyLCBsZW5ndGgsIHRhZywgc3ViKSB7XG4gICAgICAgIGlmICghKHRhZyBpbnN0YW5jZW9mIEFTTjFUYWcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRhZyB2YWx1ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XG4gICAgICAgIHRoaXMuc3ViID0gc3ViO1xuICAgIH1cbiAgICBBU04xLnByb3RvdHlwZS50eXBlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnRhZy50YWdDbGFzcykge1xuICAgICAgICAgICAgY2FzZSAwOiAvLyB1bml2ZXJzYWxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFnLnRhZ051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFT0NcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQk9PTEVBTlwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJJTlRFR0VSXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkJJVF9TVFJJTkdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT0NURVRfU1RSSU5HXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5VTExcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT0JKRUNUX0lERU5USUZJRVJcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0RGVzY3JpcHRvclwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDg6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFWFRFUk5BTFwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDk6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJSRUFMXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwQTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVOVU1FUkFURURcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDBCOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRU1CRURERURfUERWXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwQzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlVURjhTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU0VRVUVOQ0VcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU0VUXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk51bWVyaWNTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUHJpbnRhYmxlU3RyaW5nXCI7IC8vIEFTQ0lJIHN1YnNldFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJUZWxldGV4U3RyaW5nXCI7IC8vIGFrYSBUNjFTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmlkZW90ZXhTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSUE1U3RyaW5nXCI7IC8vIEFTQ0lJXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlVUQ1RpbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE4OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiR2VuZXJhbGl6ZWRUaW1lXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkdyYXBoaWNTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFBOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmlzaWJsZVN0cmluZ1wiOyAvLyBBU0NJSSBzdWJzZXRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFCOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiR2VuZXJhbFN0cmluZ1wiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MUM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJVbml2ZXJzYWxTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFFOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQk1QU3RyaW5nXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIlVuaXZlcnNhbF9cIiArIHRoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFwcGxpY2F0aW9uX1wiICsgdGhpcy50YWcudGFnTnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgdGhpcy50YWcudGFnTnVtYmVyLnRvU3RyaW5nKCkgKyBcIl1cIjsgLy8gQ29udGV4dFxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIlByaXZhdGVfXCIgKyB0aGlzLnRhZy50YWdOdW1iZXIudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUuY29udGVudCA9IGZ1bmN0aW9uIChtYXhMZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMudGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLnBvc0NvbnRlbnQoKTtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGguYWJzKHRoaXMubGVuZ3RoKTtcbiAgICAgICAgaWYgKCF0aGlzLnRhZy5pc1VuaXZlcnNhbCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlT2N0ZXRTdHJpbmcoY29udGVudCwgY29udGVudCArIGxlbiwgbWF4TGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMudGFnLnRhZ051bWJlcikge1xuICAgICAgICAgICAgY2FzZSAweDAxOiAvLyBCT09MRUFOXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0cmVhbS5nZXQoY29udGVudCkgPT09IDApID8gXCJmYWxzZVwiIDogXCJ0cnVlXCI7XG4gICAgICAgICAgICBjYXNlIDB4MDI6IC8vIElOVEVHRVJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGFyc2VJbnRlZ2VyKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4pO1xuICAgICAgICAgICAgY2FzZSAweDAzOiAvLyBCSVRfU1RSSU5HXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucGFyc2VCaXRTdHJpbmcoY29udGVudCwgY29udGVudCArIGxlbiwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgwNDogLy8gT0NURVRfU1RSSU5HXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucGFyc2VPY3RldFN0cmluZyhjb250ZW50LCBjb250ZW50ICsgbGVuLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgLy8gY2FzZSAweDA1OiAvLyBOVUxMXG4gICAgICAgICAgICBjYXNlIDB4MDY6IC8vIE9CSkVDVF9JREVOVElGSUVSXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlT0lEKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4sIG1heExlbmd0aCk7XG4gICAgICAgICAgICAvLyBjYXNlIDB4MDc6IC8vIE9iamVjdERlc2NyaXB0b3JcbiAgICAgICAgICAgIC8vIGNhc2UgMHgwODogLy8gRVhURVJOQUxcbiAgICAgICAgICAgIC8vIGNhc2UgMHgwOTogLy8gUkVBTFxuICAgICAgICAgICAgLy8gY2FzZSAweDBBOiAvLyBFTlVNRVJBVEVEXG4gICAgICAgICAgICAvLyBjYXNlIDB4MEI6IC8vIEVNQkVEREVEX1BEVlxuICAgICAgICAgICAgY2FzZSAweDEwOiAvLyBTRVFVRU5DRVxuICAgICAgICAgICAgY2FzZSAweDExOiAvLyBTRVRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiKFwiICsgdGhpcy5zdWIubGVuZ3RoICsgXCIgZWxlbSlcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIihubyBlbGVtKVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMHgwQzogLy8gVVRGOFN0cmluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdDdXQodGhpcy5zdHJlYW0ucGFyc2VTdHJpbmdVVEYoY29udGVudCwgY29udGVudCArIGxlbiksIG1heExlbmd0aCk7XG4gICAgICAgICAgICBjYXNlIDB4MTI6IC8vIE51bWVyaWNTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxMzogLy8gUHJpbnRhYmxlU3RyaW5nXG4gICAgICAgICAgICBjYXNlIDB4MTQ6IC8vIFRlbGV0ZXhTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxNTogLy8gVmlkZW90ZXhTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxNjogLy8gSUE1U3RyaW5nXG4gICAgICAgICAgICAvLyBjYXNlIDB4MTk6IC8vIEdyYXBoaWNTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxQTogLy8gVmlzaWJsZVN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgMHgxQjogLy8gR2VuZXJhbFN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgMHgxQzogLy8gVW5pdmVyc2FsU3RyaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dCh0aGlzLnN0cmVhbS5wYXJzZVN0cmluZ0lTTyhjb250ZW50LCBjb250ZW50ICsgbGVuKSwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgxRTogLy8gQk1QU3RyaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dCh0aGlzLnN0cmVhbS5wYXJzZVN0cmluZ0JNUChjb250ZW50LCBjb250ZW50ICsgbGVuKSwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgxNzogLy8gVVRDVGltZVxuICAgICAgICAgICAgY2FzZSAweDE4OiAvLyBHZW5lcmFsaXplZFRpbWVcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGFyc2VUaW1lKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4sICh0aGlzLnRhZy50YWdOdW1iZXIgPT0gMHgxNykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVOYW1lKCkgKyBcIkBcIiArIHRoaXMuc3RyZWFtLnBvcyArIFwiW2hlYWRlcjpcIiArIHRoaXMuaGVhZGVyICsgXCIsbGVuZ3RoOlwiICsgdGhpcy5sZW5ndGggKyBcIixzdWI6XCIgKyAoKHRoaXMuc3ViID09PSBudWxsKSA/IFwibnVsbFwiIDogdGhpcy5zdWIubGVuZ3RoKSArIFwiXVwiO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUudG9QcmV0dHlTdHJpbmcgPSBmdW5jdGlvbiAoaW5kZW50KSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5kZW50ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcyA9IGluZGVudCArIHRoaXMudHlwZU5hbWUoKSArIFwiIEBcIiArIHRoaXMuc3RyZWFtLnBvcztcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIHMgKz0gXCIrXCI7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMudGFnLnRhZ0NvbnN0cnVjdGVkKSB7XG4gICAgICAgICAgICBzICs9IFwiIChjb25zdHJ1Y3RlZClcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgodGhpcy50YWcuaXNVbml2ZXJzYWwoKSAmJiAoKHRoaXMudGFnLnRhZ051bWJlciA9PSAweDAzKSB8fCAodGhpcy50YWcudGFnTnVtYmVyID09IDB4MDQpKSkgJiYgKHRoaXMuc3ViICE9PSBudWxsKSkge1xuICAgICAgICAgICAgcyArPSBcIiAoZW5jYXBzdWxhdGVzKVwiO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gXCJcXG5cIjtcbiAgICAgICAgaWYgKHRoaXMuc3ViICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpbmRlbnQgKz0gXCIgIFwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heCA9IHRoaXMuc3ViLmxlbmd0aDsgaSA8IG1heDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcyArPSB0aGlzLnN1YltpXS50b1ByZXR0eVN0cmluZyhpbmRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUucG9zU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb3M7XG4gICAgfTtcbiAgICBBU04xLnByb3RvdHlwZS5wb3NDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucG9zICsgdGhpcy5oZWFkZXI7XG4gICAgfTtcbiAgICBBU04xLnByb3RvdHlwZS5wb3NFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb3MgKyB0aGlzLmhlYWRlciArIE1hdGguYWJzKHRoaXMubGVuZ3RoKTtcbiAgICB9O1xuICAgIEFTTjEucHJvdG90eXBlLnRvSGV4U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0uaGV4RHVtcCh0aGlzLnBvc1N0YXJ0KCksIHRoaXMucG9zRW5kKCksIHRydWUpO1xuICAgIH07XG4gICAgQVNOMS5kZWNvZGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgIHZhciBidWYgPSBzdHJlYW0uZ2V0KCk7XG4gICAgICAgIHZhciBsZW4gPSBidWYgJiAweDdGO1xuICAgICAgICBpZiAobGVuID09IGJ1Zikge1xuICAgICAgICAgICAgcmV0dXJuIGxlbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBubyByZWFzb24gdG8gdXNlIEludDEwLCBhcyBpdCB3b3VsZCBiZSBhIGh1Z2UgYnVmZmVyIGFueXdheXNcbiAgICAgICAgaWYgKGxlbiA+IDYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBvdmVyIDQ4IGJpdHMgbm90IHN1cHBvcnRlZCBhdCBwb3NpdGlvbiBcIiArIChzdHJlYW0ucG9zIC0gMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IC8vIHVuZGVmaW5lZFxuICAgICAgICBidWYgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBidWYgPSAoYnVmICogMjU2KSArIHN0cmVhbS5nZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGhleGFkZWNpbWFsIHZhbHVlIChhcyBhIHN0cmluZykgb2YgdGhlIGN1cnJlbnQgQVNOLjEgZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEFTTjEucHJvdG90eXBlLmdldEhleFN0cmluZ1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGV4U3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5oZWFkZXIgKiAyO1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggKiAyO1xuICAgICAgICByZXR1cm4gaGV4U3RyaW5nLnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBBU04xLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgaWYgKCEoc3RyIGluc3RhbmNlb2YgU3RyZWFtKSkge1xuICAgICAgICAgICAgc3RyZWFtID0gbmV3IFN0cmVhbShzdHIsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RyZWFtID0gc3RyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJlYW1TdGFydCA9IG5ldyBTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgdmFyIHRhZyA9IG5ldyBBU04xVGFnKHN0cmVhbSk7XG4gICAgICAgIHZhciBsZW4gPSBBU04xLmRlY29kZUxlbmd0aChzdHJlYW0pO1xuICAgICAgICB2YXIgc3RhcnQgPSBzdHJlYW0ucG9zO1xuICAgICAgICB2YXIgaGVhZGVyID0gc3RhcnQgLSBzdHJlYW1TdGFydC5wb3M7XG4gICAgICAgIHZhciBzdWIgPSBudWxsO1xuICAgICAgICB2YXIgZ2V0U3ViID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgaWYgKGxlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGRlZmluaXRlIGxlbmd0aFxuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIGxlbjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RyZWFtLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICByZXRbcmV0Lmxlbmd0aF0gPSBBU04xLmRlY29kZShzdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLnBvcyAhPSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGVudCBzaXplIGlzIG5vdCBjb3JyZWN0IGZvciBjb250YWluZXIgc3RhcnRpbmcgYXQgb2Zmc2V0IFwiICsgc3RhcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBsZW5ndGhcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IEFTTjEuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy50YWcuaXNFT0MoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0W3JldC5sZW5ndGhdID0gcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGFydCAtIHN0cmVhbS5wb3M7IC8vIHVuZGVmaW5lZCBsZW5ndGhzIGFyZSByZXByZXNlbnRlZCBhcyBuZWdhdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhjZXB0aW9uIHdoaWxlIGRlY29kaW5nIHVuZGVmaW5lZCBsZW5ndGggY29udGVudDogXCIgKyBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGFnLnRhZ0NvbnN0cnVjdGVkKSB7XG4gICAgICAgICAgICAvLyBtdXN0IGhhdmUgdmFsaWQgY29udGVudFxuICAgICAgICAgICAgc3ViID0gZ2V0U3ViKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGFnLmlzVW5pdmVyc2FsKCkgJiYgKCh0YWcudGFnTnVtYmVyID09IDB4MDMpIHx8ICh0YWcudGFnTnVtYmVyID09IDB4MDQpKSkge1xuICAgICAgICAgICAgLy8gc29tZXRpbWVzIEJpdFN0cmluZyBhbmQgT2N0ZXRTdHJpbmcgYXJlIHVzZWQgdG8gZW5jYXBzdWxhdGUgQVNOLjFcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZy50YWdOdW1iZXIgPT0gMHgwMykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLmdldCgpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJJVCBTVFJJTkdzIHdpdGggdW51c2VkIGJpdHMgY2Fubm90IGVuY2Fwc3VsYXRlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWIgPSBnZXRTdWIoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Yi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViW2ldLnRhZy5pc0VPQygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFT0MgaXMgbm90IHN1cHBvc2VkIHRvIGJlIGFjdHVhbCBjb250ZW50LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gYnV0IHNpbGVudGx5IGlnbm9yZSB3aGVuIHRoZXkgZG9uJ3RcbiAgICAgICAgICAgICAgICBzdWIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdWIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsZW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZSBjYW4ndCBza2lwIG92ZXIgYW4gaW52YWxpZCB0YWcgd2l0aCB1bmRlZmluZWQgbGVuZ3RoIGF0IG9mZnNldCBcIiArIHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdGFydCArIE1hdGguYWJzKGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBU04xKHN0cmVhbVN0YXJ0LCBoZWFkZXIsIGxlbiwgdGFnLCBzdWIpO1xuICAgIH07XG4gICAgcmV0dXJuIEFTTjE7XG59KCkpO1xuZXhwb3J0IHsgQVNOMSB9O1xudmFyIEFTTjFUYWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQVNOMVRhZyhzdHJlYW0pIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHN0cmVhbS5nZXQoKTtcbiAgICAgICAgdGhpcy50YWdDbGFzcyA9IGJ1ZiA+PiA2O1xuICAgICAgICB0aGlzLnRhZ0NvbnN0cnVjdGVkID0gKChidWYgJiAweDIwKSAhPT0gMCk7XG4gICAgICAgIHRoaXMudGFnTnVtYmVyID0gYnVmICYgMHgxRjtcbiAgICAgICAgaWYgKHRoaXMudGFnTnVtYmVyID09IDB4MUYpIHsgLy8gbG9uZyB0YWdcbiAgICAgICAgICAgIHZhciBuID0gbmV3IEludDEwKCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgYnVmID0gc3RyZWFtLmdldCgpO1xuICAgICAgICAgICAgICAgIG4ubXVsQWRkKDEyOCwgYnVmICYgMHg3Rik7XG4gICAgICAgICAgICB9IHdoaWxlIChidWYgJiAweDgwKTtcbiAgICAgICAgICAgIHRoaXMudGFnTnVtYmVyID0gbi5zaW1wbGlmeSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFTTjFUYWcucHJvdG90eXBlLmlzVW5pdmVyc2FsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdDbGFzcyA9PT0gMHgwMDtcbiAgICB9O1xuICAgIEFTTjFUYWcucHJvdG90eXBlLmlzRU9DID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdDbGFzcyA9PT0gMHgwMCAmJiB0aGlzLnRhZ051bWJlciA9PT0gMHgwMDtcbiAgICB9O1xuICAgIHJldHVybiBBU04xVGFnO1xufSgpKTtcbmV4cG9ydCB7IEFTTjFUYWcgfTtcbiIsIi8vIENvcHlyaWdodCAoYykgMjAwNSAgVG9tIFd1XG4vLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU2VlIFwiTElDRU5TRVwiIGZvciBkZXRhaWxzLlxuLy8gQmFzaWMgSmF2YVNjcmlwdCBCTiBsaWJyYXJ5IC0gc3Vic2V0IHVzZWZ1bCBmb3IgUlNBIGVuY3J5cHRpb24uXG5pbXBvcnQgeyBjYml0LCBpbnQyY2hhciwgbGJpdCwgb3BfYW5kLCBvcF9hbmRub3QsIG9wX29yLCBvcF94b3IgfSBmcm9tIFwiLi91dGlsXCI7XG4vLyBCaXRzIHBlciBkaWdpdFxudmFyIGRiaXRzO1xuLy8gSmF2YVNjcmlwdCBlbmdpbmUgYW5hbHlzaXNcbnZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTtcbnZhciBqX2xtID0gKChjYW5hcnkgJiAweGZmZmZmZikgPT0gMHhlZmNhZmUpO1xuLy8jcmVnaW9uXG52YXIgbG93cHJpbWVzID0gWzIsIDMsIDUsIDcsIDExLCAxMywgMTcsIDE5LCAyMywgMjksIDMxLCAzNywgNDEsIDQzLCA0NywgNTMsIDU5LCA2MSwgNjcsIDcxLCA3MywgNzksIDgzLCA4OSwgOTcsIDEwMSwgMTAzLCAxMDcsIDEwOSwgMTEzLCAxMjcsIDEzMSwgMTM3LCAxMzksIDE0OSwgMTUxLCAxNTcsIDE2MywgMTY3LCAxNzMsIDE3OSwgMTgxLCAxOTEsIDE5MywgMTk3LCAxOTksIDIxMSwgMjIzLCAyMjcsIDIyOSwgMjMzLCAyMzksIDI0MSwgMjUxLCAyNTcsIDI2MywgMjY5LCAyNzEsIDI3NywgMjgxLCAyODMsIDI5MywgMzA3LCAzMTEsIDMxMywgMzE3LCAzMzEsIDMzNywgMzQ3LCAzNDksIDM1MywgMzU5LCAzNjcsIDM3MywgMzc5LCAzODMsIDM4OSwgMzk3LCA0MDEsIDQwOSwgNDE5LCA0MjEsIDQzMSwgNDMzLCA0MzksIDQ0MywgNDQ5LCA0NTcsIDQ2MSwgNDYzLCA0NjcsIDQ3OSwgNDg3LCA0OTEsIDQ5OSwgNTAzLCA1MDksIDUyMSwgNTIzLCA1NDEsIDU0NywgNTU3LCA1NjMsIDU2OSwgNTcxLCA1NzcsIDU4NywgNTkzLCA1OTksIDYwMSwgNjA3LCA2MTMsIDYxNywgNjE5LCA2MzEsIDY0MSwgNjQzLCA2NDcsIDY1MywgNjU5LCA2NjEsIDY3MywgNjc3LCA2ODMsIDY5MSwgNzAxLCA3MDksIDcxOSwgNzI3LCA3MzMsIDczOSwgNzQzLCA3NTEsIDc1NywgNzYxLCA3NjksIDc3MywgNzg3LCA3OTcsIDgwOSwgODExLCA4MjEsIDgyMywgODI3LCA4MjksIDgzOSwgODUzLCA4NTcsIDg1OSwgODYzLCA4NzcsIDg4MSwgODgzLCA4ODcsIDkwNywgOTExLCA5MTksIDkyOSwgOTM3LCA5NDEsIDk0NywgOTUzLCA5NjcsIDk3MSwgOTc3LCA5ODMsIDk5MSwgOTk3XTtcbnZhciBscGxpbSA9ICgxIDw8IDI2KSAvIGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV07XG4vLyNlbmRyZWdpb25cbi8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG52YXIgQmlnSW50ZWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyb21OdW1iZXIoYSwgYiwgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiID09IG51bGwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbVN0cmluZyhhLCAyNTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vI3JlZ2lvbiBQVUJMSUNcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGJuVG9TdHJpbmc7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHN0cmluZyByZXByZXNlbnRhdGlvbiBpbiBnaXZlbiByYWRpeFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcIi1cIiArIHRoaXMubmVnYXRlKCkudG9TdHJpbmcoYik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGlmIChiID09IDE2KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDgpIHtcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMikge1xuICAgICAgICAgICAgayA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiA9PSAzMikge1xuICAgICAgICAgICAgayA9IDU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiA9PSA0KSB7XG4gICAgICAgICAgICBrID0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmFkaXgoYik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGttID0gKDEgPDwgaykgLSAxO1xuICAgICAgICB2YXIgZDtcbiAgICAgICAgdmFyIG0gPSBmYWxzZTtcbiAgICAgICAgdmFyIHIgPSBcIlwiO1xuICAgICAgICB2YXIgaSA9IHRoaXMudDtcbiAgICAgICAgdmFyIHAgPSB0aGlzLkRCIC0gKGkgKiB0aGlzLkRCKSAlIGs7XG4gICAgICAgIGlmIChpLS0gPiAwKSB7XG4gICAgICAgICAgICBpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApID4gMCkge1xuICAgICAgICAgICAgICAgIG0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHIgPSBpbnQyY2hhcihkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA8IGspIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICh0aGlzW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8IChrIC0gcCk7XG4gICAgICAgICAgICAgICAgICAgIGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSBrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAodGhpc1tpXSA+PiAocCAtPSBrKSkgJiBrbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcCArPSB0aGlzLkRCO1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgciArPSBpbnQyY2hhcihkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0gPyByIDogXCIwXCI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGUgPSBibk5lZ2F0ZTtcbiAgICAvLyAocHVibGljKSAtdGhpc1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmFicyA9IGJuQWJzO1xuICAgIC8vIChwdWJsaWMpIHx0aGlzfFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnMgPCAwKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvID0gYm5Db21wYXJlVG87XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuICsgaWYgdGhpcyA+IGEsIC0gaWYgdGhpcyA8IGEsIDAgaWYgZXF1YWxcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IHRoaXMucyAtIGEucztcbiAgICAgICAgaWYgKHIgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB0aGlzLnQ7XG4gICAgICAgIHIgPSBpIC0gYS50O1xuICAgICAgICBpZiAociAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKChyID0gdGhpc1tpXSAtIGFbaV0pICE9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuICAgIC8vIChwdWJsaWMpIHJldHVybiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gXCJ0aGlzXCJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuREIgKiAodGhpcy50IC0gMSkgKyBuYml0cyh0aGlzW3RoaXMudCAtIDFdIF4gKHRoaXMucyAmIHRoaXMuRE0pKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZCA9IGJuTW9kO1xuICAgIC8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLmFicygpLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuICAgICAgICBpZiAodGhpcy5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkge1xuICAgICAgICAgICAgYS5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvd0ludCA9IGJuTW9kUG93SW50O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQgPSBmdW5jdGlvbiAoZSwgbSkge1xuICAgICAgICB2YXIgejtcbiAgICAgICAgaWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgeiA9IG5ldyBDbGFzc2ljKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV4cChlLCB6KTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gYm5DbG9uZTtcbiAgICAvLyAocHVibGljKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLmNvcHlUbyhyKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGJuSW50VmFsdWU7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnQgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdIC0gdGhpcy5EVjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnQgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNzdW1lcyAxNiA8IERCIDwgMzJcbiAgICAgICAgcmV0dXJuICgodGhpc1sxXSAmICgoMSA8PCAoMzIgLSB0aGlzLkRCKSkgLSAxKSkgPDwgdGhpcy5EQikgfCB0aGlzWzBdO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYnl0ZVZhbHVlID0gYm5CeXRlVmFsdWU7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMjQpID4+IDI0O1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZSA9IGJuU2hvcnRWYWx1ZTtcbiAgICAvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNob3J0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMTYpID4+IDE2O1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtID0gYm5TaWdOdW07XG4gICAgLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50IDw9IDAgfHwgKHRoaXMudCA9PSAxICYmIHRoaXNbMF0gPD0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5ID0gYm5Ub0J5dGVBcnJheTtcbiAgICAvLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy50O1xuICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICByWzBdID0gdGhpcy5zO1xuICAgICAgICB2YXIgcCA9IHRoaXMuREIgLSAoaSAqIHRoaXMuREIpICUgODtcbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgaWYgKGktLSA+IDApIHtcbiAgICAgICAgICAgIGlmIChwIDwgdGhpcy5EQiAmJiAoZCA9IHRoaXNbaV0gPj4gcCkgIT0gKHRoaXMucyAmIHRoaXMuRE0pID4+IHApIHtcbiAgICAgICAgICAgICAgICByW2srK10gPSBkIHwgKHRoaXMucyA8PCAodGhpcy5EQiAtIHApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICh0aGlzW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8ICg4IC0gcCk7XG4gICAgICAgICAgICAgICAgICAgIGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSA4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAodGhpc1tpXSA+PiAocCAtPSA4KSkgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICBpZiAocCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwICs9IHRoaXMuREI7XG4gICAgICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChkICYgMHg4MCkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkIHw9IC0yNTY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrID09IDAgJiYgKHRoaXMucyAmIDB4ODApICE9IChkICYgMHg4MCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKytrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoayA+IDAgfHwgZCAhPSB0aGlzLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcltrKytdID0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBibkVxdWFscztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID09IDApO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gYm5NaW47XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA8IDApID8gdGhpcyA6IGE7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXggPSBibk1heDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZCA9IGJuQW5kO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBibk9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnhvciA9IGJuWG9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYml0d2lzZVRvKGEsIG9wX3hvciwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gYm5BbmROb3Q7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3QgPSBibk5vdDtcbiAgICAvLyAocHVibGljKSB+dGhpc1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgcltpXSA9IHRoaXMuRE0gJiB+dGhpc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByLnQgPSB0aGlzLnQ7XG4gICAgICAgIHIucyA9IH50aGlzLnM7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gYm5TaGlmdExlZnQ7XG4gICAgLy8gKHB1YmxpYykgdGhpcyA8PCBuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnJTaGlmdFRvKC1uLCByKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubFNoaWZ0VG8obiwgcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdFJpZ2h0ID0gYm5TaGlmdFJpZ2h0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgPj4gblxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICBpZiAobiA8IDApIHtcbiAgICAgICAgICAgIHRoaXMubFNoaWZ0VG8oLW4sIHIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yU2hpZnRUbyhuLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGJuR2V0TG93ZXN0U2V0Qml0O1xuICAgIC8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gIT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICogdGhpcy5EQiArIGxiaXQodGhpc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnQgKiB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcbiAgICAvLyAocHVibGljKSByZXR1cm4gbnVtYmVyIG9mIHNldCBiaXRzXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0Q291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByID0gMDtcbiAgICAgICAgdmFyIHggPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByICs9IGNiaXQodGhpc1tpXSBeIHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUudGVzdEJpdCA9IGJuVGVzdEJpdDtcbiAgICAvLyAocHVibGljKSB0cnVlIGlmZiBudGggYml0IGlzIHNldFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgaiA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuICAgICAgICBpZiAoaiA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zICE9IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKHRoaXNbal0gJiAoMSA8PCAobiAlIHRoaXMuREIpKSkgIT0gMCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zZXRCaXQgPSBiblNldEJpdDtcbiAgICAvLyAocHVibGljKSB0aGlzIHwgKDE8PG4pXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcbiAgICAvLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX2FuZG5vdCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0ID0gYm5GbGlwQml0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX3hvcik7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGQgPSBibkFkZDtcbiAgICAvLyAocHVibGljKSB0aGlzICsgYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYWRkVG8oYSwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBiblN1YnRyYWN0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgLSBhXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLnN1YlRvKGEsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gYm5NdWx0aXBseTtcbiAgICAvLyAocHVibGljKSB0aGlzICogYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5tdWx0aXBseVRvKGEsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZSA9IGJuRGl2aWRlO1xuICAgIC8vIChwdWJsaWMpIHRoaXMgLyBhXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yZW1haW5kZXIgPSBiblJlbWFpbmRlcjtcbiAgICAvLyAocHVibGljKSB0aGlzICUgYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuZGl2UmVtVG8oYSwgbnVsbCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gYm5EaXZpZGVBbmRSZW1haW5kZXI7XG4gICAgLy8gKHB1YmxpYykgW3RoaXMvYSx0aGlzJWFdXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHEgPSBuYmkoKTtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5kaXZSZW1UbyhhLCBxLCByKTtcbiAgICAgICAgcmV0dXJuIFtxLCByXTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvdyA9IGJuTW9kUG93O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZSAlIG0gKEhBQyAxNC44NSlcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBmdW5jdGlvbiAoZSwgbSkge1xuICAgICAgICB2YXIgaSA9IGUuYml0TGVuZ3RoKCk7XG4gICAgICAgIHZhciBrO1xuICAgICAgICB2YXIgciA9IG5idigxKTtcbiAgICAgICAgdmFyIHo7XG4gICAgICAgIGlmIChpIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgPCAxOCkge1xuICAgICAgICAgICAgayA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICAgICAgICBrID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpIDwgMTQ0KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpIDwgNzY4KSB7XG4gICAgICAgICAgICBrID0gNTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGsgPSA2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgOCkge1xuICAgICAgICAgICAgeiA9IG5ldyBDbGFzc2ljKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uaXNFdmVuKCkpIHtcbiAgICAgICAgICAgIHogPSBuZXcgQmFycmV0dChtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHogPSBuZXcgTW9udGdvbWVyeShtKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmVjb21wdXRhdGlvblxuICAgICAgICB2YXIgZyA9IFtdO1xuICAgICAgICB2YXIgbiA9IDM7XG4gICAgICAgIHZhciBrMSA9IGsgLSAxO1xuICAgICAgICB2YXIga20gPSAoMSA8PCBrKSAtIDE7XG4gICAgICAgIGdbMV0gPSB6LmNvbnZlcnQodGhpcyk7XG4gICAgICAgIGlmIChrID4gMSkge1xuICAgICAgICAgICAgdmFyIGcyID0gbmJpKCk7XG4gICAgICAgICAgICB6LnNxclRvKGdbMV0sIGcyKTtcbiAgICAgICAgICAgIHdoaWxlIChuIDw9IGttKSB7XG4gICAgICAgICAgICAgICAgZ1tuXSA9IG5iaSgpO1xuICAgICAgICAgICAgICAgIHoubXVsVG8oZzIsIGdbbiAtIDJdLCBnW25dKTtcbiAgICAgICAgICAgICAgICBuICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSBlLnQgLSAxO1xuICAgICAgICB2YXIgdztcbiAgICAgICAgdmFyIGlzMSA9IHRydWU7XG4gICAgICAgIHZhciByMiA9IG5iaSgpO1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgaSA9IG5iaXRzKGVbal0pIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMCkge1xuICAgICAgICAgICAgaWYgKGkgPj0gazEpIHtcbiAgICAgICAgICAgICAgICB3ID0gKGVbal0gPj4gKGkgLSBrMSkpICYga207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3ID0gKGVbal0gJiAoKDEgPDwgKGkgKyAxKSkgLSAxKSkgPDwgKGsxIC0gaSk7XG4gICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHcgfD0gZVtqIC0gMV0gPj4gKHRoaXMuREIgKyBpIC0gazEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBrO1xuICAgICAgICAgICAgd2hpbGUgKCh3ICYgMSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIHcgPj49IDE7XG4gICAgICAgICAgICAgICAgLS1uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpIC09IG4pIDwgMCkge1xuICAgICAgICAgICAgICAgIGkgKz0gdGhpcy5EQjtcbiAgICAgICAgICAgICAgICAtLWo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXMxKSB7IC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgICAgICAgICAgICBnW3ddLmNvcHlUbyhyKTtcbiAgICAgICAgICAgICAgICBpczEgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB6LnNxclRvKHIsIHIyKTtcbiAgICAgICAgICAgICAgICAgICAgei5zcXJUbyhyMiwgcik7XG4gICAgICAgICAgICAgICAgICAgIG4gLT0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICAgICAgcjIgPSB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB6Lm11bFRvKHIyLCBnW3ddLCByKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChqID49IDAgJiYgKGVbal0gJiAoMSA8PCBpKSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgICAgIHQgPSByO1xuICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICByMiA9IHQ7XG4gICAgICAgICAgICAgICAgaWYgKC0taSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuREIgLSAxO1xuICAgICAgICAgICAgICAgICAgICAtLWo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB6LnJldmVydChyKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2UgPSBibk1vZEludmVyc2U7XG4gICAgLy8gKHB1YmxpYykgMS90aGlzICUgbSAoSEFDIDE0LjYxKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2UgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICB2YXIgYWMgPSBtLmlzRXZlbigpO1xuICAgICAgICBpZiAoKHRoaXMuaXNFdmVuKCkgJiYgYWMpIHx8IG0uc2lnbnVtKCkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludGVnZXIuWkVSTztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdSA9IG0uY2xvbmUoKTtcbiAgICAgICAgdmFyIHYgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHZhciBhID0gbmJ2KDEpO1xuICAgICAgICB2YXIgYiA9IG5idigwKTtcbiAgICAgICAgdmFyIGMgPSBuYnYoMCk7XG4gICAgICAgIHZhciBkID0gbmJ2KDEpO1xuICAgICAgICB3aGlsZSAodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAodS5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgIHUuclNoaWZ0VG8oMSwgdSk7XG4gICAgICAgICAgICAgICAgaWYgKGFjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYS5pc0V2ZW4oKSB8fCAhYi5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5hZGRUbyh0aGlzLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuc3ViVG8obSwgYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYS5yU2hpZnRUbygxLCBhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWIuaXNFdmVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5zdWJUbyhtLCBiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYi5yU2hpZnRUbygxLCBiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICh2LmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgdi5yU2hpZnRUbygxLCB2KTtcbiAgICAgICAgICAgICAgICBpZiAoYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmFkZFRvKHRoaXMsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdWJUbyhtLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjLnJTaGlmdFRvKDEsIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZC5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICBkLnN1YlRvKG0sIGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkLnJTaGlmdFRvKDEsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgICAgICAgICAgICB1LnN1YlRvKHYsIHUpO1xuICAgICAgICAgICAgICAgIGlmIChhYykge1xuICAgICAgICAgICAgICAgICAgICBhLnN1YlRvKGMsIGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiLnN1YlRvKGQsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdi5zdWJUbyh1LCB2KTtcbiAgICAgICAgICAgICAgICBpZiAoYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5zdWJUbyhhLCBjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZC5zdWJUbyhiLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGQuY29tcGFyZVRvKG0pID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkLnNpZ251bSgpIDwgMCkge1xuICAgICAgICAgICAgZC5hZGRUbyhtLCBkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkLnNpZ251bSgpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuYWRkKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGJuUG93O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cChlLCBuZXcgTnVsbEV4cCgpKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZCA9IGJuR0NEO1xuICAgIC8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHggPSAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpO1xuICAgICAgICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA8IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0geDtcbiAgICAgICAgICAgIHggPSB5O1xuICAgICAgICAgICAgeSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB4LmdldExvd2VzdFNldEJpdCgpO1xuICAgICAgICB2YXIgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChnIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBnKSB7XG4gICAgICAgICAgICBnID0gaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHguclNoaWZ0VG8oZywgeCk7XG4gICAgICAgICAgICB5LnJTaGlmdFRvKGcsIHkpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh4LnNpZ251bSgpID4gMCkge1xuICAgICAgICAgICAgaWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgeC5yU2hpZnRUbyhpLCB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoaSA9IHkuZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkge1xuICAgICAgICAgICAgICAgIHkuclNoaWZ0VG8oaSwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHguc3ViVG8oeSwgeCk7XG4gICAgICAgICAgICAgICAgeC5yU2hpZnRUbygxLCB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHkuc3ViVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgeS5yU2hpZnRUbygxLCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHkubFNoaWZ0VG8oZywgeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcbiAgICAvLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHggPSB0aGlzLmFicygpO1xuICAgICAgICBpZiAoeC50ID09IDEgJiYgeFswXSA8PSBsb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeC5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGkgPSAxO1xuICAgICAgICB3aGlsZSAoaSA8IGxvd3ByaW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBtID0gbG93cHJpbWVzW2ldO1xuICAgICAgICAgICAgdmFyIGogPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIHtcbiAgICAgICAgICAgICAgICBtICo9IGxvd3ByaW1lc1tqKytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbSA9IHgubW9kSW50KG0pO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG0gJSBsb3dwcmltZXNbaSsrXSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHgubWlsbGVyUmFiaW4odCk7XG4gICAgfTtcbiAgICAvLyNlbmRyZWdpb24gUFVCTElDXG4gICAgLy8jcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbyA9IGJucENvcHlUbztcbiAgICAvLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpXSA9IHRoaXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gdGhpcy50O1xuICAgICAgICByLnMgPSB0aGlzLnM7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcbiAgICAvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBpbnRlZ2VyIHZhbHVlIHgsIC1EViA8PSB4IDwgRFZcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdGhpcy50ID0gMTtcbiAgICAgICAgdGhpcy5zID0gKHggPCAwKSA/IC0xIDogMDtcbiAgICAgICAgaWYgKHggPiAwKSB7XG4gICAgICAgICAgICB0aGlzWzBdID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh4IDwgLTEpIHtcbiAgICAgICAgICAgIHRoaXNbMF0gPSB4ICsgdGhpcy5EVjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nO1xuICAgIC8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIHN0cmluZyBhbmQgcmFkaXhcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHMsIGIpIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGlmIChiID09IDE2KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDgpIHtcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMjU2KSB7XG4gICAgICAgICAgICBrID0gODtcbiAgICAgICAgICAgIC8qIGJ5dGUgYXJyYXkgKi9cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDIpIHtcbiAgICAgICAgICAgIGsgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMzIpIHtcbiAgICAgICAgICAgIGsgPSA1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gNCkge1xuICAgICAgICAgICAgayA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZyb21SYWRpeChzLCBiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnQgPSAwO1xuICAgICAgICB0aGlzLnMgPSAwO1xuICAgICAgICB2YXIgaSA9IHMubGVuZ3RoO1xuICAgICAgICB2YXIgbWkgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNoID0gMDtcbiAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgeCA9IChrID09IDgpID8gKCtzW2ldKSAmIDB4ZmYgOiBpbnRBdChzLCBpKTtcbiAgICAgICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICBtaSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzaCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQrK10gPSB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2ggKyBrID4gdGhpcy5EQikge1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy50IC0gMV0gfD0gKHggJiAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkpIDw8IHNoO1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy50KytdID0gKHggPj4gKHRoaXMuREIgLSBzaCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQgLSAxXSB8PSB4IDw8IHNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2ggKz0gaztcbiAgICAgICAgICAgIGlmIChzaCA+PSB0aGlzLkRCKSB7XG4gICAgICAgICAgICAgICAgc2ggLT0gdGhpcy5EQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoayA9PSA4ICYmICgoK3NbMF0pICYgMHg4MCkgIT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zID0gLTE7XG4gICAgICAgICAgICBpZiAoc2ggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQgLSAxXSB8PSAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkgPDwgc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGFtcCgpO1xuICAgICAgICBpZiAobWkpIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2xhbXAgPSBibnBDbGFtcDtcbiAgICAvLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGFtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICB3aGlsZSAodGhpcy50ID4gMCAmJiB0aGlzW3RoaXMudCAtIDFdID09IGMpIHtcbiAgICAgICAgICAgIC0tdGhpcy50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kbFNoaWZ0VG8gPSBibnBETFNoaWZ0VG87XG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgbipEQlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpICsgbl0gPSB0aGlzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gdGhpcy50ICsgbjtcbiAgICAgICAgci5zID0gdGhpcy5zO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG4qREJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kclNoaWZ0VG8gPSBmdW5jdGlvbiAobiwgcikge1xuICAgICAgICBmb3IgKHZhciBpID0gbjsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgLSBuXSA9IHRoaXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gTWF0aC5tYXgodGhpcy50IC0gbiwgMCk7XG4gICAgICAgIHIucyA9IHRoaXMucztcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvID0gYm5wTFNoaWZ0VG87XG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgblxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvID0gZnVuY3Rpb24gKG4sIHIpIHtcbiAgICAgICAgdmFyIGJzID0gbiAlIHRoaXMuREI7XG4gICAgICAgIHZhciBjYnMgPSB0aGlzLkRCIC0gYnM7XG4gICAgICAgIHZhciBibSA9ICgxIDw8IGNicykgLSAxO1xuICAgICAgICB2YXIgZHMgPSBNYXRoLmZsb29yKG4gLyB0aGlzLkRCKTtcbiAgICAgICAgdmFyIGMgPSAodGhpcy5zIDw8IGJzKSAmIHRoaXMuRE07XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpICsgZHMgKyAxXSA9ICh0aGlzW2ldID4+IGNicykgfCBjO1xuICAgICAgICAgICAgYyA9ICh0aGlzW2ldICYgYm0pIDw8IGJzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSBkcyAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICByW2ldID0gMDtcbiAgICAgICAgfVxuICAgICAgICByW2RzXSA9IGM7XG4gICAgICAgIHIudCA9IHRoaXMudCArIGRzICsgMTtcbiAgICAgICAgci5zID0gdGhpcy5zO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgIHIucyA9IHRoaXMucztcbiAgICAgICAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gdGhpcy5EQik7XG4gICAgICAgIGlmIChkcyA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgIHIudCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJzID0gbiAlIHRoaXMuREI7XG4gICAgICAgIHZhciBjYnMgPSB0aGlzLkRCIC0gYnM7XG4gICAgICAgIHZhciBibSA9ICgxIDw8IGJzKSAtIDE7XG4gICAgICAgIHJbMF0gPSB0aGlzW2RzXSA+PiBicztcbiAgICAgICAgZm9yICh2YXIgaSA9IGRzICsgMTsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgLSBkcyAtIDFdIHw9ICh0aGlzW2ldICYgYm0pIDw8IGNicztcbiAgICAgICAgICAgIHJbaSAtIGRzXSA9IHRoaXNbaV0gPj4gYnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJzID4gMCkge1xuICAgICAgICAgICAgclt0aGlzLnQgLSBkcyAtIDFdIHw9ICh0aGlzLnMgJiBibSkgPDwgY2JzO1xuICAgICAgICB9XG4gICAgICAgIHIudCA9IHRoaXMudCAtIGRzO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbyA9IGJucFN1YlRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YlRvID0gZnVuY3Rpb24gKGEsIHIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgYyA9IDA7XG4gICAgICAgIHZhciBtID0gTWF0aC5taW4oYS50LCB0aGlzLnQpO1xuICAgICAgICB3aGlsZSAoaSA8IG0pIHtcbiAgICAgICAgICAgIGMgKz0gdGhpc1tpXSAtIGFbaV07XG4gICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEudCA8IHRoaXMudCkge1xuICAgICAgICAgICAgYyAtPSBhLnM7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMudCkge1xuICAgICAgICAgICAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjICs9IHRoaXMucztcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICAgICAgICAgICAgYyAtPSBhW2ldO1xuICAgICAgICAgICAgICAgIHJbaSsrXSA9IGMgJiB0aGlzLkRNO1xuICAgICAgICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjIC09IGEucztcbiAgICAgICAgfVxuICAgICAgICByLnMgPSAoYyA8IDApID8gLTEgOiAwO1xuICAgICAgICBpZiAoYyA8IC0xKSB7XG4gICAgICAgICAgICByW2krK10gPSB0aGlzLkRWICsgYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICAgICAgcltpKytdID0gYztcbiAgICAgICAgfVxuICAgICAgICByLnQgPSBpO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG4gICAgLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VG8gPSBmdW5jdGlvbiAoYSwgcikge1xuICAgICAgICB2YXIgeCA9IHRoaXMuYWJzKCk7XG4gICAgICAgIHZhciB5ID0gYS5hYnMoKTtcbiAgICAgICAgdmFyIGkgPSB4LnQ7XG4gICAgICAgIHIudCA9IGkgKyB5LnQ7XG4gICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgcltpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHkudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgKyB4LnRdID0geC5hbSgwLCB5W2ldLCByLCBpLCAwLCB4LnQpO1xuICAgICAgICB9XG4gICAgICAgIHIucyA9IDA7XG4gICAgICAgIHIuY2xhbXAoKTtcbiAgICAgICAgaWYgKHRoaXMucyAhPSBhLnMpIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmVUbyA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciB4ID0gdGhpcy5hYnMoKTtcbiAgICAgICAgdmFyIGkgPSByLnQgPSAyICogeC50O1xuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHJbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSk7XG4gICAgICAgICAgICBpZiAoKHJbaSArIHgudF0gKz0geC5hbShpICsgMSwgMiAqIHhbaV0sIHIsIDIgKiBpICsgMSwgYywgeC50IC0gaSAtIDEpKSA+PSB4LkRWKSB7XG4gICAgICAgICAgICAgICAgcltpICsgeC50XSAtPSB4LkRWO1xuICAgICAgICAgICAgICAgIHJbaSArIHgudCArIDFdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoci50ID4gMCkge1xuICAgICAgICAgICAgcltyLnQgLSAxXSArPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByLnMgPSAwO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZSZW1UbyA9IGJucERpdlJlbVRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIGRpdmlkZSB0aGlzIGJ5IG0sIHF1b3RpZW50IGFuZCByZW1haW5kZXIgdG8gcSwgciAoSEFDIDE0LjIwKVxuICAgIC8vIHIgIT0gcSwgdGhpcyAhPSBtLiAgcSBvciByIG1heSBiZSBudWxsLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvID0gZnVuY3Rpb24gKG0sIHEsIHIpIHtcbiAgICAgICAgdmFyIHBtID0gbS5hYnMoKTtcbiAgICAgICAgaWYgKHBtLnQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwdCA9IHRoaXMuYWJzKCk7XG4gICAgICAgIGlmIChwdC50IDwgcG0udCkge1xuICAgICAgICAgICAgaWYgKHEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHEuZnJvbUludCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHlUbyhyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAociA9PSBudWxsKSB7XG4gICAgICAgICAgICByID0gbmJpKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHkgPSBuYmkoKTtcbiAgICAgICAgdmFyIHRzID0gdGhpcy5zO1xuICAgICAgICB2YXIgbXMgPSBtLnM7XG4gICAgICAgIHZhciBuc2ggPSB0aGlzLkRCIC0gbmJpdHMocG1bcG0udCAtIDFdKTsgLy8gbm9ybWFsaXplIG1vZHVsdXNcbiAgICAgICAgaWYgKG5zaCA+IDApIHtcbiAgICAgICAgICAgIHBtLmxTaGlmdFRvKG5zaCwgeSk7XG4gICAgICAgICAgICBwdC5sU2hpZnRUbyhuc2gsIHIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcG0uY29weVRvKHkpO1xuICAgICAgICAgICAgcHQuY29weVRvKHIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5cyA9IHkudDtcbiAgICAgICAgdmFyIHkwID0geVt5cyAtIDFdO1xuICAgICAgICBpZiAoeTAgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5dCA9IHkwICogKDEgPDwgdGhpcy5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gdGhpcy5GMiA6IDApO1xuICAgICAgICB2YXIgZDEgPSB0aGlzLkZWIC8geXQ7XG4gICAgICAgIHZhciBkMiA9ICgxIDw8IHRoaXMuRjEpIC8geXQ7XG4gICAgICAgIHZhciBlID0gMSA8PCB0aGlzLkYyO1xuICAgICAgICB2YXIgaSA9IHIudDtcbiAgICAgICAgdmFyIGogPSBpIC0geXM7XG4gICAgICAgIHZhciB0ID0gKHEgPT0gbnVsbCkgPyBuYmkoKSA6IHE7XG4gICAgICAgIHkuZGxTaGlmdFRvKGosIHQpO1xuICAgICAgICBpZiAoci5jb21wYXJlVG8odCkgPj0gMCkge1xuICAgICAgICAgICAgcltyLnQrK10gPSAxO1xuICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgfVxuICAgICAgICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oeXMsIHQpO1xuICAgICAgICB0LnN1YlRvKHksIHkpOyAvLyBcIm5lZ2F0aXZlXCIgeSBzbyB3ZSBjYW4gcmVwbGFjZSBzdWIgd2l0aCBhbSBsYXRlclxuICAgICAgICB3aGlsZSAoeS50IDwgeXMpIHtcbiAgICAgICAgICAgIHlbeS50KytdID0gMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoLS1qID49IDApIHtcbiAgICAgICAgICAgIC8vIEVzdGltYXRlIHF1b3RpZW50IGRpZ2l0XG4gICAgICAgICAgICB2YXIgcWQgPSAoclstLWldID09IHkwKSA/IHRoaXMuRE0gOiBNYXRoLmZsb29yKHJbaV0gKiBkMSArIChyW2kgLSAxXSArIGUpICogZDIpO1xuICAgICAgICAgICAgaWYgKChyW2ldICs9IHkuYW0oMCwgcWQsIHIsIGosIDAsIHlzKSkgPCBxZCkgeyAvLyBUcnkgaXQgb3V0XG4gICAgICAgICAgICAgICAgeS5kbFNoaWZ0VG8oaiwgdCk7XG4gICAgICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocltpXSA8IC0tcWQpIHtcbiAgICAgICAgICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHEgIT0gbnVsbCkge1xuICAgICAgICAgICAgci5kclNoaWZ0VG8oeXMsIHEpO1xuICAgICAgICAgICAgaWYgKHRzICE9IG1zKSB7XG4gICAgICAgICAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHEsIHEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHIudCA9IHlzO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgICAgIGlmIChuc2ggPiAwKSB7XG4gICAgICAgICAgICByLnJTaGlmdFRvKG5zaCwgcik7XG4gICAgICAgIH0gLy8gRGVub3JtYWxpemUgcmVtYWluZGVyXG4gICAgICAgIGlmICh0cyA8IDApIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDtcbiAgICAvLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuICAgIC8vIGp1c3RpZmljYXRpb246XG4gICAgLy8gICAgICAgICB4eSA9PSAxIChtb2QgbSlcbiAgICAvLyAgICAgICAgIHh5ID0gIDEra21cbiAgICAvLyAgIHh5KDIteHkpID0gKDEra20pKDEta20pXG4gICAgLy8geFt5KDIteHkpXSA9IDEta14ybV4yXG4gICAgLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuICAgIC8vIGlmIHkgaXMgMS94IG1vZCBtLCB0aGVuIHkoMi14eSkgaXMgMS94IG1vZCBtXjJcbiAgICAvLyBzaG91bGQgcmVkdWNlIHggYW5kIHkoMi14eSkgYnkgbV4yIGF0IGVhY2ggc3RlcCB0byBrZWVwIHNpemUgYm91bmRlZC5cbiAgICAvLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnQgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeCA9IHRoaXNbMF07XG4gICAgICAgIGlmICgoeCAmIDEpID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ID0geCAmIDM7IC8vIHkgPT0gMS94IG1vZCAyXjJcbiAgICAgICAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZikgKiB5KSkgJiAweGY7IC8vIHkgPT0gMS94IG1vZCAyXjRcbiAgICAgICAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZmYpICogeSkpICYgMHhmZjsgLy8geSA9PSAxL3ggbW9kIDJeOFxuICAgICAgICB5ID0gKHkgKiAoMiAtICgoKHggJiAweGZmZmYpICogeSkgJiAweGZmZmYpKSkgJiAweGZmZmY7IC8vIHkgPT0gMS94IG1vZCAyXjE2XG4gICAgICAgIC8vIGxhc3Qgc3RlcCAtIGNhbGN1bGF0ZSBpbnZlcnNlIG1vZCBEViBkaXJlY3RseTtcbiAgICAgICAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gICAgICAgIHkgPSAoeSAqICgyIC0geCAqIHkgJSB0aGlzLkRWKSkgJSB0aGlzLkRWOyAvLyB5ID09IDEveCBtb2QgMl5kYml0c1xuICAgICAgICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICAgICAgICByZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc0V2ZW4gPSBibnBJc0V2ZW47XG4gICAgLy8gKHByb3RlY3RlZCkgdHJ1ZSBpZmYgdGhpcyBpcyBldmVuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKCh0aGlzLnQgPiAwKSA/ICh0aGlzWzBdICYgMSkgOiB0aGlzLnMpID09IDA7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHAgPSBibnBFeHA7XG4gICAgLy8gKHByb3RlY3RlZCkgdGhpc15lLCBlIDwgMl4zMiwgZG9pbmcgc3FyIGFuZCBtdWwgd2l0aCBcInJcIiAoSEFDIDE0Ljc5KVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmV4cCA9IGZ1bmN0aW9uIChlLCB6KSB7XG4gICAgICAgIGlmIChlID4gMHhmZmZmZmZmZiB8fCBlIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludGVnZXIuT05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHZhciByMiA9IG5iaSgpO1xuICAgICAgICB2YXIgZyA9IHouY29udmVydCh0aGlzKTtcbiAgICAgICAgdmFyIGkgPSBuYml0cyhlKSAtIDE7XG4gICAgICAgIGcuY29weVRvKHIpO1xuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgaWYgKChlICYgKDEgPDwgaSkpID4gMCkge1xuICAgICAgICAgICAgICAgIHoubXVsVG8ocjIsIGcsIHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByO1xuICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICByMiA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplID0gYm5wQ2h1bmtTaXplO1xuICAgIC8vIChwcm90ZWN0ZWQpIHJldHVybiB4IHMudC4gcl54IDwgRFZcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaHVua1NpemUgPSBmdW5jdGlvbiAocikge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMiAqIHRoaXMuREIgLyBNYXRoLmxvZyhyKSk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4ID0gYm5wVG9SYWRpeDtcbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IHRvIHJhZGl4IHN0cmluZ1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvUmFkaXggPSBmdW5jdGlvbiAoYikge1xuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgICBiID0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2lnbnVtKCkgPT0gMCB8fCBiIDwgMiB8fCBiID4gMzYpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3MgPSB0aGlzLmNodW5rU2l6ZShiKTtcbiAgICAgICAgdmFyIGEgPSBNYXRoLnBvdyhiLCBjcyk7XG4gICAgICAgIHZhciBkID0gbmJ2KGEpO1xuICAgICAgICB2YXIgeSA9IG5iaSgpO1xuICAgICAgICB2YXIgeiA9IG5iaSgpO1xuICAgICAgICB2YXIgciA9IFwiXCI7XG4gICAgICAgIHRoaXMuZGl2UmVtVG8oZCwgeSwgeik7XG4gICAgICAgIHdoaWxlICh5LnNpZ251bSgpID4gMCkge1xuICAgICAgICAgICAgciA9IChhICsgei5pbnRWYWx1ZSgpKS50b1N0cmluZyhiKS5zdWJzdHIoMSkgKyByO1xuICAgICAgICAgICAgeS5kaXZSZW1UbyhkLCB5LCB6KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gei5pbnRWYWx1ZSgpLnRvU3RyaW5nKGIpICsgcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeDtcbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IGZyb20gcmFkaXggc3RyaW5nXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4ID0gZnVuY3Rpb24gKHMsIGIpIHtcbiAgICAgICAgdGhpcy5mcm9tSW50KDApO1xuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgICBiID0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gICAgICAgIHZhciBkID0gTWF0aC5wb3coYiwgY3MpO1xuICAgICAgICB2YXIgbWkgPSBmYWxzZTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICB2YXIgdyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHggPSBpbnRBdChzLCBpKTtcbiAgICAgICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIiAmJiB0aGlzLnNpZ251bSgpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbWkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHcgPSBiICogdyArIHg7XG4gICAgICAgICAgICBpZiAoKytqID49IGNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kTXVsdGlwbHkoZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuICAgICAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgICAgIHcgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coYiwgaikpO1xuICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaSkge1xuICAgICAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyID0gYm5wRnJvbU51bWJlcjtcbiAgICAvLyAocHJvdGVjdGVkKSBhbHRlcm5hdGUgY29uc3RydWN0b3JcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGIpIHtcbiAgICAgICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgICAgICAgICAgaWYgKGEgPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tSW50KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsIGMpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIG9wX29yLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFdmVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KDEsIDApO1xuICAgICAgICAgICAgICAgIH0gLy8gZm9yY2Ugb2RkXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRBZGRPZmZzZXQoMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdExlbmd0aCgpID4gYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgICAgICAgICB2YXIgeCA9IFtdO1xuICAgICAgICAgICAgdmFyIHQgPSBhICYgNztcbiAgICAgICAgICAgIHgubGVuZ3RoID0gKGEgPj4gMykgKyAxO1xuICAgICAgICAgICAgYi5uZXh0Qnl0ZXMoeCk7XG4gICAgICAgICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgICAgICAgICB4WzBdICY9ICgoMSA8PCB0KSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeFswXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZyb21TdHJpbmcoeCwgMjU2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvID0gYm5wQml0d2lzZVRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIG9wIGEgKGJpdHdpc2UpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvID0gZnVuY3Rpb24gKGEsIG9wLCByKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgZjtcbiAgICAgICAgdmFyIG0gPSBNYXRoLm1pbihhLnQsIHRoaXMudCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgICAgIHJbaV0gPSBvcCh0aGlzW2ldLCBhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS50IDwgdGhpcy50KSB7XG4gICAgICAgICAgICBmID0gYS5zICYgdGhpcy5ETTtcbiAgICAgICAgICAgIGZvciAoaSA9IG07IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHJbaV0gPSBvcCh0aGlzW2ldLCBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIudCA9IHRoaXMudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGYgPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICAgICAgZm9yIChpID0gbTsgaSA8IGEudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcltpXSA9IG9wKGYsIGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgci50ID0gYS50O1xuICAgICAgICB9XG4gICAgICAgIHIucyA9IG9wKHRoaXMucywgYS5zKTtcbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gZnVuY3Rpb24gKG4sIG9wKSB7XG4gICAgICAgIHZhciByID0gQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KG4pO1xuICAgICAgICB0aGlzLmJpdHdpc2VUbyhyLCBvcCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkVG8gPSBibnBBZGRUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyArIGFcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbyA9IGZ1bmN0aW9uIChhLCByKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICB2YXIgbSA9IE1hdGgubWluKGEudCwgdGhpcy50KTtcbiAgICAgICAgd2hpbGUgKGkgPCBtKSB7XG4gICAgICAgICAgICBjICs9IHRoaXNbaV0gKyBhW2ldO1xuICAgICAgICAgICAgcltpKytdID0gYyAmIHRoaXMuRE07XG4gICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLnQgPCB0aGlzLnQpIHtcbiAgICAgICAgICAgIGMgKz0gYS5zO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnQpIHtcbiAgICAgICAgICAgICAgICBjICs9IHRoaXNbaV07XG4gICAgICAgICAgICAgICAgcltpKytdID0gYyAmIHRoaXMuRE07XG4gICAgICAgICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgKz0gdGhpcy5zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IGEudCkge1xuICAgICAgICAgICAgICAgIGMgKz0gYVtpXTtcbiAgICAgICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyArPSBhLnM7XG4gICAgICAgIH1cbiAgICAgICAgci5zID0gKGMgPCAwKSA/IC0xIDogMDtcbiAgICAgICAgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICByW2krK10gPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAtMSkge1xuICAgICAgICAgICAgcltpKytdID0gdGhpcy5EViArIGM7XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gaTtcbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gYm5wRE11bHRpcGx5O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKj0gbiwgdGhpcyA+PSAwLCAxIDwgbiA8IERWXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLCBuIC0gMSwgdGhpcywgMCwgMCwgdGhpcy50KTtcbiAgICAgICAgKyt0aGlzLnQ7XG4gICAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKz0gbiA8PCB3IHdvcmRzLCB0aGlzID49IDBcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kQWRkT2Zmc2V0ID0gZnVuY3Rpb24gKG4sIHcpIHtcbiAgICAgICAgaWYgKG4gPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0aGlzLnQgPD0gdykge1xuICAgICAgICAgICAgdGhpc1t0aGlzLnQrK10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbd10gKz0gbjtcbiAgICAgICAgd2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVikge1xuICAgICAgICAgICAgdGhpc1t3XSAtPSB0aGlzLkRWO1xuICAgICAgICAgICAgaWYgKCsrdyA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3RoaXMudCsrXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK3RoaXNbd107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGJucE11bHRpcGx5TG93ZXJUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gbG93ZXIgbiB3b3JkcyBvZiBcInRoaXMgKiBhXCIsIGEudCA8PSBuXG4gICAgLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGZ1bmN0aW9uIChhLCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4odGhpcy50ICsgYS50LCBuKTtcbiAgICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgICByLnQgPSBpO1xuICAgICAgICB3aGlsZSAoaSA+IDApIHtcbiAgICAgICAgICAgIHJbLS1pXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaiA9IHIudCAtIHRoaXMudDsgaSA8IGo7ICsraSkge1xuICAgICAgICAgICAgcltpICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgdGhpcy50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBqID0gTWF0aC5taW4oYS50LCBuKTsgaSA8IGo7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hbSgwLCBhW2ldLCByLCBpLCAwLCBuIC0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvID0gYm5wTXVsdGlwbHlVcHBlclRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSBcInRoaXMgKiBhXCIgd2l0aG91dCBsb3dlciBuIHdvcmRzLCBuID4gMFxuICAgIC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG8gPSBmdW5jdGlvbiAoYSwgbiwgcikge1xuICAgICAgICAtLW47XG4gICAgICAgIHZhciBpID0gci50ID0gdGhpcy50ICsgYS50IC0gbjtcbiAgICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHJbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IE1hdGgubWF4KG4gLSB0aGlzLnQsIDApOyBpIDwgYS50OyArK2kpIHtcbiAgICAgICAgICAgIHJbdGhpcy50ICsgaSAtIG5dID0gdGhpcy5hbShuIC0gaSwgYVtpXSwgciwgMCwgMCwgdGhpcy50ICsgaSAtIG4pO1xuICAgICAgICB9XG4gICAgICAgIHIuY2xhbXAoKTtcbiAgICAgICAgci5kclNoaWZ0VG8oMSwgcik7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQgPSBibnBNb2RJbnQ7XG4gICAgLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgaWYgKG4gPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGQgPSB0aGlzLkRWICUgbjtcbiAgICAgICAgdmFyIHIgPSAodGhpcy5zIDwgMCkgPyBuIC0gMSA6IDA7XG4gICAgICAgIGlmICh0aGlzLnQgPiAwKSB7XG4gICAgICAgICAgICBpZiAoZCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgciA9IHRoaXNbMF0gJSBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSAoZCAqIHIgKyB0aGlzW2ldKSAlIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubWlsbGVyUmFiaW4gPSBibnBNaWxsZXJSYWJpbjtcbiAgICAvLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIG4xID0gdGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgICAgIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChrIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IG4xLnNoaWZ0UmlnaHQoayk7XG4gICAgICAgIHQgPSAodCArIDEpID4+IDE7XG4gICAgICAgIGlmICh0ID4gbG93cHJpbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdCA9IGxvd3ByaW1lcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGEgPSBuYmkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0OyArK2kpIHtcbiAgICAgICAgICAgIC8vIFBpY2sgYmFzZXMgYXQgcmFuZG9tLCBpbnN0ZWFkIG9mIHN0YXJ0aW5nIGF0IDJcbiAgICAgICAgICAgIGEuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbG93cHJpbWVzLmxlbmd0aCldKTtcbiAgICAgICAgICAgIHZhciB5ID0gYS5tb2RQb3cociwgdGhpcyk7XG4gICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHkubW9kUG93SW50KDIsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGJuU3F1YXJlO1xuICAgIC8vIChwdWJsaWMpIHRoaXNeMlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5zcXVhcmVUbyhyKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyNyZWdpb24gQVNZTkNcbiAgICAvLyBQdWJsaWMgQVBJIG1ldGhvZFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZGEgPSBmdW5jdGlvbiAoYSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHggPSAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpO1xuICAgICAgICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA8IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0geDtcbiAgICAgICAgICAgIHggPSB5O1xuICAgICAgICAgICAgeSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB4LmdldExvd2VzdFNldEJpdCgpO1xuICAgICAgICB2YXIgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChnIDwgMCkge1xuICAgICAgICAgICAgY2FsbGJhY2soeCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBnKSB7XG4gICAgICAgICAgICBnID0gaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHguclNoaWZ0VG8oZywgeCk7XG4gICAgICAgICAgICB5LnJTaGlmdFRvKGcsIHkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdvcmtob3JzZSBvZiB0aGUgYWxnb3JpdGhtLCBnZXRzIGNhbGxlZCAyMDAgLSA4MDAgdGltZXMgcGVyIDUxMiBiaXQga2V5Z2VuLlxuICAgICAgICB2YXIgZ2NkYTEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKGkgPSB4LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHtcbiAgICAgICAgICAgICAgICB4LnJTaGlmdFRvKGksIHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgeS5yU2hpZnRUbyhpLCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgeC5zdWJUbyh5LCB4KTtcbiAgICAgICAgICAgICAgICB4LnJTaGlmdFRvKDEsIHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeS5zdWJUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICB5LnJTaGlmdFRvKDEsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoeC5zaWdudW0oKSA+IDApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHkubFNoaWZ0VG8oZywgeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBjYWxsYmFjayh5KTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChnY2RhMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNldFRpbWVvdXQoZ2NkYTEsIDEwKTtcbiAgICB9O1xuICAgIC8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21OdW1iZXJBc3luYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgICAgICAgICAgaWYgKGEgPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tSW50KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsIGMpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCBvcF9vciwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZEFkZE9mZnNldCgxLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGJucF8xID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgYm5wZm4xXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJucF8xLmRBZGRPZmZzZXQoMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChibnBfMS5iaXRMZW5ndGgoKSA+IGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJucF8xLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIGJucF8xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm5wXzEuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soKTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChibnBmbjFfMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYm5wZm4xXzEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSBbXTtcbiAgICAgICAgICAgIHZhciB0ID0gYSAmIDc7XG4gICAgICAgICAgICB4Lmxlbmd0aCA9IChhID4+IDMpICsgMTtcbiAgICAgICAgICAgIGIubmV4dEJ5dGVzKHgpO1xuICAgICAgICAgICAgaWYgKHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgeFswXSAmPSAoKDEgPDwgdCkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHhbMF0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHgsIDI1Nik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCaWdJbnRlZ2VyO1xufSgpKTtcbmV4cG9ydCB7IEJpZ0ludGVnZXIgfTtcbi8vI3JlZ2lvbiBSRURVQ0VSU1xuLy8jcmVnaW9uIE51bGxFeHBcbnZhciBOdWxsRXhwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE51bGxFeHAoKSB7XG4gICAgfVxuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQgPSBuTm9wO1xuICAgIE51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3A7XG4gICAgTnVsbEV4cC5wcm90b3R5cGUucmV2ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgICAvLyBOdWxsRXhwLnByb3RvdHlwZS5tdWxUbyA9IG5NdWxUbztcbiAgICBOdWxsRXhwLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uICh4LCB5LCByKSB7XG4gICAgICAgIHgubXVsdGlwbHlUbyh5LCByKTtcbiAgICB9O1xuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLnNxclRvID0gblNxclRvO1xuICAgIE51bGxFeHAucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICB9O1xuICAgIHJldHVybiBOdWxsRXhwO1xufSgpKTtcbi8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxudmFyIENsYXNzaWMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2xhc3NpYyhtKSB7XG4gICAgICAgIHRoaXMubSA9IG07XG4gICAgfVxuICAgIC8vIENsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKHgucyA8IDAgfHwgeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQgPSBjUmV2ZXJ0O1xuICAgIENsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH07XG4gICAgLy8gQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB4LmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgeCk7XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5tdWxUbyA9IGNNdWxUbztcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uICh4LCB5LCByKSB7XG4gICAgICAgIHgubXVsdGlwbHlUbyh5LCByKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUbztcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGZ1bmN0aW9uICh4LCByKSB7XG4gICAgICAgIHguc3F1YXJlVG8ocik7XG4gICAgICAgIHRoaXMucmVkdWNlKHIpO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzaWM7XG59KCkpO1xuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gTW9udGdvbWVyeVxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbnZhciBNb250Z29tZXJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICAgICAgICB0aGlzLm0gPSBtO1xuICAgICAgICB0aGlzLm1wID0gbS5pbnZEaWdpdCgpO1xuICAgICAgICB0aGlzLm1wbCA9IHRoaXMubXAgJiAweDdmZmY7XG4gICAgICAgIHRoaXMubXBoID0gdGhpcy5tcCA+PiAxNTtcbiAgICAgICAgdGhpcy51bSA9ICgxIDw8IChtLkRCIC0gMTUpKSAtIDE7XG4gICAgICAgIHRoaXMubXQyID0gMiAqIG0udDtcbiAgICB9XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuICAgIC8vIHhSIG1vZCBtXG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHguYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LCByKTtcbiAgICAgICAgci5kaXZSZW1Ubyh0aGlzLm0sIG51bGwsIHIpO1xuICAgICAgICBpZiAoeC5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkge1xuICAgICAgICAgICAgdGhpcy5tLnN1YlRvKHIsIHIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydDtcbiAgICAvLyB4L1IgbW9kIG1cbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB4LmNvcHlUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gbW9udFJlZHVjZTtcbiAgICAvLyB4ID0geC9SIG1vZCBtIChIQUMgMTQuMzIpXG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgd2hpbGUgKHgudCA8PSB0aGlzLm10Mikge1xuICAgICAgICAgICAgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgICAgICAgICB4W3gudCsrXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm0udDsgKytpKSB7XG4gICAgICAgICAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICAgICAgICAgIHZhciBqID0geFtpXSAmIDB4N2ZmZjtcbiAgICAgICAgICAgIHZhciB1MCA9IChqICogdGhpcy5tcGwgKyAoKChqICogdGhpcy5tcGggKyAoeFtpXSA+PiAxNSkgKiB0aGlzLm1wbCkgJiB0aGlzLnVtKSA8PCAxNSkpICYgeC5ETTtcbiAgICAgICAgICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgICAgICAgICAgaiA9IGkgKyB0aGlzLm0udDtcbiAgICAgICAgICAgIHhbal0gKz0gdGhpcy5tLmFtKDAsIHUwLCB4LCBpLCAwLCB0aGlzLm0udCk7XG4gICAgICAgICAgICAvLyBwcm9wYWdhdGUgY2FycnlcbiAgICAgICAgICAgIHdoaWxlICh4W2pdID49IHguRFYpIHtcbiAgICAgICAgICAgICAgICB4W2pdIC09IHguRFY7XG4gICAgICAgICAgICAgICAgeFsrK2pdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeC5jbGFtcCgpO1xuICAgICAgICB4LmRyU2hpZnRUbyh0aGlzLm0udCwgeCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHtcbiAgICAgICAgICAgIHguc3ViVG8odGhpcy5tLCB4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUubXVsVG8gPSBtb250TXVsVG87XG4gICAgLy8gciA9IFwieHkvUiBtb2QgbVwiOyB4LHkgIT0gclxuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgeC5tdWx0aXBseVRvKHksIHIpO1xuICAgICAgICB0aGlzLnJlZHVjZShyKTtcbiAgICB9O1xuICAgIC8vIE1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvO1xuICAgIC8vIHIgPSBcInheMi9SIG1vZCBtXCI7IHggIT0gclxuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICByZXR1cm4gTW9udGdvbWVyeTtcbn0oKSk7XG4vLyNlbmRyZWdpb24gTW9udGdvbWVyeVxuLy8jcmVnaW9uIEJhcnJldHRcbi8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cbnZhciBCYXJyZXR0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhcnJldHQobSkge1xuICAgICAgICB0aGlzLm0gPSBtO1xuICAgICAgICAvLyBzZXR1cCBCYXJyZXR0XG4gICAgICAgIHRoaXMucjIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5xMyA9IG5iaSgpO1xuICAgICAgICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiAqIG0udCwgdGhpcy5yMik7XG4gICAgICAgIHRoaXMubXUgPSB0aGlzLnIyLmRpdmlkZShtKTtcbiAgICB9XG4gICAgLy8gQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0O1xuICAgIEJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHtcbiAgICAgICAgICAgIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgICAgICB4LmNvcHlUbyhyKTtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlKHIpO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJhcnJldHQucHJvdG90eXBlLnJldmVydCA9IGJhcnJldHRSZXZlcnQ7XG4gICAgQmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgICAvLyBCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlO1xuICAgIC8vIHggPSB4IG1vZCBtIChIQUMgMTQuNDIpXG4gICAgQmFycmV0dC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgeC5kclNoaWZ0VG8odGhpcy5tLnQgLSAxLCB0aGlzLnIyKTtcbiAgICAgICAgaWYgKHgudCA+IHRoaXMubS50ICsgMSkge1xuICAgICAgICAgICAgeC50ID0gdGhpcy5tLnQgKyAxO1xuICAgICAgICAgICAgeC5jbGFtcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsIHRoaXMubS50ICsgMSwgdGhpcy5xMyk7XG4gICAgICAgIHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMywgdGhpcy5tLnQgKyAxLCB0aGlzLnIyKTtcbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHRoaXMucjIpIDwgMCkge1xuICAgICAgICAgICAgeC5kQWRkT2Zmc2V0KDEsIHRoaXMubS50ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgeC5zdWJUbyh0aGlzLnIyLCB4KTtcbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkge1xuICAgICAgICAgICAgeC5zdWJUbyh0aGlzLm0sIHgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUbztcbiAgICAvLyByID0geCp5IG1vZCBtOyB4LHkgIT0gclxuICAgIEJhcnJldHQucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgeC5tdWx0aXBseVRvKHksIHIpO1xuICAgICAgICB0aGlzLnJlZHVjZShyKTtcbiAgICB9O1xuICAgIC8vIEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuICAgIC8vIHIgPSB4XjIgbW9kIG07IHggIT0gclxuICAgIEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICByZXR1cm4gQmFycmV0dDtcbn0oKSk7XG4vLyNlbmRyZWdpb25cbi8vI2VuZHJlZ2lvbiBSRURVQ0VSU1xuLy8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlclxuZXhwb3J0IGZ1bmN0aW9uIG5iaSgpIHsgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpOyB9XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCaWdJbnQoc3RyLCByKSB7XG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKHN0ciwgcik7XG59XG4vLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4vLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuXG4vLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4vLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxudmFyIGluQnJvd3NlciA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCI7XG5pZiAoaW5Ccm93c2VyICYmIGpfbG0gJiYgKG5hdmlnYXRvci5hcHBOYW1lID09IFwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCIpKSB7XG4gICAgLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4gICAgLy8gTWF4IGRpZ2l0IGJpdHMgc2hvdWxkIGJlIDw9IDMwIGJlY2F1c2Ugd2UgZG8gYml0d2lzZSBvcHNcbiAgICAvLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBmdW5jdGlvbiBhbTIoaSwgeCwgdywgaiwgYywgbikge1xuICAgICAgICB2YXIgeGwgPSB4ICYgMHg3ZmZmO1xuICAgICAgICB2YXIgeGggPSB4ID4+IDE1O1xuICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgIHZhciBsID0gdGhpc1tpXSAmIDB4N2ZmZjtcbiAgICAgICAgICAgIHZhciBoID0gdGhpc1tpKytdID4+IDE1O1xuICAgICAgICAgICAgdmFyIG0gPSB4aCAqIGwgKyBoICogeGw7XG4gICAgICAgICAgICBsID0geGwgKiBsICsgKChtICYgMHg3ZmZmKSA8PCAxNSkgKyB3W2pdICsgKGMgJiAweDNmZmZmZmZmKTtcbiAgICAgICAgICAgIGMgPSAobCA+Pj4gMzApICsgKG0gPj4+IDE1KSArIHhoICogaCArIChjID4+PiAzMCk7XG4gICAgICAgICAgICB3W2orK10gPSBsICYgMHgzZmZmZmZmZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9O1xuICAgIGRiaXRzID0gMzA7XG59XG5lbHNlIGlmIChpbkJyb3dzZXIgJiYgal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgIT0gXCJOZXRzY2FwZVwiKSkge1xuICAgIC8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cyxcbiAgICAvLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuICAgIC8vIG1heCBpbnRlcm5hbCB2YWx1ZSA9IDIqZHZhbHVlXjItMipkdmFsdWUgKDwgMl41MylcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGZ1bmN0aW9uIGFtMShpLCB4LCB3LCBqLCBjLCBuKSB7XG4gICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgdmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGM7XG4gICAgICAgICAgICBjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKTtcbiAgICAgICAgICAgIHdbaisrXSA9IHYgJiAweDNmZmZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgICBkYml0cyA9IDI2O1xufVxuZWxzZSB7IC8vIE1vemlsbGEvTmV0c2NhcGUgc2VlbXMgdG8gcHJlZmVyIGFtM1xuICAgIC8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuICAgIC8vIGJyb3dzZXJzIHNsb3cgZG93biB3aGVuIGRlYWxpbmcgd2l0aCAzMi1iaXQgbnVtYmVycy5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGZ1bmN0aW9uIGFtMyhpLCB4LCB3LCBqLCBjLCBuKSB7XG4gICAgICAgIHZhciB4bCA9IHggJiAweDNmZmY7XG4gICAgICAgIHZhciB4aCA9IHggPj4gMTQ7XG4gICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgdmFyIGwgPSB0aGlzW2ldICYgMHgzZmZmO1xuICAgICAgICAgICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTQ7XG4gICAgICAgICAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bDtcbiAgICAgICAgICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDNmZmYpIDw8IDE0KSArIHdbal0gKyBjO1xuICAgICAgICAgICAgYyA9IChsID4+IDI4KSArIChtID4+IDE0KSArIHhoICogaDtcbiAgICAgICAgICAgIHdbaisrXSA9IGwgJiAweGZmZmZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgICBkYml0cyA9IDI4O1xufVxuQmlnSW50ZWdlci5wcm90b3R5cGUuREIgPSBkYml0cztcbkJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxIDw8IGRiaXRzKSAtIDEpO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMSA8PCBkYml0cyk7XG52YXIgQklfRlAgPSA1MjtcbkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjEgPSBCSV9GUCAtIGRiaXRzO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjIgPSAyICogZGJpdHMgLSBCSV9GUDtcbi8vIERpZ2l0IGNvbnZlcnNpb25zXG52YXIgQklfUkMgPSBbXTtcbnZhciBycjtcbnZhciB2djtcbnJyID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbmZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSB7XG4gICAgQklfUkNbcnIrK10gPSB2djtcbn1cbnJyID0gXCJhXCIuY2hhckNvZGVBdCgwKTtcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikge1xuICAgIEJJX1JDW3JyKytdID0gdnY7XG59XG5yciA9IFwiQVwiLmNoYXJDb2RlQXQoMCk7XG5mb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIHtcbiAgICBCSV9SQ1tycisrXSA9IHZ2O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGludEF0KHMsIGkpIHtcbiAgICB2YXIgYyA9IEJJX1JDW3MuY2hhckNvZGVBdChpKV07XG4gICAgcmV0dXJuIChjID09IG51bGwpID8gLTEgOiBjO1xufVxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZXhwb3J0IGZ1bmN0aW9uIG5idihpKSB7XG4gICAgdmFyIHIgPSBuYmkoKTtcbiAgICByLmZyb21JbnQoaSk7XG4gICAgcmV0dXJuIHI7XG59XG4vLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuZXhwb3J0IGZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgICB2YXIgciA9IDE7XG4gICAgdmFyIHQ7XG4gICAgaWYgKCh0ID0geCA+Pj4gMTYpICE9IDApIHtcbiAgICAgICAgeCA9IHQ7XG4gICAgICAgIHIgKz0gMTY7XG4gICAgfVxuICAgIGlmICgodCA9IHggPj4gOCkgIT0gMCkge1xuICAgICAgICB4ID0gdDtcbiAgICAgICAgciArPSA4O1xuICAgIH1cbiAgICBpZiAoKHQgPSB4ID4+IDQpICE9IDApIHtcbiAgICAgICAgeCA9IHQ7XG4gICAgICAgIHIgKz0gNDtcbiAgICB9XG4gICAgaWYgKCh0ID0geCA+PiAyKSAhPSAwKSB7XG4gICAgICAgIHggPSB0O1xuICAgICAgICByICs9IDI7XG4gICAgfVxuICAgIGlmICgodCA9IHggPj4gMSkgIT0gMCkge1xuICAgICAgICB4ID0gdDtcbiAgICAgICAgciArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbi8vIFwiY29uc3RhbnRzXCJcbkJpZ0ludGVnZXIuWkVSTyA9IG5idigwKTtcbkJpZ0ludGVnZXIuT05FID0gbmJ2KDEpO1xuIiwiLy8gcHJuZzQuanMgLSB1c2VzIEFyY2ZvdXIgYXMgYSBQUk5HXG52YXIgQXJjZm91ciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcmNmb3VyKCkge1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmogPSAwO1xuICAgICAgICB0aGlzLlMgPSBbXTtcbiAgICB9XG4gICAgLy8gQXJjZm91ci5wcm90b3R5cGUuaW5pdCA9IEFSQzRpbml0O1xuICAgIC8vIEluaXRpYWxpemUgYXJjZm91ciBjb250ZXh0IGZyb20ga2V5LCBhbiBhcnJheSBvZiBpbnRzLCBlYWNoIGZyb20gWzAuLjI1NV1cbiAgICBBcmNmb3VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuU1tpXSA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgaiA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICAgICAgaiA9IChqICsgdGhpcy5TW2ldICsga2V5W2kgJSBrZXkubGVuZ3RoXSkgJiAyNTU7XG4gICAgICAgICAgICB0ID0gdGhpcy5TW2ldO1xuICAgICAgICAgICAgdGhpcy5TW2ldID0gdGhpcy5TW2pdO1xuICAgICAgICAgICAgdGhpcy5TW2pdID0gdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmogPSAwO1xuICAgIH07XG4gICAgLy8gQXJjZm91ci5wcm90b3R5cGUubmV4dCA9IEFSQzRuZXh0O1xuICAgIEFyY2ZvdXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICB0aGlzLmkgPSAodGhpcy5pICsgMSkgJiAyNTU7XG4gICAgICAgIHRoaXMuaiA9ICh0aGlzLmogKyB0aGlzLlNbdGhpcy5pXSkgJiAyNTU7XG4gICAgICAgIHQgPSB0aGlzLlNbdGhpcy5pXTtcbiAgICAgICAgdGhpcy5TW3RoaXMuaV0gPSB0aGlzLlNbdGhpcy5qXTtcbiAgICAgICAgdGhpcy5TW3RoaXMual0gPSB0O1xuICAgICAgICByZXR1cm4gdGhpcy5TWyh0ICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1XTtcbiAgICB9O1xuICAgIHJldHVybiBBcmNmb3VyO1xufSgpKTtcbmV4cG9ydCB7IEFyY2ZvdXIgfTtcbi8vIFBsdWcgaW4geW91ciBSTkcgY29uc3RydWN0b3IgaGVyZVxuZXhwb3J0IGZ1bmN0aW9uIHBybmdfbmV3c3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBBcmNmb3VyKCk7XG59XG4vLyBQb29sIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQgYW5kIGdyZWF0ZXIgdGhhbiAzMi5cbi8vIEFuIGFycmF5IG9mIGJ5dGVzIHRoZSBzaXplIG9mIHRoZSBwb29sIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKVxuZXhwb3J0IHZhciBybmdfcHNpemUgPSAyNTY7XG4iLCIvLyBSYW5kb20gbnVtYmVyIGdlbmVyYXRvciAtIHJlcXVpcmVzIGEgUFJORyBiYWNrZW5kLCBlLmcuIHBybmc0LmpzXG5pbXBvcnQgeyBwcm5nX25ld3N0YXRlLCBybmdfcHNpemUgfSBmcm9tIFwiLi9wcm5nNFwiO1xudmFyIHJuZ19zdGF0ZTtcbnZhciBybmdfcG9vbCA9IG51bGw7XG52YXIgcm5nX3BwdHI7XG4vLyBJbml0aWFsaXplIHRoZSBwb29sIHdpdGgganVuayBpZiBuZWVkZWQuXG5pZiAocm5nX3Bvb2wgPT0gbnVsbCkge1xuICAgIHJuZ19wb29sID0gW107XG4gICAgcm5nX3BwdHIgPSAwO1xuICAgIHZhciB0ID0gdm9pZCAwO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgZW50cm9weSAoMjA0OCBiaXRzKSBmcm9tIFJORyBpZiBhdmFpbGFibGVcbiAgICAgICAgdmFyIHogPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgICAgICAgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoeik7XG4gICAgICAgIGZvciAodCA9IDA7IHQgPCB6Lmxlbmd0aDsgKyt0KSB7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHpbdF0gJiAyNTU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVXNlIG1vdXNlIGV2ZW50cyBmb3IgZW50cm9weSwgaWYgd2UgZG8gbm90IGhhdmUgZW5vdWdoIGVudHJvcHkgYnkgdGhlIHRpbWVcbiAgICAvLyB3ZSBuZWVkIGl0LCBlbnRyb3B5IHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IE1hdGgucmFuZG9tLlxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIG9uTW91c2VNb3ZlTGlzdGVuZXJfMSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBjb3VudCA9IGNvdW50IHx8IDA7XG4gICAgICAgIGlmIChjb3VudCA+PSAyNTYgfHwgcm5nX3BwdHIgPj0gcm5nX3BzaXplKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdpbmRvdy5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5kZXRhY2hFdmVudChcIm9ubW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlTGlzdGVuZXJfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBtb3VzZUNvb3JkaW5hdGVzID0gZXYueCArIGV2Lnk7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IG1vdXNlQ29vcmRpbmF0ZXMgJiAyNTU7XG4gICAgICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBTb21ldGltZXMgRmlyZWZveCB3aWxsIGRlbnkgcGVybWlzc2lvbiB0byBhY2Nlc3MgZXZlbnQgcHJvcGVydGllcyBmb3Igc29tZSByZWFzb24uIElnbm9yZS5cbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZU1vdmVMaXN0ZW5lcl8xLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcm5nX2dldF9ieXRlKCkge1xuICAgIGlmIChybmdfc3RhdGUgPT0gbnVsbCkge1xuICAgICAgICBybmdfc3RhdGUgPSBwcm5nX25ld3N0YXRlKCk7XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG1heSBub3QgaGF2ZSBjb2xsZWN0ZWQgZW5vdWdoIGVudHJvcHkuICBJZiBub3QsIGZhbGwgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgICAgICB3aGlsZSAocm5nX3BwdHIgPCBybmdfcHNpemUpIHtcbiAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKDY1NTM2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHJhbmRvbSAmIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBybmdfc3RhdGUuaW5pdChybmdfcG9vbCk7XG4gICAgICAgIGZvciAocm5nX3BwdHIgPSAwOyBybmdfcHB0ciA8IHJuZ19wb29sLmxlbmd0aDsgKytybmdfcHB0cikge1xuICAgICAgICAgICAgcm5nX3Bvb2xbcm5nX3BwdHJdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBybmdfcHB0ciA9IDA7XG4gICAgfVxuICAgIC8vIFRPRE86IGFsbG93IHJlc2VlZGluZyBhZnRlciBmaXJzdCByZXF1ZXN0XG4gICAgcmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCk7XG59XG52YXIgU2VjdXJlUmFuZG9tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlY3VyZVJhbmRvbSgpIHtcbiAgICB9XG4gICAgU2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXMgPSBmdW5jdGlvbiAoYmEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYmFbaV0gPSBybmdfZ2V0X2J5dGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNlY3VyZVJhbmRvbTtcbn0oKSk7XG5leHBvcnQgeyBTZWN1cmVSYW5kb20gfTtcbiIsIi8vIERlcGVuZHMgb24ganNibi5qcyBhbmQgcm5nLmpzXG4vLyBWZXJzaW9uIDEuMTogc3VwcG9ydCB1dGYtOCBlbmNvZGluZyBpbiBwa2NzMXBhZDJcbi8vIGNvbnZlcnQgYSAoaGV4KSBzdHJpbmcgdG8gYSBiaWdudW0gb2JqZWN0XG5pbXBvcnQgeyBCaWdJbnRlZ2VyLCBuYmksIHBhcnNlQmlnSW50IH0gZnJvbSBcIi4vanNiblwiO1xuaW1wb3J0IHsgU2VjdXJlUmFuZG9tIH0gZnJvbSBcIi4vcm5nXCI7XG4vLyBmdW5jdGlvbiBsaW5lYnJrKHMsbikge1xuLy8gICB2YXIgcmV0ID0gXCJcIjtcbi8vICAgdmFyIGkgPSAwO1xuLy8gICB3aGlsZShpICsgbiA8IHMubGVuZ3RoKSB7XG4vLyAgICAgcmV0ICs9IHMuc3Vic3RyaW5nKGksaStuKSArIFwiXFxuXCI7XG4vLyAgICAgaSArPSBuO1xuLy8gICB9XG4vLyAgIHJldHVybiByZXQgKyBzLnN1YnN0cmluZyhpLHMubGVuZ3RoKTtcbi8vIH1cbi8vIGZ1bmN0aW9uIGJ5dGUySGV4KGIpIHtcbi8vICAgaWYoYiA8IDB4MTApXG4vLyAgICAgcmV0dXJuIFwiMFwiICsgYi50b1N0cmluZygxNik7XG4vLyAgIGVsc2Vcbi8vICAgICByZXR1cm4gYi50b1N0cmluZygxNik7XG4vLyB9XG5mdW5jdGlvbiBwa2NzMXBhZDEocywgbikge1xuICAgIGlmIChuIDwgcy5sZW5ndGggKyAyMikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGxlbiA9IG4gLSBzLmxlbmd0aCAtIDY7XG4gICAgdmFyIGZpbGxlciA9IFwiXCI7XG4gICAgZm9yICh2YXIgZiA9IDA7IGYgPCBsZW47IGYgKz0gMikge1xuICAgICAgICBmaWxsZXIgKz0gXCJmZlwiO1xuICAgIH1cbiAgICB2YXIgbSA9IFwiMDAwMVwiICsgZmlsbGVyICsgXCIwMFwiICsgcztcbiAgICByZXR1cm4gcGFyc2VCaWdJbnQobSwgMTYpO1xufVxuLy8gUEtDUyMxICh0eXBlIDIsIHJhbmRvbSkgcGFkIGlucHV0IHN0cmluZyBzIHRvIG4gYnl0ZXMsIGFuZCByZXR1cm4gYSBiaWdpbnRcbmZ1bmN0aW9uIHBrY3MxcGFkMihzLCBuKSB7XG4gICAgaWYgKG4gPCBzLmxlbmd0aCArIDExKSB7IC8vIFRPRE86IGZpeCBmb3IgdXRmLThcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBiYSA9IFtdO1xuICAgIHZhciBpID0gcy5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChpID49IDAgJiYgbiA+IDApIHtcbiAgICAgICAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaS0tKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHsgLy8gZW5jb2RlIHVzaW5nIHV0Zi04XG4gICAgICAgICAgICBiYVstLW5dID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkge1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICAgICAgYmFbLS1uXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICAgIGJhWy0tbl0gPSAoYyA+PiAxMikgfCAyMjQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmFbLS1uXSA9IDA7XG4gICAgdmFyIHJuZyA9IG5ldyBTZWN1cmVSYW5kb20oKTtcbiAgICB2YXIgeCA9IFtdO1xuICAgIHdoaWxlIChuID4gMikgeyAvLyByYW5kb20gbm9uLXplcm8gcGFkXG4gICAgICAgIHhbMF0gPSAwO1xuICAgICAgICB3aGlsZSAoeFswXSA9PSAwKSB7XG4gICAgICAgICAgICBybmcubmV4dEJ5dGVzKHgpO1xuICAgICAgICB9XG4gICAgICAgIGJhWy0tbl0gPSB4WzBdO1xuICAgIH1cbiAgICBiYVstLW5dID0gMjtcbiAgICBiYVstLW5dID0gMDtcbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYmEpO1xufVxuLy8gXCJlbXB0eVwiIFJTQSBrZXkgY29uc3RydWN0b3JcbnZhciBSU0FLZXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUlNBS2V5KCkge1xuICAgICAgICB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmUgPSAwO1xuICAgICAgICB0aGlzLmQgPSBudWxsO1xuICAgICAgICB0aGlzLnAgPSBudWxsO1xuICAgICAgICB0aGlzLnEgPSBudWxsO1xuICAgICAgICB0aGlzLmRtcDEgPSBudWxsO1xuICAgICAgICB0aGlzLmRtcTEgPSBudWxsO1xuICAgICAgICB0aGlzLmNvZWZmID0gbnVsbDtcbiAgICB9XG4gICAgLy8jcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vIHByb3RlY3RlZFxuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWMgPSBSU0FEb1B1YmxpYztcbiAgICAvLyBQZXJmb3JtIHJhdyBwdWJsaWMgb3BlcmF0aW9uIG9uIFwieFwiOiByZXR1cm4geF5lIChtb2QgbilcbiAgICBSU0FLZXkucHJvdG90eXBlLmRvUHVibGljID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHgubW9kUG93SW50KHRoaXMuZSwgdGhpcy5uKTtcbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZG9Qcml2YXRlID0gUlNBRG9Qcml2YXRlO1xuICAgIC8vIFBlcmZvcm0gcmF3IHByaXZhdGUgb3BlcmF0aW9uIG9uIFwieFwiOiByZXR1cm4geF5kIChtb2QgbilcbiAgICBSU0FLZXkucHJvdG90eXBlLmRvUHJpdmF0ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICh0aGlzLnAgPT0gbnVsbCB8fCB0aGlzLnEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHgubW9kUG93KHRoaXMuZCwgdGhpcy5uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiByZS1jYWxjdWxhdGUgYW55IG1pc3NpbmcgQ1JUIHBhcmFtc1xuICAgICAgICB2YXIgeHAgPSB4Lm1vZCh0aGlzLnApLm1vZFBvdyh0aGlzLmRtcDEsIHRoaXMucCk7XG4gICAgICAgIHZhciB4cSA9IHgubW9kKHRoaXMucSkubW9kUG93KHRoaXMuZG1xMSwgdGhpcy5xKTtcbiAgICAgICAgd2hpbGUgKHhwLmNvbXBhcmVUbyh4cSkgPCAwKSB7XG4gICAgICAgICAgICB4cCA9IHhwLmFkZCh0aGlzLnApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4cC5zdWJ0cmFjdCh4cSkubXVsdGlwbHkodGhpcy5jb2VmZikubW9kKHRoaXMucCkubXVsdGlwbHkodGhpcy5xKS5hZGQoeHEpO1xuICAgIH07XG4gICAgLy8jZW5kcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vI3JlZ2lvbiBQVUJMSUNcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLnNldFB1YmxpYyA9IFJTQVNldFB1YmxpYztcbiAgICAvLyBTZXQgdGhlIHB1YmxpYyBrZXkgZmllbGRzIE4gYW5kIGUgZnJvbSBoZXggc3RyaW5nc1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2V0UHVibGljID0gZnVuY3Rpb24gKE4sIEUpIHtcbiAgICAgICAgaWYgKE4gIT0gbnVsbCAmJiBFICE9IG51bGwgJiYgTi5sZW5ndGggPiAwICYmIEUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5uID0gcGFyc2VCaWdJbnQoTiwgMTYpO1xuICAgICAgICAgICAgdGhpcy5lID0gcGFyc2VJbnQoRSwgMTYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHB1YmxpYyBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdCA9IFJTQUVuY3J5cHQ7XG4gICAgLy8gUmV0dXJuIHRoZSBQS0NTIzEgUlNBIGVuY3J5cHRpb24gb2YgXCJ0ZXh0XCIgYXMgYW4gZXZlbi1sZW5ndGggaGV4IHN0cmluZ1xuICAgIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciBtYXhMZW5ndGggPSAodGhpcy5uLmJpdExlbmd0aCgpICsgNykgPj4gMztcbiAgICAgICAgdmFyIG0gPSBwa2NzMXBhZDIodGV4dCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgaWYgKG0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB0aGlzLmRvUHVibGljKG0pO1xuICAgICAgICBpZiAoYyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gaC5sZW5ndGg7XG4gICAgICAgIC8vIGZpeCB6ZXJvIGJlZm9yZSByZXN1bHRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhMZW5ndGggKiAyIC0gbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGggPSBcIjBcIiArIGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgfTtcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGUgPSBSU0FTZXRQcml2YXRlO1xuICAgIC8vIFNldCB0aGUgcHJpdmF0ZSBrZXkgZmllbGRzIE4sIGUsIGFuZCBkIGZyb20gaGV4IHN0cmluZ3NcbiAgICBSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGUgPSBmdW5jdGlvbiAoTiwgRSwgRCkge1xuICAgICAgICBpZiAoTiAhPSBudWxsICYmIEUgIT0gbnVsbCAmJiBOLmxlbmd0aCA+IDAgJiYgRS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChOLCAxNik7XG4gICAgICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgICAgICB0aGlzLmQgPSBwYXJzZUJpZ0ludChELCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuc2V0UHJpdmF0ZUV4ID0gUlNBU2V0UHJpdmF0ZUV4O1xuICAgIC8vIFNldCB0aGUgcHJpdmF0ZSBrZXkgZmllbGRzIE4sIGUsIGQgYW5kIENSVCBwYXJhbXMgZnJvbSBoZXggc3RyaW5nc1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2V0UHJpdmF0ZUV4ID0gZnVuY3Rpb24gKE4sIEUsIEQsIFAsIFEsIERQLCBEUSwgQykge1xuICAgICAgICBpZiAoTiAhPSBudWxsICYmIEUgIT0gbnVsbCAmJiBOLmxlbmd0aCA+IDAgJiYgRS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChOLCAxNik7XG4gICAgICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgICAgICB0aGlzLmQgPSBwYXJzZUJpZ0ludChELCAxNik7XG4gICAgICAgICAgICB0aGlzLnAgPSBwYXJzZUJpZ0ludChQLCAxNik7XG4gICAgICAgICAgICB0aGlzLnEgPSBwYXJzZUJpZ0ludChRLCAxNik7XG4gICAgICAgICAgICB0aGlzLmRtcDEgPSBwYXJzZUJpZ0ludChEUCwgMTYpO1xuICAgICAgICAgICAgdGhpcy5kbXExID0gcGFyc2VCaWdJbnQoRFEsIDE2KTtcbiAgICAgICAgICAgIHRoaXMuY29lZmYgPSBwYXJzZUJpZ0ludChDLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZ2VuZXJhdGUgPSBSU0FHZW5lcmF0ZTtcbiAgICAvLyBHZW5lcmF0ZSBhIG5ldyByYW5kb20gcHJpdmF0ZSBrZXkgQiBiaXRzIGxvbmcsIHVzaW5nIHB1YmxpYyBleHB0IEVcbiAgICBSU0FLZXkucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKEIsIEUpIHtcbiAgICAgICAgdmFyIHJuZyA9IG5ldyBTZWN1cmVSYW5kb20oKTtcbiAgICAgICAgdmFyIHFzID0gQiA+PiAxO1xuICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgIHZhciBlZSA9IG5ldyBCaWdJbnRlZ2VyKEUsIDE2KTtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIHRoaXMucCA9IG5ldyBCaWdJbnRlZ2VyKEIgLSBxcywgMSwgcm5nKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2QoZWUpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCAmJiB0aGlzLnAuaXNQcm9iYWJsZVByaW1lKDEwKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xID0gbmV3IEJpZ0ludGVnZXIocXMsIDEsIHJuZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkuZ2NkKGVlKS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDAgJiYgdGhpcy5xLmlzUHJvYmFibGVQcmltZSgxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucC5jb21wYXJlVG8odGhpcy5xKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnA7XG4gICAgICAgICAgICAgICAgdGhpcy5wID0gdGhpcy5xO1xuICAgICAgICAgICAgICAgIHRoaXMucSA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcDEgPSB0aGlzLnAuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO1xuICAgICAgICAgICAgdmFyIHExID0gdGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgICAgICAgICAgIHZhciBwaGkgPSBwMS5tdWx0aXBseShxMSk7XG4gICAgICAgICAgICBpZiAocGhpLmdjZChlZSkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5wLm11bHRpcGx5KHRoaXMucSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kID0gZWUubW9kSW52ZXJzZShwaGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG1wMSA9IHRoaXMuZC5tb2QocDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG1xMSA9IHRoaXMuZC5tb2QocTEpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29lZmYgPSB0aGlzLnEubW9kSW52ZXJzZSh0aGlzLnApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLmRlY3J5cHQgPSBSU0FEZWNyeXB0O1xuICAgIC8vIFJldHVybiB0aGUgUEtDUyMxIFJTQSBkZWNyeXB0aW9uIG9mIFwiY3RleHRcIi5cbiAgICAvLyBcImN0ZXh0XCIgaXMgYW4gZXZlbi1sZW5ndGggaGV4IHN0cmluZyBhbmQgdGhlIG91dHB1dCBpcyBhIHBsYWluIHN0cmluZy5cbiAgICBSU0FLZXkucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoY3RleHQpIHtcbiAgICAgICAgdmFyIGMgPSBwYXJzZUJpZ0ludChjdGV4dCwgMTYpO1xuICAgICAgICB2YXIgbSA9IHRoaXMuZG9Qcml2YXRlKGMpO1xuICAgICAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGtjczF1bnBhZDIobSwgKHRoaXMubi5iaXRMZW5ndGgoKSArIDcpID4+IDMpO1xuICAgIH07XG4gICAgLy8gR2VuZXJhdGUgYSBuZXcgcmFuZG9tIHByaXZhdGUga2V5IEIgYml0cyBsb25nLCB1c2luZyBwdWJsaWMgZXhwdCBFXG4gICAgUlNBS2V5LnByb3RvdHlwZS5nZW5lcmF0ZUFzeW5jID0gZnVuY3Rpb24gKEIsIEUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBybmcgPSBuZXcgU2VjdXJlUmFuZG9tKCk7XG4gICAgICAgIHZhciBxcyA9IEIgPj4gMTtcbiAgICAgICAgdGhpcy5lID0gcGFyc2VJbnQoRSwgMTYpO1xuICAgICAgICB2YXIgZWUgPSBuZXcgQmlnSW50ZWdlcihFLCAxNik7XG4gICAgICAgIHZhciByc2EgPSB0aGlzO1xuICAgICAgICAvLyBUaGVzZSBmdW5jdGlvbnMgaGF2ZSBub24tZGVzY3JpcHQgbmFtZXMgYmVjYXVzZSB0aGV5IHdlcmUgb3JpZ2luYWxseSBmb3IoOzspIGxvb3BzLlxuICAgICAgICAvLyBJIGRvbid0IGtub3cgYWJvdXQgY3J5cHRvZ3JhcGh5IHRvIGdpdmUgdGhlbSBiZXR0ZXIgbmFtZXMgdGhhbiBsb29wMS00LlxuICAgICAgICB2YXIgbG9vcDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbG9vcDQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJzYS5wLmNvbXBhcmVUbyhyc2EucSkgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHJzYS5wO1xuICAgICAgICAgICAgICAgICAgICByc2EucCA9IHJzYS5xO1xuICAgICAgICAgICAgICAgICAgICByc2EucSA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwMSA9IHJzYS5wLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgICAgICAgICAgICAgICB2YXIgcTEgPSByc2EucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgICAgICAgICAgICAgdmFyIHBoaSA9IHAxLm11bHRpcGx5KHExKTtcbiAgICAgICAgICAgICAgICBpZiAocGhpLmdjZChlZSkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5uID0gcnNhLnAubXVsdGlwbHkocnNhLnEpO1xuICAgICAgICAgICAgICAgICAgICByc2EuZCA9IGVlLm1vZEludmVyc2UocGhpKTtcbiAgICAgICAgICAgICAgICAgICAgcnNhLmRtcDEgPSByc2EuZC5tb2QocDEpO1xuICAgICAgICAgICAgICAgICAgICByc2EuZG1xMSA9IHJzYS5kLm1vZChxMSk7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5jb2VmZiA9IHJzYS5xLm1vZEludmVyc2UocnNhLnApO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soKTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChsb29wMSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBsb29wMyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByc2EucSA9IG5iaSgpO1xuICAgICAgICAgICAgICAgIHJzYS5xLmZyb21OdW1iZXJBc3luYyhxcywgMSwgcm5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2RhKGVlLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwICYmIHJzYS5xLmlzUHJvYmFibGVQcmltZSgxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGxvb3A0LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDMsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbG9vcDIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnNhLnAgPSBuYmkoKTtcbiAgICAgICAgICAgICAgICByc2EucC5mcm9tTnVtYmVyQXN5bmMoQiAtIHFzLCAxLCBybmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcnNhLnAuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpLmdjZGEoZWUsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDAgJiYgcnNhLnAuaXNQcm9iYWJsZVByaW1lKDEwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDMsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChsb29wMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDIsIDApO1xuICAgICAgICB9O1xuICAgICAgICBzZXRUaW1lb3V0KGxvb3AxLCAwKTtcbiAgICB9O1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uICh0ZXh0LCBkaWdlc3RNZXRob2QsIGRpZ2VzdE5hbWUpIHtcbiAgICAgICAgdmFyIGhlYWRlciA9IGdldERpZ2VzdEhlYWRlcihkaWdlc3ROYW1lKTtcbiAgICAgICAgdmFyIGRpZ2VzdCA9IGhlYWRlciArIGRpZ2VzdE1ldGhvZCh0ZXh0KS50b1N0cmluZygpO1xuICAgICAgICB2YXIgbSA9IHBrY3MxcGFkMShkaWdlc3QsIHRoaXMubi5iaXRMZW5ndGgoKSAvIDQpO1xuICAgICAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IHRoaXMuZG9Qcml2YXRlKG0pO1xuICAgICAgICBpZiAoYyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoKGgubGVuZ3RoICYgMSkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCIwXCIgKyBoO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSU0FLZXkucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uICh0ZXh0LCBzaWduYXR1cmUsIGRpZ2VzdE1ldGhvZCkge1xuICAgICAgICB2YXIgYyA9IHBhcnNlQmlnSW50KHNpZ25hdHVyZSwgMTYpO1xuICAgICAgICB2YXIgbSA9IHRoaXMuZG9QdWJsaWMoYyk7XG4gICAgICAgIGlmIChtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1bnBhZGRlZCA9IG0udG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sIFwiXCIpO1xuICAgICAgICB2YXIgZGlnZXN0ID0gcmVtb3ZlRGlnZXN0SGVhZGVyKHVucGFkZGVkKTtcbiAgICAgICAgcmV0dXJuIGRpZ2VzdCA9PSBkaWdlc3RNZXRob2QodGV4dCkudG9TdHJpbmcoKTtcbiAgICB9O1xuICAgIHJldHVybiBSU0FLZXk7XG59KCkpO1xuZXhwb3J0IHsgUlNBS2V5IH07XG4vLyBVbmRvIFBLQ1MjMSAodHlwZSAyLCByYW5kb20pIHBhZGRpbmcgYW5kLCBpZiB2YWxpZCwgcmV0dXJuIHRoZSBwbGFpbnRleHRcbmZ1bmN0aW9uIHBrY3MxdW5wYWQyKGQsIG4pIHtcbiAgICB2YXIgYiA9IGQudG9CeXRlQXJyYXkoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBiLmxlbmd0aCAmJiBiW2ldID09IDApIHtcbiAgICAgICAgKytpO1xuICAgIH1cbiAgICBpZiAoYi5sZW5ndGggLSBpICE9IG4gLSAxIHx8IGJbaV0gIT0gMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgKytpO1xuICAgIHdoaWxlIChiW2ldICE9IDApIHtcbiAgICAgICAgaWYgKCsraSA+PSBiLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJldCA9IFwiXCI7XG4gICAgd2hpbGUgKCsraSA8IGIubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjID0gYltpXSAmIDI1NTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHsgLy8gdXRmLTggZGVjb2RlXG4gICAgICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA+IDE5MSkgJiYgKGMgPCAyMjQpKSB7XG4gICAgICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAzMSkgPDwgNikgfCAoYltpICsgMV0gJiA2MykpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMTUpIDw8IDEyKSB8ICgoYltpICsgMV0gJiA2MykgPDwgNikgfCAoYltpICsgMl0gJiA2MykpO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ0NyNwYWdlLTQzXG52YXIgRElHRVNUX0hFQURFUlMgPSB7XG4gICAgbWQyOiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDIwNTAwMDQxMFwiLFxuICAgIG1kNTogXCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixcbiAgICBzaGExOiBcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwiLFxuICAgIHNoYTIyNDogXCIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxY1wiLFxuICAgIHNoYTI1NjogXCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLFxuICAgIHNoYTM4NDogXCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwiLFxuICAgIHNoYTUxMjogXCIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MFwiLFxuICAgIHJpcGVtZDE2MDogXCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIlxufTtcbmZ1bmN0aW9uIGdldERpZ2VzdEhlYWRlcihuYW1lKSB7XG4gICAgcmV0dXJuIERJR0VTVF9IRUFERVJTW25hbWVdIHx8IFwiXCI7XG59XG5mdW5jdGlvbiByZW1vdmVEaWdlc3RIZWFkZXIoc3RyKSB7XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIERJR0VTVF9IRUFERVJTKSB7XG4gICAgICAgIGlmIChESUdFU1RfSEVBREVSUy5oYXNPd25Qcm9wZXJ0eShuYW1lXzEpKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gRElHRVNUX0hFQURFUlNbbmFtZV8xXTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBoZWFkZXIubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHN0ci5zdWJzdHIoMCwgbGVuKSA9PSBoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4vLyBSZXR1cm4gdGhlIFBLQ1MjMSBSU0EgZW5jcnlwdGlvbiBvZiBcInRleHRcIiBhcyBhIEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuLy8gZnVuY3Rpb24gUlNBRW5jcnlwdEI2NCh0ZXh0KSB7XG4vLyAgdmFyIGggPSB0aGlzLmVuY3J5cHQodGV4dCk7XG4vLyAgaWYoaCkgcmV0dXJuIGhleDJiNjQoaCk7IGVsc2UgcmV0dXJuIG51bGw7XG4vLyB9XG4vLyBwdWJsaWNcbi8vIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdF9iNjQgPSBSU0FFbmNyeXB0QjY0O1xuIiwiLyohXG5Db3B5cmlnaHQgKGMpIDIwMTEsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db2RlIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgTGljZW5zZTpcbmh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcbnZlcnNpb246IDIuOS4wXG4qL1xuZXhwb3J0IHZhciBZQUhPTyA9IHt9O1xuWUFIT08ubGFuZyA9IHtcbiAgICAvKipcbiAgICAgKiBVdGlsaXR5IHRvIHNldCB1cCB0aGUgcHJvdG90eXBlLCBjb25zdHJ1Y3RvciBhbmQgc3VwZXJjbGFzcyBwcm9wZXJ0aWVzIHRvXG4gICAgICogc3VwcG9ydCBhbiBpbmhlcml0YW5jZSBzdHJhdGVneSB0aGF0IGNhbiBjaGFpbiBjb25zdHJ1Y3RvcnMgYW5kIG1ldGhvZHMuXG4gICAgICogU3RhdGljIG1lbWJlcnMgd2lsbCBub3QgYmUgaW5oZXJpdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBleHRlbmRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViYyAgIHRoZSBvYmplY3QgdG8gbW9kaWZ5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJjIHRoZSBvYmplY3QgdG8gaW5oZXJpdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgIGFkZGl0aW9uYWwgcHJvcGVydGllcy9tZXRob2RzIHRvIGFkZCB0byB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNsYXNzIHByb3RvdHlwZS4gIFRoZXNlIHdpbGwgb3ZlcnJpZGUgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyBpdGVtcyBvYnRhaW5lZCBmcm9tIHRoZSBzdXBlcmNsYXNzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwcmVzZW50LlxuICAgICAqL1xuICAgIGV4dGVuZDogZnVuY3Rpb24gKHN1YmMsIHN1cGVyYywgb3ZlcnJpZGVzKSB7XG4gICAgICAgIGlmICghc3VwZXJjIHx8ICFzdWJjKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZQUhPTy5sYW5nLmV4dGVuZCBmYWlsZWQsIHBsZWFzZSBjaGVjayB0aGF0IFwiICtcbiAgICAgICAgICAgICAgICBcImFsbCBkZXBlbmRlbmNpZXMgYXJlIGluY2x1ZGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgRi5wcm90b3R5cGUgPSBzdXBlcmMucHJvdG90eXBlO1xuICAgICAgICBzdWJjLnByb3RvdHlwZSA9IG5ldyBGKCk7XG4gICAgICAgIHN1YmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViYztcbiAgICAgICAgc3ViYy5zdXBlcmNsYXNzID0gc3VwZXJjLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKHN1cGVyYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPT0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgc3VwZXJjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1cGVyYztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvdmVycmlkZXMpIHtcbiAgICAgICAgICAgICAgICBzdWJjLnByb3RvdHlwZVtpXSA9IG92ZXJyaWRlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJRSB3aWxsIG5vdCBlbnVtZXJhdGUgbmF0aXZlIGZ1bmN0aW9ucyBpbiBhIGRlcml2ZWQgb2JqZWN0IGV2ZW4gaWYgdGhlXG4gICAgICAgICAgICAgKiBmdW5jdGlvbiB3YXMgb3ZlcnJpZGRlbi4gIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBzcGVjaWZpYyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqIHdlIGNhcmUgYWJvdXQgb24gdGhlIE9iamVjdCBwcm90b3R5cGUuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgX0lFRW51bUZpeFxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gciAgdGhlIG9iamVjdCB0byByZWNlaXZlIHRoZSBhdWdtZW50YXRpb25cbiAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHMgIHRoZSBvYmplY3QgdGhhdCBzdXBwbGllcyB0aGUgcHJvcGVydGllcyB0byBhdWdtZW50XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgX0lFRW51bUZpeCA9IGZ1bmN0aW9uICgpIHsgfSwgQUREID0gW1widG9TdHJpbmdcIiwgXCJ2YWx1ZU9mXCJdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX0lFRW51bUZpeCA9IGZ1bmN0aW9uIChyLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgQURELmxlbmd0aDsgaSA9IGkgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuYW1lID0gQUREW2ldLCBmID0gc1tmbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nICYmIGYgIT0gT2JqZWN0LnByb3RvdHlwZVtmbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcltmbmFtZV0gPSBmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHsgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgX0lFRW51bUZpeChzdWJjLnByb3RvdHlwZSwgb3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIvKiBhc24xLTEuMC4xMy5qcyAoYykgMjAxMy0yMDE3IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbi8qXG4gKiBhc24xLmpzIC0gQVNOLjEgREVSIGVuY29kZXIgY2xhc3Nlc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDE3IEtlbmppIFVydXNoaW1hIChrZW5qaS51cnVzaGltYUBnbWFpbC5jb20pXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cHM6Ly9ranVyLmdpdGh1Yi5pby9qc3JzYXNpZ24vbGljZW5zZVxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgYW5kIGxpY2Vuc2Ugbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqL1xuaW1wb3J0IHsgQmlnSW50ZWdlciB9IGZyb20gXCIuLi9qc2JuL2pzYm5cIjtcbmltcG9ydCB7IFlBSE9PIH0gZnJvbSBcIi4veWFob29cIjtcbi8qKlxuICogQGZpbGVPdmVydmlld1xuICogQG5hbWUgYXNuMS0xLjAuanNcbiAqIEBhdXRob3IgS2VuamkgVXJ1c2hpbWEga2VuamkudXJ1c2hpbWFAZ21haWwuY29tXG4gKiBAdmVyc2lvbiBhc24xIDEuMC4xMyAoMjAxNy1KdW4tMDIpXG4gKiBAc2luY2UganNyc2FzaWduIDIuMVxuICogQGxpY2Vuc2UgPGEgaHJlZj1cImh0dHBzOi8va2p1ci5naXRodWIuaW8vanNyc2FzaWduL2xpY2Vuc2UvXCI+TUlUIExpY2Vuc2U8L2E+XG4gKi9cbi8qKlxuICoga2p1cidzIGNsYXNzIGxpYnJhcnkgbmFtZSBzcGFjZVxuICogPHA+XG4gKiBUaGlzIG5hbWUgc3BhY2UgcHJvdmlkZXMgZm9sbG93aW5nIG5hbWUgc3BhY2VzOlxuICogPHVsPlxuICogPGxpPntAbGluayBLSlVSLmFzbjF9IC0gQVNOLjEgcHJpbWl0aXZlIGhleGFkZWNpbWFsIGVuY29kZXI8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEueDUwOX0gLSBBU04uMSBzdHJ1Y3R1cmUgZm9yIFguNTA5IGNlcnRpZmljYXRlIGFuZCBDUkw8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmNyeXB0b30gLSBKYXZhIENyeXB0b2dyYXBoaWMgRXh0ZW5zaW9uKEpDRSkgc3R5bGUgTWVzc2FnZURpZ2VzdC9TaWduYXR1cmVcbiAqIGNsYXNzIGFuZCB1dGlsaXRpZXM8L2xpPlxuICogPC91bD5cbiAqIDwvcD5cbiAqIE5PVEU6IFBsZWFzZSBpZ25vcmUgbWV0aG9kIHN1bW1hcnkgYW5kIGRvY3VtZW50IG9mIHRoaXMgbmFtZXNwYWNlLiBUaGlzIGNhdXNlZCBieSBhIGJ1ZyBvZiBqc2RvYzIuXG4gKiBAbmFtZSBLSlVSXG4gKiBAbmFtZXNwYWNlIGtqdXIncyBjbGFzcyBsaWJyYXJ5IG5hbWUgc3BhY2VcbiAqL1xuZXhwb3J0IHZhciBLSlVSID0ge307XG4vKipcbiAqIGtqdXIncyBBU04uMSBjbGFzcyBsaWJyYXJ5IG5hbWUgc3BhY2VcbiAqIDxwPlxuICogVGhpcyBpcyBJVFUtVCBYLjY5MCBBU04uMSBERVIgZW5jb2RlciBjbGFzcyBsaWJyYXJ5IGFuZFxuICogY2xhc3Mgc3RydWN0dXJlIGFuZCBtZXRob2RzIGlzIHZlcnkgc2ltaWxhciB0b1xuICogb3JnLmJvdW5jeWNhc3RsZS5hc24xIHBhY2thZ2Ugb2ZcbiAqIHdlbGwga25vd24gQm91bmN5Q2FzbHRlIENyeXB0b2dyYXBoeSBMaWJyYXJ5LlxuICogPGg0PlBST1ZJRElORyBBU04uMSBQUklNSVRJVkVTPC9oND5cbiAqIEhlcmUgYXJlIEFTTi4xIERFUiBwcmltaXRpdmUgY2xhc3Nlcy5cbiAqIDx1bD5cbiAqIDxsaT4weDAxIHtAbGluayBLSlVSLmFzbjEuREVSQm9vbGVhbn08L2xpPlxuICogPGxpPjB4MDIge0BsaW5rIEtKVVIuYXNuMS5ERVJJbnRlZ2VyfTwvbGk+XG4gKiA8bGk+MHgwMyB7QGxpbmsgS0pVUi5hc24xLkRFUkJpdFN0cmluZ308L2xpPlxuICogPGxpPjB4MDQge0BsaW5rIEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZ308L2xpPlxuICogPGxpPjB4MDUge0BsaW5rIEtKVVIuYXNuMS5ERVJOdWxsfTwvbGk+XG4gKiA8bGk+MHgwNiB7QGxpbmsgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXJ9PC9saT5cbiAqIDxsaT4weDBhIHtAbGluayBLSlVSLmFzbjEuREVSRW51bWVyYXRlZH08L2xpPlxuICogPGxpPjB4MGMge0BsaW5rIEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxMiB7QGxpbmsgS0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmd9PC9saT5cbiAqIDxsaT4weDEzIHtAbGluayBLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxNCB7QGxpbmsgS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmd9PC9saT5cbiAqIDxsaT4weDE2IHtAbGluayBLSlVSLmFzbjEuREVSSUE1U3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxNyB7QGxpbmsgS0pVUi5hc24xLkRFUlVUQ1RpbWV9PC9saT5cbiAqIDxsaT4weDE4IHtAbGluayBLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lfTwvbGk+XG4gKiA8bGk+MHgzMCB7QGxpbmsgS0pVUi5hc24xLkRFUlNlcXVlbmNlfTwvbGk+XG4gKiA8bGk+MHgzMSB7QGxpbmsgS0pVUi5hc24xLkRFUlNldH08L2xpPlxuICogPC91bD5cbiAqIDxoND5PVEhFUiBBU04uMSBDTEFTU0VTPC9oND5cbiAqIDx1bD5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkFTTjFPYmplY3R9PC9saT5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nfTwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWV9PC9saT5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZH08L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0fTwvbGk+XG4gKiA8L3VsPlxuICogPGg0PlNVQiBOQU1FIFNQQUNFUzwvaDQ+XG4gKiA8dWw+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jYWRlc30gLSBDQWRFUyBsb25nIHRlcm0gc2lnbmF0dXJlIGZvcm1hdDwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jbXN9IC0gQ3J5cHRvZ3JhcGhpYyBNZXNzYWdlIFN5bnRheDwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jc3J9IC0gQ2VydGlmaWNhdGUgU2lnbmluZyBSZXF1ZXN0IChDU1IvUEtDUyMxMCk8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEudHNwfSAtIFJGQyAzMTYxIFRpbWVzdGFtcGluZyBQcm90b2NvbCBGb3JtYXQ8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEueDUwOX0gLSBSRkMgNTI4MCBYLjUwOSBjZXJ0aWZpY2F0ZSBhbmQgQ1JMPC9saT5cbiAqIDwvdWw+XG4gKiA8L3A+XG4gKiBOT1RFOiBQbGVhc2UgaWdub3JlIG1ldGhvZCBzdW1tYXJ5IGFuZCBkb2N1bWVudCBvZiB0aGlzIG5hbWVzcGFjZS5cbiAqIFRoaXMgY2F1c2VkIGJ5IGEgYnVnIG9mIGpzZG9jMi5cbiAqIEBuYW1lIEtKVVIuYXNuMVxuICogQG5hbWVzcGFjZVxuICovXG5pZiAodHlwZW9mIEtKVVIuYXNuMSA9PSBcInVuZGVmaW5lZFwiIHx8ICFLSlVSLmFzbjEpXG4gICAgS0pVUi5hc24xID0ge307XG4vKipcbiAqIEFTTjEgdXRpbGl0aWVzIGNsYXNzXG4gKiBAbmFtZSBLSlVSLmFzbjEuQVNOMVV0aWxcbiAqIEBjbGFzcyBBU04xIHV0aWxpdGllcyBjbGFzc1xuICogQHNpbmNlIGFzbjEgMS4wLjJcbiAqL1xuS0pVUi5hc24xLkFTTjFVdGlsID0gbmV3IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmludGVnZXJUb0J5dGVIZXggPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgaCA9IGkudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoKGgubGVuZ3RoICUgMikgPT0gMSlcbiAgICAgICAgICAgIGggPSAnMCcgKyBoO1xuICAgICAgICByZXR1cm4gaDtcbiAgICB9O1xuICAgIHRoaXMuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXggPSBmdW5jdGlvbiAoYmlnSW50ZWdlclZhbHVlKSB7XG4gICAgICAgIHZhciBoID0gYmlnSW50ZWdlclZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGguc3Vic3RyKDAsIDEpICE9ICctJykge1xuICAgICAgICAgICAgaWYgKGgubGVuZ3RoICUgMiA9PSAxKSB7XG4gICAgICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWgubWF0Y2goL15bMC03XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSAnMDAnICsgaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaFBvcyA9IGguc3Vic3RyKDEpO1xuICAgICAgICAgICAgdmFyIHhvckxlbiA9IGhQb3MubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHhvckxlbiAlIDIgPT0gMSkge1xuICAgICAgICAgICAgICAgIHhvckxlbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoLm1hdGNoKC9eWzAtN10vKSkge1xuICAgICAgICAgICAgICAgICAgICB4b3JMZW4gKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaE1hc2sgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeG9yTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBoTWFzayArPSAnZic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmlNYXNrID0gbmV3IEJpZ0ludGVnZXIoaE1hc2ssIDE2KTtcbiAgICAgICAgICAgIHZhciBiaU5lZyA9IGJpTWFzay54b3IoYmlnSW50ZWdlclZhbHVlKS5hZGQoQmlnSW50ZWdlci5PTkUpO1xuICAgICAgICAgICAgaCA9IGJpTmVnLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGdldCBQRU0gc3RyaW5nIGZyb20gaGV4YWRlY2ltYWwgZGF0YSBhbmQgaGVhZGVyIHN0cmluZ1xuICAgICAqIEBuYW1lIGdldFBFTVN0cmluZ0Zyb21IZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFIZXggaGV4YWRlY2ltYWwgc3RyaW5nIG9mIFBFTSBib2R5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBlbUhlYWRlciBQRU0gaGVhZGVyIHN0cmluZyAoZXguICdSU0EgUFJJVkFURSBLRVknKVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUEVNIGZvcm1hdHRlZCBzdHJpbmcgb2YgaW5wdXQgZGF0YVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoaXMgbWV0aG9kIGNvbnZlcnRzIGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgUEVNIHN0cmluZyB3aXRoXG4gICAgICogYSBzcGVjaWZpZWQgaGVhZGVyLiBJdHMgbGluZSBicmVhayB3aWxsIGJlIENSTEYoXCJcXHJcXG5cIikuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgcGVtICA9IEtKVVIuYXNuMS5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KCc2MTYxNjEnLCAnUlNBIFBSSVZBVEUgS0VZJyk7XG4gICAgICogLy8gdmFsdWUgb2YgcGVtIHdpbGwgYmU6XG4gICAgICogLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG4gICAgICogWVdGaFxuICAgICAqIC0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiAgICAgKi9cbiAgICB0aGlzLmdldFBFTVN0cmluZ0Zyb21IZXggPSBmdW5jdGlvbiAoZGF0YUhleCwgcGVtSGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBoZXh0b3BlbShkYXRhSGV4LCBwZW1IZWFkZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGUgQVNOMU9iamVjdCBzcGVjaWZlZCBieSBKU09OIHBhcmFtZXRlcnNcbiAgICAgKiBAbmFtZSBuZXdPYmplY3RcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFyYW0gSlNPTiBwYXJhbWV0ZXIgdG8gZ2VuZXJhdGUgQVNOMU9iamVjdFxuICAgICAqIEByZXR1cm4ge0tKVVIuYXNuMS5BU04xT2JqZWN0fSBnZW5lcmF0ZWQgb2JqZWN0XG4gICAgICogQHNpbmNlIGFzbjEgMS4wLjNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZW5lcmF0ZSBhbnkgQVNOMU9iamVjdCBzcGVjaWZpZWQgYnkgSlNPTiBwYXJhbVxuICAgICAqIGluY2x1ZGluZyBBU04uMSBwcmltaXRpdmUgb3Igc3RydWN0dXJlZC5cbiAgICAgKiBHZW5lcmFsbHkgJ3BhcmFtJyBjYW4gYmUgZGVzY3JpYmVkIGFzIGZvbGxvd3M6XG4gICAgICogPGJsb2NrcXVvdGU+XG4gICAgICoge1RZUEUtT0YtQVNOT0JKOiBBU04xT0JKLVBBUkFNRVRFUn1cbiAgICAgKiA8L2Jsb2NrcXVvdGU+XG4gICAgICogJ1RZUEUtT0YtQVNOMU9CSicgY2FuIGJlIG9uZSBvZiBmb2xsb3dpbmcgc3ltYm9sczpcbiAgICAgKiA8dWw+XG4gICAgICogPGxpPidib29sJyAtIERFUkJvb2xlYW48L2xpPlxuICAgICAqIDxsaT4naW50JyAtIERFUkludGVnZXI8L2xpPlxuICAgICAqIDxsaT4nYml0c3RyJyAtIERFUkJpdFN0cmluZzwvbGk+XG4gICAgICogPGxpPidvY3RzdHInIC0gREVST2N0ZXRTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4nbnVsbCcgLSBERVJOdWxsPC9saT5cbiAgICAgKiA8bGk+J29pZCcgLSBERVJPYmplY3RJZGVudGlmaWVyPC9saT5cbiAgICAgKiA8bGk+J2VudW0nIC0gREVSRW51bWVyYXRlZDwvbGk+XG4gICAgICogPGxpPid1dGY4c3RyJyAtIERFUlVURjhTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4nbnVtc3RyJyAtIERFUk51bWVyaWNTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4ncHJuc3RyJyAtIERFUlByaW50YWJsZVN0cmluZzwvbGk+XG4gICAgICogPGxpPid0ZWxzdHInIC0gREVSVGVsZXRleFN0cmluZzwvbGk+XG4gICAgICogPGxpPidpYTVzdHInIC0gREVSSUE1U3RyaW5nPC9saT5cbiAgICAgKiA8bGk+J3V0Y3RpbWUnIC0gREVSVVRDVGltZTwvbGk+XG4gICAgICogPGxpPidnZW50aW1lJyAtIERFUkdlbmVyYWxpemVkVGltZTwvbGk+XG4gICAgICogPGxpPidzZXEnIC0gREVSU2VxdWVuY2U8L2xpPlxuICAgICAqIDxsaT4nc2V0JyAtIERFUlNldDwvbGk+XG4gICAgICogPGxpPid0YWcnIC0gREVSVGFnZ2VkT2JqZWN0PC9saT5cbiAgICAgKiA8L3VsPlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbmV3T2JqZWN0KHsncHJuc3RyJzogJ2FhYSd9KTtcbiAgICAgKiBuZXdPYmplY3QoeydzZXEnOiBbeydpbnQnOiAzfSwgeydwcm5zdHInOiAnYWFhJ31dfSlcbiAgICAgKiAvLyBBU04uMSBUYWdnZWQgT2JqZWN0XG4gICAgICogbmV3T2JqZWN0KHsndGFnJzogeyd0YWcnOiAnYTEnLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAnZXhwbGljaXQnOiB0cnVlLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAnb2JqJzogeydzZXEnOiBbeydpbnQnOiAzfSwgeydwcm5zdHInOiAnYWFhJ31dfX19KTtcbiAgICAgKiAvLyBtb3JlIHNpbXBsZSByZXByZXNlbnRhdGlvbiBvZiBBU04uMSBUYWdnZWQgT2JqZWN0XG4gICAgICogbmV3T2JqZWN0KHsndGFnJzogWydhMScsXG4gICAgICogICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICogICAgICAgICAgICAgICAgICAgIHsnc2VxJzogW1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgIHsnaW50JzogM30sXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgeydwcm5zdHInOiAnYWFhJ31dfVxuICAgICAqICAgICAgICAgICAgICAgICAgIF19KTtcbiAgICAgKi9cbiAgICB0aGlzLm5ld09iamVjdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB2YXIgX0tKVVIgPSBLSlVSLCBfS0pVUl9hc24xID0gX0tKVVIuYXNuMSwgX0RFUkJvb2xlYW4gPSBfS0pVUl9hc24xLkRFUkJvb2xlYW4sIF9ERVJJbnRlZ2VyID0gX0tKVVJfYXNuMS5ERVJJbnRlZ2VyLCBfREVSQml0U3RyaW5nID0gX0tKVVJfYXNuMS5ERVJCaXRTdHJpbmcsIF9ERVJPY3RldFN0cmluZyA9IF9LSlVSX2FzbjEuREVST2N0ZXRTdHJpbmcsIF9ERVJOdWxsID0gX0tKVVJfYXNuMS5ERVJOdWxsLCBfREVST2JqZWN0SWRlbnRpZmllciA9IF9LSlVSX2FzbjEuREVST2JqZWN0SWRlbnRpZmllciwgX0RFUkVudW1lcmF0ZWQgPSBfS0pVUl9hc24xLkRFUkVudW1lcmF0ZWQsIF9ERVJVVEY4U3RyaW5nID0gX0tKVVJfYXNuMS5ERVJVVEY4U3RyaW5nLCBfREVSTnVtZXJpY1N0cmluZyA9IF9LSlVSX2FzbjEuREVSTnVtZXJpY1N0cmluZywgX0RFUlByaW50YWJsZVN0cmluZyA9IF9LSlVSX2FzbjEuREVSUHJpbnRhYmxlU3RyaW5nLCBfREVSVGVsZXRleFN0cmluZyA9IF9LSlVSX2FzbjEuREVSVGVsZXRleFN0cmluZywgX0RFUklBNVN0cmluZyA9IF9LSlVSX2FzbjEuREVSSUE1U3RyaW5nLCBfREVSVVRDVGltZSA9IF9LSlVSX2FzbjEuREVSVVRDVGltZSwgX0RFUkdlbmVyYWxpemVkVGltZSA9IF9LSlVSX2FzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLCBfREVSU2VxdWVuY2UgPSBfS0pVUl9hc24xLkRFUlNlcXVlbmNlLCBfREVSU2V0ID0gX0tKVVJfYXNuMS5ERVJTZXQsIF9ERVJUYWdnZWRPYmplY3QgPSBfS0pVUl9hc24xLkRFUlRhZ2dlZE9iamVjdCwgX25ld09iamVjdCA9IF9LSlVSX2FzbjEuQVNOMVV0aWwubmV3T2JqZWN0O1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtKTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoICE9IDEpXG4gICAgICAgICAgICB0aHJvdyBcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIjtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbMF07XG4gICAgICAgIGlmIChcIjpib29sOmludDpiaXRzdHI6b2N0c3RyOm51bGw6b2lkOmVudW06dXRmOHN0cjpudW1zdHI6cHJuc3RyOnRlbHN0cjppYTVzdHI6dXRjdGltZTpnZW50aW1lOnNlcTpzZXQ6dGFnOlwiLmluZGV4T2YoXCI6XCIgKyBrZXkgKyBcIjpcIikgPT0gLTEpXG4gICAgICAgICAgICB0aHJvdyBcInVuZGVmaW5lZCBrZXk6IFwiICsga2V5O1xuICAgICAgICBpZiAoa2V5ID09IFwiYm9vbFwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSQm9vbGVhbihwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcImludFwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSSW50ZWdlcihwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcImJpdHN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSQml0U3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwib2N0c3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJPY3RldFN0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcIm51bGxcIilcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0RFUk51bGwocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJvaWRcIilcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0RFUk9iamVjdElkZW50aWZpZXIocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJlbnVtXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJFbnVtZXJhdGVkKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwidXRmOHN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVVRGOFN0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcIm51bXN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSTnVtZXJpY1N0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcInBybnN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSUHJpbnRhYmxlU3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwidGVsc3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJUZWxldGV4U3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwiaWE1c3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJJQTVTdHJpbmcocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJ1dGN0aW1lXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJVVENUaW1lKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwiZ2VudGltZVwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSR2VuZXJhbGl6ZWRUaW1lKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwic2VxXCIpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbUxpc3QgPSBwYXJhbVtrZXldO1xuICAgICAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFzbjFPYmogPSBfbmV3T2JqZWN0KHBhcmFtTGlzdFtpXSk7XG4gICAgICAgICAgICAgICAgYS5wdXNoKGFzbjFPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSU2VxdWVuY2UoeyAnYXJyYXknOiBhIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT0gXCJzZXRcIikge1xuICAgICAgICAgICAgdmFyIHBhcmFtTGlzdCA9IHBhcmFtW2tleV07XG4gICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNuMU9iaiA9IF9uZXdPYmplY3QocGFyYW1MaXN0W2ldKTtcbiAgICAgICAgICAgICAgICBhLnB1c2goYXNuMU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJTZXQoeyAnYXJyYXknOiBhIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT0gXCJ0YWdcIikge1xuICAgICAgICAgICAgdmFyIHRhZ1BhcmFtID0gcGFyYW1ba2V5XTtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGFnUGFyYW0pID09PSAnW29iamVjdCBBcnJheV0nICYmXG4gICAgICAgICAgICAgICAgdGFnUGFyYW0ubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gX25ld09iamVjdCh0YWdQYXJhbVsyXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVGFnZ2VkT2JqZWN0KHsgdGFnOiB0YWdQYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IHRhZ1BhcmFtWzFdLFxuICAgICAgICAgICAgICAgICAgICBvYmo6IG9iaiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuZXdQYXJhbSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS5leHBsaWNpdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBuZXdQYXJhbS5leHBsaWNpdCA9IHRhZ1BhcmFtLmV4cGxpY2l0O1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS50YWcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW0udGFnID0gdGFnUGFyYW0udGFnO1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS5vYmogPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJvYmogc2hhbGwgYmUgc3BlY2lmaWVkIGZvciAndGFnJy5cIjtcbiAgICAgICAgICAgICAgICBuZXdQYXJhbS5vYmogPSBfbmV3T2JqZWN0KHRhZ1BhcmFtLm9iaik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVGFnZ2VkT2JqZWN0KG5ld1BhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2V0IGVuY29kZWQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTjFPYmplY3Qgc3BlY2lmZWQgYnkgSlNPTiBwYXJhbWV0ZXJzXG4gICAgICogQG5hbWUganNvblRvQVNOMUhFWFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMVV0aWxcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbSBKU09OIHBhcmFtZXRlciB0byBnZW5lcmF0ZSBBU04xT2JqZWN0XG4gICAgICogQHJldHVybiBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOMU9iamVjdFxuICAgICAqIEBzaW5jZSBhc24xIDEuMC40XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQXMgZm9yIEFTTi4xIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBKU09OIG9iamVjdCxcbiAgICAgKiBwbGVhc2Ugc2VlIHtAbGluayBuZXdPYmplY3R9LlxuICAgICAqIEBleGFtcGxlXG4gICAgICoganNvblRvQVNOMUhFWCh7J3BybnN0cic6ICdhYWEnfSk7XG4gICAgICovXG4gICAgdGhpcy5qc29uVG9BU04xSEVYID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgIHZhciBhc24xT2JqID0gdGhpcy5uZXdPYmplY3QocGFyYW0pO1xuICAgICAgICByZXR1cm4gYXNuMU9iai5nZXRFbmNvZGVkSGV4KCk7XG4gICAgfTtcbn07XG4vKipcbiAqIGdldCBkb3Qgbm90ZWQgb2lkIG51bWJlciBzdHJpbmcgZnJvbSBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBPSURcbiAqIEBuYW1lIG9pZEhleFRvSW50XG4gKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXggaGV4YWRlY2ltYWwgdmFsdWUgb2Ygb2JqZWN0IGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gZG90IG5vdGVkIHN0cmluZyBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHNpbmNlIGpzcnNhc2lnbiA0LjguMyBhc24xIDEuMC43XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc3RhdGljIG1ldGhvZCBjb252ZXJ0cyBmcm9tIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZlxuICogQVNOLjEgdmFsdWUgb2Ygb2JqZWN0IGlkZW50aWZpZXIgdG8gb2lkIG51bWJlciBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICogS0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KCc1NTA0MDYnKSAmcmFycjsgXCIyLjUuNC42XCJcbiAqL1xuS0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHZhciBzID0gXCJcIjtcbiAgICB2YXIgaTAxID0gcGFyc2VJbnQoaGV4LnN1YnN0cigwLCAyKSwgMTYpO1xuICAgIHZhciBpMCA9IE1hdGguZmxvb3IoaTAxIC8gNDApO1xuICAgIHZhciBpMSA9IGkwMSAlIDQwO1xuICAgIHZhciBzID0gaTAgKyBcIi5cIiArIGkxO1xuICAgIHZhciBiaW5idWYgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KGhleC5zdWJzdHIoaSwgMiksIDE2KTtcbiAgICAgICAgdmFyIGJpbiA9IChcIjAwMDAwMDAwXCIgKyB2YWx1ZS50b1N0cmluZygyKSkuc2xpY2UoLTgpO1xuICAgICAgICBiaW5idWYgPSBiaW5idWYgKyBiaW4uc3Vic3RyKDEsIDcpO1xuICAgICAgICBpZiAoYmluLnN1YnN0cigwLCAxKSA9PSBcIjBcIikge1xuICAgICAgICAgICAgdmFyIGJpID0gbmV3IEJpZ0ludGVnZXIoYmluYnVmLCAyKTtcbiAgICAgICAgICAgIHMgPSBzICsgXCIuXCIgKyBiaS50b1N0cmluZygxMCk7XG4gICAgICAgICAgICBiaW5idWYgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICByZXR1cm4gcztcbn07XG4vKipcbiAqIGdldCBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBvYmplY3QgaWRlbnRpZmllciBmcm9tIGRvdCBub3RlZCBvaWQgdmFsdWVcbiAqIEBuYW1lIG9pZEludFRvSGV4XG4gKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBvaWRTdHJpbmcgZG90IG5vdGVkIHN0cmluZyBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHJldHVybiB7U3RyaW5nfSBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHNpbmNlIGpzcnNhc2lnbiA0LjguMyBhc24xIDEuMC43XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc3RhdGljIG1ldGhvZCBjb252ZXJ0cyBmcm9tIG9iamVjdCBpZGVudGlmaWVyIHZhbHVlIHN0cmluZy5cbiAqIHRvIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBpdC5cbiAqIEBleGFtcGxlXG4gKiBLSlVSLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXgoXCIyLjUuNC42XCIpICZyYXJyOyBcIjU1MDQwNlwiXG4gKi9cbktKVVIuYXNuMS5BU04xVXRpbC5vaWRJbnRUb0hleCA9IGZ1bmN0aW9uIChvaWRTdHJpbmcpIHtcbiAgICB2YXIgaXRveCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBoID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgdmFyIHJvaWR0b3ggPSBmdW5jdGlvbiAocm9pZCkge1xuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICB2YXIgYmkgPSBuZXcgQmlnSW50ZWdlcihyb2lkLCAxMCk7XG4gICAgICAgIHZhciBiID0gYmkudG9TdHJpbmcoMik7XG4gICAgICAgIHZhciBwYWRMZW4gPSA3IC0gYi5sZW5ndGggJSA3O1xuICAgICAgICBpZiAocGFkTGVuID09IDcpXG4gICAgICAgICAgICBwYWRMZW4gPSAwO1xuICAgICAgICB2YXIgYlBhZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZExlbjsgaSsrKVxuICAgICAgICAgICAgYlBhZCArPSAnMCc7XG4gICAgICAgIGIgPSBiUGFkICsgYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aCAtIDE7IGkgKz0gNykge1xuICAgICAgICAgICAgdmFyIGI4ID0gYi5zdWJzdHIoaSwgNyk7XG4gICAgICAgICAgICBpZiAoaSAhPSBiLmxlbmd0aCAtIDcpXG4gICAgICAgICAgICAgICAgYjggPSAnMScgKyBiODtcbiAgICAgICAgICAgIGggKz0gaXRveChwYXJzZUludChiOCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgaWYgKCFvaWRTdHJpbmcubWF0Y2goL15bMC05Ll0rJC8pKSB7XG4gICAgICAgIHRocm93IFwibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiICsgb2lkU3RyaW5nO1xuICAgIH1cbiAgICB2YXIgaCA9ICcnO1xuICAgIHZhciBhID0gb2lkU3RyaW5nLnNwbGl0KCcuJyk7XG4gICAgdmFyIGkwID0gcGFyc2VJbnQoYVswXSkgKiA0MCArIHBhcnNlSW50KGFbMV0pO1xuICAgIGggKz0gaXRveChpMCk7XG4gICAgYS5zcGxpY2UoMCwgMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGggKz0gcm9pZHRveChhW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGg7XG59O1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICBBYnN0cmFjdCBBU04uMSBDbGFzc2VzXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogYmFzZSBjbGFzcyBmb3IgQVNOLjEgREVSIGVuY29kZXIgb2JqZWN0XG4gKiBAbmFtZSBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBlbmNvZGVyIG9iamVjdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBpc01vZGlmaWVkIGZsYWcgd2hldGhlciBpbnRlcm5hbCBkYXRhIHdhcyBjaGFuZ2VkXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaFRMViBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaFQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTi4xIFRMViB0YWcoVClcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBoTCBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWIGxlbmd0aChMKVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGhWIGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVilcbiAqIEBkZXNjcmlwdGlvblxuICovXG5LSlVSLmFzbjEuQVNOMU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXNNb2RpZmllZCA9IHRydWU7XG4gICAgdmFyIGhUTFYgPSBudWxsO1xuICAgIHZhciBoVCA9ICcwMCc7XG4gICAgdmFyIGhMID0gJzAwJztcbiAgICB2YXIgaFYgPSAnJztcbiAgICAvKipcbiAgICAgKiBnZXQgaGV4YWRlY2ltYWwgQVNOLjEgVExWIGxlbmd0aChMKSBieXRlcyBmcm9tIFRMViB2YWx1ZShWKVxuICAgICAqIEBuYW1lIGdldExlbmd0aEhleEZyb21WYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMU9iamVjdCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgbGVuZ3RoKEwpXG4gICAgICovXG4gICAgdGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5oViA9PSBcInVuZGVmaW5lZFwiIHx8IHRoaXMuaFYgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJ0aGlzLmhWIGlzIG51bGwgb3IgdW5kZWZpbmVkLlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhWLmxlbmd0aCAlIDIgPT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgXCJ2YWx1ZSBoZXggbXVzdCBiZSBldmVuIGxlbmd0aDogbj1cIiArIGhWLmxlbmd0aCArIFwiLHY9XCIgKyB0aGlzLmhWO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gdGhpcy5oVi5sZW5ndGggLyAyO1xuICAgICAgICB2YXIgaE4gPSBuLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGhOLmxlbmd0aCAlIDIgPT0gMSkge1xuICAgICAgICAgICAgaE4gPSBcIjBcIiArIGhOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDwgMTI4KSB7XG4gICAgICAgICAgICByZXR1cm4gaE47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaE5sZW4gPSBoTi5sZW5ndGggLyAyO1xuICAgICAgICAgICAgaWYgKGhObGVuID4gMTUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkFTTi4xIGxlbmd0aCB0b28gbG9uZyB0byByZXByZXNlbnQgYnkgOHg6IG4gPSBcIiArIG4udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWQgPSAxMjggKyBoTmxlbjtcbiAgICAgICAgICAgIHJldHVybiBoZWFkLnRvU3RyaW5nKDE2KSArIGhOO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBnZXQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTi4xIFRMViBieXRlc1xuICAgICAqIEBuYW1lIGdldEVuY29kZWRIZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFPYmplY3QjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWXG4gICAgICovXG4gICAgdGhpcy5nZXRFbmNvZGVkSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oVExWID09IG51bGwgfHwgdGhpcy5pc01vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aGlzLmhWID0gdGhpcy5nZXRGcmVzaFZhbHVlSGV4KCk7XG4gICAgICAgICAgICB0aGlzLmhMID0gdGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuaFRMViA9IHRoaXMuaFQgKyB0aGlzLmhMICsgdGhpcy5oVjtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy9hbGVydChcImZpcnN0IHRpbWU6IFwiICsgdGhpcy5oVExWKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5oVExWO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2V0IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVikgYnl0ZXNcbiAgICAgKiBAbmFtZSBnZXRWYWx1ZUhleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMU9iamVjdCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVikgYnl0ZXNcbiAgICAgKi9cbiAgICB0aGlzLmdldFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdldEVuY29kZWRIZXgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xufTtcbi8vID09IEJFR0lOIERFUkFic3RyYWN0U3RyaW5nID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqXG4gKiBiYXNlIGNsYXNzIGZvciBBU04uMSBERVIgc3RyaW5nIGNsYXNzZXNcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBzdHJpbmcgY2xhc3Nlc1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzIGludGVybmFsIHN0cmluZyBvZiB2YWx1ZVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkFTTjFPYmplY3RcbiAqIEBkZXNjcmlwdGlvblxuICogPGJyLz5cbiAqIEFzIGZvciBhcmd1bWVudCAncGFyYW1zJyBmb3IgY29uc3RydWN0b3IsIHlvdSBjYW4gc3BlY2lmeSBvbmUgb2ZcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogPHVsPlxuICogPGxpPnN0ciAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIHN0cmluZzwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciBoViA9IG51bGw7XG4gICAgLyoqXG4gICAgICogZ2V0IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHN0cmluZyBvYmplY3RcbiAgICAgKiBAbmFtZSBnZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHZhbHVlIG9mIHRoaXMgc3RyaW5nIG9iamVjdFxuICAgICAqL1xuICAgIHRoaXMuZ2V0U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgc3RyaW5nXG4gICAgICogQG5hbWUgc2V0U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3UyB2YWx1ZSBieSBhIHN0cmluZyB0byBzZXRcbiAgICAgKi9cbiAgICB0aGlzLnNldFN0cmluZyA9IGZ1bmN0aW9uIChuZXdTKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMucyA9IG5ld1M7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqIEBuYW1lIHNldFN0cmluZ0hleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZyB2YWx1ZSBieSBhIGhleGFkZWNpbWFsIHN0cmluZyB0byBzZXRcbiAgICAgKi9cbiAgICB0aGlzLnNldFN0cmluZ0hleCA9IGZ1bmN0aW9uIChuZXdIZXhTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zID0gbnVsbDtcbiAgICAgICAgdGhpcy5oViA9IG5ld0hleFN0cmluZztcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snc3RyJ10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zWydzdHInXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snaGV4J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmdIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4vLyA9PSBFTkQgICBERVJBYnN0cmFjdFN0cmluZyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vID09IEJFR0lOIERFUkFic3RyYWN0VGltZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqXG4gKiBiYXNlIGNsYXNzIGZvciBBU04uMSBERVIgR2VuZXJhbGl6ZWQvVVRDVGltZSBjbGFzc1xuICogQG5hbWUgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZVxuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBHZW5lcmFsaXplZC9VVENUaW1lIGNsYXNzXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJzEzMDQzMDIzNTk1OVonfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciBkYXRlID0gbnVsbDtcbiAgICAvLyAtLS0gUFJJVkFURSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5sb2NhbERhdGVUb1VUQyA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHV0YyA9IGQuZ2V0VGltZSgpICsgKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKTtcbiAgICAgICAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZSh1dGMpO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZTtcbiAgICB9O1xuICAgIC8qXG4gICAgICogZm9ybWF0IGRhdGUgc3RyaW5nIGJ5IERhdGEgb2JqZWN0XG4gICAgICogQG5hbWUgZm9ybWF0RGF0ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQWJzdHJhY3RUaW1lO1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZU9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlICd1dGMnIG9yICdnZW4nXG4gICAgICogQHBhcmFtIHtib29sZWFufSB3aXRoTWlsbGlzIGZsYWcgZm9yIHdpdGggbWlsbGlzZWN0aW9ucyBvciBub3RcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiAnd2l0aE1pbGxpcycgZmxhZyBpcyBzdXBwb3J0ZWQgZnJvbSBhc24xIDEuMC42LlxuICAgICAqL1xuICAgIHRoaXMuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkYXRlT2JqZWN0LCB0eXBlLCB3aXRoTWlsbGlzKSB7XG4gICAgICAgIHZhciBwYWQgPSB0aGlzLnplcm9QYWRkaW5nO1xuICAgICAgICB2YXIgZCA9IHRoaXMubG9jYWxEYXRlVG9VVEMoZGF0ZU9iamVjdCk7XG4gICAgICAgIHZhciB5ZWFyID0gU3RyaW5nKGQuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgIGlmICh0eXBlID09ICd1dGMnKVxuICAgICAgICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIsIDIpO1xuICAgICAgICB2YXIgbW9udGggPSBwYWQoU3RyaW5nKGQuZ2V0TW9udGgoKSArIDEpLCAyKTtcbiAgICAgICAgdmFyIGRheSA9IHBhZChTdHJpbmcoZC5nZXREYXRlKCkpLCAyKTtcbiAgICAgICAgdmFyIGhvdXIgPSBwYWQoU3RyaW5nKGQuZ2V0SG91cnMoKSksIDIpO1xuICAgICAgICB2YXIgbWluID0gcGFkKFN0cmluZyhkLmdldE1pbnV0ZXMoKSksIDIpO1xuICAgICAgICB2YXIgc2VjID0gcGFkKFN0cmluZyhkLmdldFNlY29uZHMoKSksIDIpO1xuICAgICAgICB2YXIgcyA9IHllYXIgKyBtb250aCArIGRheSArIGhvdXIgKyBtaW4gKyBzZWM7XG4gICAgICAgIGlmICh3aXRoTWlsbGlzID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbWlsbGlzID0gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIGlmIChtaWxsaXMgIT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBzTWlsbGlzID0gcGFkKFN0cmluZyhtaWxsaXMpLCAzKTtcbiAgICAgICAgICAgICAgICBzTWlsbGlzID0gc01pbGxpcy5yZXBsYWNlKC9bMF0rJC8sIFwiXCIpO1xuICAgICAgICAgICAgICAgIHMgPSBzICsgXCIuXCIgKyBzTWlsbGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzICsgXCJaXCI7XG4gICAgfTtcbiAgICB0aGlzLnplcm9QYWRkaW5nID0gZnVuY3Rpb24gKHMsIGxlbikge1xuICAgICAgICBpZiAocy5sZW5ndGggPj0gbGVuKVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobGVuIC0gcy5sZW5ndGggKyAxKS5qb2luKCcwJykgKyBzO1xuICAgIH07XG4gICAgLy8gLS0tIFBVQkxJQyBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqXG4gICAgICogZ2V0IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHN0cmluZyBvYmplY3RcbiAgICAgKiBAbmFtZSBnZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHRpbWUgb2JqZWN0XG4gICAgICovXG4gICAgdGhpcy5nZXRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgYSBzdHJpbmdcbiAgICAgKiBAbmFtZSBzZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3UyB2YWx1ZSBieSBhIHN0cmluZyB0byBzZXQgc3VjaCBsaWtlIFwiMTMwNDMwMjM1OTU5WlwiXG4gICAgICovXG4gICAgdGhpcy5zZXRTdHJpbmcgPSBmdW5jdGlvbiAobmV3Uykge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnMgPSBuZXdTO1xuICAgICAgICB0aGlzLmhWID0gc3RvaGV4KG5ld1MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgRGF0ZSBvYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeURhdGVWYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geWVhciB5ZWFyIG9mIGRhdGUgKGV4LiAyMDEzKVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbW9udGggbW9udGggb2YgZGF0ZSBiZXR3ZWVuIDEgYW5kIDEyIChleC4gMTIpXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBkYXkgZGF5IG9mIG1vbnRoXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBob3VyIGhvdXJzIG9mIGRhdGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IG1pbiBtaW51dGVzIG9mIGRhdGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHNlYyBzZWNvbmRzIG9mIGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNldEJ5RGF0ZVZhbHVlID0gZnVuY3Rpb24gKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbiwgc2VjKSB7XG4gICAgICAgIHZhciBkYXRlT2JqZWN0ID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKSk7XG4gICAgICAgIHRoaXMuc2V0QnlEYXRlKGRhdGVPYmplY3QpO1xuICAgIH07XG4gICAgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vID09IEVORCAgIERFUkFic3RyYWN0VGltZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gPT0gQkVHSU4gREVSQWJzdHJhY3RTdHJ1Y3R1cmVkID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKipcbiAqIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBzdHJ1Y3R1cmVkIGNsYXNzXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAY2xhc3MgYmFzZSBjbGFzcyBmb3IgQVNOLjEgREVSIHN0cnVjdHVyZWQgY2xhc3NcbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFzbjFBcnJheSBpbnRlcm5hbCBhcnJheSBvZiBBU04xT2JqZWN0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGRlc2NyaXB0aW9uXG4gKiBAc2VlIEtKVVIuYXNuMS5BU04xT2JqZWN0IC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIGFzbjFBcnJheSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGFycmF5IG9mIEFTTjFPYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeUFTTjFPYmplY3RBcnJheVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGFzbjFPYmplY3RBcnJheSBhcnJheSBvZiBBU04xT2JqZWN0IHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlBU04xT2JqZWN0QXJyYXkgPSBmdW5jdGlvbiAoYXNuMU9iamVjdEFycmF5KSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXNuMUFycmF5ID0gYXNuMU9iamVjdEFycmF5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogYXBwZW5kIGFuIEFTTjFPYmplY3QgdG8gaW50ZXJuYWwgYXJyYXlcbiAgICAgKiBAbmFtZSBhcHBlbmRBU04xT2JqZWN0XG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBU04xT2JqZWN0fSBhc24xT2JqZWN0IHRvIGFkZFxuICAgICAqL1xuICAgIHRoaXMuYXBwZW5kQVNOMU9iamVjdCA9IGZ1bmN0aW9uIChhc24xT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXNuMUFycmF5LnB1c2goYXNuMU9iamVjdCk7XG4gICAgfTtcbiAgICB0aGlzLmFzbjFBcnJheSA9IG5ldyBBcnJheSgpO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbJ2FycmF5J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5hc24xQXJyYXkgPSBwYXJhbXNbJ2FycmF5J107XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCwgS0pVUi5hc24xLkFTTjFPYmplY3QpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICBBU04uMSBPYmplY3QgQ2xhc3Nlc1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgQm9vbGVhblxuICogQG5hbWUgS0pVUi5hc24xLkRFUkJvb2xlYW5cbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEJvb2xlYW5cbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJCb29sZWFuID0gZnVuY3Rpb24gKCkge1xuICAgIEtKVVIuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmhUID0gXCIwMVwiO1xuICAgIHRoaXMuaFRMViA9IFwiMDEwMWZmXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJvb2xlYW4sIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgSW50ZWdlclxuICogQG5hbWUgS0pVUi5hc24xLkRFUkludGVnZXJcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEludGVnZXJcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5pbnQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgaW50ZWdlciB2YWx1ZTwvbGk+XG4gKiA8bGk+YmlnaW50IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IEJpZ0ludGVnZXIgb2JqZWN0PC9saT5cbiAqIDxsaT5oZXggLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmc8L2xpPlxuICogPC91bD5cbiAqIE5PVEU6ICdwYXJhbXMnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5LSlVSLmFzbjEuREVSSW50ZWdlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiMDJcIjtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgVG9tIFd1J3MgQmlnSW50ZWdlciBvYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeUJpZ0ludGVnZXJcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkludGVnZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCaWdJbnRlZ2VyfSBiaWdJbnRlZ2VyVmFsdWUgdG8gc2V0XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIgPSBmdW5jdGlvbiAoYmlnSW50ZWdlclZhbHVlKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaFYgPSBLSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYmlnSW50ZWdlclZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBpbnRlZ2VyIHZhbHVlXG4gICAgICogQG5hbWUgc2V0QnlJbnRlZ2VyXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJJbnRlZ2VyXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpbnRlZ2VyIHZhbHVlIHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlJbnRlZ2VyID0gZnVuY3Rpb24gKGludFZhbHVlKSB7XG4gICAgICAgIHZhciBiaSA9IG5ldyBCaWdJbnRlZ2VyKFN0cmluZyhpbnRWYWx1ZSksIDEwKTtcbiAgICAgICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIoYmkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGludGVnZXIgdmFsdWVcbiAgICAgKiBAbmFtZSBzZXRWYWx1ZUhleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSSW50ZWdlciNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGV4YWRlY2ltYWwgc3RyaW5nIG9mIGludGVnZXIgdmFsdWVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiA8YnIvPlxuICAgICAqIE5PVEU6IFZhbHVlIHNoYWxsIGJlIHJlcHJlc2VudGVkIGJ5IG1pbmltdW0gb2N0ZXQgbGVuZ3RoIG9mXG4gICAgICogdHdvJ3MgY29tcGxlbWVudCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcigxMjMpO1xuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7J2ludCc6IDEyM30pO1xuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7J2hleCc6ICcxZmFkJ30pO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVIZXggPSBmdW5jdGlvbiAobmV3SGV4U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmc7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1snYmlnaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIocGFyYW1zWydiaWdpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUludGVnZXIocGFyYW1zWydpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5SW50ZWdlcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2hleCddICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkludGVnZXIsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgZW5jb2RlZCBCaXRTdHJpbmcgcHJpbWl0aXZlXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSQml0U3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBlbmNvZGVkIEJpdFN0cmluZyBwcmltaXRpdmVcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5iaW4gLSBzcGVjaWZ5IGJpbmFyeSBzdHJpbmcgKGV4LiAnMTAxMTEnKTwvbGk+XG4gKiA8bGk+YXJyYXkgLSBzcGVjaWZ5IGFycmF5IG9mIGJvb2xlYW4gKGV4LiBbdHJ1ZSxmYWxzZSx0cnVlLHRydWVdKTwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgdmFsdWUoVikgaW5jbHVkaW5nIHVudXNlZCBiaXRzPC9saT5cbiAqIDxsaT5vYmogLSBzcGVjaWZ5IHtAbGluayBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0fVxuICogYXJndW1lbnQgZm9yIFwiQml0U3RyaW5nIGVuY2Fwc3VsYXRlc1wiIHN0cnVjdHVyZS48L2xpPlxuICogPC91bD5cbiAqIE5PVEUxOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC48YnIvPlxuICogTk9URTI6ICdvYmonIHBhcmFtZXRlciBoYXZlIGJlZW4gc3VwcG9ydGVkIHNpbmNlXG4gKiBhc24xIDEuMC4xMSwganNyc2FzaWduIDYuMS4xICgyMDE2LVNlcC0yNSkuPGJyLz5cbiAqIEBleGFtcGxlXG4gKiAvLyBkZWZhdWx0IGNvbnN0cnVjdG9yXG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoKTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBiaW5hcnkgc3RyaW5nXG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2JpbjogXCIxMDExXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBib29sZWFuIGFycmF5XG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2FycmF5OiBbdHJ1ZSxmYWxzZSx0cnVlLHRydWVdfSk7XG4gKiAvLyBpbml0aWFsaXplIHdpdGggaGV4YWRlY2ltYWwgc3RyaW5nICgwNCBpcyB1bnVzZWQgYml0cylcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6IFwiMDRiYWMwXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBBU04xVXRpbC5uZXdPYmplY3QgYXJndW1lbnQgZm9yIGVuY2Fwc3VsYXRlZFxuICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtvYmo6IHtzZXE6IFt7aW50OiAzfSwge3BybnN0cjogJ2FhYSd9XX19KTtcbiAqIC8vIGFib3ZlIGdlbmVyYXRlcyBhIEFTTi4xIGRhdGEgbGlrZSB0aGlzOlxuICogLy8gQklUIFNUUklORywgZW5jYXBzdWxhdGVzIHtcbiAqIC8vICAgU0VRVUVOQ0Uge1xuICogLy8gICAgIElOVEVHRVIgM1xuICogLy8gICAgIFByaW50YWJsZVN0cmluZyAnYWFhJ1xuICogLy8gICAgIH1cbiAqIC8vICAgfVxuICovXG5LSlVSLmFzbjEuREVSQml0U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGFyYW1zLm9iaiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB2YXIgbyA9IEtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QocGFyYW1zLm9iaik7XG4gICAgICAgIHBhcmFtcy5oZXggPSBcIjAwXCIgKyBvLmdldEVuY29kZWRIZXgoKTtcbiAgICB9XG4gICAgS0pVUi5hc24xLkRFUkJpdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiMDNcIjtcbiAgICAvKipcbiAgICAgKiBzZXQgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmcgaW5jbHVkaW5nIHVudXNlZCBiaXRzXG4gICAgICogQG5hbWUgc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZ0luY2x1ZGluZ1VudXNlZEJpdHNcbiAgICAgKi9cbiAgICB0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyA9IGZ1bmN0aW9uIChuZXdIZXhTdHJpbmdJbmNsdWRpbmdVbnVzZWRCaXRzKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmdJbmNsdWRpbmdVbnVzZWRCaXRzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIHZhbHVlKFYpIGJ5IHVudXNlZCBiaXQgYW5kIGhleGFkZWNpbWFsIHN0cmluZyBvZiB2YWx1ZVxuICAgICAqIEBuYW1lIHNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQml0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gdW51c2VkQml0c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoVmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLnNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZSA9IGZ1bmN0aW9uICh1bnVzZWRCaXRzLCBoVmFsdWUpIHtcbiAgICAgICAgaWYgKHVudXNlZEJpdHMgPCAwIHx8IDcgPCB1bnVzZWRCaXRzKSB7XG4gICAgICAgICAgICB0aHJvdyBcInVudXNlZCBiaXRzIHNoYWxsIGJlIGZyb20gMCB0byA3OiB1ID0gXCIgKyB1bnVzZWRCaXRzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoVW51c2VkQml0cyA9IFwiMFwiICsgdW51c2VkQml0cztcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oViA9IGhVbnVzZWRCaXRzICsgaFZhbHVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIERFUiBCaXRTdHJpbmcgYnkgYmluYXJ5IHN0cmluZzxici8+XG4gICAgICogQG5hbWUgc2V0QnlCaW5hcnlTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkJpdFN0cmluZyNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYmluYXJ5U3RyaW5nIGJpbmFyeSB2YWx1ZSBzdHJpbmcgKGkuZS4gJzEwMTExJylcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJdHMgdW51c2VkIGJpdHMgd2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYnkgbGVuZ3RoIG9mXG4gICAgICogJ2JpbmFyeVZhbHVlJy4gPGJyLz5cbiAgICAgKiBOT1RFOiBUcmFpbGluZyB6ZXJvcyAnMCcgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKCk7XG4gICAgICogby5zZXRCeUJvb2xlYW5BcnJheShcIjAxMDExXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0QnlCaW5hcnlTdHJpbmcgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gICAgICAgIGJpbmFyeVN0cmluZyA9IGJpbmFyeVN0cmluZy5yZXBsYWNlKC8wKyQvLCAnJyk7XG4gICAgICAgIHZhciB1bnVzZWRCaXRzID0gOCAtIGJpbmFyeVN0cmluZy5sZW5ndGggJSA4O1xuICAgICAgICBpZiAodW51c2VkQml0cyA9PSA4KVxuICAgICAgICAgICAgdW51c2VkQml0cyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHVudXNlZEJpdHM7IGkrKykge1xuICAgICAgICAgICAgYmluYXJ5U3RyaW5nICs9ICcwJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeVN0cmluZy5sZW5ndGggLSAxOyBpICs9IDgpIHtcbiAgICAgICAgICAgIHZhciBiID0gYmluYXJ5U3RyaW5nLnN1YnN0cihpLCA4KTtcbiAgICAgICAgICAgIHZhciB4ID0gcGFyc2VJbnQoYiwgMikudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgaWYgKHgubGVuZ3RoID09IDEpXG4gICAgICAgICAgICAgICAgeCA9ICcwJyArIHg7XG4gICAgICAgICAgICBoICs9IHg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oViA9ICcwJyArIHVudXNlZEJpdHMgKyBoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIFRMViB2YWx1ZShWKSBieSBhbiBhcnJheSBvZiBib29sZWFuPGJyLz5cbiAgICAgKiBAbmFtZSBzZXRCeUJvb2xlYW5BcnJheVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQml0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGJvb2xlYW5BcnJheSBhcnJheSBvZiBib29sZWFuIChleC4gW3RydWUsIGZhbHNlLCB0cnVlXSlcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBOT1RFOiBUcmFpbGluZyBmYWxzZXMgd2lsbCBiZSBpZ25vcmVkIGluIHRoZSBBU04uMSBERVIgT2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKCk7XG4gICAgICogby5zZXRCeUJvb2xlYW5BcnJheShbZmFsc2UsIHRydWUsIGZhbHNlLCB0cnVlLCB0cnVlXSk7XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUJvb2xlYW5BcnJheSA9IGZ1bmN0aW9uIChib29sZWFuQXJyYXkpIHtcbiAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29sZWFuQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChib29sZWFuQXJyYXlbaV0gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHMgKz0gJzEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcyArPSAnMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRCeUJpbmFyeVN0cmluZyhzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGdlbmVyYXRlIGFuIGFycmF5IG9mIGZhbHNlcyB3aXRoIHNwZWNpZmllZCBsZW5ndGg8YnIvPlxuICAgICAqIEBuYW1lIG5ld0ZhbHNlQXJyYXlcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkJpdFN0cmluZ1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbkxlbmd0aCBsZW5ndGggb2YgYXJyYXkgdG8gZ2VuZXJhdGVcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gYXJyYXkgb2YgYm9vbGVhbiBmYWxzZXNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGlzIHN0YXRpYyBtZXRob2QgbWF5IGJlIHVzZWZ1bCB0byBpbml0aWFsaXplIGJvb2xlYW4gYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoKTtcbiAgICAgKiBvLm5ld0ZhbHNlQXJyYXkoMykgJnJhcnI7IFtmYWxzZSwgZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIHRoaXMubmV3RmFsc2VBcnJheSA9IGZ1bmN0aW9uIChuTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhID0gbmV3IEFycmF5KG5MZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5MZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYVtpXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhO1xuICAgIH07XG4gICAgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gXCJzdHJpbmdcIiAmJiBwYXJhbXMudG9Mb3dlckNhc2UoKS5tYXRjaCgvXlswLTlhLWZdKyQvKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMocGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1zWydoZXgnXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyhwYXJhbXNbJ2hleCddKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1zWydiaW4nXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5QmluYXJ5U3RyaW5nKHBhcmFtc1snYmluJ10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2FycmF5J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUJvb2xlYW5BcnJheShwYXJhbXNbJ2FycmF5J10pO1xuICAgICAgICB9XG4gICAgfVxufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgT2N0ZXRTdHJpbmc8YnIvPlxuICogQG5hbWUgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBPY3RldFN0cmluZ1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIEFTTi4xIE9jdGV0U3RyaW5nIHNpbXBsZSB0eXBlLjxici8+XG4gKiBTdXBwb3J0ZWQgXCJwYXJhbXNcIiBhdHRyaWJ1dGVzIGFyZTpcbiAqIDx1bD5cbiAqIDxsaT5zdHIgLSB0byBzZXQgYSBzdHJpbmcgYXMgYSB2YWx1ZTwvbGk+XG4gKiA8bGk+aGV4IC0gdG8gc2V0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIGFzIGEgdmFsdWU8L2xpPlxuICogPGxpPm9iaiAtIHRvIHNldCBhIGVuY2Fwc3VsYXRlZCBBU04uMSB2YWx1ZSBieSBKU09OIG9iamVjdFxuICogd2hpY2ggaXMgZGVmaW5lZCBpbiB7QGxpbmsgS0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdH08L2xpPlxuICogPC91bD5cbiAqIE5PVEU6IEEgcGFyYW1ldGVyICdvYmonIGhhdmUgYmVlbiBzdXBwb3J0ZWRcbiAqIGZvciBcIk9DVEVUIFNUUklORywgZW5jYXBzdWxhdGVzXCIgc3RydWN0dXJlLlxuICogc2luY2UgYXNuMSAxLjAuMTEsIGpzcnNhc2lnbiA2LjEuMSAoMjAxNi1TZXAtMjUpLlxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKiBAZXhhbXBsZVxuICogLy8gZGVmYXVsdCBjb25zdHJ1Y3RvclxuICogbyA9IG5ldyBLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcoKTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBzdHJpbmdcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtzdHI6IFwiYWFhXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBoZXhhZGVjaW1hbCBzdHJpbmdcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6IFwiNjE2MTYxXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBBU04xVXRpbC5uZXdPYmplY3QgYXJndW1lbnRcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtvYmo6IHtzZXE6IFt7aW50OiAzfSwge3BybnN0cjogJ2FhYSd9XX19KTtcbiAqIC8vIGFib3ZlIGdlbmVyYXRlcyBhIEFTTi4xIGRhdGEgbGlrZSB0aGlzOlxuICogLy8gT0NURVQgU1RSSU5HLCBlbmNhcHN1bGF0ZXMge1xuICogLy8gICBTRVFVRU5DRSB7XG4gKiAvLyAgICAgSU5URUdFUiAzXG4gKiAvLyAgICAgUHJpbnRhYmxlU3RyaW5nICdhYWEnXG4gKiAvLyAgICAgfVxuICogLy8gICB9XG4gKi9cbktKVVIuYXNuMS5ERVJPY3RldFN0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBhcmFtcy5vYmogIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIG8gPSBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHBhcmFtcy5vYmopO1xuICAgICAgICBwYXJhbXMuaGV4ID0gby5nZXRFbmNvZGVkSGV4KCk7XG4gICAgfVxuICAgIEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIwNFwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZywgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgTnVsbFxuICogQG5hbWUgS0pVUi5hc24xLkRFUk51bGxcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIE51bGxcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJOdWxsID0gZnVuY3Rpb24gKCkge1xuICAgIEtKVVIuYXNuMS5ERVJOdWxsLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmhUID0gXCIwNVwiO1xuICAgIHRoaXMuaFRMViA9IFwiMDUwMFwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdWxsLCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIE9iamVjdElkZW50aWZpZXJcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBPYmplY3RJZGVudGlmaWVyXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnb2lkJzogJzIuNS40LjUnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5vaWQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBvaWQgc3RyaW5nIChleC4gMi41LjQuMTMpPC9saT5cbiAqIDxsaT5oZXggLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmc8L2xpPlxuICogPC91bD5cbiAqIE5PVEU6ICdwYXJhbXMnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5LSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgaXRveCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBoID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgdmFyIHJvaWR0b3ggPSBmdW5jdGlvbiAocm9pZCkge1xuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICB2YXIgYmkgPSBuZXcgQmlnSW50ZWdlcihyb2lkLCAxMCk7XG4gICAgICAgIHZhciBiID0gYmkudG9TdHJpbmcoMik7XG4gICAgICAgIHZhciBwYWRMZW4gPSA3IC0gYi5sZW5ndGggJSA3O1xuICAgICAgICBpZiAocGFkTGVuID09IDcpXG4gICAgICAgICAgICBwYWRMZW4gPSAwO1xuICAgICAgICB2YXIgYlBhZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZExlbjsgaSsrKVxuICAgICAgICAgICAgYlBhZCArPSAnMCc7XG4gICAgICAgIGIgPSBiUGFkICsgYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aCAtIDE7IGkgKz0gNykge1xuICAgICAgICAgICAgdmFyIGI4ID0gYi5zdWJzdHIoaSwgNyk7XG4gICAgICAgICAgICBpZiAoaSAhPSBiLmxlbmd0aCAtIDcpXG4gICAgICAgICAgICAgICAgYjggPSAnMScgKyBiODtcbiAgICAgICAgICAgIGggKz0gaXRveChwYXJzZUludChiOCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaFQgPSBcIjA2XCI7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICogQG5hbWUgc2V0VmFsdWVIZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZyBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBPSUQgYnl0ZXNcbiAgICAgKi9cbiAgICB0aGlzLnNldFZhbHVlSGV4ID0gZnVuY3Rpb24gKG5ld0hleFN0cmluZykge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnMgPSBudWxsO1xuICAgICAgICB0aGlzLmhWID0gbmV3SGV4U3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgT0lEIHN0cmluZzxici8+XG4gICAgICogQG5hbWUgc2V0VmFsdWVPaWRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9pZFN0cmluZyBPSUQgc3RyaW5nIChleC4gMi41LjQuMTMpXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKCk7XG4gICAgICogby5zZXRWYWx1ZU9pZFN0cmluZyhcIjIuNS40LjEzXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcgPSBmdW5jdGlvbiAob2lkU3RyaW5nKSB7XG4gICAgICAgIGlmICghb2lkU3RyaW5nLm1hdGNoKC9eWzAtOS5dKyQvKSkge1xuICAgICAgICAgICAgdGhyb3cgXCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIgKyBvaWRTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGggPSAnJztcbiAgICAgICAgdmFyIGEgPSBvaWRTdHJpbmcuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIGkwID0gcGFyc2VJbnQoYVswXSkgKiA0MCArIHBhcnNlSW50KGFbMV0pO1xuICAgICAgICBoICs9IGl0b3goaTApO1xuICAgICAgICBhLnNwbGljZSgwLCAyKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBoICs9IHJvaWR0b3goYVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zID0gbnVsbDtcbiAgICAgICAgdGhpcy5oViA9IGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgYSBPSUQgbmFtZVxuICAgICAqIEBuYW1lIHNldFZhbHVlTmFtZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllciNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2lkTmFtZSBPSUQgbmFtZSAoZXguICdzZXJ2ZXJBdXRoJylcbiAgICAgKiBAc2luY2UgMS4wLjFcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBPSUQgbmFtZSBzaGFsbCBiZSBkZWZpbmVkIGluICdLSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0Jy5cbiAgICAgKiBPdGhlcndpc2UgcmFpc2UgZXJyb3IuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKCk7XG4gICAgICogby5zZXRWYWx1ZU5hbWUoXCJzZXJ2ZXJBdXRoXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVOYW1lID0gZnVuY3Rpb24gKG9pZE5hbWUpIHtcbiAgICAgICAgdmFyIG9pZCA9IEtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChvaWROYW1lKTtcbiAgICAgICAgaWYgKG9pZCAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcob2lkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFwiREVST2JqZWN0SWRlbnRpZmllciBvaWROYW1lIHVuZGVmaW5lZDogXCIgKyBvaWROYW1lO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVOYW1lKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLm9pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlT2lkU3RyaW5nKHBhcmFtcy5vaWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtcy5oZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUhleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlTmFtZShwYXJhbXMubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgRW51bWVyYXRlZFxuICogQG5hbWUgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWRcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEVudW1lcmF0ZWRcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5pbnQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgaW50ZWdlciB2YWx1ZTwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqIEBleGFtcGxlXG4gKiBuZXcgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQoMTIzKTtcbiAqIG5ldyBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCh7aW50OiAxMjN9KTtcbiAqIG5ldyBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCh7aGV4OiAnMWZhZCd9KTtcbiAqL1xuS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaFQgPSBcIjBhXCI7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IFRvbSBXdSdzIEJpZ0ludGVnZXIgb2JqZWN0XG4gICAgICogQG5hbWUgc2V0QnlCaWdJbnRlZ2VyXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7QmlnSW50ZWdlcn0gYmlnSW50ZWdlclZhbHVlIHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlCaWdJbnRlZ2VyID0gZnVuY3Rpb24gKGJpZ0ludGVnZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhWID0gS0pVUi5hc24xLkFTTjFVdGlsLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4KGJpZ0ludGVnZXJWYWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBuYW1lIHNldEJ5SW50ZWdlclxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGludGVnZXIgdmFsdWUgdG8gc2V0XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUludGVnZXIgPSBmdW5jdGlvbiAoaW50VmFsdWUpIHtcbiAgICAgICAgdmFyIGJpID0gbmV3IEJpZ0ludGVnZXIoU3RyaW5nKGludFZhbHVlKSwgMTApO1xuICAgICAgICB0aGlzLnNldEJ5QmlnSW50ZWdlcihiaSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBuYW1lIHNldFZhbHVlSGV4XG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIDxici8+XG4gICAgICogTk9URTogVmFsdWUgc2hhbGwgYmUgcmVwcmVzZW50ZWQgYnkgbWluaW11bSBvY3RldCBsZW5ndGggb2ZcbiAgICAgKiB0d28ncyBjb21wbGVtZW50IHJlcHJlc2VudGF0aW9uLlxuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVIZXggPSBmdW5jdGlvbiAobmV3SGV4U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmc7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1snaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUludGVnZXIocGFyYW1zWydpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5SW50ZWdlcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2hleCddICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgVVRGOFN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUlVURjhTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFVURjhTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyBhc3NvY2lhdGl2ZSBhcnJheSBvZiBwYXJhbWV0ZXJzIChleC4geydzdHInOiAnYWFhJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJVVEY4U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjBjXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVURjhTdHJpbmcsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIE51bWVyaWNTdHJpbmdcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBOdW1lcmljU3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJ2FhYSd9KVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nIC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxMlwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nLCBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBQcmludGFibGVTdHJpbmdcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFByaW50YWJsZVN0cmluZ1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBAc2VlIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyAtIHN1cGVyY2xhc3NcbiAqL1xuS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjEzXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZywgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgVGVsZXRleFN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFRlbGV0ZXhTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyBhc3NvY2lhdGl2ZSBhcnJheSBvZiBwYXJhbWV0ZXJzIChleC4geydzdHInOiAnYWFhJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjE0XCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIElBNVN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUklBNVN0cmluZ1xuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgSUE1U3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJ2FhYSd9KVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nIC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSSUE1U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJJQTVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gICAgdGhpcy5oVCA9IFwiMTZcIjtcbn07XG5ZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSUE1U3RyaW5nLCBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBVVENUaW1lXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSVVRDVGltZVxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgVVRDVGltZVxuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICcxMzA0MzAyMzU5NTlaJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5zdHIgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBzdHJpbmcgKGV4LicxMzA0MzAyMzU5NTlaJyk8L2xpPlxuICogPGxpPmhleCAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIGhleGFkZWNpbWFsIHN0cmluZzwvbGk+XG4gKiA8bGk+ZGF0ZSAtIHNwZWNpZnkgRGF0ZSBvYmplY3QuPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqIDxoND5FWEFNUExFUzwvaDQ+XG4gKiBAZXhhbXBsZVxuICogZDEgPSBuZXcgS0pVUi5hc24xLkRFUlVUQ1RpbWUoKTtcbiAqIGQxLnNldFN0cmluZygnMTMwNDMwMTI1OTU5WicpO1xuICpcbiAqIGQyID0gbmV3IEtKVVIuYXNuMS5ERVJVVENUaW1lKHsnc3RyJzogJzEzMDQzMDEyNTk1OVonfSk7XG4gKiBkMyA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSh7J2RhdGUnOiBuZXcgRGF0ZShEYXRlLlVUQygyMDE1LCAwLCAzMSwgMCwgMCwgMCwgMCkpfSk7XG4gKiBkNCA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSgnMTMwNDMwMTI1OTU5WicpO1xuICovXG5LSlVSLmFzbjEuREVSVVRDVGltZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSVVRDVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxN1wiO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIERhdGUgb2JqZWN0PGJyLz5cbiAgICAgKiBAbmFtZSBzZXRCeURhdGVcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUlVUQ1RpbWUjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlT2JqZWN0IERhdGUgb2JqZWN0IHRvIHNldCBBU04uMSB2YWx1ZShWKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSgpO1xuICAgICAqIG8uc2V0QnlEYXRlKG5ldyBEYXRlKFwiMjAxNi8xMi8zMVwiKSk7XG4gICAgICovXG4gICAgdGhpcy5zZXRCeURhdGUgPSBmdW5jdGlvbiAoZGF0ZU9iamVjdCkge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlT2JqZWN0O1xuICAgICAgICB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLCAndXRjJyk7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRhdGUgPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgdGhpcy5zID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLCAndXRjJyk7XG4gICAgICAgICAgICB0aGlzLmhWID0gc3RvaGV4KHRoaXMucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zLnN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcInN0cmluZ1wiICYmIHBhcmFtcy5tYXRjaCgvXlswLTldezEyfVokLykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0cmluZ0hleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMuZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5RGF0ZShwYXJhbXMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVUQ1RpbWUsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBHZW5lcmFsaXplZFRpbWVcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWVcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEdlbmVyYWxpemVkVGltZVxuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICcyMDEzMDQzMDIzNTk1OVonfSlcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gd2l0aE1pbGxpcyBmbGFnIHRvIHNob3cgbWlsbGlzZWNvbmRzIG9yIG5vdFxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZVxuICogQGRlc2NyaXB0aW9uXG4gKiA8YnIvPlxuICogQXMgZm9yIGFyZ3VtZW50ICdwYXJhbXMnIGZvciBjb25zdHJ1Y3RvciwgeW91IGNhbiBzcGVjaWZ5IG9uZSBvZlxuICogZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiA8dWw+XG4gKiA8bGk+c3RyIC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgc3RyaW5nIChleC4nMjAxMzA0MzAyMzU5NTlaJyk8L2xpPlxuICogPGxpPmhleCAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIGhleGFkZWNpbWFsIHN0cmluZzwvbGk+XG4gKiA8bGk+ZGF0ZSAtIHNwZWNpZnkgRGF0ZSBvYmplY3QuPC9saT5cbiAqIDxsaT5taWxsaXMgLSBzcGVjaWZ5IGZsYWcgdG8gc2hvdyBtaWxsaXNlY29uZHMgKGZyb20gMS4wLjYpPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFMTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuXG4gKiBOT1RFMjogJ3dpdGhNaWxsaXMnIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBmcm9tIGFzbjEgMS4wLjYuXG4gKi9cbktKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxOFwiO1xuICAgIHRoaXMud2l0aE1pbGxpcyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIERhdGUgb2JqZWN0XG4gICAgICogQG5hbWUgc2V0QnlEYXRlXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlT2JqZWN0IERhdGUgb2JqZWN0IHRvIHNldCBBU04uMSB2YWx1ZShWKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogV2hlbiB5b3Ugc3BlY2lmeSBVVEMgdGltZSwgdXNlICdEYXRlLlVUQycgbWV0aG9kIGxpa2UgdGhpczo8YnIvPlxuICAgICAqIG8xID0gbmV3IERFUlVUQ1RpbWUoKTtcbiAgICAgKiBvMS5zZXRCeURhdGUoZGF0ZSk7XG4gICAgICpcbiAgICAgKiBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoMjAxNSwgMCwgMzEsIDIzLCA1OSwgNTksIDApKTsgIzIwMTVKQU4zMSAyMzo1OTo1OVxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlEYXRlID0gZnVuY3Rpb24gKGRhdGVPYmplY3QpIHtcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZU9iamVjdDtcbiAgICAgICAgdGhpcy5zID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgJ2dlbicsIHRoaXMud2l0aE1pbGxpcyk7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgJ2dlbicsIHRoaXMud2l0aE1pbGxpcyk7XG4gICAgICAgICAgICB0aGlzLmhWID0gc3RvaGV4KHRoaXMucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zLnN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcInN0cmluZ1wiICYmIHBhcmFtcy5tYXRjaCgvXlswLTldezE0fVokLykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0cmluZ0hleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMuZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5RGF0ZShwYXJhbXMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5taWxsaXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMud2l0aE1pbGxpcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZSwgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFNlcXVlbmNlXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSU2VxdWVuY2VcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFNlcXVlbmNlXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5hcnJheSAtIHNwZWNpZnkgYXJyYXkgb2YgQVNOMU9iamVjdCB0byBzZXQgZWxlbWVudHMgb2YgY29udGVudDwvbGk+XG4gKiA8L3VsPlxuICogTk9URTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbktKVVIuYXNuMS5ERVJTZXF1ZW5jZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSU2VxdWVuY2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gICAgdGhpcy5oVCA9IFwiMzBcIjtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hc24xQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhc24xT2JqID0gdGhpcy5hc24xQXJyYXlbaV07XG4gICAgICAgICAgICBoICs9IGFzbjFPYmouZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaFYgPSBoO1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSwgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFNldFxuICogQG5hbWUgS0pVUi5hc24xLkRFUlNldFxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgU2V0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5hcnJheSAtIHNwZWNpZnkgYXJyYXkgb2YgQVNOMU9iamVjdCB0byBzZXQgZWxlbWVudHMgb2YgY29udGVudDwvbGk+XG4gKiA8bGk+c29ydGZsYWcgLSBmbGFnIGZvciBzb3J0IChkZWZhdWx0OiB0cnVlKS4gQVNOLjEgQkVSIGlzIG5vdCBzb3J0ZWQgaW4gJ1NFVCBPRicuPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFMTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuPGJyLz5cbiAqIE5PVEUyOiBzb3J0ZmxhZyBpcyBzdXBwb3J0ZWQgc2luY2UgMS4wLjUuXG4gKi9cbktKVVIuYXNuMS5ERVJTZXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUlNldC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIzMVwiO1xuICAgIHRoaXMuc29ydEZsYWcgPSB0cnVlOyAvLyBpdGVtIHNoYWxsIGJlIHNvcnRlZCBvbmx5IGluIEFTTi4xIERFUlxuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFzbjFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFzbjFPYmogPSB0aGlzLmFzbjFBcnJheVtpXTtcbiAgICAgICAgICAgIGEucHVzaChhc24xT2JqLmdldEVuY29kZWRIZXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc29ydEZsYWcgPT0gdHJ1ZSlcbiAgICAgICAgICAgIGEuc29ydCgpO1xuICAgICAgICB0aGlzLmhWID0gYS5qb2luKCcnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLnNvcnRmbGFnICE9IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHBhcmFtcy5zb3J0ZmxhZyA9PSBmYWxzZSlcbiAgICAgICAgICAgIHRoaXMuc29ydEZsYWcgPSBmYWxzZTtcbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlNldCwgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFRhZ2dlZE9iamVjdFxuICogQG5hbWUgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdFxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgVGFnZ2VkT2JqZWN0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGRlc2NyaXB0aW9uXG4gKiA8YnIvPlxuICogUGFyYW1ldGVyICd0YWdOb05leCcgaXMgQVNOLjEgdGFnKFQpIHZhbHVlIGZvciB0aGlzIG9iamVjdC5cbiAqIEZvciBleGFtcGxlLCBpZiB5b3UgZmluZCAnWzFdJyB0YWcgaW4gYSBBU04uMSBkdW1wLFxuICogJ3RhZ05vSGV4JyB3aWxsIGJlICdhMScuXG4gKiA8YnIvPlxuICogQXMgZm9yIG9wdGlvbmFsIGFyZ3VtZW50ICdwYXJhbXMnIGZvciBjb25zdHJ1Y3RvciwgeW91IGNhbiBzcGVjaWZ5ICpBTlkqIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5leHBsaWNpdCAtIHNwZWNpZnkgdHJ1ZSBpZiB0aGlzIGlzIGV4cGxpY2l0IHRhZyBvdGhlcndpc2UgZmFsc2VcbiAqICAgICAoZGVmYXVsdCBpcyAndHJ1ZScpLjwvbGk+XG4gKiA8bGk+dGFnIC0gc3BlY2lmeSB0YWcgKGRlZmF1bHQgaXMgJ2EwJyB3aGljaCBtZWFucyBbMF0pPC9saT5cbiAqIDxsaT5vYmogLSBzcGVjaWZ5IEFTTjFPYmplY3Qgd2hpY2ggaXMgdGFnZ2VkPC9saT5cbiAqIDwvdWw+XG4gKiBAZXhhbXBsZVxuICogZDEgPSBuZXcgS0pVUi5hc24xLkRFUlVURjhTdHJpbmcoeydzdHInOidhJ30pO1xuICogZDIgPSBuZXcgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCh7J29iaic6IGQxfSk7XG4gKiBoZXggPSBkMi5nZXRFbmNvZGVkSGV4KCk7XG4gKi9cbktKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiYTBcIjtcbiAgICB0aGlzLmhWID0gJyc7XG4gICAgdGhpcy5pc0V4cGxpY2l0ID0gdHJ1ZTtcbiAgICB0aGlzLmFzbjFPYmplY3QgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhbiBBU04xT2JqZWN0XG4gICAgICogQG5hbWUgc2V0U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0V4cGxpY2l0RmxhZyBmbGFnIGZvciBleHBsaWNpdC9pbXBsaWNpdCB0YWdcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRhZ05vSGV4IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSB0YWdcbiAgICAgKiBAcGFyYW0ge0FTTjFPYmplY3R9IGFzbjFPYmplY3QgQVNOLjEgdG8gZW5jYXBzdWxhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNldEFTTjFPYmplY3QgPSBmdW5jdGlvbiAoaXNFeHBsaWNpdEZsYWcsIHRhZ05vSGV4LCBhc24xT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuaFQgPSB0YWdOb0hleDtcbiAgICAgICAgdGhpcy5pc0V4cGxpY2l0ID0gaXNFeHBsaWNpdEZsYWc7XG4gICAgICAgIHRoaXMuYXNuMU9iamVjdCA9IGFzbjFPYmplY3Q7XG4gICAgICAgIGlmICh0aGlzLmlzRXhwbGljaXQpIHtcbiAgICAgICAgICAgIHRoaXMuaFYgPSB0aGlzLmFzbjFPYmplY3QuZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhWID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaFRMViA9IGFzbjFPYmplY3QuZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICAgICAgdGhpcy5oVExWID0gdGhpcy5oVExWLnJlcGxhY2UoL14uLi8sIHRhZ05vSGV4KTtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1sndGFnJ10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5oVCA9IHBhcmFtc1sndGFnJ107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbJ2V4cGxpY2l0J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5pc0V4cGxpY2l0ID0gcGFyYW1zWydleHBsaWNpdCddO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zWydvYmonXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFzbjFPYmplY3QgPSBwYXJhbXNbJ29iaiddO1xuICAgICAgICAgICAgdGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCwgdGhpcy5oVCwgdGhpcy5hc24xT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5ZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0LCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgaGV4MmI2NCB9IGZyb20gXCIuL2xpYi9qc2JuL2Jhc2U2NFwiO1xuaW1wb3J0IHsgSGV4IH0gZnJvbSBcIi4vbGliL2FzbjFqcy9oZXhcIjtcbmltcG9ydCB7IEJhc2U2NCB9IGZyb20gXCIuL2xpYi9hc24xanMvYmFzZTY0XCI7XG5pbXBvcnQgeyBBU04xIH0gZnJvbSBcIi4vbGliL2FzbjFqcy9hc24xXCI7XG5pbXBvcnQgeyBSU0FLZXkgfSBmcm9tIFwiLi9saWIvanNibi9yc2FcIjtcbmltcG9ydCB7IHBhcnNlQmlnSW50IH0gZnJvbSBcIi4vbGliL2pzYm4vanNiblwiO1xuaW1wb3J0IHsgS0pVUiB9IGZyb20gXCIuL2xpYi9qc3JzYXNpZ24vYXNuMS0xLjBcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IEpTRW5jcnlwdFJTQUtleSB0aGF0IGV4dGVuZHMgVG9tIFd1J3MgUlNBIGtleSBvYmplY3QuXG4gKiBUaGlzIG9iamVjdCBpcyBqdXN0IGEgZGVjb3JhdG9yIGZvciBwYXJzaW5nIHRoZSBrZXkgcGFyYW1ldGVyXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGtleSAtIFRoZSBrZXkgaW4gc3RyaW5nIGZvcm1hdCwgb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAqIHRoZSBwYXJhbWV0ZXJzIG5lZWRlZCB0byBidWlsZCBhIFJTQUtleSBvYmplY3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIEpTRW5jcnlwdFJTQUtleSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSlNFbmNyeXB0UlNBS2V5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEpTRW5jcnlwdFJTQUtleShrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgLy8gQ2FsbCB0aGUgc3VwZXIgY29uc3RydWN0b3IuXG4gICAgICAgIC8vICBSU0FLZXkuY2FsbCh0aGlzKTtcbiAgICAgICAgLy8gSWYgYSBrZXkga2V5IHdhcyBwcm92aWRlZC5cbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHN0cmluZy4uLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJzZUtleShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoSlNFbmNyeXB0UlNBS2V5Lmhhc1ByaXZhdGVLZXlQcm9wZXJ0eShrZXkpIHx8XG4gICAgICAgICAgICAgICAgSlNFbmNyeXB0UlNBS2V5Lmhhc1B1YmxpY0tleVByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHZhbHVlcyBmb3IgdGhlIGtleS5cbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJzZVByb3BlcnRpZXNGcm9tKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gcGFyc2UgYSBwZW0gZW5jb2RlZCBzdHJpbmcgY29udGFpbmluZyBib3RoIGEgcHVibGljIG9yIHByaXZhdGUga2V5LlxuICAgICAqIFRoZSBtZXRob2Qgd2lsbCB0cmFuc2xhdGUgdGhlIHBlbSBlbmNvZGVkIHN0cmluZyBpbiBhIGRlciBlbmNvZGVkIHN0cmluZyBhbmRcbiAgICAgKiB3aWxsIHBhcnNlIHByaXZhdGUga2V5IGFuZCBwdWJsaWMga2V5IHBhcmFtZXRlcnMuIFRoaXMgbWV0aG9kIGFjY2VwdHMgcHVibGljIGtleVxuICAgICAqIGluIHRoZSByc2FlbmNyeXB0aW9uIHBrY3MgIzEgZm9ybWF0IChvaWQ6IDEuMi44NDAuMTEzNTQ5LjEuMS4xKS5cbiAgICAgKlxuICAgICAqIEB0b2RvIENoZWNrIGhvdyBtYW55IHJzYSBmb3JtYXRzIHVzZSB0aGUgc2FtZSBmb3JtYXQgb2YgcGtjcyAjMS5cbiAgICAgKlxuICAgICAqIFRoZSBmb3JtYXQgaXMgZGVmaW5lZCBhczpcbiAgICAgKiBQdWJsaWNLZXlJbmZvIDo6PSBTRVFVRU5DRSB7XG4gICAgICogICBhbGdvcml0aG0gICAgICAgQWxnb3JpdGhtSWRlbnRpZmllcixcbiAgICAgKiAgIFB1YmxpY0tleSAgICAgICBCSVQgU1RSSU5HXG4gICAgICogfVxuICAgICAqIFdoZXJlIEFsZ29yaXRobUlkZW50aWZpZXIgaXM6XG4gICAgICogQWxnb3JpdGhtSWRlbnRpZmllciA6Oj0gU0VRVUVOQ0Uge1xuICAgICAqICAgYWxnb3JpdGhtICAgICAgIE9CSkVDVCBJREVOVElGSUVSLCAgICAgdGhlIE9JRCBvZiB0aGUgZW5jIGFsZ29yaXRobVxuICAgICAqICAgcGFyYW1ldGVycyAgICAgIEFOWSBERUZJTkVEIEJZIGFsZ29yaXRobSBPUFRJT05BTCAoTlVMTCBmb3IgUEtDUyAjMSlcbiAgICAgKiB9XG4gICAgICogYW5kIFB1YmxpY0tleSBpcyBhIFNFUVVFTkNFIGVuY2Fwc3VsYXRlZCBpbiBhIEJJVCBTVFJJTkdcbiAgICAgKiBSU0FQdWJsaWNLZXkgOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIG1vZHVsdXMgICAgICAgICAgIElOVEVHRVIsICAtLSBuXG4gICAgICogICBwdWJsaWNFeHBvbmVudCAgICBJTlRFR0VSICAgLS0gZVxuICAgICAqIH1cbiAgICAgKiBpdCdzIHBvc3NpYmxlIHRvIGV4YW1pbmUgdGhlIHN0cnVjdHVyZSBvZiB0aGUga2V5cyBvYnRhaW5lZCBmcm9tIG9wZW5zc2wgdXNpbmdcbiAgICAgKiBhbiBhc24uMSBkdW1wZXIgYXMgdGhlIG9uZSB1c2VkIGhlcmUgdG8gcGFyc2UgdGhlIGNvbXBvbmVudHM6IGh0dHA6Ly9sYXBvLml0L2FzbjFqcy9cbiAgICAgKiBAYXJndW1lbnQge3N0cmluZ30gcGVtIHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcsIGNhbiBpbmNsdWRlIHRoZSBCRUdJTi9FTkQgaGVhZGVyL2Zvb3RlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSlNFbmNyeXB0UlNBS2V5LnByb3RvdHlwZS5wYXJzZUtleSA9IGZ1bmN0aW9uIChwZW0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBtb2R1bHVzID0gMDtcbiAgICAgICAgICAgIHZhciBwdWJsaWNfZXhwb25lbnQgPSAwO1xuICAgICAgICAgICAgdmFyIHJlSGV4ID0gL15cXHMqKD86WzAtOUEtRmEtZl1bMC05QS1GYS1mXVxccyopKyQvO1xuICAgICAgICAgICAgdmFyIGRlciA9IHJlSGV4LnRlc3QocGVtKSA/IEhleC5kZWNvZGUocGVtKSA6IEJhc2U2NC51bmFybW9yKHBlbSk7XG4gICAgICAgICAgICB2YXIgYXNuMSA9IEFTTjEuZGVjb2RlKGRlcik7XG4gICAgICAgICAgICAvLyBGaXhlcyBhIGJ1ZyB3aXRoIE9wZW5TU0wgMS4wKyBwcml2YXRlIGtleXNcbiAgICAgICAgICAgIGlmIChhc24xLnN1Yi5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICBhc24xID0gYXNuMS5zdWJbMl0uc3ViWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFzbjEuc3ViLmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBwcml2YXRlIGtleS5cbiAgICAgICAgICAgICAgICBtb2R1bHVzID0gYXNuMS5zdWJbMV0uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5uID0gcGFyc2VCaWdJbnQobW9kdWx1cywgMTYpO1xuICAgICAgICAgICAgICAgIHB1YmxpY19leHBvbmVudCA9IGFzbjEuc3ViWzJdLmdldEhleFN0cmluZ1ZhbHVlKCk7IC8vIGludFxuICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBwcml2YXRlX2V4cG9uZW50ID0gYXNuMS5zdWJbM10uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5kID0gcGFyc2VCaWdJbnQocHJpdmF0ZV9leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBwcmltZTEgPSBhc24xLnN1Yls0XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLnAgPSBwYXJzZUJpZ0ludChwcmltZTEsIDE2KTtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbWUyID0gYXNuMS5zdWJbNV0uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5xID0gcGFyc2VCaWdJbnQocHJpbWUyLCAxNik7XG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50MSA9IGFzbjEuc3ViWzZdLmdldEhleFN0cmluZ1ZhbHVlKCk7IC8vIGJpZ2ludFxuICAgICAgICAgICAgICAgIHRoaXMuZG1wMSA9IHBhcnNlQmlnSW50KGV4cG9uZW50MSwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBleHBvbmVudDIgPSBhc24xLnN1Yls3XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLmRtcTEgPSBwYXJzZUJpZ0ludChleHBvbmVudDIsIDE2KTtcbiAgICAgICAgICAgICAgICB2YXIgY29lZmZpY2llbnQgPSBhc24xLnN1Yls4XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLmNvZWZmID0gcGFyc2VCaWdJbnQoY29lZmZpY2llbnQsIDE2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFzbjEuc3ViLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGlmIChhc24xLnN1YlswXS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgQVNOLjEgU3ViamVjdFB1YmxpY0tleUluZm8gdHlwZSBhcyBkZWZpbmVkIGJ5IFguNTA5XG4gICAgICAgICAgICAgICAgICAgIHZhciBiaXRfc3RyaW5nID0gYXNuMS5zdWJbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXF1ZW5jZSA9IGJpdF9zdHJpbmcuc3ViWzBdO1xuICAgICAgICAgICAgICAgICAgICBtb2R1bHVzID0gc2VxdWVuY2Uuc3ViWzBdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubiA9IHBhcnNlQmlnSW50KG1vZHVsdXMsIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgcHVibGljX2V4cG9uZW50ID0gc2VxdWVuY2Uuc3ViWzFdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgQVNOLjEgUlNBUHVibGljS2V5IHR5cGUgYXMgZGVmaW5lZCBieSBQS0NTICMxXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsdXMgPSBhc24xLnN1YlswXS5nZXRIZXhTdHJpbmdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChtb2R1bHVzLCAxNik7XG4gICAgICAgICAgICAgICAgICAgIHB1YmxpY19leHBvbmVudCA9IGFzbjEuc3ViWzFdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgcnNhIHBhcmFtZXRlcnMgaW4gYSBoZXggZW5jb2RlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByc2Ega2V5LlxuICAgICAqXG4gICAgICogVGhlIHRyYW5zbGF0aW9uIGZvbGxvdyB0aGUgQVNOLjEgbm90YXRpb24gOlxuICAgICAqIFJTQVByaXZhdGVLZXkgOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIHZlcnNpb24gICAgICAgICAgIFZlcnNpb24sXG4gICAgICogICBtb2R1bHVzICAgICAgICAgICBJTlRFR0VSLCAgLS0gblxuICAgICAqICAgcHVibGljRXhwb25lbnQgICAgSU5URUdFUiwgIC0tIGVcbiAgICAgKiAgIHByaXZhdGVFeHBvbmVudCAgIElOVEVHRVIsICAtLSBkXG4gICAgICogICBwcmltZTEgICAgICAgICAgICBJTlRFR0VSLCAgLS0gcFxuICAgICAqICAgcHJpbWUyICAgICAgICAgICAgSU5URUdFUiwgIC0tIHFcbiAgICAgKiAgIGV4cG9uZW50MSAgICAgICAgIElOVEVHRVIsICAtLSBkIG1vZCAocDEpXG4gICAgICogICBleHBvbmVudDIgICAgICAgICBJTlRFR0VSLCAgLS0gZCBtb2QgKHEtMSlcbiAgICAgKiAgIGNvZWZmaWNpZW50ICAgICAgIElOVEVHRVIsICAtLSAoaW52ZXJzZSBvZiBxKSBtb2QgcFxuICAgICAqIH1cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgREVSIEVuY29kZWQgU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcnNhIHByaXZhdGUga2V5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVCYXNlS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFycmF5OiBbXG4gICAgICAgICAgICAgICAgbmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHsgaW50OiAwIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5uIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGludDogdGhpcy5lIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5wIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5xIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kbXAxIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kbXExIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5jb2VmZiB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZXEgPSBuZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gc2VxLmdldEVuY29kZWRIZXgoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGJhc2U2NCAocGVtKSBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIERFUiBlbmNvZGVkIHJlcHJlc2VudGF0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVCYXNlS2V5QjY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaGV4MmI2NCh0aGlzLmdldFByaXZhdGVCYXNlS2V5KCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIHJzYSBwYXJhbWV0ZXJzIGluIGEgaGV4IGVuY29kZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcnNhIHB1YmxpYyBrZXkuXG4gICAgICogVGhlIHJlcHJlc2VudGF0aW9uIGZvbGxvdyB0aGUgQVNOLjEgbm90YXRpb24gOlxuICAgICAqIFB1YmxpY0tleUluZm8gOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIGFsZ29yaXRobSAgICAgICBBbGdvcml0aG1JZGVudGlmaWVyLFxuICAgICAqICAgUHVibGljS2V5ICAgICAgIEJJVCBTVFJJTkdcbiAgICAgKiB9XG4gICAgICogV2hlcmUgQWxnb3JpdGhtSWRlbnRpZmllciBpczpcbiAgICAgKiBBbGdvcml0aG1JZGVudGlmaWVyIDo6PSBTRVFVRU5DRSB7XG4gICAgICogICBhbGdvcml0aG0gICAgICAgT0JKRUNUIElERU5USUZJRVIsICAgICB0aGUgT0lEIG9mIHRoZSBlbmMgYWxnb3JpdGhtXG4gICAgICogICBwYXJhbWV0ZXJzICAgICAgQU5ZIERFRklORUQgQlkgYWxnb3JpdGhtIE9QVElPTkFMIChOVUxMIGZvciBQS0NTICMxKVxuICAgICAqIH1cbiAgICAgKiBhbmQgUHVibGljS2V5IGlzIGEgU0VRVUVOQ0UgZW5jYXBzdWxhdGVkIGluIGEgQklUIFNUUklOR1xuICAgICAqIFJTQVB1YmxpY0tleSA6Oj0gU0VRVUVOQ0Uge1xuICAgICAqICAgbW9kdWx1cyAgICAgICAgICAgSU5URUdFUiwgIC0tIG5cbiAgICAgKiAgIHB1YmxpY0V4cG9uZW50ICAgIElOVEVHRVIgICAtLSBlXG4gICAgICogfVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IERFUiBFbmNvZGVkIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJzYSBwdWJsaWMga2V5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaXJzdF9zZXF1ZW5jZSA9IG5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe1xuICAgICAgICAgICAgYXJyYXk6IFtcbiAgICAgICAgICAgICAgICBuZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoeyBvaWQ6IFwiMS4yLjg0MC4xMTM1NDkuMS4xLjFcIiB9KSxcbiAgICAgICAgICAgICAgICBuZXcgS0pVUi5hc24xLkRFUk51bGwoKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2Vjb25kX3NlcXVlbmNlID0gbmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7XG4gICAgICAgICAgICBhcnJheTogW1xuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5uIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGludDogdGhpcy5lIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBiaXRfc3RyaW5nID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe1xuICAgICAgICAgICAgaGV4OiBcIjAwXCIgKyBzZWNvbmRfc2VxdWVuY2UuZ2V0RW5jb2RlZEhleCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNlcSA9IG5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe1xuICAgICAgICAgICAgYXJyYXk6IFtmaXJzdF9zZXF1ZW5jZSwgYml0X3N0cmluZ10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VxLmdldEVuY29kZWRIZXgoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGJhc2U2NCAocGVtKSBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIERFUiBlbmNvZGVkIHJlcHJlc2VudGF0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXlCNjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0UHVibGljQmFzZUtleSgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHdyYXAgdGhlIHN0cmluZyBpbiBibG9jayBvZiB3aWR0aCBjaGFycy4gVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHJzYSBrZXlzIGlzIDY0XG4gICAgICogY2hhcmFjdGVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcgd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbd2lkdGg9NjRdIC0gdGhlIGxlbmd0aCB0aGUgc3RyaW5nIGhhcyB0byBiZSB3cmFwcGVkIGF0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS53b3Jkd3JhcCA9IGZ1bmN0aW9uIChzdHIsIHdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gd2lkdGggfHwgNjQ7XG4gICAgICAgIGlmICghc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWdleCA9IFwiKC57MSxcIiArIHdpZHRoICsgXCJ9KSggK3wkXFxuPyl8KC57MSxcIiArIHdpZHRoICsgXCJ9KVwiO1xuICAgICAgICByZXR1cm4gc3RyLm1hdGNoKFJlZ0V4cChyZWdleCwgXCJnXCIpKS5qb2luKFwiXFxuXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHBlbSBlbmNvZGVkIHByaXZhdGUga2V5XG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBlbSBlbmNvZGVkIHByaXZhdGUga2V5IHdpdGggaGVhZGVyL2Zvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBrZXkgPSBcIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cXG5cIjtcbiAgICAgICAga2V5ICs9IEpTRW5jcnlwdFJTQUtleS53b3Jkd3JhcCh0aGlzLmdldFByaXZhdGVCYXNlS2V5QjY0KCkpICsgXCJcXG5cIjtcbiAgICAgICAga2V5ICs9IFwiLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS1cIjtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBwZW0gZW5jb2RlZCBwdWJsaWMga2V5XG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBlbSBlbmNvZGVkIHB1YmxpYyBrZXkgd2l0aCBoZWFkZXIvZm9vdGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIga2V5ID0gXCItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxcblwiO1xuICAgICAgICBrZXkgKz0gSlNFbmNyeXB0UlNBS2V5LndvcmR3cmFwKHRoaXMuZ2V0UHVibGljQmFzZUtleUI2NCgpKSArIFwiXFxuXCI7XG4gICAgICAgIGtleSArPSBcIi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVwiO1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIG9iamVjdCBjb250YWlucyB0aGUgbmVjZXNzYXJ5IHBhcmFtZXRlcnMgdG8gcG9wdWxhdGUgdGhlIHJzYSBtb2R1bHVzXG4gICAgICogYW5kIHB1YmxpYyBleHBvbmVudCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqPXt9XSAtIEFuIG9iamVjdCB0aGF0IG1heSBjb250YWluIHRoZSB0d28gcHVibGljIGtleVxuICAgICAqIHBhcmFtZXRlcnNcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIG1vZHVsdXMgYW5kIHRoZSBwdWJsaWMgZXhwb25lbnRcbiAgICAgKiBwcm9wZXJ0aWVzIChuIGFuZCBlKVxuICAgICAqIEB0b2RvIGNoZWNrIGZvciB0eXBlcyBvZiBuIGFuZCBlLiBOIHNob3VsZCBiZSBhIHBhcnNlYWJsZSBiaWdJbnQgb2JqZWN0LCBFIHNob3VsZFxuICAgICAqIGJlIGEgcGFyc2VhYmxlIGludGVnZXIgbnVtYmVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkuaGFzUHVibGljS2V5UHJvcGVydHkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICAgICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShcIm5cIikgJiYgb2JqLmhhc093blByb3BlcnR5KFwiZVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBvYmplY3QgY29udGFpbnMgQUxMIHRoZSBwYXJhbWV0ZXJzIG9mIGFuIFJTQSBrZXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmo9e31dIC0gQW4gb2JqZWN0IHRoYXQgbWF5IGNvbnRhaW4gbmluZSByc2Ega2V5XG4gICAgICogcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgY29udGFpbnMgYWxsIHRoZSBwYXJhbWV0ZXJzIG5lZWRlZFxuICAgICAqIEB0b2RvIGNoZWNrIGZvciB0eXBlcyBvZiB0aGUgcGFyYW1ldGVycyBhbGwgdGhlIHBhcmFtZXRlcnMgYnV0IHRoZSBwdWJsaWMgZXhwb25lbnRcbiAgICAgKiBzaG91bGQgYmUgcGFyc2VhYmxlIGJpZ2ludCBvYmplY3RzLCB0aGUgcHVibGljIGV4cG9uZW50IHNob3VsZCBiZSBhIHBhcnNlYWJsZSBpbnRlZ2VyIG51bWJlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSlNFbmNyeXB0UlNBS2V5Lmhhc1ByaXZhdGVLZXlQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuICAgICAgICByZXR1cm4gKG9iai5oYXNPd25Qcm9wZXJ0eShcIm5cIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImVcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcInBcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcInFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRtcDFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRtcTFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImNvZWZmXCIpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBwcm9wZXJ0aWVzIG9mIG9iaiBpbiB0aGUgY3VycmVudCByc2Egb2JqZWN0LiBPYmogc2hvdWxkIEFUIExFQVNUXG4gICAgICogaW5jbHVkZSB0aGUgbW9kdWx1cyBhbmQgcHVibGljIGV4cG9uZW50IChuLCBlKSBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgcnNhIHBhcmFtZXRlcnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS5wcm90b3R5cGUucGFyc2VQcm9wZXJ0aWVzRnJvbSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdGhpcy5uID0gb2JqLm47XG4gICAgICAgIHRoaXMuZSA9IG9iai5lO1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KFwiZFwiKSkge1xuICAgICAgICAgICAgdGhpcy5kID0gb2JqLmQ7XG4gICAgICAgICAgICB0aGlzLnAgPSBvYmoucDtcbiAgICAgICAgICAgIHRoaXMucSA9IG9iai5xO1xuICAgICAgICAgICAgdGhpcy5kbXAxID0gb2JqLmRtcDE7XG4gICAgICAgICAgICB0aGlzLmRtcTEgPSBvYmouZG1xMTtcbiAgICAgICAgICAgIHRoaXMuY29lZmYgPSBvYmouY29lZmY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBKU0VuY3J5cHRSU0FLZXk7XG59KFJTQUtleSkpO1xuZXhwb3J0IHsgSlNFbmNyeXB0UlNBS2V5IH07XG4iLCJ2YXIgX2E7XG5pbXBvcnQgeyBiNjR0b2hleCwgaGV4MmI2NCB9IGZyb20gXCIuL2xpYi9qc2JuL2Jhc2U2NFwiO1xuaW1wb3J0IHsgSlNFbmNyeXB0UlNBS2V5IH0gZnJvbSBcIi4vSlNFbmNyeXB0UlNBS2V5XCI7XG52YXIgdmVyc2lvbiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKF9hID0gcHJvY2Vzcy5lbnYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ucG1fcGFja2FnZV92ZXJzaW9uXG4gICAgOiB1bmRlZmluZWQ7XG4vKipcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMgPSB7fV0gLSBBbiBvYmplY3QgdG8gY3VzdG9taXplIEpTRW5jcnlwdCBiZWhhdmlvdXJcbiAqIHBvc3NpYmxlIHBhcmFtZXRlcnMgYXJlOlxuICogLSBkZWZhdWx0X2tleV9zaXplICAgICAgICB7bnVtYmVyfSAgZGVmYXVsdDogMTAyNCB0aGUga2V5IHNpemUgaW4gYml0XG4gKiAtIGRlZmF1bHRfcHVibGljX2V4cG9uZW50IHtzdHJpbmd9ICBkZWZhdWx0OiAnMDEwMDAxJyB0aGUgaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHB1YmxpYyBleHBvbmVudFxuICogLSBsb2cgICAgICAgICAgICAgICAgICAgICB7Ym9vbGVhbn0gZGVmYXVsdDogZmFsc2Ugd2hldGhlciBsb2cgd2Fybi9lcnJvciBvciBub3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgSlNFbmNyeXB0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpTRW5jcnlwdChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmRlZmF1bHRfa2V5X3NpemUgPSBvcHRpb25zLmRlZmF1bHRfa2V5X3NpemVcbiAgICAgICAgICAgID8gcGFyc2VJbnQob3B0aW9ucy5kZWZhdWx0X2tleV9zaXplLCAxMClcbiAgICAgICAgICAgIDogMTAyNDtcbiAgICAgICAgdGhpcy5kZWZhdWx0X3B1YmxpY19leHBvbmVudCA9IG9wdGlvbnMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQgfHwgXCIwMTAwMDFcIjsgLy8gNjU1MzcgZGVmYXVsdCBvcGVuc3NsIHB1YmxpYyBleHBvbmVudCBmb3IgcnNhIGtleSB0eXBlXG4gICAgICAgIHRoaXMubG9nID0gb3B0aW9ucy5sb2cgfHwgZmFsc2U7XG4gICAgICAgIC8vIFRoZSBwcml2YXRlIGFuZCBwdWJsaWMga2V5LlxuICAgICAgICB0aGlzLmtleSA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBzZXQgdGhlIHJzYSBrZXkgcGFyYW1ldGVyIChvbmUgbWV0aG9kIGlzIGVub3VnaCB0byBzZXQgYm90aCB0aGUgcHVibGljXG4gICAgICogYW5kIHRoZSBwcml2YXRlIGtleSwgc2luY2UgdGhlIHByaXZhdGUga2V5IGNvbnRhaW5zIHRoZSBwdWJsaWMga2V5IHBhcmFtZW50ZXJzKVxuICAgICAqIExvZyBhIHdhcm5pbmcgaWYgbG9ncyBhcmUgZW5hYmxlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30ga2V5IHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcgb3IgYW4gb2JqZWN0ICh3aXRoIG9yIHdpdGhvdXQgaGVhZGVyL2Zvb3RlcilcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5zZXRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmxvZyAmJiB0aGlzLmtleSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQSBrZXkgd2FzIGFscmVhZHkgc2V0LCBvdmVycmlkaW5nIGV4aXN0aW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleSA9IG5ldyBKU0VuY3J5cHRSU0FLZXkoa2V5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByb3h5IG1ldGhvZCBmb3Igc2V0S2V5LCBmb3IgYXBpIGNvbXBhdGliaWxpdHlcbiAgICAgKiBAc2VlIHNldEtleVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdmtleSkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGtleS5cbiAgICAgICAgdGhpcy5zZXRLZXkocHJpdmtleSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIHNldEtleSwgZm9yIGFwaSBjb21wYXRpYmlsaXR5XG4gICAgICogQHNlZSBzZXRLZXlcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHVia2V5KSB7XG4gICAgICAgIC8vIFNldHMgdGhlIHB1YmxpYyBrZXkuXG4gICAgICAgIHRoaXMuc2V0S2V5KHB1YmtleSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIFJTQUtleSBvYmplY3QncyBkZWNyeXB0LCBkZWNyeXB0IHRoZSBzdHJpbmcgdXNpbmcgdGhlIHByaXZhdGVcbiAgICAgKiBjb21wb25lbnRzIG9mIHRoZSByc2Ega2V5IG9iamVjdC4gTm90ZSB0aGF0IGlmIHRoZSBvYmplY3Qgd2FzIG5vdCBzZXQgd2lsbCBiZSBjcmVhdGVkXG4gICAgICogb24gdGhlIGZseSAoYnkgdGhlIGdldEtleSBtZXRob2QpIHVzaW5nIHRoZSBwYXJhbWV0ZXJzIHBhc3NlZCBpbiB0aGUgSlNFbmNyeXB0IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBiYXNlNjQgZW5jb2RlZCBjcnlwdGVkIHN0cmluZyB0byBkZWNyeXB0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgZGVjcnlwdGVkIHN0cmluZ1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZGVjcnlwdGVkIHN0cmluZy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEtleSgpLmRlY3J5cHQoYjY0dG9oZXgoc3RyKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByb3h5IG1ldGhvZCBmb3IgUlNBS2V5IG9iamVjdCdzIGVuY3J5cHQsIGVuY3J5cHQgdGhlIHN0cmluZyB1c2luZyB0aGUgcHVibGljXG4gICAgICogY29tcG9uZW50cyBvZiB0aGUgcnNhIGtleSBvYmplY3QuIE5vdGUgdGhhdCBpZiB0aGUgb2JqZWN0IHdhcyBub3Qgc2V0IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIG9uIHRoZSBmbHkgKGJ5IHRoZSBnZXRLZXkgbWV0aG9kKSB1c2luZyB0aGUgcGFyYW1ldGVycyBwYXNzZWQgaW4gdGhlIEpTRW5jcnlwdCBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byBlbmNyeXB0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgZW5jcnlwdGVkIHN0cmluZyBlbmNvZGVkIGluIGJhc2U2NFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZW5jcnlwdGVkIHN0cmluZy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0S2V5KCkuZW5jcnlwdChzdHIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJveHkgbWV0aG9kIGZvciBSU0FLZXkgb2JqZWN0J3Mgc2lnbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gc2lnblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpZ2VzdE1ldGhvZCBoYXNoIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkaWdlc3ROYW1lIHRoZSBuYW1lIG9mIHRoZSBoYXNoIGFsZ29yaXRobVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHNpZ25hdHVyZSBlbmNvZGVkIGluIGJhc2U2NFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoc3RyLCBkaWdlc3RNZXRob2QsIGRpZ2VzdE5hbWUpIHtcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBSU0Egc2lnbmF0dXJlIG9mICdzdHInIGluICdoZXgnIGZvcm1hdC5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0S2V5KCkuc2lnbihzdHIsIGRpZ2VzdE1ldGhvZCwgZGlnZXN0TmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIFJTQUtleSBvYmplY3QncyB2ZXJpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIHZlcmlmeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmUgdGhlIHNpZ25hdHVyZSBlbmNvZGVkIGluIGJhc2U2NCB0byBjb21wYXJlIHRoZSBzdHJpbmcgdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBkaWdlc3RNZXRob2QgaGFzaCBtZXRob2RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBkYXRhIGFuZCBzaWduYXR1cmUgbWF0Y2hcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiAoc3RyLCBzaWduYXR1cmUsIGRpZ2VzdE1ldGhvZCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIGRlY3J5cHRlZCAnZGlnZXN0JyBvZiB0aGUgc2lnbmF0dXJlLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkudmVyaWZ5KHN0ciwgYjY0dG9oZXgoc2lnbmF0dXJlKSwgZGlnZXN0TWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0dGVyIGZvciB0aGUgY3VycmVudCBKU0VuY3J5cHRSU0FLZXkgb2JqZWN0LiBJZiBpdCBkb2Vzbid0IGV4aXN0cyBhIG5ldyBvYmplY3RcbiAgICAgKiB3aWxsIGJlIGNyZWF0ZWQgYW5kIHJldHVybmVkXG4gICAgICogQHBhcmFtIHtjYWxsYmFja30gW2NiXSB0aGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGlmIHdlIHdhbnQgdGhlIGtleSB0byBiZSBnZW5lcmF0ZWRcbiAgICAgKiBpbiBhbiBhc3luYyBmYXNoaW9uXG4gICAgICogQHJldHVybnMge0pTRW5jcnlwdFJTQUtleX0gdGhlIEpTRW5jcnlwdFJTQUtleSBvYmplY3RcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgLy8gT25seSBjcmVhdGUgbmV3IGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICAgICAgICBpZiAoIXRoaXMua2V5KSB7XG4gICAgICAgICAgICAvLyBHZXQgYSBuZXcgcHJpdmF0ZSBrZXkuXG4gICAgICAgICAgICB0aGlzLmtleSA9IG5ldyBKU0VuY3J5cHRSU0FLZXkoKTtcbiAgICAgICAgICAgIGlmIChjYiAmJiB7fS50b1N0cmluZy5jYWxsKGNiKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXkuZ2VuZXJhdGVBc3luYyh0aGlzLmRlZmF1bHRfa2V5X3NpemUsIHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQsIGNiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSB0aGUga2V5LlxuICAgICAgICAgICAgdGhpcy5rZXkuZ2VuZXJhdGUodGhpcy5kZWZhdWx0X2tleV9zaXplLCB0aGlzLmRlZmF1bHRfcHVibGljX2V4cG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rZXk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpdmF0ZSBrZXlcbiAgICAgKiBJZiB0aGUga2V5IGRvZXNuJ3QgZXhpc3RzIGEgbmV3IGtleSB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpdmF0ZSBrZXkgV0lUSCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHJpdmF0ZUtleSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByaXZhdGUga2V5XG4gICAgICogSWYgdGhlIGtleSBkb2Vzbid0IGV4aXN0cyBhIG5ldyBrZXkgd2lsbCBiZSBjcmVhdGVkXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByaXZhdGUga2V5IFdJVEhPVVQgaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQcml2YXRlS2V5QjY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHByaXZhdGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBrZXkuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEtleSgpLmdldFByaXZhdGVCYXNlS2V5QjY0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleVxuICAgICAqIElmIHRoZSBrZXkgZG9lc24ndCBleGlzdHMgYSBuZXcga2V5IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHBlbSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwdWJsaWMga2V5IFdJVEggaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHVibGljS2V5KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleVxuICAgICAqIElmIHRoZSBrZXkgZG9lc24ndCBleGlzdHMgYSBuZXcga2V5IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHBlbSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwdWJsaWMga2V5IFdJVEhPVVQgaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXlCNjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHVibGljQmFzZUtleUI2NCgpO1xuICAgIH07XG4gICAgSlNFbmNyeXB0LnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHJldHVybiBKU0VuY3J5cHQ7XG59KCkpO1xuZXhwb3J0IHsgSlNFbmNyeXB0IH07XG4iLCJpbXBvcnQgeyBKU0VuY3J5cHQgfSBmcm9tICcuL0pTRW5jcnlwdCc7XG5leHBvcnQgeyBKU0VuY3J5cHQgfTtcbmV4cG9ydCBkZWZhdWx0IEpTRW5jcnlwdDtcbiIsImltcG9ydCBKc0VuY3J5cHQgZnJvbSAnanNlbmNyeXB0JztcclxuXHJcbndpbmRvdy4kcnNhID0ge307XHJcblxyXG53aW5kb3cuJHJzYS5lbmNyeXB0ID0gZnVuY3Rpb24oZGF0YSwgcHVibGljS2V5ID0gKCgpID0+IHtcclxuICAgIGlmICh3aW5kb3cucnNhID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGFsZXJ0KCfor7fmm7TmlrDohJrmnKwsIOa3u+WKoCByc2Eg5a+G6ZKl55qE6YWN572uJyk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdpbmRvdy5yc2EucHViO1xyXG59KSgpKSB7XHJcbiAgICBpZiAocHVibGljS2V5KSB7XHJcbiAgICAgICAgY29uc3QgZW5jcnlwdCA9IG5ldyBKc0VuY3J5cHQoKTtcclxuICAgICAgICBlbmNyeXB0LnNldFByaXZhdGVLZXkocHVibGljS2V5KTtcclxuICAgICAgICByZXR1cm4gZW5jcnlwdC5lbmNyeXB0KGRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbndpbmRvdy4kcnNhLmRlY3J5cHQgPSBmdW5jdGlvbihkYXRhLCBwcml2YXRlS2V5ID0gKCgpID0+IHtcclxuICAgIGlmICh3aW5kb3cucnNhID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGFsZXJ0KCfor7fmm7TmlrDohJrmnKwsIOa3u+WKoCByc2Eg5a+G6ZKl55qE6YWN572uJyk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdpbmRvdy5yc2EucHJpO1xyXG59KSgpKSB7XHJcbiAgICBpZiAocHJpdmF0ZUtleSkge1xyXG4gICAgICAgIGNvbnN0IGpzZW5jcnlwdCA9IG5ldyBKc0VuY3J5cHQoKTtcclxuICAgICAgICBqc2VuY3J5cHQuc2V0UHJpdmF0ZUtleShwcml2YXRlS2V5KTtcclxuICAgICAgICByZXR1cm4ganNlbmNyeXB0LmRlY3J5cHQoZGF0YSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxud2luZG93LiRyc2EuZGVjcnlwdE9iamVjdCA9IGZ1bmN0aW9uKGRhdGEsIHByaXZhdGVLZXkgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wcmk7XHJcbn0pKCkpIHtcclxuICAgIHJldHVybiBkaXNwYXRjaChkYXRhLCBwcml2YXRlS2V5KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGF0Y2gob2JqLCBwcml2YXRlS2V5KSB7XHJcbiAgICBpZiAodHlwZW9mIG9iaiA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlT2JqZWN0KG9iaiwgcHJpdmF0ZUtleSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gb2JqLmRlY3J5cHQocHJpdmF0ZUtleSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc29sdmVPYmplY3Qob2JqLCBwcml2YXRlS2V5KSB7XHJcbiAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xyXG4gICAgICAgIG9ialtrZXldID0gZGlzcGF0Y2gob2JqW2tleV0sIHByaXZhdGVLZXkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iajtcclxufSIsImRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDnvZHnu5zor7fmsYLlj4LmlbAgKi9cclxuICAgIGludGVyZmFjZSBIVFRQQ29uZmlnIHtcclxuICAgICAgICAvKiog5Zue6LCD5Ye95pWwICovXHJcbiAgICAgICAgY2FsbGJhY2s6IEZ1bmN0aW9uO1xyXG4gICAgICAgIC8qKiDmmK/lkKblkIzmraUgKi9cclxuICAgICAgICBhc3luYzogYm9vbGVhbjtcclxuICAgIH1cclxuICAgIC8qKiDnvZHnu5zlt6XlhbfnsbsgKi9cclxuICAgIGludGVyZmFjZSBOZXR3b3JrVXRpbHMge1xyXG4gICAgICAgIC8qKiDlj5HpgIHkuIDkuKogZ2V0IOivt+axgiAqL1xyXG4gICAgICAgIGdldDxUPih1cmw6IHN0cmluZyk6IFRcclxuICAgICAgICBnZXQ8VD4odXJsOiBzdHJpbmcsIGNvbmZpZzogSFRUUENvbmZpZyk6IFQsXHJcbiAgICB9XHJcbiAgICAvKiog572R57uc5bel5YW3ICovXHJcbiAgICBjb25zdCAkbmV0OiBOZXR3b3JrVXRpbHM7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog572R57uc5bel5YW3ICovXHJcbiAgICAgICAgJG5ldDogTmV0d29ya1V0aWxzO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuJG5ldCA9IHt9IGFzIGFueTtcclxuXHJcbndpbmRvdy4kbmV0LmdldCA9IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBjb25maWc6IEhUVFBDb25maWcgPSB7XHJcbiAgICBjYWxsYmFjazogbnVsbCxcclxuICAgIGFzeW5jOiBmYWxzZSxcclxufSkge1xyXG4gICAgY29uc3QgaHR0cDogWE1MSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIGh0dHAub3BlbignR0VUJywgdXJsLCAhIWNvbmZpZy5hc3luYyk7XHJcbiAgICBodHRwLnNlbmQoKTtcclxuICAgIGlmIChodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiBodHRwLnN0YXR1cyA9PSAyMDAgJiYgY29uZmlnLmNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uZmlnLmNhbGxiYWNrKGh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBodHRwLnJlc3BvbnNlVGV4dDtcclxufVxyXG5cclxuZXhwb3J0IHt9OyIsImRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBTdG9yYWdlVXRpbHMge1xyXG4gICAgICAgIC8qKiDojrflj5bmnKzlnLDnvJPlrZggKi9cclxuICAgICAgICBnZXRTdG9yYWdlPFQ+KGtleTogc3RyaW5nKTogVDtcclxuICAgICAgICBnZXRTdG9yYWdlPFQ+KGtleTogc3RyaW5nLCBfZGVmYXVsdDogVCk6IFQ7XHJcbiAgICAgICAgLyoqIOiuvue9ruacrOWcsOe8k+WtmCAqL1xyXG4gICAgICAgIHNldFN0b3JhZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgICAgIHNldFN0b3JhZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHRpbWVvdXQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICB9XHJcbiAgICAvKiog5pys5Zyw57yT5a2Y5bel5YW3ICovXHJcbiAgICBjb25zdCAkc3RvcmU6IFN0b3JhZ2VVdGlscztcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKiDmnKzlnLDnvJPlrZjlt6XlhbcgKi9cclxuICAgICAgICAkc3RvcmU6IFN0b3JhZ2VVdGlscztcclxuICAgIH1cclxuICAgIGludGVyZmFjZSBTdG9yYWdlU3RydWN0IHtcclxuICAgICAgICAvKiog5L+d5a2Y5pe26Ze0ICovXHJcbiAgICAgICAgc2F2ZXRpbWU6IG51bWJlcixcclxuICAgICAgICAvKiog5pyJ5pWI5pyfLCDljZXkvY06IG1zICovXHJcbiAgICAgICAgdGltZW91dDogbnVtYmVyLFxyXG4gICAgICAgIC8qKiDmlbDmja4gKi9cclxuICAgICAgICBkYXRhOiBhbnlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHt9XHJcblxyXG53aW5kb3cuJHN0b3JlID0ge30gYXMgYW55O1xyXG5cclxud2luZG93LiRzdG9yZS5nZXRTdG9yYWdlID0gZnVuY3Rpb24oa2V5OiBzdHJpbmcsIF9kZWZhdWx0OiBhbnkgPSB1bmRlZmluZWQpIHtcclxuICAgIGxldCBqc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgIGlmIChqc29uKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBTdG9yYWdlU3RydWN0ID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgICAgICBpZiAocmVzdWx0LnRpbWVvdXQgPiAwICYmIChEYXRlLm5vdygpIC0gcmVzdWx0LnNhdmV0aW1lID4gcmVzdWx0LnRpbWVvdXQpKSB7XHJcbiAgICAgICAgICAgIGDmnKzlnLDnvJPlrZgkeyBrZXkgfeW3sui/h+acn2Aud2FybigpO1xyXG4gICAgICAgICAgICByZXR1cm4gX2RlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBfZGVmYXVsdDtcclxufVxyXG5cclxud2luZG93LiRzdG9yZS5zZXRTdG9yYWdlID0gZnVuY3Rpb24oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHRpbWVvdXQ6IG51bWJlciA9IC0xKSB7XHJcbiAgICBsZXQgb2JqOiBTdG9yYWdlU3RydWN0ID0ge1xyXG4gICAgICAgIHNhdmV0aW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXHJcbiAgICAgICAgZGF0YTogdmFsdWUsXHJcbiAgICB9XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG59XHJcbiIsIi8qKiBWdWUg5a+56LGh5Lit5LiA5Lqb5Z+65pys55qE5a2X5q61LCDmlrnms5XnmoTlrprkuYkgKi9cclxuYWJzdHJhY3QgY2xhc3MgQmFzaWNQcm9wZXJ0eTxUPiB7XHJcbiAgICAvKiog5a+56LGhIGlkICovXHJcbiAgICB2aWQ6IHN0cmluZztcclxuICAgIC8qKiDlr7nosaHlkI3np7AgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKiDkuIrnuqfnmoTlhaXlj4IgKi9cclxuICAgIGlQcm9wczogVDtcclxuICAgIC8qKiDljp/nlJ/oh6rluKbnmoTmlrnms5UsIOWwhuWbvueJh+ebuOWvuei3r+W+hOi9rOe7neWvuei3r+W+hCAqL1xyXG4gICAgZ2V0SW1nKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7IHJldHVybiAnJyB9O1xyXG4gICAgLyoqIOWOn+eUn+iHquW4pueahOaWueazlSwg5bCB6KOFICRlbWl0ICovXHJcbiAgICBlbWl0KGV2ZW50TmFtZTogc3RyaW5nLCBwYXJhbTogYW55KTogdm9pZCB7fTtcclxuICAgIC8qKiDojrflj5bmoLflvI8gKi9cclxuICAgIGdldFN0eWxlPyguLi5hcmdzOiBhbnkpOiBhbnk7XHJcbiAgICAvKiog6I635Y+WY2xhc3MgKi9cclxuICAgIGdldENsYXNzPyguLi5hcmdzOiBhbnkpOiBhbnk7XHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIEJhc2ljUHJvcGVydHk6IGFueTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LkJhc2ljUHJvcGVydHkgPSBCYXNpY1Byb3BlcnR5O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFzaWNQcm9wZXJ0eTsiLCJpbXBvcnQgQ29tcG9uZW50VHlwZSBmcm9tIFwiLi9Db21wb25lbnRUeXBlXCI7XHJcbmltcG9ydCBCYXNpY1Byb3BlcnR5IGZyb20gXCIuL0Jhc2ljUHJvcGVydHlcIjtcclxuXHJcbmFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q29tcG9uZW50PFByb3A+IGV4dGVuZHMgQmFzaWNQcm9wZXJ0eTxQcm9wPiB7XHJcbiAgICAvKiog57uE5Lu257G75Z6LICovXHJcbiAgICBwdWJsaWMgdHlwZTogQ29tcG9uZW50VHlwZTtcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIEFic3RyYWN0Q29tcG9uZW50OiBhbnk7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5BYnN0cmFjdENvbXBvbmVudCA9IEFic3RyYWN0Q29tcG9uZW50O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3RDb21wb25lbnQ7IiwiZW51bSBDb21wb25lbnRUeXBlIHtcclxuICAgIEJ1dHRvblggICAgICAgICA9ICdJLUJ1dHRvbicsXHJcbiAgICBJbnB1dFggICAgICAgICAgPSAnSS1JbnB1dCcsXHJcbiAgICBTd2l0Y2hYICAgICAgICAgPSAnSS1Td2l0Y2gnLFxyXG4gICAgQ29tYm9YICAgICAgICAgID0gJ0ktQ29tYm8nLFxyXG4gICAgTmF2aWdhdG9yWCAgICAgID0gJ0ktTmF2aWdhdG9yJyxcclxuICAgIFNjcm9sbGVyWSAgICAgICA9ICdJLVNjcm9sbGVyLVknLFxyXG4gICAgVGFiUGFuZWxYICAgICAgID0gJ0ktVGFiLVBhbmVsJyxcclxuICAgIFNjcm9sbGVyWCAgICAgICA9ICdJLVNjcm9sbGVyLVgnLFxyXG4gICAgVGFibGVYICAgICAgICAgID0gJ0ktVGFibGUnLFxyXG4gICAgVGFiVmlldyAgICAgICAgID0gJ0ktVGFiLVZpZXcnLFxyXG4gICAgTmF2aWdhdG9yVmlldyAgID0gJ0ktTmF2LVZpZXcnLFxyXG4gICAgUHJvZ3Jlc3NYICAgICAgID0gJ0ktUHJvZ3Jlc3MnLFxyXG4gICAgTW9kYWxYICAgICAgICAgID0gJ0ktTW9kYWwnLFxyXG4gICAgQ29udGV4dE1lbnVYICAgID0gJ0ktQ29udGV4dC1NZW51JyxcclxuICAgIEZpbGVUcmVlWCAgICAgICA9ICdJLUZpbGUtVHJlZScsXHJcbiAgICBUcmVlVmlldyAgICAgICAgPSAnSS1UcmVlLVZpZXcnLFxyXG4gICAgVGV4dEFyZWFYICAgICAgID0gJ0ktVGV4dC1BcmVhJyxcclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgQ29tcG9uZW50VHlwZTogYW55O1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuQ29tcG9uZW50VHlwZSA9IENvbXBvbmVudFR5cGU7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnRUeXBlOyIsImltcG9ydCBBYnN0cmFjdENvbXBvbmVudCBmcm9tIFwiLi9BYnN0cmFjdENvbXBvbmVudFwiO1xyXG5pbXBvcnQgQmFzaWNQcm9wZXJ0eSBmcm9tIFwiLi9CYXNpY1Byb3BlcnR5XCI7XHJcblxyXG4vKiog5LiA5Liq57uE5Lu255qE5Z+65pys5L+h5oGv5pS26ZuGICovXHJcbmV4cG9ydCBjbGFzcyBNZXRhRGF0YTxUPiBleHRlbmRzIEJhc2ljUHJvcGVydHk8VD4gaW1wbGVtZW50cyBCdWlsZEluZm88VD4ge1xyXG5cclxuICAgIHB1YmxpYyBjbGF6ejogYW55O1xyXG5cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIG1vdW50ZWROYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHRlbXBsYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbXBvbmVudHM6IGFueSA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyBmaWVsZE5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgcHVibGljIG1ldGhvZE5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgcHVibGljIGNvbXB1dGVzOiBBcnJheTxCdWlsZENvbXB1dGVJbmZvPiA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyB3YXRjaHM6IEFycmF5PEJ1aWxkV2F0Y2hJbmZvPiA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBwcm9wTWFwOiBNYXA8c3RyaW5nLCBCdWlsZFByb3BJbmZvPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBwcml2YXRlIGluc3RhbmNlOiBBYnN0cmFjdENvbXBvbmVudDxUPjtcclxuXHJcbiAgICBwdWJsaWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNsYXp6KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyB0aGlzLmNsYXp6KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpZWxkcygpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKTogYW55IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgJGNsYXNzOiBpbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIHZpZDogJycsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzZWxmLm5hbWUsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgZmllbGROYW1lIG9mIHNlbGYuZmllbGROYW1lcykge1xyXG4gICAgICAgICAgICAgICAgJHNldChyZXN1bHQsIGZpZWxkTmFtZSwgJGdldChpbnN0YW5jZSwgZmllbGROYW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1ldGhvZHMoKSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7XHJcbiAgICAgICAgICAgIGdldEltZzogZnVuY3Rpb24ocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZVBhdGgoJy9zcmMvYXNzZXRzL2ltZy8nICsgcGF0aCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVtaXQ6IGZ1bmN0aW9uPFQ+KGV2ZW50OiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KGV2ZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXBwTW91bnRlZDogdGhpcy5tb3VudGVkTmFtZSA/ICRnZXQoaW5zdGFuY2UsIHRoaXMubW91bnRlZE5hbWUpIDogKCgpID0+IHt9KSxcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgbWV0aG9kTmFtZSBvZiB0aGlzLm1ldGhvZE5hbWVzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFttZXRob2ROYW1lXSA9ICRnZXQoaW5zdGFuY2UsIG1ldGhvZE5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb21wdXRlZHMoKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgY29tcHV0ZSBvZiB0aGlzLmNvbXB1dGVzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtjb21wdXRlLmZpZWxkTmFtZV0gPSBjb21wdXRlLmZ1bmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFByb3AoZmllbGROYW1lOiBzdHJpbmcsIGRlZmluZTogQnVpbGRQcm9wSW5mbykge1xyXG4gICAgICAgIHRoaXMucHJvcE1hcC5zZXQoZmllbGROYW1lLCBkZWZpbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcm9wcygpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9O1xyXG4gICAgICAgIHRoaXMucHJvcE1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICRzZXQocmVzdWx0LCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNb3VudGVkKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYudmlkID0gd2luZG93LnV1aWQoc2VsZi5uYW1lKTtcclxuICAgICAgICAgICAgc2VsZi5lbWl0KCdtb3VudGVkJywgc2VsZi52aWQpO1xyXG4gICAgICAgICAgICAkcXVldWUub24oJyR2dWUnLCAoKSA9PiBzZWxmLCBzZWxmLnZpZCk7XHJcbiAgICAgICAgICAgIHNlbGYuYXBwTW91bnRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGVtcGxhdGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJGdldCh0aGlzLmdldEluc3RhbmNlKCksIHRoaXMudGVtcGxhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRXYXRjaHMoKSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgd2F0Y2ggb2YgdGhpcy53YXRjaHMpIHtcclxuICAgICAgICAgICAgcmVzdWx0W3dhdGNoLnRhcmdldF0gPSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAkZ2V0KGluc3RhbmNlLCB3YXRjaC5mdW5jTmFtZSksXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB3YXRjaC5kZWVwLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvbXBvbmVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cztcclxuICAgIH1cclxuICAgIFxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgQnVpbGRXYXRjaEluZm8ge1xyXG4gICAgICAgIC8qKiB3YXRjaCDnmoTlr7nosaEgKi9cclxuICAgICAgICB0YXJnZXQ6IHN0cmluZztcclxuICAgICAgICAvKiog5piv5ZCm5rex5bqm55uR6KeGICovXHJcbiAgICAgICAgZGVlcDogYm9vbGVhbjtcclxuICAgICAgICAvKiog5omn6KGM55qE5Ye95pWw5ZCNICovXHJcbiAgICAgICAgZnVuY05hbWU6IHN0cmluZztcclxuICAgIH1cclxuICAgIGludGVyZmFjZSBCdWlsZENvbXB1dGVJbmZvIHtcclxuICAgICAgICAvKiogY29tcHV0ZWQg5a2X5q615ZCNICovXHJcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIGNvbXB1dGVkIOWHveaVsCAqL1xyXG4gICAgICAgIGZ1bmM6IEZ1bmN0aW9uO1xyXG4gICAgfVxyXG4gICAgaW50ZXJmYWNlIEJ1aWxkUHJvcEluZm8ge1xyXG4gICAgICAgIC8qKiDlj4LmlbDnsbvlnosgKi9cclxuICAgICAgICB0eXBlOiBhbnk7XHJcbiAgICAgICAgLyoqIOWPguaVsOm7mOiupOWAvCAqL1xyXG4gICAgICAgIGRlZmF1bHQ6IGFueTtcclxuICAgICAgICAvKiog5piv5ZCm5b+F5aGrICovXHJcbiAgICAgICAgcmVxdWlyZWQ6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBpbnRlcmZhY2UgQnVpbGRJbmZvPFQ+IHtcclxuICAgICAgICAvKiogdHlwZXNjcmlwdCDnmoTnsbvlnosgKi9cclxuICAgICAgICBjbGF6ejogYW55O1xyXG4gICAgICAgIC8qKiDnsbvlnovnmoTlkI3np7AgKi9cclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIHZ1ZSDnmoTlrZfmrrUgKi9cclxuICAgICAgICBmaWVsZE5hbWVzOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgICAgIC8qKiB2dWUg55qE5pa55rOVICovXHJcbiAgICAgICAgbWV0aG9kTmFtZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICAgICAgLyoqIHZ1ZSDnmoTorqHnrpflsZ7mgKcgKi9cclxuICAgICAgICBjb21wdXRlczogQXJyYXk8QnVpbGRDb21wdXRlSW5mbz47XHJcbiAgICAgICAgLyoqIHZ1ZSDnmoTkuIrnuqflhaXlj4IgKi9cclxuICAgICAgICBwcm9wTWFwOiBNYXA8c3RyaW5nLCBCdWlsZFByb3BJbmZvPjtcclxuICAgICAgICAvKiogdnVlIOeahCBkb20g57uT5p6EICovXHJcbiAgICAgICAgdGVtcGxhdGU6IHN0cmluZztcclxuICAgICAgICAvKiogdnVlIOeahCB3YXRjaCDkuovku7YgKi9cclxuICAgICAgICB3YXRjaHM6IEFycmF5PEJ1aWxkV2F0Y2hJbmZvPjtcclxuICAgICAgICAvKiogbW91bnRlZCDnmoTmlrnms5XlkI0gKi9cclxuICAgICAgICBtb3VudGVkTmFtZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKiB2dWUg6KaB5rOo5YaM55qE57uE5Lu2ICovXHJcbiAgICAgICAgY29tcG9uZW50czogYW55O1xyXG4gICAgICAgIC8qKiDojrflj5bnsbvlnovnmoTlrp7kvosgKi9cclxuICAgICAgICBnZXRJbnN0YW5jZSgpOiBBYnN0cmFjdENvbXBvbmVudDxUPjtcclxuICAgICAgICAvKiog6I635Y+WIHZ1ZSDnmoTlrZfmrrXkv6Hmga8gKi9cclxuICAgICAgICBnZXRGaWVsZHMoKTogRnVuY3Rpb247XHJcbiAgICAgICAgLyoqIOiOt+WPliB2dWUg55qE5pa55rOVICovXHJcbiAgICAgICAgZ2V0TWV0aG9kcygpOiBhbnk7XHJcbiAgICAgICAgLyoqIOiOt+WPliB2dWUg55qE6K6h566X5bGe5oCnICovXHJcbiAgICAgICAgZ2V0Q29tcHV0ZWRzKCk6IGFueTtcclxuICAgICAgICAvKiog6K6+572uIHZ1ZSDnmoTkuIrnuqflhaXlj4IgKi9cclxuICAgICAgICBzZXRQcm9wKGZpZWxkTmFtZTogc3RyaW5nLCBkZWZpbmU6IEJ1aWxkUHJvcEluZm8pOiB2b2lkO1xyXG4gICAgICAgIC8qKiDojrflj5YgdnVlIOeahOS4iue6p+WFpeWPgiAqL1xyXG4gICAgICAgIGdldFByb3BzKCk6IGFueTtcclxuICAgICAgICAvKiog6I635Y+WIHZ1ZSDnmoTmjILovb3lkI7kuovku7YgKi9cclxuICAgICAgICBnZXRNb3VudGVkKCk6IEZ1bmN0aW9uO1xyXG4gICAgICAgIC8qKiDojrflj5YgdnVlIOeahOebkeinhuS6i+S7tiAqL1xyXG4gICAgICAgIGdldFdhdGNocygpOiBhbnk7XHJcbiAgICAgICAgLyoqIOiOt+WPliB2dWUg55qEIGRvbSDnu5PmnoQgKi9cclxuICAgICAgICBnZXRUZW1wbGF0ZSgpOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOiOt+WPliB2dWUg6KaB5rOo5YaM55qE57uE5Lu2ICovXHJcbiAgICAgICAgZ2V0Q29tcG9uZW50cygpOiBhbnk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIE1ldGFEYXRhOiBhbnk7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5NZXRhRGF0YSA9IE1ldGFEYXRhO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWV0YURhdGE7IiwiaW1wb3J0IENvbXBvbmVudFR5cGUgZnJvbSBcIi4vQ29tcG9uZW50VHlwZVwiO1xyXG5pbXBvcnQgTWV0YURhdGEgZnJvbSBcIi4vTWV0YURhdGFcIjtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDms6jlhozlmaggKi9cclxuICAgIGNvbnN0ICRyZWdpc3RyeTogUmVnaXN0cnk7XHJcbiAgICAvKiog5rOo5YaM5ZmoICovXHJcbiAgICBpbnRlcmZhY2UgUmVnaXN0cnkge1xyXG4gICAgICAgIC8qKiDojrflj5bkuIDkuKrnu4Tku7YgKi9cclxuICAgICAgICBnZXRDb21wb25lbnQ8VD4oKTogTWV0YURhdGE8VD47XHJcbiAgICAgICAgLyoqIOagueaNruWQjeensOiOt+WPluS4gOS4que7hOS7tiAqL1xyXG4gICAgICAgIGdldENvbXBvbmVudDxUPih0eXBlOiBzdHJpbmcpOiBNZXRhRGF0YTxUPjtcclxuICAgICAgICAvKiog5p6E5bu65LiA5Liq57uE5Lu2ICovXHJcbiAgICAgICAgYnVpbGRDb21wb25lbnQ8VD4odHlwZTogc3RyaW5nKTogVnVlO1xyXG4gICAgICAgIC8qKiDmnoTlu7rkuIDkuKrnu4Tku7YgKi9cclxuICAgICAgICBidWlsZEFuZFJlZ2lzdDxUPih0eXBlOiBzdHJpbmcpOiBWdWU7XHJcbiAgICB9XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAkcmVnaXN0cnk6IFJlZ2lzdHJ5O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiog5Li05pe25a+56LGhICovXHJcbmxldCB0bXA6IE1ldGFEYXRhPGFueT4gPSBudWxsO1xyXG5cclxuLyoqIE1hcDznu4Tku7bnsbvlnossIOe7hOS7tuWvueixoT4gKi9cclxuY29uc3QgbWFwOiBNYXA8Q29tcG9uZW50VHlwZSwgTWV0YURhdGE8YW55Pj4gPSBuZXcgTWFwKCk7IFxyXG5cclxud2luZG93LiRyZWdpc3RyeSA9IHt9IGFzIGFueTtcclxuXHJcbiRyZWdpc3RyeS5nZXRDb21wb25lbnQgPSBmdW5jdGlvbih0eXBlPzogQ29tcG9uZW50VHlwZSkge1xyXG4gICAgaWYgKHR5cGUgJiYgdG1wKSB7XHJcbiAgICAgICAgbWFwLnNldCh0eXBlLCB0bXApO1xyXG4gICAgICAgIHRtcCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIG1hcC5nZXQodHlwZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodG1wKSB7XHJcbiAgICAgICAgcmV0dXJuIHRtcDtcclxuICAgIH1cclxuICAgIHRtcCA9IG5ldyBNZXRhRGF0YTxhbnk+KCk7XHJcbiAgICByZXR1cm4gdG1wO1xyXG59XHJcblxyXG4kcmVnaXN0cnkuYnVpbGRDb21wb25lbnQgPSBmdW5jdGlvbih0eXBlOiBDb21wb25lbnRUeXBlKTogVnVlIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gbWFwLmdldCh0eXBlKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGF0YTogaW5zdGFuY2UuZ2V0RmllbGRzKCksXHJcbiAgICAgICAgbW91bnRlZDogaW5zdGFuY2UuZ2V0TW91bnRlZCgpLFxyXG4gICAgICAgIHRlbXBsYXRlOiBpbnN0YW5jZS5nZXRUZW1wbGF0ZSgpLFxyXG4gICAgICAgIG1ldGhvZHM6IGluc3RhbmNlLmdldE1ldGhvZHMoKSxcclxuICAgICAgICBjb21wdXRlZDogaW5zdGFuY2UuZ2V0Q29tcHV0ZWRzKCksXHJcbiAgICAgICAgcHJvcHM6IGluc3RhbmNlLmdldFByb3BzKCksXHJcbiAgICAgICAgd2F0Y2g6IGluc3RhbmNlLmdldFdhdGNocygpLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IGluc3RhbmNlLmdldENvbXBvbmVudHMoKSxcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0ID0gZnVuY3Rpb24odHlwZTogQ29tcG9uZW50VHlwZSk6IFZ1ZSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IG1hcC5nZXQodHlwZSk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSAkcmVnaXN0cnkuYnVpbGRDb21wb25lbnQodHlwZSk7XHJcbiAgICByZXR1cm4gd2luZG93LnJlZ2lzdFZ1ZShpbnN0YW5jZS5uYW1lLCBjb21wb25lbnQpO1xyXG59XHJcblxyXG5leHBvcnQge307IiwiY2xhc3MgTGFuZ0l0ZW0ge1xyXG4gICAgZW46IHN0cmluZzsgemg6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKGVuOiBzdHJpbmcsIHpoOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmVuID0gZW47XHJcbiAgICAgICAgdGhpcy56aCA9IHpoO1xyXG4gICAgfVxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBMYW5nSXRlbTogYW55O1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuTGFuZ0l0ZW0gPSBMYW5nSXRlbTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExhbmdJdGVtOyIsImVudW0gUnNhQ29uc3Qge1xyXG4gICAgZmxhZ19zdGFydCA9ICckRElOR0xKLUVOQ09ERS1TVEFSVCQnLFxyXG4gICAgZmxhZ19lbmQgPSAnJERJTkdMSi1FTkNPREUtRU5EJCcsXHJcbiAgICBmbGFnX3NwbGl0ID0gJyRESU5HTEotU1BMSVQtRkxBRyQnLFxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBSc2FDb25zdDogYW55O1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuUnNhQ29uc3QgPSBSc2FDb25zdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJzYUNvbnN0OyIsImNsYXNzIFJpZ2h0TWVudSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIGV2ZW50OiBGdW5jdGlvbjtcclxuICAgIGlzRGlzcGxheTogRnVuY3Rpb247XHJcbiAgICBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBldmVudCA9IGZ1bmN0aW9uKGRhdGE6IGFueSwgZWxlbWVudDogSFRNTEVsZW1lbnQpIHt9LCBpc0Rpc3BsYXkgPSBmdW5jdGlvbihkYXRhOiBhbnksIGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7IHJldHVybiB0cnVlIH0pIHtcclxuICAgICAgICB0aGlzLmlkID0gd2luZG93LnV1aWQoJ3JpZ2h0LWNsaWNrLWl0ZW0nKTtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xyXG4gICAgICAgIHRoaXMuaXNEaXNwbGF5ID0gaXNEaXNwbGF5O1xyXG4gICAgfVxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBSaWdodE1lbnU6IGFueTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LlJpZ2h0TWVudSA9IFJpZ2h0TWVudTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpZ2h0TWVudTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ5LiA5Liq5a2X5q61ICovXHJcbiAgICBmdW5jdGlvbiBGaWVsZCh0YXJnZXQ6IERlZmF1bHRDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgLyoqIOWumuS5ieS4gOS4quWtl+autSAqL1xyXG4gICAgICAgIEZpZWxkKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5GaWVsZCA9IGZ1bmN0aW9uKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLmZpZWxkTmFtZXMucHVzaChwcm9wZXJ0eUtleSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7fTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ5LiA5Liq5pa55rOVICovXHJcbiAgICBmdW5jdGlvbiBNZXRob2QodGFyZ2V0OiBEZWZhdWx0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiB2b2lkO1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgLyoqIOWumuS5ieS4gOS4quWtl+autSAqL1xyXG4gICAgICAgIE1ldGhvZCh0YXJnZXQ6IERlZmF1bHRDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcik6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5NZXRob2QgPSBmdW5jdGlvbih0YXJnZXQ6IERlZmF1bHRDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xyXG4gICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLm1ldGhvZE5hbWVzLnB1c2gocHJvcGVydHlLZXkpO1xyXG59XHJcblxyXG5leHBvcnQge307IiwiZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOWumuS5ieS4iue6p+S8oOS4i+eahOWFpeWPgiAqL1xyXG4gICAgZnVuY3Rpb24gUHJvcCh0eXBlOiBhbnksIGRlZjogYW55KTogRnVuY3Rpb247XHJcbiAgICBmdW5jdGlvbiBQcm9wKHR5cGU6IGFueSwgZGVmOiBhbnksIHJlcXVpcmVkOiBib29sZWFuKTogRnVuY3Rpb247XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog5a6a5LmJ5LiK57qn5Lyg5LiL55qE5YWl5Y+CICovXHJcbiAgICAgICAgUHJvcCh0eXBlOiBhbnksIGRlZjogYW55KTogRnVuY3Rpb247XHJcbiAgICAgICAgUHJvcCh0eXBlOiBhbnksIGRlZjogYW55LCByZXF1aXJlZDogYm9vbGVhbik6IEZ1bmN0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuUHJvcCA9IGZ1bmN0aW9uKHR5cGU6IGFueSwgZGVmOiBhbnksIHJlcXVpcmVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBEZWZhdWx0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLnByb3BNYXAuc2V0KHByb3BlcnR5S2V5LCB7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGRlZixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge307IiwiZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOWumuS5iSBWdWUg55qEIERPTSDnu5PmnoQgKi9cclxuICAgIGZ1bmN0aW9uIFRlbXBsYXRlKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog5a6a5LmJIFZ1ZSDnmoQgRE9NIOe7k+aehCAqL1xyXG4gICAgICAgIFRlbXBsYXRlKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5UZW1wbGF0ZSA9IGZ1bmN0aW9uKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xyXG4gICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLnRlbXBsYXRlID0gcHJvcGVydHlLZXk7XHJcbn1cclxuXHJcbmV4cG9ydCB7fTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ5Yqg6L295ZCO5LqL5Lu2ICovXHJcbiAgICBmdW5jdGlvbiBNb3VudGVkKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKTogdm9pZDtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKiDlrprkuYnliqDovb3lkI7kuovku7YgKi9cclxuICAgICAgICBNb3VudGVkKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93Lk1vdW50ZWQgPSBmdW5jdGlvbih0YXJnZXQ6IERlZmF1bHRDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xyXG4gICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLm1vdW50ZWROYW1lID0gcHJvcGVydHlLZXk7XHJcbn1cclxuXHJcbmV4cG9ydCB7fTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ6K6h566X5bGe5oCnICovXHJcbiAgICBmdW5jdGlvbiBDb21wdXRlKGZ1bmM6IChzZWxmOiBhbnkpID0+IHt9KTogRnVuY3Rpb247XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog5a6a5LmJ6K6h566X5bGe5oCnICovXHJcbiAgICAgICAgQ29tcHV0ZShmdW5jOiAoc2VsZjogYW55KSA9PiB7fSk6IEZ1bmN0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuQ29tcHV0ZSA9IGZ1bmN0aW9uKGZ1bmM6IChzZWxmOiBhbnkpID0+IHt9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBEZWZhdWx0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgJHJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLmNvbXB1dGVzLnB1c2goe1xyXG4gICAgICAgICAgICBmaWVsZE5hbWU6IHByb3BlcnR5S2V5LFxyXG4gICAgICAgICAgICBmdW5jOiBmdW5jXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7fTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ5a2Q57uE5Lu2ICovXHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnQoY29tcG9uZW50czogYW55KTogRnVuY3Rpb247XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICAvKiog5a6a5LmJ5a2Q57uE5Lu2ICovXHJcbiAgICAgICAgQ29tcG9uZW50KGNvbXBvbmVudHM6IGFueSk6IEZ1bmN0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuQ29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50czogYW55KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogRGVmYXVsdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xyXG4gICAgICAgICRyZWdpc3RyeS5nZXRDb21wb25lbnQoKS5jb21wb25lbnRzID0gY29tcG9uZW50cztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHt9OyIsImRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDlrprkuYnkuIDkuKrnm5Hop4bku7vliqEgKi9cclxuICAgIGZ1bmN0aW9uIFdhdGNoKGZpZWxkOiBzdHJpbmcpOiBGdW5jdGlvbjtcclxuICAgIGZ1bmN0aW9uIFdhdGNoKGZpZWxkOiBzdHJpbmcsIGRlZXA6IGJvb2xlYW4pOiBGdW5jdGlvbjtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKiDlrprkuYnkuIDkuKrnm5Hop4bku7vliqEgKi9cclxuICAgICAgICBXYXRjaChmaWVsZDogc3RyaW5nKTogRnVuY3Rpb247XHJcbiAgICAgICAgV2F0Y2goZmllbGQ6IHN0cmluZywgZGVlcDogYm9vbGVhbik6IEZ1bmN0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuV2F0Y2ggPSBmdW5jdGlvbihmaWVsZDogc3RyaW5nLCBkZWVwOiBib29sZWFuID0gdHJ1ZSk6IEZ1bmN0aW9uIHtcclxuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IERlZmF1bHRDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcclxuICAgICAgICAkcmVnaXN0cnkuZ2V0Q29tcG9uZW50KCkud2F0Y2hzLnB1c2goe1xyXG4gICAgICAgICAgICB0YXJnZXQ6IGZpZWxkLFxyXG4gICAgICAgICAgICBkZWVwOiBkZWVwLFxyXG4gICAgICAgICAgICBmdW5jTmFtZTogcHJvcGVydHlLZXksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7fTsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a6a5LmJ5LiA5LiqIFZ1ZSDnu4Tku7YgKi9cclxuICAgIGZ1bmN0aW9uIFNlcnZpY2UoY29tcG9uZW50Q2xhc3M6IGFueSwgdHlwZTogc3RyaW5nKTogRnVuY3Rpb247XHJcbiAgICBmdW5jdGlvbiBTZXJ2aWNlKGNvbXBvbmVudENsYXNzOiBhbnksIHR5cGU6IHN0cmluZywgaVByb3A6IGJvb2xlYW4pOiBGdW5jdGlvbjtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKiDlrprkuYnkuIDkuKogVnVlIOe7hOS7tiAqL1xyXG4gICAgICAgIFNlcnZpY2UoY29tcG9uZW50Q2xhc3M6IGFueSwgdHlwZTogc3RyaW5nKTogRnVuY3Rpb247XHJcbiAgICAgICAgU2VydmljZShjb21wb25lbnRDbGFzczogYW55LCB0eXBlOiBzdHJpbmcsIGlQcm9wOiBib29sZWFuKTogRnVuY3Rpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5TZXJ2aWNlID0gZnVuY3Rpb24oY29tcG9uZW50Q2xhc3M6IGFueSwgdHlwZTogc3RyaW5nLCBpUHJvcD86IGJvb2xlYW4pOiBDbGFzc0RlY29yYXRvciB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gJHJlZ2lzdHJ5LmdldENvbXBvbmVudCh0eXBlKTtcclxuICAgICAgICBjb21wb25lbnQuY2xhenogPSBjb21wb25lbnRDbGFzcztcclxuICAgICAgICBjb21wb25lbnQubmFtZSA9IHR5cGU7XHJcbiAgICAgICAgY29tcG9uZW50LnNldFByb3AoJ2lQcm9wcycsIHtcclxuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7fSxcclxuICAgICAgICAgICAgcmVxdWlyZWQ6ICEhaVByb3AsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHt9OyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKEJ1dHRvblgsIENvbXBvbmVudFR5cGUuQnV0dG9uWCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uWCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PEJ1dHRvblByb3BzPiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHRlbXBsYXRlOiBzdHJpbmcgPSBgPCEtLSDmjInpkq4gLS0+XHJcbiAgICA8ZGl2IDpjbGFzcz1cImdldENsYXNzKClcIiA6aWQ9XCJ2aWRcIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCIgQGNsaWNrPVwiJHNpbmdsZUNsaWNrXCI+XHJcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRDbGFzcygpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdkaW5nbGotdi1idG4nOiB0cnVlLCBcclxuICAgICAgICAgICAgJ2Rpbmdsai12LWN0bCc6IHRydWUsXHJcbiAgICAgICAgICAgICdwcmltYXJ5JzogdGhpcy4kdHlwZSA9PSAncHJpbWFyeScsXHJcbiAgICAgICAgICAgICdjYW5jZWwnOiB0aGlzLiR0eXBlID09ICdjYW5jZWwnLFxyXG4gICAgICAgICAgICAnd2Fybic6IHRoaXMuJHR5cGUgPT0gJ3dhcm4nLFxyXG4gICAgICAgICAgICAnZXJyb3InOiB0aGlzLiR0eXBlID09ICdlcnJvcicsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICctLWhlaWdodCc6IHRoaXMuJHNpemUuZXF1YWxzSWdub3JlQ2FzZSgnc21hbGwnKSA/ICcyNHB4JyA6ICh0aGlzLiRzaXplLmVxdWFsc0lnbm9yZUNhc2UoJ25vcm1hbCcpID8gJzI4cHgnIDogJzMycHgnKSxcclxuICAgICAgICAgICAgJy0tbWFyZ2luLXRiJzogdGhpcy4kc2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzFweCcgOiAodGhpcy4kc2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICcycHgnIDogJzNweCcpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IEJ1dHRvblgpID0+IHNlbGYuaVByb3BzLnNpbmdsZUNsaWNrIHx8ICgoZTogTW91c2VFdmVudCkgPT4ge30pKVxyXG4gICAgcHVibGljICRzaW5nbGVDbGljazogRnVuY3Rpb247XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IEJ1dHRvblgpID0+IHNlbGYuaVByb3BzLnNpemUgfHwgJ25vcm1hbCcpXHJcbiAgICBwdWJsaWMgJHNpemU6IEJ1dHRvblNpemU7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IEJ1dHRvblgpID0+IHNlbGYuaVByb3BzLnR5cGUgfHwgJ3ByaW1hcnknKVxyXG4gICAgcHVibGljICR0eXBlOiBCdXR0b25UeXBlO1xyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOaMiemSruWkp+WwjyAqL1xyXG4gICAgdHlwZSBCdXR0b25TaXplID0gJ3NtYWxsJyB8ICdub3JtYWwnIHwgJ2JpZyc7XHJcbiAgICAvKiog5oyJ6ZKu57G75Z6LICovXHJcbiAgICB0eXBlIEJ1dHRvblR5cGUgPSAncHJpbWFyeScgfCAnd2FybicgfCAnZXJyb3InIHwgJ2NhbmNlbCc7XHJcbiAgICAvKiog5oyJ6ZKu5Y+C5pWwICovXHJcbiAgICBpbnRlcmZhY2UgQnV0dG9uUHJvcHMge1xyXG4gICAgICAgIC8qKiDlpKflsI8gKi9cclxuICAgICAgICBzaXplPzogQnV0dG9uU2l6ZTtcclxuICAgICAgICAvKiog57G75Z6LICovXHJcbiAgICAgICAgdHlwZT86IEJ1dHRvblR5cGU7XHJcbiAgICAgICAgLyoqIOeCueWHu+S6i+S7tiAqL1xyXG4gICAgICAgIHNpbmdsZUNsaWNrPyhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLkJ1dHRvblgpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKElucHV0WCwgQ29tcG9uZW50VHlwZS5JbnB1dFgsIHRydWUpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0WCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PElucHV0UHJvcHM+IHtcclxuXHJcbiAgICBATW91bnRlZCBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICAkcXVldWUub24oJ2Rpbmdsai12LWlucHV0LXRleHQ6OmNsZWFyJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgICAgICRxdWV1ZS5vbignZGluZ2xqLXYtaW5wdXQtdGV4dDo6Zm9jdXMnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5ieUlkKHRoaXMudmlkKS5jaGlsZHJlblswXS5mb2N1cygpO1xyXG4gICAgICAgIH0sIHRoaXMudmlkKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pUHJvcHMuZGVmYXVsdFZhbHVlIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIEBUZW1wbGF0ZSBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8IS0tIOaWh+acrOi+k+WFpeahhiAtLT5cclxuICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jdGwgZGluZ2xqLXYtaW5wdXQgdGV4dFwiIDpjYXB0aW9uPVwiJGNhcHRpb25cIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCIgOmlkPVwidmlkXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOnBsYWNlaG9sZGVyPVwiJHBsYWNlaG9sZGVyXCIgdi1tb2RlbD1cInZhbHVlXCIgQGtleXVwLmVudGVyPVwic2V0VmFsdWUodmFsdWUsICdlbnRlcicpXCIgQGlucHV0PVwic2V0VmFsdWUodmFsdWUsICdpbnB1dCcpXCIgQGJsdXI9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2JsdXInKVwiIEBjaGFuZ2U9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2NoYW5nZScpXCIvPlxyXG4gICAgICAgIDwhLS0g5paH5pys6L6T5YWl5qGG5riF56m65oyJ6ZKuIC0tPlxyXG4gICAgICAgIDxpbWcgOnNyYz1cImdldEltZygnZGVsZXRlLnBuZycpXCIgY2xhc3M9XCJjbGVhblwiIEBjbGljaz1cInNldFZhbHVlKCcnLCAnY2hhbmdlJylcIi8+XHJcbiAgICA8L2Rpdj5gXHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2YWx1ZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICctLWhlaWdodCc6IHRoaXMuJHNpemUgPT0gJ3NtYWxsJyA/ICcyNHB4JyA6ICh0aGlzLiRzaXplID09ICdub3JtYWwnID8gJzI4cHgnIDogJzMycHgnKSxcclxuICAgICAgICAgICAgJy0td2lkdGgnOiB0aGlzLiRzaXplID09ICdzbWFsbCcgPyAnMTgwcHgnIDogKHRoaXMuJHNpemUgPT0gJ25vcm1hbCcgPyAnMjAwcHgnIDogJzIyMHB4JyksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2QgcHVibGljIHNldFZhbHVlKHZhbHVlOiBzdHJpbmcsIGV2ZW50TmFtZTogSW5wdXRFdmVudFR5cGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgcGFyYW06IEVtaXRBcmdzPHN0cmluZz4gPSB7XHJcbiAgICAgICAgICAgIHZpZDogdGhpcy52aWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaVByb3BzLm9uQ2hhbmdlICYmIHRoaXMuaVByb3BzLm9uQ2hhbmdlKHBhcmFtKTtcclxuICAgICAgICBpZiAoZXZlbnROYW1lID09ICdibHVyJykge1xyXG4gICAgICAgICAgICB0aGlzLmlQcm9wcy5vbkJsdXIgJiYgdGhpcy5pUHJvcHMub25CbHVyKHBhcmFtKTtcclxuICAgICAgICAgICAgdGhpcy5pUHJvcHMub25PdmVyICYmIHRoaXMuaVByb3BzLm9uT3ZlcihwYXJhbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gJ2VudGVyJykge1xyXG4gICAgICAgICAgICB0aGlzLmlQcm9wcy5vbkVudGVyICYmIHRoaXMuaVByb3BzLm9uRW50ZXIocGFyYW0pO1xyXG4gICAgICAgICAgICB0aGlzLmlQcm9wcy5vbk92ZXIgJiYgdGhpcy5pUHJvcHMub25PdmVyKHBhcmFtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOe7hOS7tuWkp+Wwjywg6buY6K6k5Li6IG5vcm1hbCAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IElucHV0WCk6IElucHV0U2l6ZSA9PiBzZWxmLmlQcm9wcy5zaXplIHx8ICdub3JtYWwnKVxyXG4gICAgcHVibGljICRzaXplOiBDb21ib1NpemU7XHJcblxyXG4gICAgLyoqIOaOp+S7tuWQjeensCAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IElucHV0WCkgPT4gc2VsZi5pUHJvcHMuY2FwdGlvbiB8fCAnJylcclxuICAgIHB1YmxpYyAkY2FwdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIC8qKiDljaDkvY3nrKYgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBJbnB1dFgpID0+IHNlbGYuaVByb3BzLnBsYWNlaG9sZGVyIHx8IGDor7fovpPlhaUkeyBzZWxmLiRjYXB0aW9uIH1gKVxyXG4gICAgcHVibGljICRwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOaWh+acrOahhuS6i+S7tiAqL1xyXG4gICAgdHlwZSBJbnB1dEV2ZW50VHlwZSA9ICdpbnB1dCcgfCAnY2hhbmdlJyB8ICdibHVyJyB8ICdlbnRlcic7XHJcbiAgICAvKiog5paH5pys5qGG5aSn5bCPICovXHJcbiAgICB0eXBlIElucHV0U2l6ZSA9ICdzbWFsbCcgfCAnbm9ybWFsJyB8ICdiaWcnO1xyXG4gICAgLyoqIOaWh+acrOahhuWPguaVsCAqL1xyXG4gICAgaW50ZXJmYWNlIElucHV0UHJvcHMge1xyXG4gICAgICAgIC8qKiDmjqfku7blkI3np7AgKi9cclxuICAgICAgICBjYXB0aW9uOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOWkp+WwjyAqL1xyXG4gICAgICAgIHNpemU/OiBJbnB1dFNpemU7XHJcbiAgICAgICAgLyoqIOm7mOiupOWAvCAqL1xyXG4gICAgICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZztcclxuICAgICAgICAvKiog5Y2g5L2N5paH5pysICovXHJcbiAgICAgICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOi+k+WFpeWujOaIkOS6i+S7tiAqL1xyXG4gICAgICAgIG9uT3Zlcj8oZGF0YTogRW1pdEFyZ3M8c3RyaW5nPik6IHZvaWQ7XHJcbiAgICAgICAgLyoqIOi+k+WFpeS6i+S7tiAqL1xyXG4gICAgICAgIG9uQ2hhbmdlPyhkYXRhOiBFbWl0QXJnczxzdHJpbmc+KTogdm9pZDtcclxuICAgICAgICAvKiog5Zue6L2m5LqL5Lu2ICovXHJcbiAgICAgICAgb25FbnRlcj8oZGF0YTogRW1pdEFyZ3M8c3RyaW5nPik6IHZvaWQ7XHJcbiAgICAgICAgLyoqIOWkseWOu+eEpueCueS6i+S7tiAqL1xyXG4gICAgICAgIG9uQmx1cj8oZGF0YTogRW1pdEFyZ3M8c3RyaW5nPik6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLklucHV0WCk7XHJcbiIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKFN3aXRjaFgsIENvbXBvbmVudFR5cGUuU3dpdGNoWCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3dpdGNoWCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PFN3aXRjaFByb3BzPiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDwhLS0g5byA5YWzIC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXN3aXRjaFwiIEBjbGljaz1cIm9uY2xpY2tlZFwiIDpzdHlsZT1cImdldFN0eWxlKClcIj5cclxuICAgICAgICA8IS0tIOW8gOWFs+aMiemSruWJjeeahOaWh+WtlyAtLT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtc3dpdGNoLXByZVwiPlxyXG4gICAgICAgICAgICB7eyBwcmVUZXh0IH19XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPCEtLSDlvIDlhbPmjInpkq4gLS0+XHJcbiAgICAgICAgPGRpdiA6Y2xhc3M9XCJnZXRDbGFzcygpXCI+XHJcbiAgICAgICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPCEtLSDlvIDlhbPmjInpkq7lkI7nmoTmloflrZcgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXN3aXRjaC1wb3N0XCI+XHJcbiAgICAgICAgICAgIHt7IHBvc3RUZXh0IH19XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIEBGaWVsZCBwdWJsaWMgYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnLS13aWR0aCc6IHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnc21hbGwnKSA/ICczMHB4JyA6ICh0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ25vcm1hbCcpID8gJzQwcHgnIDogJzQwcHgnKSxcclxuICAgICAgICAgICAgJy0taGVpZ2h0JzogdGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzI0cHgnIDogKHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnbm9ybWFsJykgPyAnMjhweCcgOiAnMzJweCcpLFxyXG4gICAgICAgICAgICAnLS1wYWRkaW5nLXRiJzogdGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzVweCcgOiAodGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICczcHgnIDogJzhweCcpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0Q2xhc3MoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnZGluZ2xqLXYtc3dpdGNoLWJ0bic6IHRydWUsXHJcbiAgICAgICAgICAgICdhY3RpdmUnOiB0aGlzLmFjdGl2ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgb25jbGlja2VkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gIXRoaXMuYWN0aXZlO1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wb3N0VGV4dCkge1xyXG4gICAgICAgICAgICAgICAgYOW3suWIh+aNouiHszogJHsgdGhpcy5wb3N0VGV4dCB9YC5pbmZvKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcmVUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBg5bey5YiH5o2i6IezOiAkeyB0aGlzLnByZVRleHQgfWAuaW5mbygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaVByb3BzLm9uQ2hhbmdlICYmIHRoaXMuaVByb3BzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuYWN0aXZlLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFN3aXRjaFgpOiBTd2l0Y2hTaXplID0+IHNlbGYuaVByb3BzLnNpemUgfHwgJ25vcm1hbCcpXHJcbiAgICBwdWJsaWMgeFNpemU6IFN3aXRjaFNpemU7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFN3aXRjaFgpID0+IHNlbGYuaVByb3BzLnByZVR4dCB8fCAnJylcclxuICAgIHB1YmxpYyBwcmVUZXh0OiBzdHJpbmc7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFN3aXRjaFgpID0+IHNlbGYuaVByb3BzLnBvc3RUeHQgfHwgJycpXHJcbiAgICBwdWJsaWMgcG9zdFRleHQ6IHN0cmluZztcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDmjqfku7blpKflsI8gKi9cclxuICAgIHR5cGUgU3dpdGNoU2l6ZSA9ICdzbWFsbCcgfCAnbm9ybWFsJyB8ICdiaWcnO1xyXG4gICAgLyoqIOW8gOWFs+ebuOWFs+WPguaVsCAqL1xyXG4gICAgaW50ZXJmYWNlIFN3aXRjaFByb3BzIHtcclxuICAgICAgICAvKiog5aSn5bCPICovXHJcbiAgICAgICAgc2l6ZT86IFN3aXRjaFNpemU7XHJcbiAgICAgICAgLyoqIOW8gOWFs+WJjemdoueahOaWh+WtlyAqL1xyXG4gICAgICAgIHByZVR4dD86IHN0cmluZztcclxuICAgICAgICAvKiog5byA5YWz5ZCO55qE5paH5a2XICovXHJcbiAgICAgICAgcG9zdFR4dD86IHN0cmluZztcclxuICAgICAgICAvKiog5YC85Y+Y5YyW5LqL5Lu2ICovXHJcbiAgICAgICAgb25DaGFuZ2U/KGFyZ3M6IEVtaXRBcmdzPEJvb2xlYW4+KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuU3dpdGNoWCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoQ29tYm9YLCBDb21wb25lbnRUeXBlLkNvbWJvWCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYm9YPFQ+IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8Q29tYm9Qcm9wczxUPj4ge1xyXG5cclxuICAgIEBUZW1wbGF0ZSBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8IS0tIOS4i+aLieahhiAtLT5cclxuICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jdGwgZGluZ2xqLXYtaW5wdXQgY29tYm9cIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCIgOmNhcHRpb249XCIkY2FwdGlvblwiIDppZD1cInZpZFwiPlxyXG4gICAgICAgIDxpbnB1dCA6cGxhY2Vob2xkZXI9XCIkcGxhY2Vob2xkZXJcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cIiRsaXN0LmluY2x1ZGVzSWdub3JlQ2FzZSh2YWx1ZSkgPyAkZ2V0VmFsdWUodmFsdWUpIDogJydcIi8+XHJcbiAgICAgICAgPCEtLSDkuIvmi4nmoYbmuIXnqbrmjInpkq4gLS0+XHJcbiAgICAgICAgPGltZyA6c3JjPVwiZ2V0SW1nKCdkZWxldGUucG5nJylcIiBjbGFzcz1cImNsZWFuXCIgQGNsaWNrPVwic2V0VmFsdWUoJycpXCIvPlxyXG4gICAgICAgIDwhLS0g5LiL5ouJ5qGG6YCJ6aG56ZuG5ZCIIC0tPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jb21iby1zZWxlY3Rpb25zXCI+XHJcbiAgICAgICAgICAgIDwhLS0g5LiL5ouJ5qGG6YCJ6aG5IC0tPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtY29tYm8tc2VsZWN0aW9uXCIgdi1mb3I9XCJpdGVtIGluICRsaXN0XCIgQGNsaWNrPVwic2V0VmFsdWUoaXRlbSlcIj5cclxuICAgICAgICAgICAgICAgIHt7ICRnZXRMYWJlbChpdGVtKSB9fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2YWx1ZTogVCA9IG51bGw7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IFQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuJG9uQ2hhbmdlKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnLS1oZWlnaHQnOiB0aGlzLiRzaXplID09ICdzbWFsbCcgPyAnMjRweCcgOiAodGhpcy4kc2l6ZSA9PSAnbm9ybWFsJyA/ICcyOHB4JyA6ICczMnB4JyksXHJcbiAgICAgICAgICAgICctLXdpZHRoJzogdGhpcy4kc2l6ZSA9PSAnc21hbGwnID8gJzE4MHB4JyA6ICh0aGlzLiRzaXplID09ICdub3JtYWwnID8gJzIwMHB4JyA6ICcyMjBweCcpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWAvOWPmOWMluS6i+S7tiAqL1xyXG4gICAgQE1ldGhvZCBwdWJsaWMgJG9uQ2hhbmdlKGRhdGE6IFQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pUHJvcHMub25DaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5pUHJvcHMub25DaGFuZ2Uoe1xyXG4gICAgICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiDopoHmmL7npLrnmoTmlbDmja4sIOm7mOiupOaXoOaVsOaNriAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IENvbWJvWDxUPikgPT4gc2VsZi5pUHJvcHMubGlzdCB8fCBbXSlcclxuICAgIHB1YmxpYyAkbGlzdDogQXJyYXk8VD47XHJcblxyXG4gICAgLyoqIOe7hOS7tuWkp+Wwjywg6buY6K6k5Li6IG5vcm1hbCAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IENvbWJvWDxUPikgPT4gc2VsZi5pUHJvcHMuc2l6ZSB8fCAnbm9ybWFsJylcclxuICAgIHB1YmxpYyAkc2l6ZTogQ29tYm9TaXplO1xyXG5cclxuICAgIC8qKiDmjqfku7blkI3np7AgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBDb21ib1g8VD4pID0+IHNlbGYuaVByb3BzLmNhcHRpb24gfHwgJycpXHJcbiAgICBwdWJsaWMgJGNhcHRpb246IHN0cmluZztcclxuXHJcbiAgICAvKiog5Y2g5L2N56ymICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogQ29tYm9YPFQ+KSA9PiBzZWxmLmlQcm9wcy5wbGFjZWhvbGRlciB8fCBg6K+36YCJ5oupJHsgc2VsZi4kY2FwdGlvbiB9YClcclxuICAgIHB1YmxpYyAkcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcbiAgICAvKiog6I635Y+W5YWD57Sg6KaB5pi+56S655qE5YaF5a65LCDpu5jorqTmmL7npLrlhYPntKDmnKzouqsgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBDb21ib1g8VD4pID0+IHNlbGYuaVByb3BzLmdldExhYmVsIHx8ICgoaXRlbTogVCkgPT4gaXRlbSkpXHJcbiAgICBwdWJsaWMgJGdldExhYmVsOiBGdW5jdGlvbjtcclxuXHJcbiAgICAvKiog6I635Y+W5YWD57Sg55qE5YC8LCDpu5jorqTlgLzlsLHmmK/lhYPntKDmnKzouqsgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBDb21ib1g8VD4pID0+IHNlbGYuaVByb3BzLmdldFZhbHVlIHx8ICgoaXRlbTogVCkgPT4gaXRlbSkpXHJcbiAgICBwdWJsaWMgJGdldFZhbHVlOiBGdW5jdGlvbjtcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDkuIvmi4nmoYblpKflsI8gKi9cclxuICAgIHR5cGUgQ29tYm9TaXplID0gQnV0dG9uU2l6ZTtcclxuICAgIC8qKiDkuIvmi4nmoYblj4LmlbAgKi9cclxuICAgIGludGVyZmFjZSBDb21ib1Byb3BzPFQ+IHtcclxuICAgICAgICAvKiog6YCJ5oup5YiX6KGoICovXHJcbiAgICAgICAgbGlzdDogQXJyYXk8VD47XHJcbiAgICAgICAgLyoqIOe7hOS7tuWQjeensCAqL1xyXG4gICAgICAgIGNhcHRpb246IHN0cmluZztcclxuICAgICAgICAvKiog5Y2g5L2N5paH5a2XICovXHJcbiAgICAgICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOWkp+WwjyAqL1xyXG4gICAgICAgIHNpemU/OiBDb21ib1NpemU7XHJcbiAgICAgICAgLyoqIOWAvOWPmOWMluS6i+S7tiAqL1xyXG4gICAgICAgIG9uQ2hhbmdlPyhkYXRhOiBFbWl0QXJnczxhbnk+KTogdm9pZDtcclxuICAgICAgICAvKiog6I635Y+W5pi+56S655qE5paH5a2XICovXHJcbiAgICAgICAgZ2V0TGFiZWw/KGl0ZW06IFQpOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOiOt+WPluWunumZheWAvCAqL1xyXG4gICAgICAgIGdldFZhbHVlPyhpdGVtOiBUKTogYW55O1xyXG4gICAgfVxyXG59XHJcblxyXG4kcmVnaXN0cnkuYnVpbGRBbmRSZWdpc3QoQ29tcG9uZW50VHlwZS5Db21ib1gpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKE5hdmlnYXRvclgsIENvbXBvbmVudFR5cGUuTmF2aWdhdG9yWCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdG9yWDxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PE5hdmlnYXRvclByb3BzPFQ+PiB7XHJcblxyXG4gICAgQE1vdW50ZWQgcHVibGljIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5kZWZhdWx0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5saXN0WzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDwhLS0g5a+86Iiq6I+c5Y2VIC0tPlxyXG4gICAgPGRpdiBpZD1cImRpbmdsai12LW5hdmlnYXRvclwiPlxyXG4gICAgICAgIDwhLS0g5q+P5LiA5Liq6I+c5Y2VIC0tPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1uYXZpZ2F0b3ItaXRlbVwiIHYtZm9yPVwiaXRlbSBpbiBsaXN0XCIgQGNsaWNrPVwic2V0VmFsdWUoaXRlbSlcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB2YWxpZEl0ZW0gPT0gaXRlbSB9XCI+XHJcbiAgICAgICAgICAgIHt7IGdldENhcHRpb24oaXRlbSkgfX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2YWx1ZTogVCA9IG51bGw7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IFQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuaVByb3BzLm9uQ2hhbmdlICYmIHRoaXMuaVByb3BzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgICAgIHZpZDogdGhpcy52aWQsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IE5hdmlnYXRvclg8VD4pID0+IHtcclxuICAgICAgICBpZiAoc2VsZi52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5saXN0LmluY2x1ZGVzSWdub3JlQ2FzZShzZWxmLnZhbHVlKSAmJiBzZWxmLmxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRWYWx1ZShzZWxmLmxpc3RbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbHVlKHNlbGYubGlzdFswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxmLnZhbHVlO1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyB2YWxpZEl0ZW06IFQ7XHJcblxyXG4gICAgLyoqIOimgeaYvuekuueahOaVsOaNriAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IE5hdmlnYXRvclg8VD4pID0+IHNlbGYuaVByb3BzLmxpc3QgfHwgW10pXHJcbiAgICBwdWJsaWMgbGlzdDogQXJyYXk8VD47XHJcblxyXG4gICAgLyoqIOm7mOiupOimgeaYvuekuueahOebruW9lSAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IE5hdmlnYXRvclg8VD4pID0+IHNlbGYuaVByb3BzLmRlZmF1bHQgfHwgKHNlbGYubGlzdC5sZW5ndGggPiAwID8gc2VsZi5saXN0WzBdIDogbnVsbCkpXHJcbiAgICBwdWJsaWMgZGVmYXVsdDogVDtcclxuXHJcbiAgICAvKiog6I635Y+W5YWD57Sg6KaB5pi+56S655qE5YaF5a65LCDpu5jorqTmmL7npLrlhYPntKDmnKzouqsgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBOYXZpZ2F0b3JYPFQ+KSA9PiBzZWxmLmlQcm9wcy5nZXRDYXB0aW9uIHx8ICgoaXRlbTogVCkgPT4gaXRlbSkpXHJcbiAgICBwdWJsaWMgZ2V0Q2FwdGlvbjogRnVuY3Rpb247XHJcblxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog5a+86Iiq56qX5qC855u45YWz5Y+C5pWwICovXHJcbiAgICBpbnRlcmZhY2UgTmF2aWdhdG9yUHJvcHM8VD4ge1xyXG4gICAgICAgIC8qKiDlr7zoiKrnm67lvZXmlbDnu4QgKi9cclxuICAgICAgICBsaXN0OiBBcnJheTxUPjtcclxuICAgICAgICAvKiog6buY6K6k55uu5b2VICovXHJcbiAgICAgICAgZGVmYXVsdD86IFQ7XHJcbiAgICAgICAgLyoqIOiOt+WPluimgeaYvuekuueahOebruW9leaWh+acrCAqL1xyXG4gICAgICAgIGdldENhcHRpb24/KGl0ZW06IFQpOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOebruW9leWIh+aNouS6i+S7tiAqL1xyXG4gICAgICAgIG9uQ2hhbmdlPyhhcmc6IEVtaXRBcmdzPFQ+KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuTmF2aWdhdG9yWCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoU2Nyb2xsZXJZLCBDb21wb25lbnRUeXBlLlNjcm9sbGVyWSwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsZXJZIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8U2Nyb2xsWVByb3BzPiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDwhLS0g57q15ZCR5rua5Yqo6KeG5Zu+IC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cImRpbmdsai12LWNvbHVtbi1zY3JvbGxcIiA6aWQ9XCJ2aWRcIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCI+XHJcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICAvKiog5oC75Liq5pWwICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogU2Nyb2xsZXJZKSA9PiBzZWxmLmlQcm9wcy5zaXplIHx8IDApXHJcbiAgICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xyXG5cclxuICAgIC8qKiDlvZPliY3kuIvmoIcgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBTY3JvbGxlclkpID0+IHNlbGYuaVByb3BzLmluZGV4IHx8IDApXHJcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcclxuICAgIFxyXG4gICAgQE1ldGhvZCBnZXRTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICd0b3AnOiBgLSR7ICh0aGlzLmluZGV4ID49IDAgJiYgdGhpcy5pbmRleCA8IHRoaXMuc2l6ZSkgPyB0aGlzLmluZGV4IDogMCB9MDAlYCxcclxuICAgICAgICAgICAgJ2hlaWdodCc6IGAkeyB0aGlzLnNpemUgfTAwJWBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDnurXlkJHmu5rliqjpnaLmnb/nm7jlhbPlj4LmlbAgKi9cclxuICAgIHR5cGUgU2Nyb2xsWVByb3BzID0gU2Nyb2xsWFByb3BzXHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLlNjcm9sbGVyWSk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoTmF2aWdhdG9yVmlldywgQ29tcG9uZW50VHlwZS5OYXZpZ2F0b3JWaWV3LCB0cnVlKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0b3JWaWV3PFQ+IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8TmF2aWdhdG9yVmlld1Byb3BzPFQ+PiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi1uYXZpZ2F0b3Itdmlld1wiPlxyXG4gICAgICAgIDxpLW5hdmlnYXRvciBzdHlsZT1cIm1hcmdpbi1yaWdodDogMTBweFwiIDppLXByb3BzPVwibmF2aWdhdG9yUHJvcHNcIj48L2ktbmF2aWdhdG9yPlxyXG4gICAgICAgIDwhLS0g5Y+z5L6n5Li76KaB5YaF5a655pi+56S66YOo5YiGIC0tPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1uYXZpZ2F0b3ItcmlnaHRcIj5cclxuICAgICAgICAgICAgPCEtLSDkuLvopoHlhoXlrrnliY3nmoTmj5Lmp70gLS0+XHJcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJiZWZvcmVcIj48L3Nsb3Q+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1uYXZpZ2F0b3ItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgPGktc2Nyb2xsZXIteSA6aS1wcm9wcz1cInNjcm9sbHlQcm9wc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjb250ZW50XCIgOmFjdGl2ZT1cImFjdGl2ZVwiPjwvc2xvdD5cclxuICAgICAgICAgICAgICAgIDwvaS1zY3JvbGxlci15PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPCEtLSDkuLvopoHlhoXlrrnlkI7nmoTmj5Lmp70gLS0+XHJcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhZnRlclwiPjwvc2xvdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyBhY3RpdmU6IFQgPSBudWxsO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBOYXZpZ2F0b3JWaWV3PFQ+KTogTmF2aWdhdG9yUHJvcHM8VD4gPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IHNlbGYubGlzdCxcclxuICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKGl0ZW06IEVtaXRBcmdzPFQ+KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmFjdGl2ZSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlQcm9wcy5vbkNoYW5nZSAmJiBzZWxmLmlQcm9wcy5vbkNoYW5nZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlkOiBzZWxmLnZpZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgbmF2aWdhdG9yUHJvcHM6IE5hdmlnYXRvclByb3BzPFQ+O1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBOYXZpZ2F0b3JWaWV3PFQ+KTogU2Nyb2xsWVByb3BzID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzaXplOiBzZWxmLmxpc3QubGVuZ3RoLFxyXG4gICAgICAgICAgICBpbmRleDogc2VsZi5saXN0LmluZGV4T2Yoc2VsZi5hY3RpdmUpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBzY3JvbGx5UHJvcHM6IFNjcm9sbFlQcm9wcztcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogTmF2aWdhdG9yVmlldzxUPikgPT4gc2VsZi5pUHJvcHMubGlzdCB8fCBbXSlcclxuICAgIHB1YmxpYyBsaXN0OiBBcnJheTxUPjtcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIHR5cGUgTmF2aWdhdG9yVmlld1Byb3BzPFQ+ID0gTmF2aWdhdG9yUHJvcHM8VD47XHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLk5hdmlnYXRvclZpZXcpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKFRhYlBhbmVsWCwgQ29tcG9uZW50VHlwZS5UYWJQYW5lbFgsIHRydWUpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYlBhbmVsWDxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PFRhYlBhbmVsUHJvcHM8VD4+IHtcclxuXHJcbiAgICBATW91bnRlZCBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmxpc3QpICYmIHRoaXMubGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tlZCh0aGlzLmxpc3RbMF0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiog5LiL5LiA5LiqIFRhYiDpobXkuovku7YgKi9cclxuICAgICAgICAkcXVldWUub24oJ3RhYi1wYW5lbDpuZXh0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gKHRoaXMuaW5kZXggKyAxICsgdGhpcy5saXN0Lmxlbmd0aCkgJSB0aGlzLmxpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLmNsaWNrZWQodGhpcy5saXN0W25leHRdLCBuZXh0KTtcclxuICAgICAgICB9LCB0aGlzLnZpZCk7XHJcbiAgICAgICAgJHF1ZXVlLm9uKCd0YWItcGFuZWw6dG8nLCAodG86IFQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5saXN0LmZpbHRlcihpdGVtID0+IEpTT04uc3RyaW5naWZ5KGl0ZW0pID09IEpTT04uc3RyaW5naWZ5KHRvKSk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja2VkKHJlc3VsdFswXSwgdGhpcy5saXN0LmluZGV4T2YocmVzdWx0WzBdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzLnZpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDwhLS0gVGFiIC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYi1wYW5lbFwiIDppZD1cInZpZFwiIHYtaWY9XCJsaXN0Lmxlbmd0aCA+IDBcIj5cclxuICAgICAgICA8IS0tIFRhYiDpobXmoIfpopggLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYnBhbmVsLXRpdGxlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi10YWItZmxvYXRcIj48L2Rpdj48IS0tIFRhYiDpobXmoIfpopjnmoTmta7liqjkuIvliJLnur8gLS0+XHJcbiAgICAgICAgICAgIDxkaXYgdi1mb3I9XCIoaXRlbSwgaWR4KSBpbiBsaXN0XCIgOmNsYXNzPVwiZ2V0Q2xhc3MoaXRlbSlcIiA6aWQ9XCJnZXRJZChpZHgpXCIgQGNsaWNrPVwiY2xpY2tlZChpdGVtLCBpZHgpXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBnZXRMYWJlbChpdGVtKSB9fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8IS0tIFRhYiDpobXlhbfkvZPlhoXlrrkgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYnBhbmVsLXZpZXdcIj5cclxuICAgICAgICAgICAgPHNsb3QgY2xhc3M9XCJ0YWItcGFuZWwtY29udGVudFwiPnt7IGluZGV4IH19PC9zbG90PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IHYtZWxzZT5cclxuICAgICAgICA8aDE+5pyq5om+5Yiw5pWw5o2uPC9oMT5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2YWx1ZTogVCA9IG51bGw7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0Q2xhc3MoaXRlbTogVCk6IG9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2Rpbmdsai12LXRhYnBhbmVsLWl0ZW0nOiB0cnVlLFxyXG4gICAgICAgICAgICAnYWN0aXZlJzogSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZSkgPT0gSlNPTi5zdHJpbmdpZnkoaXRlbSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRJZChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYCR7IHRoaXMudmlkIH0tJHsgaW5kZXggfWA7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgY2xpY2tlZChpdGVtOiBULCBpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT0gdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWUgPSBpdGVtO1xyXG4gICAgICAgIHRoaXMuaVByb3BzLm9uQ2hhbmdlICYmIHRoaXMuaVByb3BzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICAgICAgdmFsdWU6IGl0ZW0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICB3aW5kb3cudGltZXIoKHNlbGY6IFRhYlBhbmVsWDxUPikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB3aW5kb3cuc2VsZWN0b3IoYCMkeyBzZWxmLnZpZCB9IC5kaW5nbGotdi10YWItZmxvYXRgKTtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBmbG9hdEVsZW1lbnQgPSByZXN1bHRbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gd2luZG93LmJ5SWQoc2VsZi5nZXRJZChpbmRleCkpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZmxvYXRFbGVtZW50LnN0eWxlLndpZHRoID0gYCR7IGVsZW1lbnQub2Zmc2V0V2lkdGggfXB4YDtcclxuICAgICAgICAgICAgICAgIGZsb2F0RWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7IGVsZW1lbnQub2Zmc2V0TGVmdCB9cHhgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRhYlBhbmVsWDxUPikgPT4ge1xyXG4gICAgICAgIGlmICghc2VsZi5saXN0LmluY2x1ZGVzSWdub3JlQ2FzZShzZWxmLnZhbHVlKSAmJiBzZWxmLmxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBzZWxmLmNsaWNrZWQoc2VsZi5saXN0WzBdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGYubGlzdC5pbmRleE9mKHNlbGYudmFsdWUpO1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJQYW5lbFg8VD4pID0+IHtcclxuICAgICAgICBpZiAoIXNlbGYuaVByb3BzLmxpc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RpbGxFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2Ygc2VsZi5pUHJvcHMubGlzdCkge1xyXG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoc2VsZi52YWx1ZSkgPT0gSlNPTi5zdHJpbmdpZnkoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIHN0aWxsRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdGlsbEV4aXN0KSB7XHJcbiAgICAgICAgICAgIHNlbGYuY2xpY2tlZChzZWxmLmlQcm9wcy5saXN0WzBdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuaVByb3BzLmxpc3Q7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGxpc3Q6IEFycmF5PFQ+O1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJQYW5lbFg8VD4pID0+IHNlbGYuaVByb3BzLmdldExhYmVsIHx8ICgoaXRlbTogVCkgPT4gaXRlbSkpXHJcbiAgICBwdWJsaWMgZ2V0TGFiZWw6IEZ1bmN0aW9uO1xyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIFRhYiDpobXpnaLmnb/nm7jlhbPlj4LmlbAgKi9cclxuICAgIGludGVyZmFjZSBUYWJQYW5lbFByb3BzPFQ+IHtcclxuICAgICAgICAvKiog6KaB5pi+56S655qEIHRhYiDpobXmlbDnu4QgKi9cclxuICAgICAgICBsaXN0OiBBcnJheTxUPjtcclxuICAgICAgICAvKiog5piv5ZCm5piv5b2T5YmN55WM6Z2iICovXHJcbiAgICAgICAgaXNBY3RpdmU/OiBib29sZWFuO1xyXG4gICAgICAgIC8qKiDojrflj5bopoHmmL7npLrnmoQgdGFiIOmhteWQjeensCAqL1xyXG4gICAgICAgIGdldExhYmVsPyhpdGVtOiBUKTogc3RyaW5nO1xyXG4gICAgICAgIC8qKiBUYWIg6aG15YiH5o2i5LqL5Lu2ICovXHJcbiAgICAgICAgb25DaGFuZ2U/KGFyZ3M6IEVtaXRBcmdzPFQ+KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuVGFiUGFuZWxYKTsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlXCI7XHJcblxyXG5AU2VydmljZShTY3JvbGxlclgsIENvbXBvbmVudFR5cGUuU2Nyb2xsZXJYLCB0cnVlKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxlclggZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudDxTY3JvbGxYUHJvcHM+IHtcclxuXHJcbiAgICBAVGVtcGxhdGUgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPCEtLSDmqKrlkJHmu5rliqjop4blm74gLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcm93LXNjcm9sbFwiIDppZD1cInZpZFwiIDpzdHlsZT1cImdldFN0eWxlKClcIj5cclxuICAgICAgICA8c2xvdD48L3Nsb3Q+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIC8qKiDmgLvkuKrmlbAgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBTY3JvbGxlclgpID0+IHNlbGYuaVByb3BzLnNpemUgfHwgMClcclxuICAgIHB1YmxpYyBzaXplOiBudW1iZXI7XHJcblxyXG4gICAgLyoqIOW9k+WJjeS4i+aghyAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IFNjcm9sbGVyWCkgPT4gc2VsZi5pUHJvcHMuaW5kZXggfHwgMClcclxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG4gICAgXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdsZWZ0JzogYC0keyAodGhpcy5pbmRleCA+PSAwICYmIHRoaXMuaW5kZXggPCB0aGlzLnNpemUpID8gdGhpcy5pbmRleCA6IDAgfTAwJWAsXHJcbiAgICAgICAgICAgICd3aWR0aCc6IGAkeyB0aGlzLnNpemUgfTAwJWBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDmqKrlkJHmu5rliqjpnaLmnb/nm7jlhbPlj4LmlbAgKi9cclxuICAgIGludGVyZmFjZSBTY3JvbGxYUHJvcHMge1xyXG4gICAgICAgIC8qKiDlvZPliY3kuIvmoIcgKi9cclxuICAgICAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDmgLvkuKrmlbAgKi9cclxuICAgICAgICBzaXplOiBudW1iZXJcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuU2Nyb2xsZXJYKTsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlXCI7XHJcblxyXG5AU2VydmljZShUYWJWaWV3LCBDb21wb25lbnRUeXBlLlRhYlZpZXcsIHRydWUpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYlZpZXc8VD4gZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudDxUYWJWaWV3UHJvcHM8VD4+IHtcclxuXHJcbiAgICBATW91bnRlZCBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICAkcXVldWUub24oJ3RhYi12aWV3Om5leHQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICRxdWV1ZS5zZW5kTXNnKCd0YWItcGFuZWw6bmV4dCcsIG51bGwsIHRoaXMudGFiUGFuZWxJZCk7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgICAgIC8qKiDmjIflrpogVGFiIOmhteS6i+S7tiAqL1xyXG4gICAgICAgICRxdWV1ZS5vbigndGFiLXZpZXc6dG8nLCAodG86IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAkcXVldWUuc2VuZE1zZygndGFiLXBhbmVsOnRvJywgdG8sIHRoaXMudGFiUGFuZWxJZCk7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBUZW1wbGF0ZSBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8IS0tIFRhYiDpobXop4blm74gLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdGFiLXBhbmVsLXZpZXdcIiA6aWQ9XCJ2aWRcIj5cclxuICAgICAgICA8aS10YWItcGFuZWwgOmktcHJvcHM9XCJ0YWJQYW5lbFByb3BzXCIgQG1vdW50ZWQ9XCJ0YWJQYW5lbExvYWRlZFwiPlxyXG4gICAgICAgICAgICA8aS1zY3JvbGxlci14IDppLXByb3BzPVwic2Nyb2xseFByb3BzXCI+XHJcbiAgICAgICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XHJcbiAgICAgICAgICAgIDwvaS1zY3JvbGxlci14PlxyXG4gICAgICAgIDwvaS10YWItcGFuZWw+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJWaWV3PFQ+KTogU2Nyb2xsWFByb3BzID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzaXplOiBzZWxmLmxpc3QubGVuZ3RoLFxyXG4gICAgICAgICAgICBpbmRleDogc2VsZi5pbmRleCxcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIHNjcm9sbHhQcm9wczogU2Nyb2xsWFByb3BzO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJWaWV3PFQ+KTogVGFiUGFuZWxQcm9wczxUPiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGlzdDogc2VsZi5saXN0LFxyXG4gICAgICAgICAgICBnZXRMYWJlbDogc2VsZi5pUHJvcHMuZ2V0TGFiZWwsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihhcmdzOiBFbWl0QXJnczxUPik6IHZvaWQge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudmFsdWUgIT0gYXJncy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudmFsdWUgPSBhcmdzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaVByb3BzLm9uQ2hhbmdlICYmIHNlbGYuaVByb3BzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkOiBzZWxmLnZpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFyZ3MudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgdGFiUGFuZWxQcm9wczogVGFiUGFuZWxQcm9wczxUPjtcclxuXHJcbiAgICBARmllbGQgcHVibGljIHZhbHVlOiBUID0gbnVsbDtcclxuXHJcbiAgICBARmllbGQgcHVibGljIHRhYlBhbmVsSWQ6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBNZXRob2QgcHVibGljIHRhYlBhbmVsTG9hZGVkKHBhcmFtOiBFbWl0QXJnczxhbnk+KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50YWJQYW5lbElkID0gcGFyYW0udmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRhYlZpZXc8VD4pID0+IHNlbGYubGlzdC5pbmRleE9mSWdub3JlQ2FzZShzZWxmLnZhbHVlKSlcclxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJWaWV3PFQ+KSA9PiBzZWxmLmlQcm9wcy5saXN0IHx8IFtdKVxyXG4gICAgcHVibGljIGxpc3Q6IEFycmF5PFQ+O1xyXG4gICAgXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiBUYWIg6aG16KeG5Zu+55u45YWz5Y+C5pWwICovXHJcbiAgICB0eXBlIFRhYlZpZXdQcm9wczxUPiA9IFRhYlBhbmVsUHJvcHM8VD5cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuVGFiVmlldyk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIFJpZ2h0TWVudSB9IGZyb20gXCJjb3JlXCI7XHJcblxyXG5AU2VydmljZShUYWJsZVgsIENvbXBvbmVudFR5cGUuVGFibGVYLCB0cnVlKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZVg8VD4gZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudDxUYWJsZVByb3BzPFQsIGFueT4+IHtcclxuXHJcbiAgICBATW91bnRlZCBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICB3aW5kb3cudGltZXIoKCk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHdpbmRvdy5ieUlkKHNlbGYudmlkKTtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaVByb3BzLmxvYWRlZCAmJiBzZWxmLmlQcm9wcy5sb2FkZWQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZDogc2VsZi52aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRxdWV1ZS5vbignZXhwb3J0LXRvLWV4Y2VsJywgZnVuY3Rpb24oKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHNlbGYuZXhwb3J0VG9FeGNlbCgpO1xyXG4gICAgICAgIH0sIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGUgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPCEtLSDooajmoLwgLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdGFibGVcIiA6aWQ9XCJ2aWRcIiA6ZGF0YS10aXRsZT1cInRpdGxlXCI+XHJcbiAgICAgICAgPCEtLSDooajlpLQgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRoZWFkIGRpbmdsai12LXRyXCI+XHJcbiAgICAgICAgICAgIDwhLS0g5aSN6YCJ5qGGIC0tPlxyXG4gICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKCcnKVwiIHYtaWY9XCJzZWxlY3RhYmxlXCIgY2xhc3M9XCJkaW5nbGotdi10YWJsZS1zZWxlY3RcIiBAY2xpY2s9XCJkb0NoZWNrQWxsXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOmNoZWNrZWQ9XCJjaGVja0FsbFwiLz7pgInmi6lcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwhLS0g5bqP5Y+3IC0tPlxyXG4gICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKCcnKVwiIHYtaWY9XCJzZXF1ZW5jZU51bVwiIGNsYXNzPVwiZGluZ2xqLXYtdGFibGUtc2VxdWVuY2VcIj5cclxuICAgICAgICAgICAgICAgIOW6j+WPt1xyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPCEtLSDooajlpLTnmoTmr4/kuIDliJcgLS0+XHJcbiAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiZ2V0U3R5bGUoZ2V0Q29sdW1uS2V5KGNvbHVtbikpXCIgOmRhdGEta2V5PVwiZ2V0Q29sdW1uS2V5KGNvbHVtbilcIiB2LWZvcj1cImNvbHVtbiBpbiBjb2x1bW5zXCIgOmNsYXNzPVwiZ2V0Q2xhc3MoY29sdW1uKVwiIDppZD1cInZpZCArICctQ29sLScgKyBnZXRDb2x1bW5LZXkoY29sdW1uKVwiPlxyXG4gICAgICAgICAgICAgICAge3sgZ2V0Q29sdW1uTGFiZWwoY29sdW1uKSB9fVxyXG4gICAgICAgICAgICAgICAgPCEtLSDooajlpLTnmoTlj7PplK7oj5zljZUgLS0+XHJcbiAgICAgICAgICAgICAgICA8aS1jb250ZXh0LW1lbnUgOmktcHJvcHM9XCJnZW5IZWFkUHJvcHMoY29sdW1uKVwiPjwvaS1jb250ZXh0LW1lbnU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwhLS0g6KGo5L2TIC0tPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi10Ym9keVwiIDppZD1cInZpZCArICctQm9keSdcIj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDwhLS0g6KGo5qC855qE5q+P5LiA6KGM5YaF5a65IC0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRyXCIgdi1mb3I9XCIobGluZSwgaWR4KSBpbiBsaXN0XCIgQGNsaWNrPVwiY2hlY2tPbmUobGluZSlcIiA6aWQ9XCJ2aWQgKyAnLScgKyBpZHhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIOWkjemAieahhiAtLT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKCcnKVwiIHYtaWY9XCJzZWxlY3RhYmxlXCIgY2xhc3M9XCJkaW5nbGotdi10YWJsZS1zZWxlY3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIDpjaGVja2VkPVwiY2hlY2tlZExpc3QuaW5jbHVkZXNJZ25vcmVDYXNlKGxpbmUpXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwhLS0g5bqP5Y+3IC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiZ2V0U3R5bGUoJycpXCIgdi1pZj1cInNlcXVlbmNlTnVtXCIgY2xhc3M9XCJkaW5nbGotdi10YWJsZS1zZXF1ZW5jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBpZHggKyAxIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPCEtLSDooajmoLzkuK3nmoTmr4/kuIDliJcgLS0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiA6c3R5bGU9XCJnZXRTdHlsZShnZXRDb2x1bW5LZXkoY29sdW1uKSlcIiA6Y2xhc3M9XCJnZXRDbGFzcyhjb2x1bW4pXCIgdi1mb3I9XCJjb2x1bW4gaW4gY29sdW1uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtYXV0by1oaWRkZW5cIiB2LWh0bWw9XCJnZXRDZWxsKGxpbmUsIGdldENvbHVtbktleShjb2x1bW4pKVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwhLS0g6KGo5qC85q+P5LiA6KGM55qE5Y+z6ZSu6I+c5Y2VIC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpLWNvbnRleHQtbWVudSA6aS1wcm9wcz1cImdlbkxpbmVQcm9wcyhsaW5lLCBpZHgpXCI+PC9pLWNvbnRleHQtbWVudT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPCEtLSDooajmoLznqbrnmb3lpITnmoTlj7PplK7oj5zljZUgLS0+XHJcbiAgICAgICAgICAgICAgICA8aS1jb250ZXh0LW1lbnUgOmktcHJvcHM9XCJnZW5Cb2R5UHJvcHMoKVwiPjwvaS1jb250ZXh0LW1lbnU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICAvKiog6KGo5qC86K6h566X55qE57yT5a2YICovXHJcbiAgICBARmllbGQgcHVibGljIGNhY2hlOiBhbnkgPSB7fTtcclxuXHJcbiAgICAvKiog5piv5ZCm5YWo6YCJ5omA5pyJ5YiXICovXHJcbiAgICBARmllbGQgcHVibGljIGNoZWNrQWxsOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOW3sumAieaLqeeahOWIl+mbhuWQiCAqL1xyXG4gICAgQEZpZWxkIHB1YmxpYyBjaGVja2VkTGlzdDogQXJyYXk8VD4gPSBbXTtcclxuXHJcbiAgICAvKiog5pyA5L2z5YiX5a6957yT5a2YICovXHJcbiAgICBARmllbGQgcHVibGljIGJlc3RXaWR0aENhY2hlOiBhbnkgPSBmYWxzZTtcclxuXHJcbiAgICAvKiog6I635Y+W5Y+z5Ye76KGo5qC85qCH6aKY5YiX5pe255qE5Y+z6ZSu6I+c5Y2V55u45YWz5Y+C5pWwICovXHJcbiAgICBATWV0aG9kIGdlbkhlYWRQcm9wcyhjb2x1bW46IFQpOiBDb250ZXh0TWVudVByb3BzPFRhYmxlSGVhZE1lbnU8VD4+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiaW5kSWQ6IGAkeyB0aGlzLnZpZCB9LUNvbC0keyB0aGlzLmdldENvbHVtbktleShjb2x1bW4pIH1gLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5LZXk6IHRoaXMuZ2V0Q29sdW1uS2V5KGNvbHVtbiksXHJcbiAgICAgICAgICAgICAgICBsaXN0OiB0aGlzLmxpc3QsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpc3Q6IHRoaXMudGl0bGVDb2x1bW5NZW51c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5Y+z5Ye76KGo5qC85p+Q5LiA6KGM5pe255qE5Y+z6ZSu6I+c5Y2V55u45YWz5Y+C5pWwICovXHJcbiAgICBATWV0aG9kIGdlbkxpbmVQcm9wcyhsaW5lOiBULCBpZHg6IG51bWJlcik6IENvbnRleHRNZW51UHJvcHM8VD4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJpbmRJZDogYCR7IHRoaXMudmlkIH0tJHsgaWR4IH1gLFxyXG4gICAgICAgICAgICBkYXRhOiBsaW5lLFxyXG4gICAgICAgICAgICBsaXN0OiB0aGlzLnJvd01lbnVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blj7Plh7vooajmoLznqbrnmb3lpITml7bnmoTlj7PplK7oj5zljZXnm7jlhbPlj4LmlbAgKi9cclxuICAgIEBNZXRob2QgZ2VuQm9keVByb3BzKCk6IENvbnRleHRNZW51UHJvcHM8QXJyYXk8VD4+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiaW5kSWQ6IGAkeyB0aGlzLnZpZCB9LUJvZHlgLFxyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmxpc3QsXHJcbiAgICAgICAgICAgIGxpc3Q6IHRoaXMuYm9keU1lbnVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDpgInkuK3kuIDooYzmiJblj5bmtojpgInkuK3kuIDooYwgKi9cclxuICAgIEBNZXRob2QgY2hlY2tPbmUobGluZTogVCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrZWRMaXN0LmluY2x1ZGVzKGxpbmUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZExpc3QucmVtb3ZlKGxpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQWxsID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkTGlzdC5wdXNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkTGlzdC5sZW5ndGggPT0gdGhpcy5saXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0FsbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluihqOagvOeahCBjbGFzcyDkv6Hmga8gKi9cclxuICAgIEBNZXRob2QgZ2V0Q2xhc3MoY29sdW1uOiBhbnkpOiBvYmplY3Qge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbktleSA9IHRoaXMuZ2V0Q29sdW1uS2V5KGNvbHVtbik7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVbY29sdW1uS2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtjb2x1bW5LZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZmxleCA9IHRoaXMuZmxleENvbHVtbnMuaW5jbHVkZXNJZ25vcmVDYXNlKGNvbHVtbktleSkgPyAnZGluZ2xqLXYtZmxleCcgOiAnZml4ZWQnO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge1xyXG4gICAgICAgICAgICBcImRpbmdsai12LWNlbGxcIjogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzdWx0W2NvbHVtbktleV0gPSB0cnVlO1xyXG4gICAgICAgIHJlc3VsdFtmbGV4XSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jYWNoZVtjb2x1bW5LZXldID0gcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluihqOagvOeahOagt+W8jyAqL1xyXG4gICAgQE1ldGhvZCBnZXRTdHlsZSh0ZXh0OiBzdHJpbmcpOiBvYmplY3Qge1xyXG4gICAgICAgIGxldCB3aWR0aDtcclxuICAgICAgICBpZiAodGV4dCA9PSAnJykge1xyXG4gICAgICAgICAgICB3aWR0aCA9IDgwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5nZXRCZXN0V2lkdGgoKVt0ZXh0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgd2lkdGg6IGAkeyB3aWR0aCB9cHhgLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6YCJ5Lit5omA5pyJ6KGM5oiW5Y+W5raI6YCJ5Lit5omA5pyJ6KGMICovXHJcbiAgICBATWV0aG9kIGRvQ2hlY2tBbGwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkTGlzdC5sZW5ndGggPSAwOyAvLyDnm7TmjqXmuIXnqbpcclxuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBbGwpIHsgLy8g5b2T5YmN5LiN5piv5YWo6YCJLCDooajnpLrmjqXkuIvmnaXopoHlhajpgIksIOWFqOmDqOWKoOWFpVxyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRMaXN0LnB1c2goLi4udGhpcy5saXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja0FsbCA9ICF0aGlzLmNoZWNrQWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bmnIDkvbPliJflrr0gKi9cclxuICAgIEBNZXRob2QgZ2V0QmVzdFdpZHRoKCk6IGFueSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYmVzdFdpZHRoQ2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmVzdFdpZHRoQ2FjaGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmVzdFdpZHRoQ2FjaGUgPSB7fTtcclxuICAgICAgICAvLyDkuIDliJfkuIDliJfliIbliKvorqHnrpflrr3luqZcclxuICAgICAgICBmb3IgKGxldCBjb2x1bW4gb2YgdGhpcy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIC8vIOiuoeeul+acrOWIl+eahOagh+mimOWuveW6plxyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5LZXkgPSB0aGlzLmdldENvbHVtbktleShjb2x1bW4pO1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5UaXRsZSA9IHRoaXMuZ2V0Q29sdW1uTGFiZWwoY29sdW1uKTtcclxuICAgICAgICAgICAgbGV0IHRpdGxlV2lkdGggPSB3aW5kb3cuY2FsY1R4dFdpZHRoKGAkeyBjb2x1bW5UaXRsZSB9YCk7XHJcbiAgICAgICAgICAgIGxldCB3aWR0aEFycmF5ID0gWyB0aXRsZVdpZHRoIF07XHJcbiAgICAgICAgICAgIC8vIOiuoeeul+acrOWIl+eahOavj+S4gOihjOWuveW6plxyXG4gICAgICAgICAgICB3aWR0aEFycmF5LnB1c2goXHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLmxpc3QubWFwKChlOiBUKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uQ29udGVudCA9IHRoaXMuZ2V0Q2VsbChlLCBjb2x1bW5LZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuY2FsY1R4dFdpZHRoKGNvbHVtbkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLm1heCguLi53aWR0aEFycmF5KTtcclxuICAgICAgICAgICAgdGhpcy5iZXN0V2lkdGhDYWNoZVtjb2x1bW5LZXldID0gbWF4V2lkdGggKyAyMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmVzdFdpZHRoQ2FjaGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWvvOWHuuWIsCBleGNlbCDnmoTpu5jorqTmlrnms5UgKi9cclxuICAgIEBNZXRob2QgZXhwb3J0VG9FeGNlbCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBfdGhpczogVGFibGVYPGFueT4gPSB0aGlzO1xyXG4gICAgICAgIHdpbmRvdy50aW1lcihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHdpbmRvdy5ieUlkKF90aGlzLnZpZCk7XHJcbiAgICAgICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgY2VsbCBvZiBlbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpbmdsai12LXRhYmxlLXNlbGVjdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2VsbC5pbm5lclRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyaW5nICs9ICdcXG4nO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIGVsZW1lbnQuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0uY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNlbGwgb2YgbGluZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmNsYXNzTGlzdC5jb250YWlucygnZGluZ2xqLXYtdGFibGUtc2VsZWN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBjZWxsLmlubmVyVGV4dDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0cmluZyArPSAnXFxuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdHJpbmcpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLnRpdGxlIHx8ICcnKVxyXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRhYmxlWDxUPikgPT4gc2VsZi5pUHJvcHMuZmxleENvbHVtbnMgfHwgW10pXHJcbiAgICBwdWJsaWMgZmxleENvbHVtbnM6IEFycmF5PHN0cmluZz47XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRhYmxlWDxUPikgPT4gc2VsZi5pUHJvcHMubGlzdCB8fCBbXSlcclxuICAgIHB1YmxpYyBsaXN0OiBBcnJheTxUPjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogVGFibGVYPFQ+KSA9PiBzZWxmLmlQcm9wcy5zZXF1ZW5jZU51bSB8fCB0cnVlKVxyXG4gICAgcHVibGljIHNlcXVlbmNlTnVtOiBib29sZWFuO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLnNlbGVjdGFibGUgfHwgdHJ1ZSlcclxuICAgIHB1YmxpYyBzZWxlY3RhYmxlOiBib29sZWFuO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLmNvbHVtbnMgfHwgW10pXHJcbiAgICBwdWJsaWMgY29sdW1uczogQXJyYXk8YW55PjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogVGFibGVYPFQ+KSA9PiBzZWxmLmlQcm9wcy5nZXRDb2x1bW5LZXkgfHwgKChjb2x1bW46IGFueSkgPT4gY29sdW1uKSlcclxuICAgIHB1YmxpYyBnZXRDb2x1bW5LZXk6IEZ1bmN0aW9uO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLmdldENvbHVtbkxhYmVsIHx8ICgoY29sdW1uOiBhbnkpID0+IGNvbHVtbikpXHJcbiAgICBwdWJsaWMgZ2V0Q29sdW1uTGFiZWw6IEZ1bmN0aW9uO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLmdldENlbGwgfHwgKChpdGVtOiBULCBjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgICAgIGxldCBjb2x1bW5LZXk6IHN0cmluZyA9IHNlbGYuaVByb3BzLmdldENvbHVtbktleShjb2x1bW4pO1xyXG4gICAgICAgIHJldHVybiAkZ2V0KGl0ZW0sIGNvbHVtbktleSk7XHJcbiAgICB9KSlcclxuICAgIHB1YmxpYyBnZXRDZWxsOiBGdW5jdGlvbjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogVGFibGVYPFQ+KSA9PiBzZWxmLmlQcm9wcy5yb3dNZW51cyB8fCBbXSlcclxuICAgIHB1YmxpYyByb3dNZW51czogQXJyYXk8UmlnaHRNZW51PjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogVGFibGVYPFQ+KSA9PiBzZWxmLmlQcm9wcy5ib2R5TWVudXMgfHwgW10pXHJcbiAgICBwdWJsaWMgYm9keU1lbnVzOiBBcnJheTxSaWdodE1lbnU+O1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUYWJsZVg8VD4pID0+IHNlbGYuaVByb3BzLnRpdGxlQ29sdW1uTWVudXMgfHwgW10pXHJcbiAgICBwdWJsaWMgdGl0bGVDb2x1bW5NZW51czogQXJyYXk8UmlnaHRNZW51PjtcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDooajmoLznm7jlhbPlj4LmlbAoVDog5q+P5Liq5YWD57SgL+avj+S4gOihjOeahOaVsOaNruexu+WeiywgQzog5YiX55qE5pWw5o2u57G75Z6LKSAqL1xyXG4gICAgaW50ZXJmYWNlIFRhYmxlUHJvcHM8VCwgQz4ge1xyXG4gICAgICAgIC8qKiDooajmoLzmlbDmja4o5q+P5Liq5pWw57uE5YWD57Sg5bCx5piv5LiA6KGMKSAqL1xyXG4gICAgICAgIGxpc3Q6IEFycmF5PFQ+O1xyXG4gICAgICAgIC8qKiDpnIDopoHmmL7npLrnmoTliJcgKi9cclxuICAgICAgICBjb2x1bW5zOiBBcnJheTxDPjtcclxuICAgICAgICAvKiog6KGo5qC85ZCN56ewKOS4jeaYvuekuuWcqOeVjOmdouS4iiwg5a+85Ye65pe25Lya55So5Yiw6K+l5ZCN56ewKSAqL1xyXG4gICAgICAgIHRpdGxlPzogc3RyaW5nO1xyXG4gICAgICAgIC8qKiDlvLnmgKfluIPlsYDnmoTliJcgKi9cclxuICAgICAgICBmbGV4Q29sdW1ucz86IEFycmF5PHN0cmluZz47XHJcbiAgICAgICAgLyoqIOaYr+WQpuaYvuekuuW6j+WPtyAqL1xyXG4gICAgICAgIHNlcXVlbmNlTnVtPzogYm9vbGVhbjtcclxuICAgICAgICAvKiog5piv5ZCm5pi+56S66YCJ5oup5YiXICovXHJcbiAgICAgICAgc2VsZWN0YWJsZT86IGJvb2xlYW47XHJcbiAgICAgICAgLyoqIOWPs+WHu+afkOS4gOihjOaXtueahOWPs+mUruiPnOWNlSAqL1xyXG4gICAgICAgIHJvd01lbnVzPzogQXJyYXk8UmlnaHRNZW51PjtcclxuICAgICAgICAvKiog5Y+z5Ye76KGo5qC856m655m95aSE5pe255qE5Y+z6ZSu6I+c5Y2VICovXHJcbiAgICAgICAgYm9keU1lbnVzPzogQXJyYXk8UmlnaHRNZW51PjtcclxuICAgICAgICAvKiog5Y+z5Ye76KGo5qC85qCH6aKY5YiX5pe255qE5Y+z6ZSu6I+c5Y2VICovXHJcbiAgICAgICAgdGl0bGVDb2x1bW5NZW51cz86IEFycmF5PFJpZ2h0TWVudT47XHJcbiAgICAgICAgLyoqIOiOt+WPluWIl+eahCBrZXkgKi9cclxuICAgICAgICBnZXRDb2x1bW5LZXk/KGNvbHVtbjogQyk6IHN0cmluZztcclxuICAgICAgICAvKiog6I635Y+W6KaB5pi+56S655qE5YiX5ZCNICovXHJcbiAgICAgICAgZ2V0Q29sdW1uTGFiZWw/KGNvbHVtbjogQyk6IHN0cmluZztcclxuICAgICAgICAvKiog6I635Y+W5Y2V5YWD5qC85YaF5a65ICovXHJcbiAgICAgICAgZ2V0Q2VsbD8oaXRlbTogVCwgY29sdW1uOiBDIHwgc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgICAgIC8qKiDooajmoLzliqDovb3lrozmiJDkuovku7YgKi9cclxuICAgICAgICBsb2FkZWQ/KGFyZ3M6IEVtaXRBcmdzPEhUTUxFbGVtZW50Pik6IHZvaWQ7XHJcbiAgICB9XHJcbiAgICAvKiog6KGo5qC85qCH6aKY5YiX55qE5Y+z6ZSu6I+c5Y2V6aG555uuICovXHJcbiAgICBpbnRlcmZhY2UgVGFibGVIZWFkTWVudTxUPiB7XHJcbiAgICAgICAgLyoqIOagh+mimOWIl+WQjSAqL1xyXG4gICAgICAgIGNvbHVtbktleTogc3RyaW5nO1xyXG4gICAgICAgIC8qKiDooajmoLzmlbDmja4gKi9cclxuICAgICAgICBsaXN0OiBBcnJheTxUPjtcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuVGFibGVYKTsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlXCI7XHJcblxyXG5AU2VydmljZShQcm9ncmVzc1gsIENvbXBvbmVudFR5cGUuUHJvZ3Jlc3NYLCB0cnVlKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc1ggZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudDxQcm9ncmVzc1Byb3BzPiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDwhLS0g6L+b5bqm5p2hIC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXByb2dyZXNzLWJhclwiIDppZD1cInZpZFwiPlxyXG4gICAgICAgIDwhLS0g5LiK5pa55paH5pysIC0tPlxyXG4gICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ2Rpbmdsai12LXByb2dyZXNzLWNhcHRpb24nOiB0cnVlLCAndG9wJzogdHJ1ZSwgJ3JpZ2h0JzogcG9zaXRpb24gPT0gJ1RvcFJpZ2h0JyB9XCIgdi1pZj1cIlsnVG9wTGVmdCcsICdUb3BSaWdodCddLmluY2x1ZGVzSWdub3JlQ2FzZShwb3NpdGlvbilcIj57eyBjYXB0aW9uIH19e3sgcGVyY2VudCB9fTwvc3Bhbj5cclxuICAgICAgICA8IS0tIOi/m+W6puadoeacrOS9kyAtLT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcHJvZ3Jlc3MtYm94XCIgOnN0eWxlPVwiZ2V0Q29udGFpbmVyU3R5bGUoKVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcHJvZ3Jlc3NcIiA6c3R5bGU9XCJnZXRQcm9ncmVzc1N0eWxlKClcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8IS0tIOS4i+aWueaWh+acrCAtLT5cclxuICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICdkaW5nbGotdi1wcm9ncmVzcy1jYXB0aW9uJzogdHJ1ZSwgJ2JvdHRvbSc6IHRydWUsICdyaWdodCc6IHBvc2l0aW9uID09ICdCb3R0b21SaWdodCcgfVwiIHYtaWY9XCJbJ0JvdHRvbUxlZnQnLCAnQm90dG9tUmlnaHQnXS5pbmNsdWRlc0lnbm9yZUNhc2UocG9zaXRpb24pXCI+e3sgY2FwdGlvbiB9fXt7IHBlcmNlbnQgfX08L3NwYW4+XHJcbiAgICA8L2Rpdj5gO1xyXG4gICAgXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRDb250YWluZXJTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICctLWJhci1oZWlnaHQnOiB0aGlzLmhlaWdodCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0UHJvZ3Jlc3NTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHdpbmRvdy50aW1lcigoc2VsZjogUHJvZ3Jlc3NYKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHdpbmRvdy5ieUlkKHNlbGYudmlkKTtcclxuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBib3ggPSBjb250YWluZXIuZmluZENoaWxkcmVuQnlDbGFzcygnZGluZ2xqLXYtcHJvZ3Jlc3MtYm94JylbMF07XHJcbiAgICAgICAgICAgIGJveC5jaGlsZHJlblswXS5zdHlsZS53aWR0aCA9IHNlbGYucGVyY2VudDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ3dpZHRoJzogJzAlJyxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmrmOW6piwg5Y2V5L2NOiBweCAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IFByb2dyZXNzWCkgPT4gKHNlbGYuaVByb3BzLmhlaWdodCB8fCA1KSArICdweCcpXHJcbiAgICBwdWJsaWMgaGVpZ2h0OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIOi/m+W6puadoeeahOi/m+W6pueZvuWIhuavlCAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IFByb2dyZXNzWCkgPT4gc2VsZi5pUHJvcHMucGVyY2VudCB8fCAnMTAwJScpXHJcbiAgICBwdWJsaWMgcGVyY2VudDogc3RyaW5nO1xyXG5cclxuICAgIC8qKiDkvY3nva4gKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBQcm9ncmVzc1gpOiBQcm9ncmVzc1R4dFBvc2l0aW9uID0+IHNlbGYuaVByb3BzLnR4dFBvc2l0aW9uIHx8ICdUb3BMZWZ0JylcclxuICAgIHB1YmxpYyBwb3NpdGlvbjogUHJvZ3Jlc3NUeHRQb3NpdGlvbjtcclxuXHJcbiAgICAvKiog5o6n5Lu25ZCN56ewICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogUHJvZ3Jlc3NYKSA9PiBzZWxmLmlQcm9wcy5jYXB0aW9uIHx8ICcnKVxyXG4gICAgcHVibGljIGNhcHRpb246IHN0cmluZztcclxuXHJcbn1cclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8qKiDov5vluqbmnaHmlofmnKzmmL7npLrkvY3nva4gKi9cclxuICAgIHR5cGUgUHJvZ3Jlc3NUeHRQb3NpdGlvbiA9ICdUb3BMZWZ0JyB8ICdUb3BSaWdodCcgfCAnQm90dG9tTGVmdCcgfCAnQm90dG9tUmlnaHQnO1xyXG4gICAgLyoqIOi/m+W6puadoeebuOWFs+WPguaVsCAqL1xyXG4gICAgaW50ZXJmYWNlIFByb2dyZXNzUHJvcHMge1xyXG4gICAgICAgIC8qKiDov5vluqbmnaHnmoTov5vluqbnmb7liIbmr5QgKi9cclxuICAgICAgICBwZXJjZW50OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOaOp+S7tuWQjeensCAqL1xyXG4gICAgICAgIGNhcHRpb246IHN0cmluZztcclxuICAgICAgICAvKiog6auY5bqmLCDljZXkvY06IHB4ICovXHJcbiAgICAgICAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDkvY3nva4gKi9cclxuICAgICAgICB0eHRQb3NpdGlvbj86IFByb2dyZXNzVHh0UG9zaXRpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLlByb2dyZXNzWCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoTW9kYWxYLCBDb21wb25lbnRUeXBlLk1vZGFsWCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWxYIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8TW9kYWxQcm9wcz4ge1xyXG5cclxuICAgIEBNb3VudGVkIHB1YmxpYyBtb3VudGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5jbGVhblhZKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGUgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPHRlbGVwb3J0IHRvPVwiYm9keVwiIHYtaWY9XCJkaXNwbGF5XCI+XHJcbiAgICAgICAgPCEtLSDlr7nor53moYbov5nmi5vog4zmma/pga7nvakgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LW1vZGFsLW1hc2tcIj48L2Rpdj5cclxuICAgICAgICA8IS0tIOWvueivneahhiAtLT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtbW9kYWxcIiA6aWQ9XCJ2aWRcIiBAbW91c2Vtb3ZlPVwibW92ZVhZXCIgOnN0eWxlPVwiZ2V0U3R5bGUoKVwiPlxyXG4gICAgICAgICAgICA8IS0tIOagh+mimCAtLT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LW1vZGFsLXRpdGxlXCIgQG1vdXNlZG93bj1cInJlY29yZFhZXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtbW9kYWwtdGl0bGUtbmFtZSBkaW5nbGotdi1hdXRvLWhpZGRlblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPuWvueivneahhjwvc2xvdD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LWZsZXhcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1tb2RhbC10aXRsZS1idG5zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBAY2xpY2s9XCJjbG9zZU1vZGFsKClcIiA6c3JjPVwiZ2V0SW1nKCdkZWxldGUucG5nJylcIiBjbGFzcz1cImRpbmdsai12LWNsb3NlLW1vZGFsXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8IS0tIOWGheWuuSAtLT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LW1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjb250ZW50XCI+PC9zbG90PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPCEtLSDmjInpkq4gLS0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1tb2RhbC1idG5zXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtZmxleFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGktYnV0dG9uIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA1cHg7XCIgOmktcHJvcHM9XCJjYW5jZWxQcm9wc1wiPuWPlua2iDwvaS1idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8aS1idXR0b24gc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDVweDtcIiA6aS1wcm9wcz1cIm9rUHJvcHNcIj7noa7orqQ8L2ktYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvdGVsZXBvcnQ+YDtcclxuXHJcbiAgICBARmllbGQgcHVibGljIHBvc2l0aW9uID0ge1xyXG4gICAgICAgIHg6IC0xLFxyXG4gICAgICAgIHk6IC0xLFxyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2QgcHVibGljIGdldFN0eWxlKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgd2lkdGg6IGAkeyB0aGlzLndpZHRoIH1weGAsXHJcbiAgICAgICAgICAgIGhlaWdodDogYCR7IHRoaXMuaGVpZ2h0IH1weGAsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2QgcHVibGljIGNsb3NlTW9kYWwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pUHJvcHMub25DbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2QgcHVibGljIHJlY29yZFhZKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBtb2RhbCA9IHdpbmRvdy5ieUlkKHRoaXMudmlkKTtcclxuICAgICAgICBpZiAoIW1vZGFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYW5YWSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtb2RhbEluZm8gPSBnZXRDb21wdXRlZFN0eWxlKG1vZGFsKTtcclxuICAgICAgICBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1vZGFsKS5sZWZ0KVxyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHg6IGUuc2NyZWVuWCAtIHBhcnNlSW50KG1vZGFsSW5mby5sZWZ0KSxcclxuICAgICAgICAgICAgeTogZS5zY3JlZW5ZIC0gcGFyc2VJbnQobW9kYWxJbmZvLnRvcCksXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2QgcHVibGljIG1vdmVYWShlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5nZXRWYWwodGhpcy5wb3NpdGlvbiwgJ3gnLCAtMSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBtb2RhbCA9IHdpbmRvdy5ieUlkKHRoaXMudmlkKTtcclxuICAgICAgICAgICAgbW9kYWwuc3R5bGUubGVmdCA9IGAkeyBlLnNjcmVlblggLSB0aGlzLnBvc2l0aW9uLnggfXB4YDtcclxuICAgICAgICAgICAgbW9kYWwuc3R5bGUudG9wID0gYCR7IGUuc2NyZWVuWSAtIHRoaXMucG9zaXRpb24ueSB9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBjbGVhblhZKCkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7IHg6IC0xLCB5OiAtMSB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlj5bmtojmjInpkq7nmoTlj4LmlbAgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBNb2RhbFgpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2FuY2VsJyxcclxuICAgICAgICAgICAgc2luZ2xlQ2xpY2s6IGZ1bmN0aW9uKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGNhbmNlbFByb3BzOiBCdXR0b25Qcm9wcztcclxuXHJcbiAgICAvKiog56Gu6K6k5oyJ6ZKu55qE5Y+C5pWwICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogTW9kYWxYKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2luZ2xlQ2xpY2s6IGZ1bmN0aW9uKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYub2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgb2tQcm9wczogQnV0dG9uUHJvcHM7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IE1vZGFsWCkgPT4gc2VsZi5pUHJvcHMuZGlzcGxheSB8fCBmYWxzZSlcclxuICAgIHB1YmxpYyBkaXNwbGF5OiBib29sZWFuO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBNb2RhbFgpID0+IHNlbGYuaVByb3BzLm9rIHx8IChzZWxmLmNsb3NlTW9kYWwpKVxyXG4gICAgcHVibGljIG9rOiBGdW5jdGlvbjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogTW9kYWxYKSA9PiBzZWxmLmlQcm9wcy5jYW5jZWwgfHwgKHNlbGYuY2xvc2VNb2RhbCkpXHJcbiAgICBwdWJsaWMgY2FuY2VsOiBGdW5jdGlvbjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogTW9kYWxYKSA9PiBzZWxmLmlQcm9wcy53aWR0aCB8fCA2MDApXHJcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogTW9kYWxYKSA9PiBzZWxmLmlQcm9wcy5oZWlnaHQgfHwgMzAwKVxyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOWvueivneahhuebuOWFs+WPguaVsCAqL1xyXG4gICAgaW50ZXJmYWNlIE1vZGFsUHJvcHMge1xyXG4gICAgICAgIC8qKiDmmK/lkKbmmL7npLrlr7nor53moYYgKi9cclxuICAgICAgICBkaXNwbGF5PzogYm9vbGVhbjtcclxuICAgICAgICAvKiog5a+56K+d5qGG5a695bqmICovXHJcbiAgICAgICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOWvueivneahhumrmOW6piAqL1xyXG4gICAgICAgIGhlaWdodD86IG51bWJlcjtcclxuICAgICAgICAvKiog56qX5Y+j5YWz6Zet5LqL5Lu2ICovXHJcbiAgICAgICAgb25DbG9zZSgpOiB2b2lkO1xyXG4gICAgICAgIC8qKiDngrnlh7vnoa7lrprml7bnmoTkuovku7YgKi9cclxuICAgICAgICBvaz8oKTogdm9pZDtcclxuICAgICAgICAvKiog54K55Ye75Y+W5raI5pe255qE5LqL5Lu2ICovXHJcbiAgICAgICAgY2FuY2VsPygpOiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG4kcmVnaXN0cnkuYnVpbGRBbmRSZWdpc3QoQ29tcG9uZW50VHlwZS5Nb2RhbFgpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlLCBSaWdodE1lbnUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoQ29udGV4dE1lbnVYLCBDb21wb25lbnRUeXBlLkNvbnRleHRNZW51WCwgdHJ1ZSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dE1lbnVYPFQ+IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8Q29udGV4dE1lbnVQcm9wczxUPj4ge1xyXG5cclxuICAgIEBNb3VudGVkIHB1YmxpYyBtb3VudGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZGVuKTtcclxuICAgICAgICAkcXVldWUub24oJ2hpZGRlbi1yaWdodC1jb250ZXh0LW1lbnUnLCB0aGlzLmhpZGRlbik7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDx0ZWxlcG9ydCB0bz1cImJvZHlcIiB2LWlmPVwiZGlzcGxheVwiPlxyXG4gICAgICAgIDwhLS0g5Y+z6ZSu6I+c5Y2VIC0tPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jb250ZXh0LW1lbnVcIiA6c3R5bGU9XCJwb3NpdGlvblwiIDppZD1cInZpZFwiPlxyXG4gICAgICAgICAgICA8IS0tIOWPs+mUruiPnOWNlembhuWQiCAtLT5cclxuICAgICAgICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gJGxpc3RcIj5cclxuICAgICAgICAgICAgICAgIDwhLS0g5q+P5LiA5Liq5Y+z6ZSu6I+c5Y2VIC0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiY29uZGl0aW9uSWZEaXNwbGF5KGl0ZW0pXCIgY2xhc3M9XCJkaW5nbGotdi1jb250ZXh0LW1lbnUtaXRlbVwiIEBjbGljay5zdG9wPVwiZXhlY0NvbW1hbmQoaXRlbSlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dFwiPnt7IGl0ZW0ubGFiZWwgfX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvdGVsZXBvcnQ+YDtcclxuXHJcbiAgICBARmllbGQgcHVibGljIGRpc3BsYXk6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBARmllbGQgcHVibGljIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIEBGaWVsZCBwdWJsaWMgcG9zaXRpb24gPSB7XHJcbiAgICAgICAgdG9wOiAnMHB4JyxcclxuICAgICAgICBsZWZ0OiAnMHB4JyxcclxuICAgICAgICBvcGFjaXR5OiAnMCcsXHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgYmluZGluZygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBfdGhpczogQ29udGV4dE1lbnVYPFQ+ID0gdGhpcztcclxuICAgICAgICB3aW5kb3cudGltZXIoKCk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLmlQcm9wcy5iaW5kSWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50ID0gd2luZG93LmJ5SWQoX3RoaXMuaVByb3BzLmJpbmRJZCk7XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBmdW5jdGlvbihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLiRsaXN0IHx8IF90aGlzLiRsaXN0Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHF1ZXVlLnNlbmRNc2coJ2hpZGRlbi1yaWdodC1jb250ZXh0LW1lbnUnLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wb3NpdGlvbi5sZWZ0ID0gZS5jbGllbnRYICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIF90aGlzLnBvc2l0aW9uLnRvcCA9IGUuY2xpZW50WSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wb3NpdGlvbi5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzcGxheSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cudGltZXIoZnVuY3Rpb24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRleHRNZW51ID0gd2luZG93LmJ5SWQoX3RoaXMudmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dE1lbnUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCAtIGNvbnRleHRNZW51Lm9mZnNldFRvcCA8IGNvbnRleHRNZW51Lm9mZnNldEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnUuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCAtMTAwJSknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnUuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zZm9ybScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgaGlkZGVuKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ub3BhY2l0eSA9ICcwJztcclxuICAgICAgICB0aGlzLmRpc3BsYXkgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBjb25kaXRpb25JZkRpc3BsYXkoaXRlbTogUmlnaHRNZW51KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uaXNEaXNwbGF5KHRoaXMuJGN0eCwgdGhpcy5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBleGVjQ29tbWFuZChpdGVtOiBSaWdodE1lbnUpOiB2b2lkIHtcclxuICAgICAgICBpdGVtLmV2ZW50KHRoaXMuJGN0eCwgdGhpcy5lbGVtZW50KTtcclxuICAgICAgICB0aGlzLmhpZGRlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDopoHmmL7npLrnmoTlj7PplK7oj5zljZXmlbDnu4QgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBDb250ZXh0TWVudVg8VD4pID0+IHNlbGYuaVByb3BzLmxpc3QgfHwgW10pXHJcbiAgICBwdWJsaWMgJGxpc3Q6IEFycmF5PFJpZ2h0TWVudT47XHJcblxyXG4gICAgLyoqIOWPs+mUruiPnOWNleebuOWFs+eahOaVsOaNriAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IENvbnRleHRNZW51WDxUPikgPT4gc2VsZi5pUHJvcHMuZGF0YSB8fCAoe30gYXMgYW55KSlcclxuICAgIHB1YmxpYyAkY3R4OiBUO1xyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIENvbnRleHRNZW51UHJvcHM8VD4ge1xyXG4gICAgICAgIC8qKiDmt7vliqDlj7PplK7kuovku7bnmoTlhYPntKAgaWQgKi9cclxuICAgICAgICBiaW5kSWQ6IHN0cmluZztcclxuICAgICAgICAvKiog6I+c5Y2V5pWw57uEICovXHJcbiAgICAgICAgbGlzdDogQXJyYXk8UmlnaHRNZW51PjtcclxuICAgICAgICAvKiogYmluZElkIOWvueW6lOWFg+e0oOS4reebuOWFs+eahOaVsOaNriAqL1xyXG4gICAgICAgIGRhdGE/OiBUO1xyXG4gICAgfVxyXG59XHJcblxyXG4kcmVnaXN0cnkuYnVpbGRBbmRSZWdpc3QoQ29tcG9uZW50VHlwZS5Db250ZXh0TWVudVgpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmVcIjtcclxuXHJcbkBTZXJ2aWNlKEZpbGVUcmVlWCwgQ29tcG9uZW50VHlwZS5GaWxlVHJlZVgsIHRydWUpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVUcmVlWDxULCBTPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PEZpbGVUcmVlUHJvcHM8VCwgUz4+IHtcclxuXHJcbiAgICBAVGVtcGxhdGUgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPCEtLSDmoJHlvaLlr7zoiKroj5zljZUgLS0+XHJcbiAgICA8ZGl2IDpzdHlsZT1cInsgJ21hcmdpbi1sZWZ0Jzogcm9vdCA/ICcwcHgnIDogaW5kZW50ICsgJ3B4JyB9XCIgdi1mb3I9XCJpdGVtIGluIGxpc3RcIiA6ZGF0YS10aXRsZT1cIml0ZW0ubGFiZWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdHJlZS1sYWJlbFwiIEBjbGljay5zdG9wPVwiZXhwYW5kKCRldmVudCwgaXRlbSlcIj5cclxuICAgICAgICAgICAgPGltZyBjbGFzcz1cImRpbmdsai12LW1lbnUtaWNvblwiIHYtaWY9XCJpdGVtLnR5cGUgPT0gJ2VudHJ5J1wiIDpzcmM9XCJnZXRJbWcoJ2ZvbGRlci5wbmcnKVwiLz5cclxuICAgICAgICAgICAgPGltZyBjbGFzcz1cImRpbmdsai12LW1lbnUtaWNvblwiIHYtZWxzZSA6c3JjPVwiZ2V0SW1nKCdleGNlbC5wbmcnKVwiLz5cclxuICAgICAgICAgICAgPHNwYW4+e3sgaXRlbS5sYWJlbCB9fTwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdHJlZS1jaGlsZHJlblwiPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGktZmlsZS10cmVlIDppLXByb3BzPVwiaVByb3BzNENoaWxkcmVuKGl0ZW0pXCI+PC9pLWZpbGUtdHJlZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWxlVHJlZVg8VCwgUz4pID0+IHNlbGYuaVByb3BzLnJvb3QgPT0gdW5kZWZpbmVkKVxyXG4gICAgcm9vdDogYm9vbGVhbjtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogRmlsZVRyZWVYPFQsIFM+KSA9PiBzZWxmLmlQcm9wcy5saXN0IHx8IFtdKVxyXG4gICAgbGlzdDogVDtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogRmlsZVRyZWVYPFQsIFM+KSA9PiBzZWxmLmlQcm9wcy5pbmRlbnQgfHwgMjApXHJcbiAgICBpbmRlbnQ6IG51bWJlcjtcclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBpUHJvcHM0Q2hpbGRyZW4oaXRlbTogRmlsZVRyZWVJdGVtPFQsIFM+KTogRmlsZVRyZWVQcm9wczxULCBTPiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogRmlsZVRyZWVYPFQsIFM+ID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByb290OiBmYWxzZSxcclxuICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcclxuICAgICAgICAgICAgbGlzdDogaXRlbS5jaGlsZHJlbixcclxuICAgICAgICAgICAgcGFyZW50OiBpdGVtLFxyXG4gICAgICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGFyZ3M6IEFycmF5PEZpbGVUcmVlSXRlbTxULCBTPj4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuaVByb3BzLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChzZWxmLmlQcm9wcy5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5pUHJvcHMuc2VsZWN0KGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIGV4cGFuZChldmVudDogRXZlbnQsIGl0ZW06IEZpbGVUcmVlSXRlbTxULCBTPikge1xyXG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT0gJ2VudHJ5Jykge1xyXG4gICAgICAgICAgICBsZXQgY2xpY2tFbGVtZW50OiBIVE1MRWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBhbnk7XHJcbiAgICAgICAgICAgIGlmIChjbGlja0VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaW5nbGotdi10cmVlLWxhYmVsJykpIHtcclxuICAgICAgICAgICAgICAgIGNsaWNrRWxlbWVudCA9IGNsaWNrRWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xpY2tFbGVtZW50LnRhZ05hbWUgPT0gJ1NQQU4nICYmIGNsaWNrRWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGluZ2xqLXYtdHJlZS1sYWJlbCcpKSB7XHJcbiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQgPSBjbGlja0VsZW1lbnQucGFyZW50RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNsaWNrRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGFuZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZXhwYW5kJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZXhwYW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHRTdGFjayA9IFsgaXRlbSBdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pUHJvcHMucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRTdGFjay51bnNoaWZ0KHRoaXMuaVByb3BzLnBhcmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pUHJvcHMuc2VsZWN0KHJlc3VsdFN0YWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICAvKiog6I+c5Y2V57G75Z6LICovXHJcbiAgICB0eXBlIEZpbGVUcmVlVHlwZSA9ICdlbnRyeScgfCAnaXRlbSc7XHJcbiAgICBpbnRlcmZhY2UgRmlsZVRyZWVJdGVtPFQsIFM+IHtcclxuICAgICAgICAvKiogdXVpZCAqL1xyXG4gICAgICAgIHV1aWQ6IHN0cmluZztcclxuICAgICAgICAvKiog5pi+56S655qE6I+c5Y2V5ZCN56ewICovXHJcbiAgICAgICAgbGFiZWw6IHN0cmluZztcclxuICAgICAgICAvKiog6I+c5Y2V57G75Z6LICovXHJcbiAgICAgICAgdHlwZTogRmlsZVRyZWVUeXBlO1xyXG4gICAgICAgIC8qKiDlrZDlhYPntKAgKi9cclxuICAgICAgICBjaGlsZHJlbj86IEFycmF5PEZpbGVUcmVlSXRlbTxULCBTPj47XHJcbiAgICAgICAgLyoqIOiPnOWNleWvueW6lOeahOS4gOS6m+mZhOWKoOWAvCAqL1xyXG4gICAgICAgIHZhbHVlPzogUztcclxuICAgIH1cclxuICAgIC8qKiDmlofku7bmoJHnm7jlhbPlj4LmlbAgKi9cclxuICAgIGludGVyZmFjZSBGaWxlVHJlZVByb3BzPFQsIFM+IHtcclxuICAgICAgICAvKiog5paH5Lu25YiX6KGoICovXHJcbiAgICAgICAgbGlzdDogQXJyYXk8RmlsZVRyZWVJdGVtPFQsIFM+PjtcclxuICAgICAgICAvKiog6YCJ5oup5LqL5Lu2ICovXHJcbiAgICAgICAgc2VsZWN0KGxpc3Q6IEFycmF5PEZpbGVUcmVlSXRlbTxULCBTPj4pOiB2b2lkO1xyXG4gICAgICAgIC8qKiDnvKnov5sgKi9cclxuICAgICAgICBpbmRlbnQ/OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOaYr+WQpuS4uuagueiKgueCuSwg55So5oi35LiN6KaB5Lyg5YWl6K+l5Y+C5pWwICovXHJcbiAgICAgICAgcm9vdD86IGJvb2xlYW47XHJcbiAgICAgICAgLyoqIOeItuiKgueCuSAqL1xyXG4gICAgICAgIHBhcmVudD86IEZpbGVUcmVlSXRlbTxULCBTPjtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLkZpbGVUcmVlWCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuQFNlcnZpY2UoVHJlZVZpZXcsIENvbXBvbmVudFR5cGUuVHJlZVZpZXcsIHRydWUpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWVWaWV3PFQsIFM+IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8VHJlZVZpZXdQcm9wczxULCBTPj4ge1xyXG5cclxuICAgIEBNb3VudGVkIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogVHJlZVZpZXc8VCwgUz4gPSB0aGlzO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnBvc2l0aW9uLnggPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlLmNsaWVudFggLSBzZWxmLnBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hdmlnYXRvciA9IHdpbmRvdy5zZWxlY3RvcignLmRpbmdsai12LXRyZWUtbmF2JylbMF07XHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5zdHlsZS53aWR0aCA9IGAkeyBzZWxmLnBvc2l0aW9uLndpZHRoICsgb2Zmc2V0IH1weGA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbihlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnBvc2l0aW9uLnggPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlLmNsaWVudFggLSBzZWxmLnBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hdmlnYXRvciA9IHdpbmRvdy5zZWxlY3RvcignLmRpbmdsai12LXRyZWUtbmF2JylbMF07XHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5zdHlsZS53aWR0aCA9IGAkeyBzZWxmLnBvc2l0aW9uLndpZHRoICsgb2Zmc2V0IH1weGA7XHJcbiAgICAgICAgICAgIHNlbGYucG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAtMSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlIHRlbXAgPSBgPCEtLSDmoJHlvaLop4blm74gLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdHJlZS12aWV3XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRyZWUtbmF2XCI+XHJcbiAgICAgICAgICAgIDxpLWZpbGUtdHJlZSA6aS1wcm9wcz1cImlQcm9wczRUcmVlKClcIj48L2ktZmlsZS10cmVlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1zcGxpdGVyXCIgQG1vdXNlZG93bj1cIm1vdXNlZG93blwiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1tYWluLXZpZXdcIj5cclxuICAgICAgICAgICAgPGktdGFiLXZpZXcgOmktcHJvcHM9XCJ0YWJQcm9wcygpXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHYtZm9yPVwiaXRlbSBpbiBzZWxlY3RMaXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImNvbnRlbnRcIiA6aXRlbT1cIml0ZW0udmFsdWVcIj48L3Nsb3Q+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9pLXRhYi12aWV3PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBARmllbGQgc2VsZWN0TGlzdDogQXJyYXk8RmlsZVRyZWVJdGVtPFQsIFM+PiA9IFtdO1xyXG5cclxuICAgIEBGaWVsZCBzZWxlY3RlZDogRmlsZVRyZWVJdGVtPFQsIFM+O1xyXG5cclxuICAgIEBGaWVsZCBwb3NpdGlvbiA9IHtcclxuICAgICAgICB4OiAtMSxcclxuICAgICAgICB3aWR0aDogMCxcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIG1vdXNlZG93bihlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93LnNlbGVjdG9yKCcuZGluZ2xqLXYtdHJlZS1uYXYnKVswXTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICB4OiBlLmNsaWVudFgsXHJcbiAgICAgICAgICAgIHdpZHRoOiBuYXZpZ2F0b3IgPyBuYXZpZ2F0b3Iub2Zmc2V0V2lkdGggOiAwLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIGlQcm9wczRUcmVlKCk6IFRyZWVWaWV3UHJvcHM8VCwgUz4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGY6IFRyZWVWaWV3PFQsIFM+ID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsaXN0OiBzZWxmLmlQcm9wcy5saXN0LFxyXG4gICAgICAgICAgICBpbmRlbnQ6IHNlbGYuaVByb3BzLmluZGVudCxcclxuICAgICAgICAgICAgcGFyZW50OiBzZWxmLmlQcm9wcy5wYXJlbnQsXHJcbiAgICAgICAgICAgIHJvb3Q6IHNlbGYuaVByb3BzLnJvb3QsXHJcbiAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24oYXJnczogQXJyYXk8RmlsZVRyZWVJdGVtPFQsIFM+Pikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWQgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RMaXN0LnB1c2hOZXcoc2VsZi5zZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlQcm9wcy5zZWxlY3QoYXJncywgc2VsZi5zZWxlY3RlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCB0YWJQcm9wcygpOiBUYWJWaWV3UHJvcHM8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGlzdDogdGhpcy5zZWxlY3RMaXN0LmZpbHRlcihpdGVtID0+IGl0ZW0pLm1hcChpdGVtID0+IGl0ZW0ubGFiZWwpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICB0eXBlIFRyZWVWaWV3UHJvcHM8VCwgUz4gPSB7XHJcbiAgICAgICAgLyoqIOaWh+S7tuWIl+ihqCAqL1xyXG4gICAgICAgIGxpc3Q6IEFycmF5PEZpbGVUcmVlSXRlbTxULCBTPj47XHJcbiAgICAgICAgLyoqIOmAieaLqeS6i+S7tiAqL1xyXG4gICAgICAgIHNlbGVjdChsaXN0OiBBcnJheTxGaWxlVHJlZUl0ZW08VCwgUz4+LCBpdGVtOiBGaWxlVHJlZUl0ZW08VCwgUz4pOiB2b2lkO1xyXG4gICAgICAgIC8qKiDnvKnov5sgKi9cclxuICAgICAgICBpbmRlbnQ/OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOaYr+WQpuS4uuagueiKgueCuSwg55So5oi35LiN6KaB5Lyg5YWl6K+l5Y+C5pWwICovXHJcbiAgICAgICAgcm9vdD86IGJvb2xlYW47XHJcbiAgICAgICAgLyoqIOeItuiKgueCuSAqL1xyXG4gICAgICAgIHBhcmVudD86IEZpbGVUcmVlSXRlbTxULCBTPjtcclxuICAgIH07XHJcbn1cclxuXHJcbiRyZWdpc3RyeS5idWlsZEFuZFJlZ2lzdChDb21wb25lbnRUeXBlLlRyZWVWaWV3KTsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlXCI7XHJcblxyXG5AU2VydmljZShUZXh0QXJlYVgsIENvbXBvbmVudFR5cGUuVGV4dEFyZWFYLCB0cnVlKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0QXJlYVggZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudDxUZXh0QXJlYVByb3BzPiB7XHJcblxyXG4gICAgQE1vdW50ZWQgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuaVByb3BzLmRlZmF1bHRWYWx1ZSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGUgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPCEtLSDmlofmnKzln5/lhaXmoYYgLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtY3RsIGRpbmdsai12LWlucHV0IHRleHQtYXJlYVwiIDpjYXB0aW9uPVwiY2FwdGlvblwiIDpzdHlsZT1cImdldFN0eWxlKClcIiA6aWQ9XCJ2aWRcIj5cclxuICAgICAgICA8dGV4dGFyZWFcclxuICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwicGxhY2Vob2xkZXJcIlxyXG4gICAgICAgICAgICB2LW1vZGVsPVwidmFsdWVcIlxyXG4gICAgICAgICAgICBAa2V5dXAuZW50ZXI9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2VudGVyJylcIlxyXG4gICAgICAgICAgICBAaW5wdXQ9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2lucHV0JylcIlxyXG4gICAgICAgICAgICBAYmx1cj1cInNldFZhbHVlKHZhbHVlLCAnYmx1cicpXCJcclxuICAgICAgICAgICAgQGNoYW5nZT1cInNldFZhbHVlKHZhbHVlLCAnY2hhbmdlJylcIi8+XHJcbiAgICA8L2Rpdj5gXHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2YWx1ZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRleHRBcmVhWCk6IHN0cmluZyA9PiBzZWxmLmlQcm9wcy5jYXB0aW9uKVxyXG4gICAgY2FwdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUZXh0QXJlYVgpOiBzdHJpbmcgPT4gc2VsZi5pUHJvcHMucGxhY2Vob2xkZXIpXHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBUZXh0QXJlYVgpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbjogYW55ID0gc2VsZi5pUHJvcHMuaGVpZ2h0IHx8IDA7XHJcbiAgICAgICAgaWYgKGlzTmFOKG9yaWdpbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbnVtID0gcGFyc2VJbnQob3JpZ2luKTtcclxuICAgICAgICBpZiAob3JpZ2luIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMTAwcHgnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYCR7IG51bSB9cHhgO1xyXG4gICAgfSlcclxuICAgIGhlaWdodDogc3RyaW5nO1xyXG5cclxuICAgIEBNZXRob2Qgc2V0VmFsdWUodmFsdWU6IHN0cmluZywgZXZlbnRUeXBlOiBJbnB1dEV2ZW50VHlwZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBwYXJhbTogRW1pdEFyZ3M8c3RyaW5nPiA9IHtcclxuICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pUHJvcHMub25DaGFuZ2UgJiYgdGhpcy5pUHJvcHMub25DaGFuZ2UocGFyYW0pO1xyXG4gICAgICAgIGlmIChldmVudFR5cGUgPT0gJ2JsdXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaVByb3BzLm9uQmx1ciAmJiB0aGlzLmlQcm9wcy5vbkJsdXIocGFyYW0pO1xyXG4gICAgICAgICAgICB0aGlzLmlQcm9wcy5vbk92ZXIgJiYgdGhpcy5pUHJvcHMub25PdmVyKHBhcmFtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50VHlwZSA9PSAnZW50ZXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaVByb3BzLm9uRW50ZXIgJiYgdGhpcy5pUHJvcHMub25FbnRlcihwYXJhbSk7XHJcbiAgICAgICAgICAgIHRoaXMuaVByb3BzLm9uT3ZlciAmJiB0aGlzLmlQcm9wcy5vbk92ZXIocGFyYW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIGdldFN0eWxlKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICctLXRleHQtYXJlYS1oZWlnaHQnOiB0aGlzLmhlaWdodCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOaWh+acrOahhuWPguaVsCAqL1xyXG4gICAgaW50ZXJmYWNlIFRleHRBcmVhUHJvcHMge1xyXG4gICAgICAgIC8qKiDmjqfku7blkI3np7AgKi9cclxuICAgICAgICBjYXB0aW9uOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIOmrmOW6piAqL1xyXG4gICAgICAgIGhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcclxuICAgICAgICAvKiog6buY6K6k5YC8ICovXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nO1xyXG4gICAgICAgIC8qKiDljaDkvY3mlofmnKwgKi9cclxuICAgICAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuICAgICAgICAvKiog6L6T5YWl5a6M5oiQ5LqL5Lu2ICovXHJcbiAgICAgICAgb25PdmVyPyhkYXRhOiBFbWl0QXJnczxzdHJpbmc+KTogdm9pZDtcclxuICAgICAgICAvKiog6L6T5YWl5LqL5Lu2ICovXHJcbiAgICAgICAgb25DaGFuZ2U/KGRhdGE6IEVtaXRBcmdzPHN0cmluZz4pOiB2b2lkO1xyXG4gICAgICAgIC8qKiDlm57ovabkuovku7YgKi9cclxuICAgICAgICBvbkVudGVyPyhkYXRhOiBFbWl0QXJnczxzdHJpbmc+KTogdm9pZDtcclxuICAgICAgICAvKiog5aSx5Y6754Sm54K55LqL5Lu2ICovXHJcbiAgICAgICAgb25CbHVyPyhkYXRhOiBFbWl0QXJnczxzdHJpbmc+KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuJHJlZ2lzdHJ5LmJ1aWxkQW5kUmVnaXN0KENvbXBvbmVudFR5cGUuVGV4dEFyZWFYKTtcclxuIiwiaW1wb3J0IHsgTGFuZ0l0ZW0gfSBmcm9tIFwiY29yZVwiO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gICAgY2FzZU5hbWU6ICfnlKjkvovlkI3np7AnLFxyXG4gICAgc3RhdHVzOiAn54q25oCBJyxcclxuICAgIGNvbXBvbmVudDogJ+aooeWdlycsXHJcbiAgICB0aWNrZXQ6ICflj5jmm7Tlj7cnLFxyXG4gICAgY3VycmVudFJvdzogJ+W9k+WJjeihjOaVsCcsXHJcbiAgICB0b3RhbFJvdzogJ+aAu+ihjOaVsCcsXHJcbiAgICBkYlR5cGU6ICfmlbDmja7lupPnsbvlnosnLFxyXG4gICAgY3VycmVudFN0ZXA6ICflvZPliY3nu5PmnZ/nmoTmraXpqqQnLFxyXG4gICAgdG90YWxTdGVwOiAn5oC75q2l6aqkJyxcclxuICAgIHBlcmNlbnQ6ICfov5vluqYnLFxyXG4gICAgemlwOiAn5omT5YyF54mI5pysJyxcclxuICAgIGxldmVsOiAn562J57qnJyxcclxuICAgIGNhc2VQYXRoOiAn55So5L6L6Lev5b6EJyxcclxuICAgIHRpbWVDb3N0OiAn6ICX6LS55pe26Ze0JyxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENhc2Uge1xyXG4gICAgY2FzZU5hbWU6IHN0cmluZzsgXHJcbiAgICBzdGF0dXM6IExhbmdJdGVtOyBcclxuICAgIGNvbXBvbmVudDogc3RyaW5nOyBcclxuICAgIHRpY2tldDogc3RyaW5nOyBcclxuICAgIGN1cnJlbnRSb3c6IG51bWJlcjsgXHJcbiAgICB0b3RhbFJvdzogbnVtYmVyOyBcclxuICAgIGRiVHlwZTogc3RyaW5nO1xyXG4gICAgY3VycmVudFN0ZXA6IG51bWJlcjsgXHJcbiAgICB0b3RhbFN0ZXA6IG51bWJlcjsgXHJcbiAgICBwZXJjZW50OiBzdHJpbmc7IFxyXG4gICAgemlwOiBzdHJpbmc7IFxyXG4gICAgbGV2ZWw6IG51bWJlcjsgXHJcbiAgICBjYXNlUGF0aDogc3RyaW5nOyBcclxuICAgIHRpbWVDb3N0OiBzdHJpbmc7XHJcbiAgICBzdGF0aWMgX2ZpZWxkTWFwXzogYW55ID0gZmllbGRzO1xyXG4gICAgc3RhdGljIF9maWVsZHNfID0gT2JqZWN0LmtleXMoZmllbGRzKTtcclxuICAgIGNvbnN0cnVjdG9yKG9yaWdpbjogYW55LCBzdGF0dXNDb25zdGFudDogYW55KSB7XHJcbiAgICAgICAgaWYgKCFvcmlnaW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3JpZ2luLnN0YXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW4uc3RhdHMgPT0gJ+W+heWPkemAgScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzQ29uc3RhbnQuTk9UU0VORDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW4uc3RhdHMgPT0gJ+e7k+adnycpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW4ucmVzdWx0ID09ICdUSUNLRVQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5USUNLRVQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbi5yZXN1bHQgPT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5TVUNDRVNTO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW4ucmVzdWx0ID09ICdFUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c0NvbnN0YW50LkVSUk9SXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzQ29uc3RhbnQuVU5LTk9XTjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGDmnKrnn6XnmoTnirbmgIEgeyR7IG9yaWdpbi5zdGF0cyB9fSwg57uT5p6cIHskeyBvcmlnaW4ucmVzdWx0IH19LCDor7fogZTns7sgZGluZ2xqIOihpeWFhWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbi5zdGF0cyA9PSAn5omn6KGM5LitJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5SVU5OSU5HO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbi5zdGF0cyA9PSAn562J5b6F6LWE5rqQJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5XQUlUVElORztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW4uc3RhdHMgPT0gJ+Wksei0pScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzQ29uc3RhbnQuRkFJTEVEO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbi5zdGF0cyA9PSAn5bey5Y+R6YCBJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5TRU5ERUQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c0NvbnN0YW50LlVOS05PV047XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGDmnKrnn6XnmoTnirbmgIEgeyR7IG9yaWdpbi5zdGF0cyB9fSwg6K+36IGU57O7IGRpbmdsaiDooaXlhYVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW4ucmVzdWx0ID09ICdUSUNLRVQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c0NvbnN0YW50LlRJQ0tFVDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW4ucmVzdWx0ID09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5TVUNDRVNTO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb25zdGFudC5VTktOT1dOO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5pyq55+l55qE57uT5p6cIHskeyBvcmlnaW4ucmVzdWx0IH19LCDor7fogZTns7sgZGluZ2xqIOihpeWFhWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSBzdGF0dXNDb25zdGFudC5VTktOT1dOKSB7IC8vIOayoeacieeKtuaAgSwg5omT5Y2w5Y6f5aeL5pWw5o2uXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Iob3JpZ2luKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93ID0gcGFyc2VJbnQob3JpZ2luLmN1cnJlbnRSb3cgfHwgMCk7XHJcbiAgICAgICAgdGhpcy56aXAgPSBvcmlnaW4uZXJwVmVyc2lvbjtcclxuICAgICAgICB0aGlzLmxldmVsID0gb3JpZ2luLmxldmVsIHx8IG9yaWdpbi5jbGV2ZWw7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBvcmlnaW4ubW9kdWxlO1xyXG4gICAgICAgIHRoaXMuY2FzZU5hbWUgPSBvcmlnaW4udGVzdGNhc2VOYW1lIHx8IG9yaWdpbi50ZXN0Q2FzZU5hbWU7XHJcbiAgICAgICAgdGhpcy5jYXNlUGF0aCA9IG9yaWdpbi50ZXN0Y2FzZVBhdGg7XHJcbiAgICAgICAgdGhpcy50b3RhbFJvdyA9IHBhcnNlSW50KG9yaWdpbi50b3RhbFJvdyB8fCAwKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gcGFyc2VJbnQob3JpZ2luLmVuZFN0ZXBOdW0gfHwgMCk7XHJcbiAgICAgICAgdGhpcy50b3RhbFN0ZXAgPSBwYXJzZUludChvcmlnaW4udG90YWxTdGVwTnVtIHx8IDApO1xyXG4gICAgICAgIHRoaXMudGltZUNvc3QgPSBvcmlnaW4udGltZUNvc3Q7XHJcbiAgICAgICAgbGV0IHRpY2tldCA9IG9yaWdpbi50aWNrZXRJZCB8fCBvcmlnaW4ubG9nO1xyXG4gICAgICAgIHRoaXMudGlja2V0ID0gdGlja2V0ID8gcGFyc2VJbnQodGlja2V0KSA6IHRpY2tldDtcclxuICAgICAgICB0aGlzLmRiVHlwZSA9IG9yaWdpbi5kYlR5cGUgfHwgJyc7XHJcbiAgICAgICAgaWYgKHRoaXMudG90YWxTdGVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVyY2VudCA9ICh0aGlzLmN1cnJlbnRTdGVwIC8gdGhpcy50b3RhbFN0ZXAgKiAxMDApLnRvRml4ZWQoMikgKyAnJSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldENhcHRpb24oZmllbGQ6IHN0cmluZykge1xyXG4gICAgICAgIHN3aXRjaChmaWVsZCkge1xyXG4gICAgICAgICAgICBjYXNlICdjYXNlTmFtZSc6IHJldHVybiAn55So5L6L5ZCN56ewJztcclxuICAgICAgICAgICAgY2FzZSAnc3RhdHVzJzogcmV0dXJuICfnirbmgIEnO1xyXG4gICAgICAgICAgICBjYXNlICdjb21wb25lbnQnOiByZXR1cm4gJ+aooeWdlyc7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RpY2tldCc6IHJldHVybiAn5Y+Y5pu05Y+3JztcclxuICAgICAgICAgICAgY2FzZSAnY3VycmVudFJvdyc6IHJldHVybiAn5b2T5YmN6KGM5pWwJztcclxuICAgICAgICAgICAgY2FzZSAndG90YWxSb3cnOiByZXR1cm4gJ+aAu+ihjOaVsCc7XHJcbiAgICAgICAgICAgIGNhc2UgJ2N1cnJlbnRTdGVwJzogcmV0dXJuICflvZPliY3nu5PmnZ/nmoTmraXpqqQnO1xyXG4gICAgICAgICAgICBjYXNlICd0b3RhbFN0ZXAnOiByZXR1cm4gJ+aAu+atpemqpCc7XHJcbiAgICAgICAgICAgIGNhc2UgJ3ppcCc6IHJldHVybiAn5omT5YyF54mI5pysJztcclxuICAgICAgICAgICAgY2FzZSAnbGV2ZWwnOiByZXR1cm4gJ+etiee6pyc7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Nhc2VQYXRoJzogcmV0dXJuICfnlKjkvovot6/lvoQnO1xyXG4gICAgICAgICAgICBjYXNlICd0aW1lQ29zdCc6IHJldHVybiAn6ICX6LS55pe26Ze0JztcclxuICAgICAgICAgICAgY2FzZSAncGVyY2VudCc6IHJldHVybiAn6L+b5bqmJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVGlja2V0IH0gZnJvbSBcIi4vVGlja2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YUZpbHRlciB7XHJcbiAgICBncm91cFJlZ0V4cDogUmVnRXhwO1xyXG4gICAgdGFiUmVnRXhwOiBSZWdFeHA7XHJcbiAgICBpZ25vcmVDb2x1bW5zOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgZnVuYzogRnVuY3Rpb247XHJcbiAgICBpc1JvdzogYm9vbGVhbjtcclxuICAgIHR5cGU6ICdzaW5nbGUnIHwgJ2FycmF5JyB8ICdmdW5jdGlvbic7XHJcbiAgICAvKiog6L+U5ZueIHRydWUg6KGo56S65piv6KaB6L+H5ruk5o6J55qEICovXHJcbiAgICBleGVjKGdyb3VwTmFtZTogc3RyaW5nLCB0YWJOYW1lOiBzdHJpbmcsIGxpc3Q6IEFycmF5PFRpY2tldD4sIHRpY2tldDogVGlja2V0LCBjb2x1bW5LZXkgPSAnJykge1xyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwUmVnRXhwLnRlc3QoZ3JvdXBOYW1lKSAmJiB0aGlzLnRhYlJlZ0V4cC50ZXN0KHRhYk5hbWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhncm91cE5hbWUsIHRhYk5hbWUsIHRpY2tldCk7IC8vIOihjOi/h+a7pOS4jeimgeiAg+iZkSBjb2x1bW5LZXlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhncm91cE5hbWUsIHRhYk5hbWUsIGxpc3QsIGNvbHVtbktleSk7IC8vIOWIl+i/h+a7pOimgeiAg+iZkSBjb2x1bW5LZXlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1Jvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlnbm9yZUNvbHVtbnMuaW5jbHVkZXNJZ25vcmVDYXNlKGNvbHVtbktleSk7IC8vIOWMheWQq+Wwsei/lOWbniB0cnVlLCDooajnpLropoHov4fmu6TmjolcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiDooYzov4fmu6TlmagsIOeUseS6jui/mOS4jeWkn+eyvue7hiwg5peg5rOV5o+Q5L6b5YiX6L+H5ruk5Zmo6YKj56eN5pWw57uE5b2i5byP55qE6L+H5ruk5pa55byPLCDlj6rmlK/mjIHkvKDlhaXkuIDkuKrlm57osIPlh73mlbAsIOWbnuiwg+WHveaVsOacieS4ieS4quWPguaVsDogKGdyb3VwTmFtZSwgdGFiTmFtZSwgdGlja2V0KSAqL1xyXG53aW5kb3cuZGVmdW5jKCdSb3dGaWx0ZXInLCAoZ3JvdXBSZWdFeHA6IFJlZ0V4cCwgdGFiUmVnRXhwOiBSZWdFeHAsIGZ1bmM6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IERhdGFGaWx0ZXIoKTtcclxuICAgIHJlc3VsdC5pc1JvdyA9IHRydWU7XHJcbiAgICByZXN1bHQuZ3JvdXBSZWdFeHAgPSBncm91cFJlZ0V4cDtcclxuICAgIHJlc3VsdC50YWJSZWdFeHAgPSB0YWJSZWdFeHA7XHJcbiAgICByZXN1bHQuZnVuYyA9IGZ1bmM7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ0NvbEZpbHRlcicsIChncm91cFJlZ0V4cDogUmVnRXhwLCB0YWJSZWdFeHA6IFJlZ0V4cCwgYXJnOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+IHwgRnVuY3Rpb24pID0+IHtcclxuICAgIGxldCByZXN1bHQgPSBuZXcgRGF0YUZpbHRlcigpO1xyXG4gICAgcmVzdWx0LmlzUm93ID0gZmFsc2U7XHJcbiAgICByZXN1bHQuZ3JvdXBSZWdFeHAgPSBncm91cFJlZ0V4cDtcclxuICAgIHJlc3VsdC50YWJSZWdFeHAgPSB0YWJSZWdFeHA7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XHJcbiAgICAgICAgcmVzdWx0Lmlnbm9yZUNvbHVtbnMgPSBhcmc7XHJcbiAgICAgICAgcmVzdWx0LnR5cGUgPSAnYXJyYXknXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHJlc3VsdC5mdW5jID0gYXJnO1xyXG4gICAgICAgIHJlc3VsdC50eXBlID0gJ2Z1bmN0aW9uJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQuaWdub3JlQ29sdW1ucyA9IFsgYXJnIF07XHJcbiAgICAgICAgcmVzdWx0LnR5cGUgPSAnc2luZ2xlJztcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pOyIsImltcG9ydCB7IFRpY2tldCB9IGZyb20gXCIuL1RpY2tldFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyb3VwU3RyYXRlZ3kge1xyXG4gICAgZmllbGRLZXk6IHN0cmluZztcclxuICAgIGV4cGVjdFZhbHVlOiBBcnJheTxhbnk+O1xyXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmc7XHJcbiAgICBmdW5jOiBGdW5jdGlvbjtcclxuICAgIGV4ZWModGlja2V0OiBUaWNrZXQsIGZpZWxkS2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5mdW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmModGlja2V0LCBmaWVsZEtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkS2V5ID09IGZpZWxkS2V5ICYmIHRoaXMuZXhwZWN0VmFsdWUuaW5jbHVkZXNJZ25vcmVDYXNlKHRpY2tldC5nZXQoZmllbGRLZXkgYXMgYW55KSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5kZWZ1bmMoJ0dyb3VwU3RyYXRlZ3knLCAoZmllbGRLZXk6IHN0cmluZywgZXhwZWN0VmFsdWU6IGFueSwgZ3JvdXBOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgIGxldCByZXN1bHQgPSBuZXcgR3JvdXBTdHJhdGVneSgpO1xyXG4gICAgcmVzdWx0LmZpZWxkS2V5ID0gZmllbGRLZXk7XHJcbiAgICByZXN1bHQuZXhwZWN0VmFsdWUgPSBleHBlY3RWYWx1ZTtcclxuICAgIHJlc3VsdC5ncm91cE5hbWUgPSBncm91cE5hbWU7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RWYWx1ZSkpIHtcclxuICAgICAgICByZXN1bHQuZXhwZWN0VmFsdWUgPSBleHBlY3RWYWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzdWx0LmV4cGVjdFZhbHVlID0gWyBleHBlY3RWYWx1ZSBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCdHcm91cFN0cmF0ZWd5JywgKGZ1bmM6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IEdyb3VwU3RyYXRlZ3koKTtcclxuICAgIHJlc3VsdC5mdW5jID0gZnVuYztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pIiwiaW1wb3J0IHsgVGlja2V0IH0gZnJvbSBcIi4vVGlja2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT3JkZXJUaWNrZXQge1xyXG4gICAgZ3JvdXBSZWdFeHA6IFJlZ0V4cDtcclxuICAgIHRhYlJlZ0V4cDogUmVnRXhwO1xyXG4gICAgZmllbGRLZXk6IFRpY2tldEZpZWxkcztcclxuICAgIGV4cGVjdFZhbHVlOiBBcnJheTxhbnk+O1xyXG4gICAgZnVuYzogRnVuY3Rpb247XHJcbiAgICBleGVjKGdyb3VwTmFtZTogc3RyaW5nLCB0YWJOYW1lOiBzdHJpbmcsIHRpY2tldDE6IFRpY2tldCwgdGlja2V0MjogVGlja2V0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBSZWdFeHAudGVzdChncm91cE5hbWUpICYmIHRoaXMudGFiUmVnRXhwLnRlc3QodGFiTmFtZSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZnVuYykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhncm91cE5hbWUsIHRhYk5hbWUsIHRpY2tldDEsIHRpY2tldDIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwZWN0VmFsdWUuY29tcGFyZUJ5KHRpY2tldDEuZ2V0KHRoaXMuZmllbGRLZXkpLCB0aWNrZXQyLmdldCh0aGlzLmZpZWxkS2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5kZWZ1bmMoJ09yZGVyVGlja2V0JywgKGdyb3VwUmVnRXhwOiBSZWdFeHAsIHRhYlJlZ0V4cDogUmVnRXhwLCBmaWVsZEtleTogVGlja2V0RmllbGRzLCBleHBlY3RWYWx1ZTogYW55KSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IE9yZGVyVGlja2V0KCk7XHJcbiAgICByZXN1bHQuZ3JvdXBSZWdFeHAgPSBncm91cFJlZ0V4cDtcclxuICAgIHJlc3VsdC50YWJSZWdFeHAgPSB0YWJSZWdFeHA7XHJcbiAgICByZXN1bHQuZmllbGRLZXkgPSBmaWVsZEtleTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdFZhbHVlKSkge1xyXG4gICAgICAgIHJlc3VsdC5leHBlY3RWYWx1ZSA9IGV4cGVjdFZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQuZXhwZWN0VmFsdWUgPSBbIGV4cGVjdFZhbHVlIF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ09yZGVyVGlja2V0JywgKGdyb3VwUmVnRXhwOiBSZWdFeHAsIHRhYlJlZ0V4cDogUmVnRXhwLCBmdW5jOiBGdW5jdGlvbikgPT4ge1xyXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBPcmRlclRpY2tldCgpO1xyXG4gICAgcmVzdWx0Lmdyb3VwUmVnRXhwID0gZ3JvdXBSZWdFeHA7XHJcbiAgICByZXN1bHQudGFiUmVnRXhwID0gdGFiUmVnRXhwO1xyXG4gICAgcmVzdWx0LmZ1bmMgPSBmdW5jO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufSk7IiwiaW1wb3J0IHsgVGlja2V0IH0gZnJvbSBcIi4vVGlja2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFiU3RyYXRlZ3kge1xyXG4gICAgZ3JvdXBSZWdFeHA6IFJlZ0V4cDtcclxuICAgIGZpZWxkS2V5OiBzdHJpbmc7XHJcbiAgICBleHBlY3RWYWx1ZTogQXJyYXk8YW55PjtcclxuICAgIHRhYk5hbWU6IHN0cmluZztcclxuICAgIHJldmVyc2U6IGJvb2xlYW47XHJcbiAgICBmdW5jOiBGdW5jdGlvbjtcclxuICAgIC8qKiDov5Tlm54gdGFiIOmhteWQjeensCAqL1xyXG4gICAgZXhlYyhncm91cE5hbWU6IHN0cmluZywgdGlja2V0OiBUaWNrZXQpIHtcclxuICAgICAgICBsZXQgaXNNYXRjaCA9IHRoaXMuZ3JvdXBSZWdFeHAudGVzdChncm91cE5hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgaXNNYXRjaCA9ICFpc01hdGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNNYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mdW5jKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jKGdyb3VwTmFtZSwgdGlja2V0KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdFZhbHVlLmluY2x1ZGVzSWdub3JlQ2FzZSh0aWNrZXQuZ2V0KHRoaXMuZmllbGRLZXkgYXMgYW55KSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYk5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuZGVmdW5jKCdUYWJQYWdlU3RyYXRlZ3knLCAoZ3JvdXBSZWdFeHA6IFJlZ0V4cCwgZmllbGRLZXk6IHN0cmluZywgZXhwZWN0VmFsdWU6IGFueSwgdGFiTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gKHdpbmRvdyBhcyBhbnkpLlRhYlBhZ2VTdHJhdGVneShncm91cFJlZ0V4cCwgZmllbGRLZXksIGV4cGVjdFZhbHVlLCB0YWJOYW1lLCBmYWxzZSk7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygnVGFiUGFnZVN0cmF0ZWd5JywgKGdyb3VwUmVnRXhwOiBSZWdFeHAsIGZpZWxkS2V5OiBzdHJpbmcsIGV4cGVjdFZhbHVlOiBhbnksIHRhYk5hbWU6IHN0cmluZywgcmV2ZXJzZTogYm9vbGVhbikgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFRhYlN0cmF0ZWd5KCk7XHJcbiAgICByZXN1bHQuZ3JvdXBSZWdFeHAgPSBncm91cFJlZ0V4cDtcclxuICAgIHJlc3VsdC5maWVsZEtleSA9IGZpZWxkS2V5O1xyXG4gICAgcmVzdWx0LnRhYk5hbWUgPSB0YWJOYW1lO1xyXG4gICAgcmVzdWx0LnJldmVyc2UgPSByZXZlcnNlO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0VmFsdWUpKSB7XHJcbiAgICAgICAgcmVzdWx0LmV4cGVjdFZhbHVlID0gZXhwZWN0VmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdC5leHBlY3RWYWx1ZSA9IFsgZXhwZWN0VmFsdWUgXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygnVGFiUGFnZVN0cmF0ZWd5JywgKGdyb3VwUmVnRXhwOiBSZWdFeHAsIGZ1bmM6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICByZXR1cm4gKHdpbmRvdyBhcyBhbnkpLlRhYlBhZ2VTdHJhdGVneShncm91cFJlZ0V4cCwgZnVuYywgZmFsc2UpO1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ1RhYlBhZ2VTdHJhdGVneScsIChncm91cFJlZ0V4cDogUmVnRXhwLCBmdW5jOiBGdW5jdGlvbiwgcmV2ZXJzZTogYm9vbGVhbikgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFRhYlN0cmF0ZWd5KCk7XHJcbiAgICByZXN1bHQuZ3JvdXBSZWdFeHAgPSBncm91cFJlZ0V4cDtcclxuICAgIHJlc3VsdC5mdW5jID0gZnVuYztcclxuICAgIHJlc3VsdC5yZXZlcnNlID0gcmV2ZXJzZTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pOyIsImNvbnN0IGZpZWxkcyA9IHtcclxuICAgIGlkOiAn5Y+Y5pu05Y+3JyxcclxuICAgIHN1bW1hcnk6ICfmpoLov7AnLFxyXG4gICAgc3RhdHVzOiAn54q25oCBJyxcclxuICAgIHJlcG9ydGVyOiAn5oql5ZGK5Lq6JyxcclxuICAgIG93bmVyOiAn5bGe5Li7JyxcclxuICAgIHR5cGU6ICfnsbvlnosnLFxyXG4gICAgcHJpb3JpdHk6ICfkvJjlhYjnuqcnLFxyXG4gICAgY29tcG9uZW50OiAn57uE5Lu2JyxcclxuICAgIHJlc29sdXRpb246ICflpITnkIbnu5PmnpwnLFxyXG4gICAgdGltZTogJ+WIm+W7uuaXtumXtCcsXHJcbiAgICBjaGFuZ2V0aW1lOiAn5L+u5pS55pe26Ze0JyxcclxuICAgIHBsYW5kYXRlOiAn6K6h5YiS5pel5pyfJyxcclxuICAgIHBpbmd0YWk6ICflubPlj7AnLFxyXG4gICAgcHJvamVjdDogJ+mhueebricsXHJcbiAgICB0aWNrZXRjbGFzczogJ+WIhuexuycsXHJcbiAgICB0ZXN0YWRqdXN0OiAn5rWL6K+V6LCD5pW0JyxcclxuICAgIHRlc3RyZXBvcnQ6ICfmtYvor5XosIPmlbTmj5Dlh7rogIUnLFxyXG4gICAgdGVzdG93ZXIxOiAn5rWL6K+V6LCD5pW05aSE55CG6ICFJyxcclxuICAgIGtleXdvcmRzOiAn5YWz6ZSu6K+NJyxcclxuICAgIGNjOiAn5oqE6YCBJyxcclxuICAgIHZlcnNpb246ICfniYjmnKwnLFxyXG4gICAgbmVlZGJ1aWxkOiAn6ZyA5omT5YyFJyxcclxuICAgIGRldnR5cGU6ICflvIDlj5HnsbvlnosnLFxyXG4gICAgZGluZ2xqX25vdGU6ICflpIfms6gnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpY2tldCB7XHJcbiAgICBzdGF0aWMgZmllbGRzID0gZmllbGRzO1xyXG4gICAgc3RhdGljIGZpZWxkTmFtZXM6IEFycmF5PFRpY2tldEZpZWxkcz4gPSAoT2JqZWN0LmtleXMoZmllbGRzKSBhcyBhbnkpO1xyXG4gICAgc3RhdGljIGZpZWxkVmFsdWVzID0gT2JqZWN0LnZhbHVlcyhmaWVsZHMpO1xyXG4gICAgc3RhdGljIHVua25vd25Db2x1bW4gPSBbJ3NlbCddO1xyXG4gICAgc3RhdGljIGdldENhcHRpb24oa2V5OiBhbnkpIHtcclxuICAgICAgICBpZiAoVGlja2V0LmZpZWxkTmFtZXMuaW5jbHVkZXNJZ25vcmVDYXNlKGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChUaWNrZXQuZmllbGRzIGFzIGFueSlba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbmZvID0gJHN0b3JlLmdldFN0b3JhZ2U8YW55PignZGluZ2xqLXYtdGlja2V0LWNhY2hlJywge30pO1xyXG4gICAgICAgIGZvciAobGV0IGNlbGwgb2YgZWxlbWVudC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBjZWxsLmNsYXNzTmFtZTtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmlubmVyVGV4dC50cmltKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSBhcyBhbnksIHZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKCdpZCcuZXF1YWxzSWdub3JlQ2FzZShrZXkpICYmIGluZm9bdmFsdWVdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZUZpZWxkczogQXJyYXk8VGlja2V0RmllbGRzPiA9IE9iamVjdC5rZXlzKGluZm9bdmFsdWVdKSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBmaWVsZCBvZiBjYWNoZUZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGZpZWxkLCBpbmZvW3ZhbHVlXVtmaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvckxvY2FsVGVzdChlbGVtZW50OiBhbnkpIHtcclxuICAgICAgICBsZXQgdGlja2V0ID0gbmV3IFRpY2tldCgpO1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSAkc3RvcmUuZ2V0U3RvcmFnZTxhbnk+KCdkaW5nbGotdi10aWNrZXQtY2FjaGUnLCB7fSk7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gJGdldDxhbnk+KGVsZW1lbnQsIGtleSk7XHJcbiAgICAgICAgICAgIHRpY2tldC5zZXQoa2V5IGFzIGFueSwgdmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoJ2lkJy5lcXVhbHNJZ25vcmVDYXNlKGtleSkgJiYgaW5mb1t2YWx1ZV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlRmllbGRzOiBBcnJheTxUaWNrZXRGaWVsZHM+ID0gT2JqZWN0LmtleXMoaW5mb1t2YWx1ZV0pIGFzIGFueTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGZpZWxkIG9mIGNhY2hlRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGlja2V0LnNldChmaWVsZCwgaW5mb1t2YWx1ZV1bZmllbGRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGlja2V0O1xyXG4gICAgfVxyXG4gICAgc2V0KGtleTogVGlja2V0RmllbGRzLCB2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgaWYgKFRpY2tldC5maWVsZE5hbWVzLmluY2x1ZGVzSWdub3JlQ2FzZShrZXkpKSB7XHJcbiAgICAgICAgICAgICh0aGlzIGFzIGFueSlba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIVRpY2tldC51bmtub3duQ29sdW1uLmluY2x1ZGVzSWdub3JlQ2FzZShrZXkpKSB7XHJcbiAgICAgICAgICAgIGDkuI3lrZjlnKjnmoTliJc6ICR7IGtleSB9YC53YXJuKCk7XHJcbiAgICAgICAgICAgIFRpY2tldC51bmtub3duQ29sdW1uLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQoa2V5OiBUaWNrZXRGaWVsZHMpOiBhbnkge1xyXG4gICAgICAgIGlmICgkZ2V0KHRoaXMsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRnZXQodGhpcywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ2FzZSB9IGZyb20gXCIuL2VudGl0eS9jbGFzcy9DYXNlXCI7XHJcbmltcG9ydCB7IERhdGFGaWx0ZXIgfSBmcm9tIFwiLi9lbnRpdHkvY2xhc3MvRGF0YUZpbHRlclwiO1xyXG5pbXBvcnQgeyBHcm91cFN0cmF0ZWd5IH0gZnJvbSBcIi4vZW50aXR5L2NsYXNzL0dyb3VwU3RyYXRlZ3lcIjtcclxuaW1wb3J0IHsgT3JkZXJUaWNrZXQgfSBmcm9tIFwiLi9lbnRpdHkvY2xhc3MvT3JkZXJUaWNrZXRcIjtcclxuaW1wb3J0IHsgVGFiU3RyYXRlZ3kgfSBmcm9tIFwiLi9lbnRpdHkvY2xhc3MvVGFiU3RyYXRlZ3lcIjtcclxuaW1wb3J0IHsgVGlja2V0IH0gZnJvbSBcIi4vZW50aXR5L2NsYXNzL1RpY2tldFwiO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIENhc2UsXHJcbiAgICBEYXRhRmlsdGVyLFxyXG4gICAgR3JvdXBTdHJhdGVneSxcclxuICAgIE9yZGVyVGlja2V0LFxyXG4gICAgVGFiU3RyYXRlZ3ksXHJcbiAgICBUaWNrZXRcclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLyoqIOWPmOabtOW3peWFt+exuyAqL1xyXG4gICAgY29uc3QgJHRpY2tldDogVGlja2V0VXRpbHNcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIC8qKiDlj5jmm7Tlt6XlhbfnsbsgKi9cclxuICAgICAgICAkdGlja2V0OiBUaWNrZXRVdGlsc1xyXG4gICAgfVxyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLiRzeXN0ZW1Db25maWcgPSB3aW5kb3cudG9DYWNoZSgoKSA9PiB7XHJcbiAgICByZXR1cm4gJHJzYS5kZWNyeXB0T2JqZWN0KHdpbmRvdy5lbmNvZGVDb25maWcoKSk7XHJcbn0sICdkaW5nbGotc3lzdGVtLWNvbmZpZycpKCdkaW5nbGotc3lzdGVtLWNvbmZpZycpO1xyXG5XaW5kb3cucHJvdG90eXBlLiR1c2VyQ29uZmlnID0gd2luZG93LnRvQ2FjaGUoKCkgPT4ge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5yZWFkQ29uZmlnKCk7XHJcbn0sICdkaW5nbGotdXNlci1jb25maWcnKSgnZGluZ2xqLXVzZXItY29uZmlnJyk7XHJcblxyXG5pZiAoIXdpbmRvdy5pc01hdGNoIHx8IHdpbmRvdy5pc01hdGNoKCkpIHtcclxuICAgIHdpbmRvdy5saW5rQ3NzKFwiL3NyYy9hc3NldHMvY3NzL2NvbnRleHRtZW51LmNzc1wiKTtcclxuICAgIHdpbmRvdy5saW5rQ3NzKFwiL3NyYy9hc3NldHMvY3NzL2NvbW1vbi5jc3NcIik7XHJcbiAgICB3aW5kb3cubGlua0NzcyhcIi9zcmMvYXNzZXRzL2Nzcy9mb3JtLmNzc1wiKTtcclxuICAgIHdpbmRvdy5saW5rQ3NzKFwiL3NyYy9hc3NldHMvY3NzL3RpcC5jc3NcIik7XHJcbiAgICB3aW5kb3cubGlua0NzcyhcIi9zcmMvYXNzZXRzL2Nzcy9sYXlvdXQuY3NzXCIpO1xyXG4gICAgd2luZG93LmxpbmtDc3MoXCIvc3JjL2Fzc2V0cy9jc3MvbW9kYWwuY3NzXCIpO1xyXG59IiwiY29uc3QgbG9jYWxVcmwgPSBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG5cclxubGV0IHNpdHVhdGlvbiA9ICcnO1xyXG5cclxubGV0IHNpdHVhdGlvbk1hcDogYW55ID0gdW5kZWZpbmVkO1xyXG5cclxubGV0IGNvbmZpZzogYW55ID0gdW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gcHJlcGFyZSgpIHtcclxuICAgIGlmIChzaXR1YXRpb25NYXAgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uZmlnID0gd2luZG93LmdldENvbmZpZ09yRGVmYXVsdCgndXJscycsIHt9KTtcclxuICAgIHNpdHVhdGlvbk1hcCA9IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQoJ3VybHMubWFwJywge30pO1xyXG4gICAgaWYgKCFzaXR1YXRpb25NYXApIHtcclxuICAgICAgICBzaXR1YXRpb25NYXAgPSB7fTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IHByb3BLZXkgaW4gc2l0dWF0aW9uTWFwKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gc2l0dWF0aW9uTWFwW3Byb3BLZXldIHx8IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YgYXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChsb2NhbFVybC5pbmNsdWRlc0lnbm9yZUNhc2UoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIHNpdHVhdGlvbiA9IHByb3BLZXk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmwoKTogYW55IHtcclxuICAgIHByZXBhcmUoKTtcclxuICAgIGlmIChjb25maWdbc2l0dWF0aW9uXSkge1xyXG4gICAgICAgIHJldHVybiBjb25maWdbc2l0dWF0aW9uXTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUuZXJyb3IoJ+W9k+WJjee9keWdgOWwmuacquaUr+aMgeiEmuacrCwg6K+36IGU57O7IGRpbmdsaiDlpITnkIYsIOW9k+WJjeWMuemFjeeahOWmguS4iycpO1xyXG4gICAgY29uc29sZS5lcnJvcihzaXR1YXRpb25NYXApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUaWNrZXRVcmwoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBnZXRVcmwoKS50aWNrZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TGlzdFVybCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGdldFVybCgpLmRlZmF1bHRWZXJzaW9uRGF0YTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlYWRNb2R1bGVVcmwoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBnZXRVcmwoKS5yZWFkTW9kdWxlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVhZFZlcnNpb25zVXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gZ2V0VXJsKCkudmVyc2lvbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFkVmVyc2lvblVybCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGdldFVybCgpLnJlYWRWZXJzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKGRhdGE6IGFueSwgX2RlZmF1bHQ6IGFueSk6IEFycmF5PGFueT4ge1xyXG4gICAgY29uc3QgcGF0aCA9IGdldFVybCgpLmRlZmF1bHRWYWx1ZVBhdGg7XHJcbiAgICBpZiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuZ2V0VmFsPEFycmF5PGFueT4+KGRhdGEsIHBhdGgsIF9kZWZhdWx0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG59IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIExhbmdJdGVtIH0gZnJvbSBcImNvcmVcIjtcclxuaW1wb3J0IHsgZ2V0UmVhZFZlcnNpb25zVXJsIH0gZnJvbSBcIi4vdG9vbFwiO1xyXG5cclxuQFNlcnZpY2UoRmlsdGVyLCAnQ0wtRmlsdGVyJylcclxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8YW55PiB7XHJcblxyXG4gICAgQFRlbXBsYXRlXHJcbiAgICBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8ZGl2IGlkPVwiY2FzZS1maWx0ZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsdGVyLXJvd1wiPlxyXG4gICAgICAgICAgICA8aS1pbnB1dCA6aS1wcm9wcz1cImtleXdvcmRQcm9wc1wiPjwvaS1pbnB1dD5cclxuICAgICAgICAgICAgPGktY29tYm8gc3R5bGU9XCJtYXJnaW4tbGVmdDogMTBweFwiIDppLXByb3BzPVwic3RhdHVzUHJvcHNcIj48L2ktY29tYm8+XHJcbiAgICAgICAgICAgIDxpLWNvbWJvIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7IC0td2lkdGg6IDQwMHB4XCIgOmktcHJvcHM9XCJ2ZXJzaW9uUHJvcHNcIj48L2ktY29tYm8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1mbGV4XCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDxpLXN3aXRjaCA6aS1wcm9wcz1cIm1vZGVQcm9wc1wiPjwvaS1zd2l0Y2g+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZpbHRlci1yb3dcIiB2LWlmPVwiZmlsdGVyLm1vZGUgPT0gJ2NhcmQnXCI+XHJcbiAgICAgICAgICAgIDxpLWlucHV0IDppLXByb3BzPVwiY2FyZENudFByb3BzXCI+PC9pLWlucHV0PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBARmllbGQgcHVibGljIGZpbHRlcjogQXBwRmlsdGVyID0ge1xyXG4gICAgICAgIGtleXdvcmQ6ICcnLFxyXG4gICAgICAgIHN0YXR1czogJycsXHJcbiAgICAgICAgdmVyc2lvbnM6ICcnLFxyXG4gICAgICAgIG1vZGU6ICdjYXJkJyxcclxuICAgICAgICBjYXJkQ250OiAnNycsXHJcbiAgICB9XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyB2ZXJzaW9uTGlzdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpOiBJbnB1dFByb3BzID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYXB0aW9uOiAn5pCc57SiJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfor7fovpPlhaXlhbPplK7lrZcnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogKGRhdGEpID0+IHNlbGYuZmlsdGVyLmtleXdvcmQgPSBkYXRhLnZhbHVlLFxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMga2V5d29yZFByb3BzOiBJbnB1dFByb3BzO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpOiBDb21ib1Byb3BzPExhbmdJdGVtPiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogJ+eKtuaAgScsXHJcbiAgICAgICAgICAgIGxpc3Q6IE9iamVjdC52YWx1ZXMoc2VsZi5zdGF0dXMpLFxyXG4gICAgICAgICAgICBnZXRWYWx1ZTogaXRlbSA9PiBpdGVtLmVuLFxyXG4gICAgICAgICAgICBnZXRMYWJlbDogaXRlbSA9PiBpdGVtLnpoLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogZGF0YSA9PiBzZWxmLmZpbHRlci5zdGF0dXMgPSBkYXRhLnZhbHVlLFxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhdHVzUHJvcHM6IENvbWJvUHJvcHM8TGFuZ0l0ZW0+O1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpOiBDb21ib1Byb3BzPHN0cmluZz4gPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhcHRpb246ICfniYjmnKwnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+m7mOiupOS4uuW9k+WJjeeJiOacrCcsXHJcbiAgICAgICAgICAgIGxpc3Q6IHNlbGYudmVyc2lvbk5hbWVzLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogZGF0YSA9PiBzZWxmLmZpbHRlci5zdGF0dXMgPSBkYXRhLnZhbHVlLFxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgdmVyc2lvblByb3BzOiBDb21ib1Byb3BzPHN0cmluZz47XHJcbiAgICBcclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpOiBTd2l0Y2hQcm9wcyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJlVHh0OiAn5Y2h54mH6KeG5Zu+JyxcclxuICAgICAgICAgICAgcG9zdFR4dDogJ+ihqOagvOinhuWbvicsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBkYXRhID0+IHNlbGYuZmlsdGVyLm1vZGUgPSAoZGF0YS52YWx1ZSA/ICd0YWJsZScgOiAnY2FyZCcpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBtb2RlUHJvcHM6IFN3aXRjaFByb3BzO1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpOiBJbnB1dFByb3BzID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYXB0aW9uOiAn5q+P5YiX55qE5Y2h54mH5pWwJyxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfor7fovpPlhaXmr4/liJfnmoTljaHniYfmlbDph48nLFxyXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICc3JyxcclxuICAgICAgICAgICAgb25DaGFuZ2U6IChkYXRhKSA9PiBzZWxmLmZpbHRlci5jYXJkQ250ID0gZGF0YS52YWx1ZSxcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGNhcmRDbnRQcm9wczogSW5wdXRQcm9wcztcclxuXHJcbiAgICAvKiog54q25oCBICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogRmlsdGVyKSA9PiB3aW5kb3cuZ2V0Q29uZmlnT3JEZWZhdWx0KCdjb25zdGFudC5zdGF0dXMnLCBbXSwgdHJ1ZSkpXHJcbiAgICBwdWJsaWMgc3RhdHVzOiBhbnlcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogRmlsdGVyKSA9PiB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5pc0RldigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAod2luZG93IGFzIGFueSkucmVhZFZlcnNpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlbGYudmVyc2lvbkxpc3QubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgc2VsZi52ZXJzaW9uTGlzdCA9IEpTT04ucGFyc2UoJG5ldC5nZXQoZ2V0UmVhZFZlcnNpb25zVXJsKCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGYudmVyc2lvbkxpc3Q7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIHZlcnNpb25zOiBBcnJheTxhbnk+O1xyXG5cclxuICAgIEBDb21wdXRlKChzZWxmOiBGaWx0ZXIpID0+IHNlbGYudmVyc2lvbnMubWFwKChpOiBhbnkpID0+IGkuZXJwVmVyc2lvbikpXHJcbiAgICBwdWJsaWMgdmVyc2lvbk5hbWVzOiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIEBXYXRjaCgnZmlsdGVyJylcclxuICAgIHB1YmxpYyBvbkZpbHRlckNoYW5nZShuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIG5ld1ZhbCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCAkcmVnaXN0cnkuYnVpbGRDb21wb25lbnQoJ0NMLUZpbHRlcicpOyIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50IH0gZnJvbSBcImNvcmVcIjtcclxuaW1wb3J0IHsgQ2FzZSB9IGZyb20gXCJkZXZcIjtcclxuaW1wb3J0IHsgZ2V0VGlja2V0VXJsIH0gZnJvbSBcIi4vdG9vbFwiO1xyXG5cclxuQFNlcnZpY2UoQ2FyZCwgJ0FwcENhcmQnLCB0cnVlKVxyXG5jbGFzcyBDYXJkIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQ8QXBwQ2FyZFByb3BzPiB7XHJcblxyXG4gICAgQFRlbXBsYXRlIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJtb2RlLWNvbnRhaW5lciBjYXJkXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhc2UtbGlzdC1zdGF0dXMtcGFnZVwiIHYtZm9yPVwiKHN0YXR1c05hbWUsIGlkeCkgaW4gc3RhdHVzTmFtZXNcIj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpUHJvcHMuaXNBY3RpdmUgfHwgaWR4ID09IDBcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwiJ2Nhc2UtbGlzdC1jYXJkICcgKyBfY2FzZV8uc3RhdHVzLmVuLnRvTG93ZXJDYXNlKClcIiA6c3R5bGU9XCJ7ICctLWNudCc6IGNhcmRDbnQgfVwiIHYtZm9yPVwiX2Nhc2VfIGluIGdyb3VwRGF0YVtzdGF0dXNOYW1lXVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWxpbmUgY2FyZC10aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC10aWNrZXRcIiB2LWlmPVwiX2Nhc2VfLnRpY2tldFwiIEBjbGljaz1cIm9wZW5DYXJkVGlja2V0KF9jYXNlXylcIj4je3sgX2Nhc2VfLnRpY2tldCB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IDpjbGFzcz1cIl9jYXNlXy5zdGF0dXMuZW4udG9Mb3dlckNhc2UoKVwiIHYtZWxzZT57eyBfY2FzZV8uc3RhdHVzLmVuIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLW5hbWVcIiA6dGl0bGU9XCJfY2FzZV8uY2FzZU5hbWVcIj57eyBfY2FzZV8uY2FzZU5hbWUucmVwbGFjZSgvXjIuMFstX10vLCAnJykucmVwbGFjZSgvXFwuW3hYXVtsTF1bc1NdW3hYXT8kLywgJycpIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtbGluZSBjYXJkLXBlcmNlbnRcIiB2LWlmPVwiWyd0aWNrZXQnLCdydW5uaW5nJ10uaW5jbHVkZXNJZ25vcmVDYXNlKF9jYXNlXy5zdGF0dXMuZW4pXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpLXByb2dyZXNzIDpzdHlsZT1cInsgJy0tYmcnOiAndGlja2V0Jy5lcXVhbHNJZ25vcmVDYXNlKF9jYXNlXy5zdGF0dXMuZW4pID8gJ3JlZCcgOiAncmdiKDE4MCwxODAsMTgwKScgfVwiIGNsYXNzPVwiY2FyZC1saW5lLWl0ZW1cIiA6aS1wcm9wcz1cImdldExpbmVQcm9ncmVzc1Byb3BzKF9jYXNlXylcIj48L2ktcHJvZ3Jlc3M+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpLXByb2dyZXNzIDpzdHlsZT1cInsgJy0tYmcnOiAndGlja2V0Jy5lcXVhbHNJZ25vcmVDYXNlKF9jYXNlXy5zdGF0dXMuZW4pID8gJ3JlZCcgOiAncmdiKDE4MCwxODAsMTgwKScgfVwiIGNsYXNzPVwiY2FyZC1saW5lLWl0ZW1cIiA6aS1wcm9wcz1cImdldFN0ZXBQcm9ncmVzc1Byb3BzKF9jYXNlXylcIj48L2ktcHJvZ3Jlc3M+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtbGluZSBjYXJkLXRpbWUtY29zdFwiIHYtaWY9XCJbJ3RpY2tldCddLmluY2x1ZGVzSWdub3JlQ2FzZShfY2FzZV8uc3RhdHVzLmVuKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PuiAl+aXtjoge3sgX2Nhc2VfLnRpbWVDb3N0IH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0TGluZVByb2dyZXNzUHJvcHMoaXRlbTogQ2FzZSk6IFByb2dyZXNzUHJvcHMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhcHRpb246IGDooYzov5vluqY6ICR7IGl0ZW0uY3VycmVudFJvdyB9LyR7IGl0ZW0udG90YWxSb3cgfSwgYCxcclxuICAgICAgICAgICAgcGVyY2VudDogYCR7IChpdGVtLnRvdGFsUm93ID8gKGl0ZW0uY3VycmVudFJvdyAvIGl0ZW0udG90YWxSb3cgKiAxMDApLnRvRml4ZWQoMikgOiAwKSB9JWBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgZ2V0U3RlcFByb2dyZXNzUHJvcHMoaXRlbTogQ2FzZSk6IFByb2dyZXNzUHJvcHMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhcHRpb246IGDmraXmlbDov5vluqY6ICR7IGl0ZW0uY3VycmVudFN0ZXAgfS8keyBpdGVtLnRvdGFsU3RlcCB9LCBgLFxyXG4gICAgICAgICAgICBwZXJjZW50OiBgJHsgKGl0ZW0udG90YWxTdGVwID8gKGl0ZW0uY3VycmVudFN0ZXAgLyBpdGVtLnRvdGFsU3RlcCAqIDEwMCkudG9GaXhlZCgyKSA6IDApIH0lYFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyBvcGVuQ2FyZFRpY2tldChfY2FzZV86IENhc2UpOiB2b2lkIHtcclxuICAgICAgICB3aW5kb3cub3BlbihgJHsgZ2V0VGlja2V0VXJsKCkgfS8keyBfY2FzZV8udGlja2V0IH1gLCBgIyR7IF9jYXNlXy50aWNrZXQgfWApXHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IENhcmQpID0+IHtcclxuICAgICAgICByZXR1cm4gc2VsZi5pUHJvcHMuZ3JvdXBEYXRhIHx8IHt9O1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyBncm91cERhdGE6IGFueTtcclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogQ2FyZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzZWxmLmlQcm9wcy5zdGF0dXNOYW1lcyB8fCBbXTtcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhdHVzTmFtZXM6IEFycmF5PHN0cmluZz47XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IENhcmQpID0+IHtcclxuICAgICAgICByZXR1cm4gc2VsZi5pUHJvcHMuY2FyZENudCB8fCAnNSc7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGNhcmRDbnQ6IHN0cmluZztcclxuICAgIFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCAkcmVnaXN0cnkuYnVpbGRDb21wb25lbnQoJ0FwcENhcmQnKTsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgTGFuZ0l0ZW0gfSBmcm9tIFwiY29yZVwiO1xyXG5pbXBvcnQgeyBDYXNlIH0gZnJvbSBcImRldlwiO1xyXG5pbXBvcnQgeyBnZXRUaWNrZXRVcmwgfSBmcm9tIFwiLi90b29sXCI7XHJcblxyXG5AU2VydmljZShUYWJsZU1vZGUsICdBcHBUYWJsZScsIHRydWUpXHJcbmNsYXNzIFRhYmxlTW9kZSBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PEFwcFRhYmxlUHJvcHM+IHtcclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJtb2RlLWNvbnRhaW5lciB0YWJsZVwiPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihzdGF0dXNOYW1lLCBpZHgpIGluIHN0YXR1c05hbWVzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImlQcm9wcy5pc0FjdGl2ZSB8fCBpZHggPT0gMFwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlXCI+XHJcbiAgICAgICAgICAgICAgICA8aS10YWJsZSBjbGFzcz1cImV2ZXJ5LXRhYlwiIDppLXByb3BzPVwidGFibGVQcm9wcyhzdGF0dXNOYW1lKVwiPjwvaS10YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgdGFibGVQcm9wcyhzdGF0dXNOYW1lOiBzdHJpbmcpOiBUYWJsZVByb3BzPENhc2UsIExhbmdJdGVtPiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogVGFibGVNb2RlID0gdGhpcztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsaXN0OiB0aGlzLmdyb3VwRGF0YVtzdGF0dXNOYW1lXSxcclxuICAgICAgICAgICAgY29sdW1uczogdGhpcy5nZXRDb2x1bW5zVG9EaXNwbGF5KHN0YXR1c05hbWUpLFxyXG4gICAgICAgICAgICBmbGV4Q29sdW1uczogWydjYXNlTmFtZSddLFxyXG4gICAgICAgICAgICBnZXRDb2x1bW5LZXk6IGl0ZW0gPT4gaXRlbS5lbixcclxuICAgICAgICAgICAgZ2V0Q29sdW1uTGFiZWw6IGl0ZW0gPT4gaXRlbS56aCxcclxuICAgICAgICAgICAgZ2V0Q2VsbDogKGl0ZW0sIGNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbiBpbnN0YW5jZW9mIExhbmdJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRnZXQoaXRlbSwgY29sdW1uLmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAkZ2V0KGl0ZW0sIGNvbHVtbik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYWRlZDogcGFyYSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gd2luZG93LnNlbGVjdG9yKGAjJHsgcGFyYS52aWQgfSAuZGluZ2xqLXYtdGJvZHkgLmRpbmdsai12LWNlbGwudGlja2V0YCk7XHJcbiAgICAgICAgICAgICAgICBsaXN0LmZvckVhY2goKGk6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGkuaW5uZXJUZXh0LnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmlubmVySFRNTCA9IGA8ZGl2IG9uY2xpY2s9XCJ3aW5kb3cub3BlbignJHsgZ2V0VGlja2V0VXJsKCkgfS8keyB0ZXh0IH0nLCAnIyR7IHRleHQgfScpXCI+IyR7IHRleHQgfTwvZGl2PmA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqIOiuoeeul+afkOaooeWdlywg5p+Q54q25oCB5LiL5pyJ5ZOq5Lqb5YiX6KaB5pi+56S6ICovXHJcbiAgICBATWV0aG9kIHB1YmxpYyBnZXRDb2x1bW5zVG9EaXNwbGF5KHN0YXR1c05hbWU6IHN0cmluZyk6IEFycmF5PExhbmdJdGVtPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdyb3VwRGF0YSB8fCAhdGhpcy5ncm91cERhdGFbc3RhdHVzTmFtZV0gfHwgIXRoaXMuZ3JvdXBEYXRhW3N0YXR1c05hbWVdLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWFiOaKiuaJgOacieWIl+iuoeeul+WHuuadpVxyXG4gICAgICAgIGxldCBpZ25vcmVDb2x1bW5zID0gd2luZG93LmdldENvbmZpZ09yRGVmYXVsdCgndGFibGUuaWdub3JlQ29sdW1uJywgW10sIGZhbHNlKTtcclxuICAgICAgICBjb25zdCBsaXN0NERpc3BsYXk6IEFycmF5PENhc2U+ID0gdGhpcy5ncm91cERhdGFbc3RhdHVzTmFtZV07XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gQ2FzZS5fZmllbGRzXy5maWx0ZXIoZmllbGROYW1lID0+IHtcclxuICAgICAgICAgICAgLy8g5qC55o2u6YWN572u5oqK5b+955Wl55qE5YiX6L+H5ruk5o6JXHJcbiAgICAgICAgICAgIGlmIChpZ25vcmVDb2x1bW5zLmluY2x1ZGVzSWdub3JlQ2FzZShmaWVsZE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g54S25ZCO55yL55yL5pyJ5rKh5pyJ5ZOq5LiA5YiX5piv5a6M5YWo5rKh5pyJ5pWw5o2u55qELCDkuZ/ov4fmu6TmjoksIOWPquimgei/meWIl+WcqOS7u+aEj+ihjOacieaVsOaNriwg6YO95LiN5Lya6L+H5ruk5o6JXHJcbiAgICAgICAgICAgIGZvciAobGV0IF9jYXNlXyBvZiBsaXN0NERpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfY2FzZV8gJiYgKF9jYXNlXyBhcyBhbnkpW2ZpZWxkTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9KS5tYXAoZmllbGROYW1lID0+IG5ldyBMYW5nSXRlbShmaWVsZE5hbWUsIENhc2UuX2ZpZWxkTWFwX1tmaWVsZE5hbWVdKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogVGFibGVNb2RlKSA9PiBzZWxmLmlQcm9wcy5ncm91cERhdGEgfHwge30pXHJcbiAgICBwdWJsaWMgZ3JvdXBEYXRhOiBhbnk7XHJcblxyXG4gICAgQENvbXB1dGUoKHNlbGY6IFRhYmxlTW9kZSkgPT4gc2VsZi5pUHJvcHMuc3RhdHVzTmFtZXMgfHwgW10pXHJcbiAgICBwdWJsaWMgc3RhdHVzTmFtZXM6IEFycmF5PHN0cmluZz47XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCAkcmVnaXN0cnkuYnVpbGRDb21wb25lbnQoJ0FwcFRhYmxlJyk7IiwiaW1wb3J0ICcuL2VuY29kZS1jb25maWcnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgTGFuZ0l0ZW0gfSBmcm9tICdjb3JlJztcclxuaW1wb3J0IHsgQ2FzZSB9IGZyb20gJ2Rldic7XHJcbmltcG9ydCB4ZmlsdGVyIGZyb20gJy4vZmlsdGVyJztcclxuaW1wb3J0IHhjYXJkIGZyb20gJy4vY2FyZCc7XHJcbmltcG9ydCB4dGFibGUgZnJvbSAnLi90YWJsZSc7XHJcbmltcG9ydCB7IGdldERlZmF1bHRMaXN0VXJsLCBnZXREZWZhdWx0VmFsdWUsIGdldFJlYWRWZXJzaW9uVXJsLCBnZXRVcmwgfSBmcm9tICcuL3Rvb2wnO1xyXG5cclxuLy8g6YCa6L+H5q2k5pa55rOV5YWI5Yik5a6a5piv5ZCm5pSv5oyB6ISa5pysLCDkuI3mlK/mjIHliJnpgIDlh7osIOS4jeimgei/m+ihjOS7u+S9leS/ruaUuVxyXG5pZiAoZ2V0VXJsKCkgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICB3aW5kb3cubGlua0NzcygnL3NyYy9zY3JpcHQvY2FzZS1saXN0L2luZGV4LmNzcycpO1xyXG4gICAgd2luZG93LmRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gYDxkaXYgaWQ9XCJjYXNlLWxpc3QtZGluZ2xqLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxpLW5hdi12aWV3IDppLXByb3BzPVwibmF2UHJvcHNcIj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWZvcmU+XHJcbiAgICAgICAgICAgICAgICA8eGZpbHRlciBAb24tY2hhbmdlPVwib2JqID0+IGZpbHRlci5kYXRhID0gb2JqLnZhbHVlXCI+PC94ZmlsdGVyPlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgI2NvbnRlbnQ9XCJ7IGFjdGl2ZSB9XCIgaWQ9XCJjYXNlLWxpc3Qtdmlld1wiPlxyXG4gICAgICAgICAgICAgICAgPGktdGFiLXZpZXcgdi1mb3I9XCJjb21wb25lbnROYW1lIGluIGNvbXBvbmVudE5hbWVzXCIgOmktcHJvcHM9XCJ0YWJWaWV3UHJvcHMoY29tcG9uZW50TmFtZSwgYWN0aXZlKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx4Y2FyZCAgdi1pZj1cImZpbHRlci5kYXRhLm1vZGUgPT0gJ2NhcmQnXCIgOmktcHJvcHM9XCJjYXJkTW9kZVByb3BzKGNvbXBvbmVudE5hbWUsIGFjdGl2ZSlcIj48L3hjYXJkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx4dGFibGUgdi1lbHNlIDppLXByb3BzPVwidGFibGVNb2RlUHJvcHMoY29tcG9uZW50TmFtZSwgYWN0aXZlKVwiPjwveHRhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9pLXRhYi12aWV3PlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFmdGVyPjwvdGVtcGxhdGU+XHJcbiAgICAgICAgPC9pLW5hdi12aWV3PlxyXG4gICAgPC9kaXY+YDtcclxufVxyXG5cclxuQFNlcnZpY2UoQXBwLCAnQXBwJylcclxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50PGFueT4ge1xyXG5cclxuICAgIEBDb21wb25lbnQoe1xyXG4gICAgICAgIHhmaWx0ZXIsIHhjYXJkLCB4dGFibGVcclxuICAgIH0pXHJcbiAgICBATW91bnRlZCBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgd2luZG93LmRpc3BsYXlEYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEZpZWxkIHB1YmxpYyBhbGxWZXJzaW9uRGF0YXM6IGFueSA9IHt9O1xyXG5cclxuICAgIEBGaWVsZCBwdWJsaWMgZmlsdGVyOiB7IGRhdGE6IEFwcEZpbHRlciB9ID0ge1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgbW9kZTogJ2NhcmQnLFxyXG4gICAgICAgICAgICBjYXJkQ250OiAnNycsXHJcbiAgICAgICAgICAgIHZlcnNpb25zOiAnJyxcclxuICAgICAgICAgICAga2V5d29yZDogJycsXHJcbiAgICAgICAgICAgIHN0YXR1czogJycsXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKiog5p+Q5LiqIENvbXBvbmVudCDliIbnu4TkuIssIOWGjeasoeaMieeFpyBTdGF0dXMg6L+b6KGM57uG5YiG57uEICovXHJcbiAgICBATWV0aG9kIHB1YmxpYyBncm91cEJ5U3RhdHVzKGNvbXBvbmVudE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuZ3JvdXBCeSh0aGlzLmdyb3VwQnlDb21wb25lbnRbY29tcG9uZW50TmFtZV0sIChpdGVtOiBDYXNlKSA9PiBpdGVtLnN0YXR1cy5lbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOafkOS4qiBDb21wb25lbnQg5YiG57uE5LiLLCDmjpLlpb3luo/nmoQgU3RhdHVzIOmhuuW6jyAqL1xyXG4gICAgQE1ldGhvZCBwdWJsaWMgc3RhdHVzTmFtZXMoY29tcG9uZW50TmFtZTogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ3JvdXBCeVN0YXR1cyhjb21wb25lbnROYW1lKTtcclxuICAgICAgICBsZXQgb3JkZXI6IEFycmF5PHN0cmluZz4gPSB3aW5kb3cuZ2V0Q29uZmlnT3JEZWZhdWx0KCdvcmRlci5wcmVmZXJTdGF0dXMnLCBbXSwgZmFsc2UpXHJcbiAgICAgICAgICAgIC5tYXAoaSA9PiBpLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhkYXRhKS5zb3J0KChvMTogc3RyaW5nLCBvMjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcmRlci5jb21wYXJlQnkobzEudG9Mb3dlckNhc2UoKSwgbzIudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgdGFiVGl0bGUoY29tcG9uZW50TmFtZTogc3RyaW5nKTogQXJyYXk8TGFuZ0l0ZW0+IHtcclxuICAgICAgICBsZXQgdGFiS2V5cyA9IHRoaXMuc3RhdHVzTmFtZXMoY29tcG9uZW50TmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRhYktleXMubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGFuZ0l0ZW0oa2V5LCB0aGlzLnN0YXR1c1trZXldLnpoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogQXBwKTogTmF2aWdhdG9yVmlld1Byb3BzPHN0cmluZz4gPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IHNlbGYuY29tcG9uZW50TmFtZXNcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIG5hdlByb3BzOiBOYXZpZ2F0b3JWaWV3UHJvcHM8c3RyaW5nPjtcclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyB0YWJWaWV3UHJvcHMoY29tcG9uZW50TmFtZTogc3RyaW5nLCBhY3RpdmU6IHN0cmluZyk6IFRhYlZpZXdQcm9wczxMYW5nSXRlbT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IHRoaXMudGFiVGl0bGUoY29tcG9uZW50TmFtZSksXHJcbiAgICAgICAgICAgIGlzQWN0aXZlOiBjb21wb25lbnROYW1lID09IGFjdGl2ZSxcclxuICAgICAgICAgICAgZ2V0TGFiZWw6IGl0ZW0gPT4gaXRlbS56aCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZCBwdWJsaWMgY2FyZE1vZGVQcm9wcyhjb21wb25lbnROYW1lOiBzdHJpbmcsIGFjdGl2ZTogc3RyaW5nKTogQXBwQ2FyZFByb3BzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpc0FjdGl2ZTogY29tcG9uZW50TmFtZSA9PSBhY3RpdmUsXHJcbiAgICAgICAgICAgIHN0YXR1c05hbWVzOiB0aGlzLnN0YXR1c05hbWVzKGNvbXBvbmVudE5hbWUpLFxyXG4gICAgICAgICAgICBncm91cERhdGE6IHRoaXMuZ3JvdXBCeVN0YXR1cyhjb21wb25lbnROYW1lKSxcclxuICAgICAgICAgICAgY2FyZENudDogdGhpcy5maWx0ZXIuZGF0YS5jYXJkQ250LFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kIHB1YmxpYyB0YWJsZU1vZGVQcm9wcyhjb21wb25lbnROYW1lOiBzdHJpbmcsIGFjdGl2ZTogc3RyaW5nKTogQXBwVGFibGVQcm9wcyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaXNBY3RpdmU6IGNvbXBvbmVudE5hbWUgPT0gYWN0aXZlLFxyXG4gICAgICAgICAgICBzdGF0dXNOYW1lczogdGhpcy5zdGF0dXNOYW1lcyhjb21wb25lbnROYW1lKSxcclxuICAgICAgICAgICAgZ3JvdXBEYXRhOiB0aGlzLmdyb3VwQnlTdGF0dXMoY29tcG9uZW50TmFtZSksXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnirbmgIEgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBBcHApID0+IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQoJ2NvbnN0YW50LnN0YXR1cycsIFtdLCB0cnVlKSlcclxuICAgIHB1YmxpYyBzdGF0dXM6IGFueVxyXG5cclxuICAgIC8qKiDojrflj5bnlKjkvovpm4blkIggKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBBcHApID0+IHtcclxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gc2VsZi5maWx0ZXIuZGF0YS52ZXJzaW9ucyB8fCAnZGVmYXVsdCc7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5pc0RldigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVhZERhdGEodmVyc2lvbik7IC8vIOeUqOS6juacrOWcsOa1i+ivlSwg5pys5Zyw5Lya6YCa6L+H6L+Z5Liq5pa55rOV5o+Q5L6b5pWw5o2uXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZWxmLmFsbFZlcnNpb25EYXRhc1t2ZXJzaW9uXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5hbGxWZXJzaW9uRGF0YXNbdmVyc2lvbl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgaWYgKHZlcnNpb24gPT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cjogc3RyaW5nID0gJG5ldC5nZXQoZ2V0RGVmYXVsdExpc3RVcmwoKSk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldERlZmF1bHRWYWx1ZShKU09OLnBhcnNlKHN0ciksIFtdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzdHI6IHN0cmluZyA9ICRuZXQuZ2V0KGdldFJlYWRWZXJzaW9uVXJsKCkgKyB2ZXJzaW9uKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gIEpTT04ucGFyc2Uoc3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5hbGxWZXJzaW9uRGF0YXNbdmVyc2lvbl0gPSByZXN1bHRcclxuICAgICAgICAgICAgLm1hcCgoaXRlbTogYW55KSA9PiBuZXcgQ2FzZShpdGVtLCBzZWxmLnN0YXR1cykpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW06IENhc2UpID0+IGl0ZW0uc3RhdHVzICE9IHNlbGYuc3RhdHVzLlVOS05PV04pO1xyXG4gICAgICAgIHJldHVybiBzZWxmLmFsbFZlcnNpb25EYXRhc1t2ZXJzaW9uXTtcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgb3JpZ2luRGF0YTogQXJyYXk8Q2FzZT5cclxuXHJcbiAgICAvKiog57uP6L+H6L+H5ruk5a2X5q615aSE55CG55qE55So5L6L6ZuG5ZCIICovXHJcbiAgICBAQ29tcHV0ZSgoc2VsZjogQXBwKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNlbGYub3JpZ2luRGF0YTtcclxuICAgICAgICBpZiAoc2VsZi5maWx0ZXIuZGF0YS5rZXl3b3JkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKF9jYXNlXzogQ2FzZSkgPT4gX2Nhc2VfLmNhc2VOYW1lLmluY2x1ZGVzSWdub3JlQ2FzZShzZWxmLmZpbHRlci5kYXRhLmtleXdvcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlbGYuZmlsdGVyLmRhdGEuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKF9jYXNlXzogQ2FzZSkgPT4gSlNPTi5zdHJpbmdpZnkoX2Nhc2VfLnN0YXR1cykgPT0gSlNPTi5zdHJpbmdpZnkoc2VsZi5maWx0ZXIuZGF0YS5zdGF0dXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAn5pyq5om+5Yiw5Lu75L2V5pyJ5pWI5pWw5o2uJy5lcnIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZmlsdGVyZWREYXRhOiBBcnJheTxDYXNlPlxyXG5cclxuICAgIC8qKiDlsIbnu4/ov4fov4fmu6TlpITnkIbnmoTnlKjkvovpm4blkIjmjInnhacgY29tcG9uZW50IOWtl+autei/m+ihjOWIhue7hCwgY29tcG9uZW50IOWAvOebuOetieeahOeUqOS+i+aUvuWIsOS4gOS4quaVsOe7hOS4rSAqL1xyXG4gICAgQENvbXB1dGUoKHNlbGY6IEFwcCkgPT4ge1xyXG4gICAgICAgIGxldCBmaXJzdEdyb3VwID0gd2luZG93Lmdyb3VwQnkoc2VsZi5maWx0ZXJlZERhdGEsICdjb21wb25lbnQnKTtcclxuICAgICAgICBjb25zdCBhcnJheSA9IHNlbGYuZmlsdGVyZWREYXRhLmZpbHRlcigoaTogQ2FzZSkgPT4gaS5sZXZlbCA9PSAwKTtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmaXJzdEdyb3VwWydVTklUJ10gPSBhcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpcnN0R3JvdXA7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdyb3VwQnlDb21wb25lbnQ6IGFueTtcclxuXHJcbiAgICBcclxuICAgIC8qKiDmjpLov4fluo/nmoTmqKHlnZflkI3np7AgKi9cclxuICAgIEBDb21wdXRlKChzZWxmOiBBcHApID0+IHtcclxuICAgICAgICBsZXQgb3JkZXIgPSB3aW5kb3cuZ2V0Q29uZmlnT3JEZWZhdWx0KCdvcmRlci5wcmVmZXJDb21wb25lbnQnLCBbXSwgZmFsc2UpXHJcbiAgICAgICAgICAgIC5tYXAoaSA9PiBpLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIG9yZGVyLnVuc2hpZnQoJ3VuaXQnKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3Qua2V5cyhzZWxmLmdyb3VwQnlDb21wb25lbnQpLnNvcnQoKG8xLCBvMikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gb3JkZXIuY29tcGFyZUJ5KG8xLnRvTG93ZXJDYXNlKCksIG8yLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KVxyXG4gICAgY29tcG9uZW50TmFtZXM6IEFycmF5PHN0cmluZz47XHJcblxyXG59XHJcblxyXG53aW5kb3cuY3JlYXRlVnVlKCRyZWdpc3RyeS5idWlsZENvbXBvbmVudCgnQXBwJyksICcjY2FzZS1saXN0LWRpbmdsai1jb250YWluZXInKTsiXSwibmFtZXMiOlsic2ltcGxlUGFyc2VUb1N0cmluZyIsIm9iamVjdCIsInRvTG93ZXJDYXNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIkFycmF5IiwicHJvdG90eXBlIiwiaW5jbHVkZXNJZ25vcmVDYXNlIiwiYW5vdGhlciIsInRoaXMiLCJpbmRleE9mSWdub3JlQ2FzZSIsInRhcmdldCIsIm1hcCIsImVsZW1lbnQiLCJpbmRleE9mIiwicHVzaE5ldyIsImluY2x1ZGVzIiwicHVzaCIsInJlbW92ZSIsImlkeCIsInNwbGljZSIsImdldElmRXhpc3RCeUtleSIsImtleSIsImV4cGVjdFZhbHVlIiwicmVzdWx0IiwiaXRlbSIsIiRnZXQiLCJjb21wYXJlQnkiLCJvMSIsIm8yIiwibGVuZ3RoIiwiaWR4MSIsImlkeDIiLCJXaW5kb3ciLCJnZXRDb25maWdPckRlZmF1bHQiLCJwYXRoIiwiX2RlZmF1bHQiLCJtZXJnZSIsImNvbmZpZzEiLCJ3aW5kb3ciLCJnZXRWYWwiLCIkdXNlckNvbmZpZyIsImNvbmZpZzIiLCIkc3lzdGVtQ29uZmlnIiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJEYXRlIiwiJHNldE1pbnV0ZSIsIm51bSIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiJHNldEhvdXIiLCJzZXRIb3VycyIsImdldEhvdXJzIiwiJHNldERhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIiRzZXRNb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCIkc2V0WWVhciIsInNldFllYXIiLCJnZXRZZWFyIiwiJGZvcm1hdCIsImZvcm1hdCIsInJlcGxhY2UiLCJnZXRGdWxsWWVhciIsImdldFNlY29uZHMiLCJieUlkIiwiaWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYnlDbGFzcyIsImNsYXNzZXMiLCJmaW5kRGF0YSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZWZ1bmMiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNhbGNUeHRXaWR0aCIsImlubmVyVGV4dCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJ0eHQiLCJjdHgiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJ3aWR0aCIsIm1lYXN1cmVUZXh0IiwiTWF0aCIsImZsb29yIiwiRWxlbWVudCIsImFuaW1hdGUiLCJjb25maWciLCJ0cmFuc2l0aW9uIiwib2xkX3RyYW5zaXRpb24iLCJzdHlsZSIsInNldFRpbWVvdXQiLCJ0YXJnZXRfdHJhbnNpdGlvbiIsImZpbmRDaGlsZHJlbkJ5Q2xhc3MiLCJjbGF6eiIsImxpc3QiLCJjaGlsZHJlbiIsImkiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImZpbmRCcm9CeUNsYXNzIiwicGFyZW50RWxlbWVudCIsImluZGV4QnlDbGFzcyIsImluZGV4QnlDbGFzc0luQ2hpbGRyZW4iLCIkc2V0IiwidmFsdWUiLCJwdXNoVG9BcnJheSIsImZpZWxkS2V5IiwiZG9udFJlcGVhdCIsImFycmF5IiwidW5zaGlmdFRvQXJyYXkiLCJ1bnNoaWZ0IiwiZGF0YSIsInByb3BOYW1lIiwic3BsaXQiLCJ1dWlkIiwicHJlZml4IiwicmFuZG9tIiwic3Vic3RyaW5nIiwiZ3JvdXBCeSIsImV4cCIsImZvckVhY2giLCJjcmVhdGVSZWdFeHAiLCJzdHIiLCJSZWdFeHAiLCJjb3B5VHh0IiwidGV4dCIsIm9wYWNpdHkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiYWRkUmFuZ2UiLCJleGVjQ29tbWFuZCIsInJlbW92ZUFsbFJhbmdlcyIsImluZm8iLCJtYXRjaCIsImlzTWF0Y2giLCJpc0RldiIsInVybCIsImxvY2F0aW9uIiwiaHJlZiIsImVuYWJsZVdlYnMiLCJ3ZWJNYXRoIiwid2ViIiwic3RhcnRzV2l0aCIsIndhcm4iLCJvcmlnaW5SZWdFeHBzIiwib3JpZ2luUmVnRXhwIiwidGVzdCIsIlN0cmluZ1Bvb2wiLCJ0b0NhY2hlIiwiZm4iLCJuYW1lIiwiY2FjaGUiLCJzdHJpbmcyQXJyYXlCdWZmZXIiLCJidWYiLCJBcnJheUJ1ZmZlciIsInZpZXciLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsInRvTnVtIiwidmFsIiwic3VtIiwicG93IiwidG9Db2x1bW4iLCJvZmZzZXQiLCJnZXRDb2RlIiwibiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlcGVhdCIsIiRleGNlbCIsImV4cG9ydCIsImlzRW5hYmxlRXhjZWwiLCJlbmFibGVFeGNlbCIsImJsb2IiLCJzaGVldCIsInNoZWV0TmFtZSIsIndvcmtib29rIiwiU2hlZXROYW1lcyIsIlNoZWV0cyIsIlhMU1giLCJ3cml0ZSIsImJvb2tUeXBlIiwiYm9va1NTVCIsInR5cGUiLCJCbG9iIiwic2hlZXQyYmxvYiIsInV0aWxzIiwiYW9hX3RvX3NoZWV0Iiwic2F2ZU5hbWUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhTGluayIsImRvd25sb2FkIiwiY2xpY2siLCJvcGVuRG93bmxvYWREaWFsb2ciLCJyZWFkRmlsZSIsImZpbGUiLCJvcHRpb25zIiwicmVhZCIsImNhbGxiYWNrIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImUiLCJyZWFkQXNCaW5hcnlTdHJpbmciLCJyZXNvbHZlU2hlZXRzIiwid29ya0Jvb2siLCJyZXNvbHZlU2hlZXQiLCJyZWYiLCJmcm9tIiwidG8iLCJmcm9tUm93IiwiZXhlYyIsImZyb21Db2wiLCJ0b1JvdyIsInRvQ29sIiwiZnJvbVJvd051bSIsInBhcnNlSW50IiwidG9Sb3dOdW0iLCJmcm9tQ29sTnVtIiwidG9Db2xOdW0iLCJyb3ciLCJqIiwiJHF1ZXVlIiwiZXZlbnRQb29sIiwiZXZlbnRRdWV1ZSIsInNlbmRNc2ciLCJldmVudCIsImVsZW1lbnRJZCIsImV2ZW50cyIsImZ1biIsIm9uIiwiZnVuYyIsImRpc3RvcnlQb3BNc2ciLCJjb250YWluZXIiLCJoZWlnaHQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiY3JlYXRlUG9wTXNnIiwibXNnIiwidGltZW91dCIsIm1hcmdpblRvcCIsInRvcCIsIm1zZ0xpc3QiLCJzb3J0IiwibjEiLCJuMiIsInRpbWUiLCJuZXdFbGVtZW5ldCIsImFkZCIsIm5vdyIsImljb24iLCJ0b1VwcGVyQ2FzZSIsImlubmVySFRNTCIsIm1hcmdpbkJvdHRvbSIsIiR0aXAiLCJvZmZzZXRUb3AiLCJlcnIiLCJlbmNvZGVDb25maWciLCJjb25zdGFudCIsInN0YXR1cyIsIlVOS05PV04iLCJlbiIsInpoIiwiVElDS0VUIiwiRkFJTEVEIiwiU1VDQ0VTUyIsIlJVTk5JTkciLCJTRU5ERUQiLCJOT1RTRU5EIiwiV0FJVFRJTkciLCJkYXRhc291cmNlIiwibXlzcWwiLCJEQl9TRVJWRVIiLCJEQl9QQVNTIiwiREJfVFlQRSIsIkRCX1VTRVIiLCJEQl9OQU1FIiwibXNzcWwiLCJvcmFjbGUiLCJ1cmxzIiwic2l0MSIsInNpdDIiLCJ0aWNrZXQiLCJyZWFkTW9kdWxlIiwiZGVmYXVsdFZlcnNpb25EYXRhIiwidmVyc2lvbnMiLCJyZWFkVmVyc2lvbiIsImRlZmF1bHRWYWx1ZVBhdGgiLCJhdXRob3IiLCJyZWFkQ29uZmlnIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJlbmNyeXB0TWFwIiwiZW5jcnlwdCIsInB1YmxpY0tleSIsInJzYSIsImFsZXJ0IiwicHViIiwiZmxhZ19zdGFydCIsIl90aGlzIiwiJHJzYSIsInRtcCIsImZsYWdfc3BsaXQiLCJmbGFnX2VuZCIsImRlY29kZSIsInByaXZhdGVLZXkiLCJwcmkiLCJmbGFnMSIsImVuZHNXaXRoIiwib25lT2YiLCJkZWNyeXB0IiwiZXF1YWxzSWdub3JlQ2FzZSIsImRpc3BsYXlUaW1lIiwibWVyZ2VQYXRoIiwicmVsYXRpdmVQYXRoIiwicGFyZW50UGF0aCIsImRpbmdsal9ob21lIiwidGltZXIiLCJwYXJhbSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImxpbmtDc3MiLCJzdHlsZUVsZW1lbnQiLCIkbmV0IiwiZ2V0IiwiaGVhZCIsIkJJX1JNIiwiaW50MmNoYXIiLCJjaGFyQXQiLCJvcF9hbmQiLCJ4IiwieSIsIm9wX29yIiwib3BfeG9yIiwib3BfYW5kbm90IiwibGJpdCIsInIiLCJjYml0IiwiZGVjb2RlciIsImI2NG1hcCIsImhleDJiNjQiLCJoIiwiYyIsInJldCIsImI2NHRvaGV4IiwicyIsImsiLCJzbG9wIiwidiIsIkJhc2U2NCIsImEiLCJjcmVhdGUiLCJpZ25vcmUiLCJvdXQiLCJiaXRzIiwiY2hhcl9jb3VudCIsIkVycm9yIiwicmUiLCJ1bmFybW9yIiwibSIsIm1heCIsIkludDEwIiwibXVsQWRkIiwidCIsImIiLCJsIiwic3ViIiwicG9wIiwidG9TdHJpbmciLCJiYXNlIiwidmFsdWVPZiIsInNpbXBsaWZ5IiwicmVUaW1lUyIsInJlVGltZUwiLCJzdHJpbmdDdXQiLCJsZW4iLCJkYml0cyIsIlN0cmVhbSIsImVuYyIsInBvcyIsImhleERpZ2l0cyIsImNvbmNhdCIsImhleEJ5dGUiLCJoZXhEdW1wIiwic3RhcnQiLCJlbmQiLCJyYXciLCJpc0FTQ0lJIiwicGFyc2VTdHJpbmdJU08iLCJwYXJzZVN0cmluZ1VURiIsInBhcnNlU3RyaW5nQk1QIiwiaGkiLCJsbyIsInBhcnNlVGltZSIsInNob3J0WWVhciIsInBhcnNlSW50ZWdlciIsIm5lZyIsInBhZCIsInBhcnNlQml0U3RyaW5nIiwibWF4TGVuZ3RoIiwidW51c2VkQml0IiwiaW50cm8iLCJza2lwIiwicGFyc2VPY3RldFN0cmluZyIsInBhcnNlT0lEIiwiQVNOMSIsInN0cmVhbSIsImhlYWRlciIsInRhZyIsIkFTTjFUYWciLCJ0eXBlTmFtZSIsInRhZ0NsYXNzIiwidGFnTnVtYmVyIiwiY29udGVudCIsIkluZmluaXR5IiwicG9zQ29udGVudCIsImFicyIsImlzVW5pdmVyc2FsIiwidG9QcmV0dHlTdHJpbmciLCJpbmRlbnQiLCJ0YWdDb25zdHJ1Y3RlZCIsInBvc1N0YXJ0IiwicG9zRW5kIiwidG9IZXhTdHJpbmciLCJkZWNvZGVMZW5ndGgiLCJnZXRIZXhTdHJpbmdWYWx1ZSIsImhleFN0cmluZyIsInN1YnN0ciIsInN0cmVhbVN0YXJ0IiwiZ2V0U3ViIiwiaXNFT0MiLCJsb3dwcmltZXMiLCJscGxpbSIsIkJpZ0ludGVnZXIiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIm5lZ2F0ZSIsInRvUmFkaXgiLCJkIiwia20iLCJwIiwiREIiLCJuYmkiLCJaRVJPIiwic3ViVG8iLCJjb21wYXJlVG8iLCJiaXRMZW5ndGgiLCJuYml0cyIsIkRNIiwibW9kIiwiZGl2UmVtVG8iLCJtb2RQb3dJbnQiLCJ6IiwiaXNFdmVuIiwiQ2xhc3NpYyIsIk1vbnRnb21lcnkiLCJjbG9uZSIsImNvcHlUbyIsImludFZhbHVlIiwiRFYiLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwic2lnbnVtIiwidG9CeXRlQXJyYXkiLCJlcXVhbHMiLCJtaW4iLCJhbmQiLCJiaXR3aXNlVG8iLCJvciIsInhvciIsImFuZE5vdCIsIm5vdCIsInNoaWZ0TGVmdCIsInJTaGlmdFRvIiwibFNoaWZ0VG8iLCJzaGlmdFJpZ2h0IiwiZ2V0TG93ZXN0U2V0Qml0IiwiYml0Q291bnQiLCJ0ZXN0Qml0Iiwic2V0Qml0IiwiY2hhbmdlQml0IiwiY2xlYXJCaXQiLCJmbGlwQml0IiwiYWRkVG8iLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwibXVsdGlwbHlUbyIsImRpdmlkZSIsInJlbWFpbmRlciIsImRpdmlkZUFuZFJlbWFpbmRlciIsInEiLCJtb2RQb3ciLCJuYnYiLCJCYXJyZXR0IiwiZyIsImsxIiwiY29udmVydCIsImcyIiwic3FyVG8iLCJtdWxUbyIsInciLCJpczEiLCJyMiIsInJldmVydCIsIm1vZEludmVyc2UiLCJhYyIsInUiLCJPTkUiLCJOdWxsRXhwIiwiZ2NkIiwiaXNQcm9iYWJsZVByaW1lIiwibW9kSW50IiwibWlsbGVyUmFiaW4iLCJmcm9tSW50IiwiZnJvbVJhZGl4IiwibWkiLCJzaCIsImludEF0IiwiY2xhbXAiLCJkbFNoaWZ0VG8iLCJkclNoaWZ0VG8iLCJicyIsImNicyIsImJtIiwiZHMiLCJhbSIsInNxdWFyZVRvIiwicG0iLCJwdCIsInRzIiwibXMiLCJuc2giLCJ5cyIsInkwIiwieXQiLCJGMSIsIkYyIiwiZDEiLCJGViIsImQyIiwicWQiLCJpbnZEaWdpdCIsImNodW5rU2l6ZSIsIkxOMiIsImxvZyIsImNzIiwiZE11bHRpcGx5IiwiZEFkZE9mZnNldCIsIm5leHRCeXRlcyIsIm9wIiwiZiIsIm11bHRpcGx5TG93ZXJUbyIsIm11bHRpcGx5VXBwZXJUbyIsInNxdWFyZSIsImdjZGEiLCJnY2RhMSIsImZyb21OdW1iZXJBc3luYyIsImJucF8xIiwiYm5wZm4xXzEiLCJyZWR1Y2UiLCJtcCIsIm1wbCIsIm1waCIsInVtIiwibXQyIiwidTAiLCJxMyIsIm11IiwicGFyc2VCaWdJbnQiLCJpbkJyb3dzZXIiLCJuYXZpZ2F0b3IiLCJhcHBOYW1lIiwieGwiLCJ4aCIsInJyIiwidnYiLCJCSV9SQyIsInJuZ19zdGF0ZSIsInJuZ19wcHRyIiwiQXJjZm91ciIsIlMiLCJpbml0IiwibmV4dCIsInJuZ19wb29sIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJjb3VudCIsIm9uTW91c2VNb3ZlTGlzdGVuZXJfMSIsImV2IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwibW91c2VDb29yZGluYXRlcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJuZ19nZXRfYnl0ZSIsIlNlY3VyZVJhbmRvbSIsImJhIiwiUlNBS2V5IiwiZG1wMSIsImRtcTEiLCJjb2VmZiIsImRvUHVibGljIiwiZG9Qcml2YXRlIiwieHAiLCJ4cSIsInNldFB1YmxpYyIsIk4iLCJFIiwicm5nIiwicGtjczFwYWQyIiwic2V0UHJpdmF0ZSIsIkQiLCJzZXRQcml2YXRlRXgiLCJQIiwiUSIsIkRQIiwiRFEiLCJDIiwiZ2VuZXJhdGUiLCJCIiwicXMiLCJlZSIsInAxIiwicTEiLCJwaGkiLCJjdGV4dCIsInBrY3MxdW5wYWQyIiwiZ2VuZXJhdGVBc3luYyIsImxvb3AxIiwibG9vcDQiLCJsb29wMyIsImxvb3AyIiwic2lnbiIsImRpZ2VzdE1ldGhvZCIsImRpZ2VzdE5hbWUiLCJmaWxsZXIiLCJwa2NzMXBhZDEiLCJESUdFU1RfSEVBREVSUyIsInZlcmlmeSIsInNpZ25hdHVyZSIsIm5hbWVfMSIsImhhc093blByb3BlcnR5IiwicmVtb3ZlRGlnZXN0SGVhZGVyIiwibWQyIiwibWQ1Iiwic2hhMSIsInNoYTIyNCIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsInJpcGVtZDE2MCIsIllBSE9PIiwibGFuZyIsImV4dGVuZCIsInN1YmMiLCJzdXBlcmMiLCJvdmVycmlkZXMiLCJGIiwiY29uc3RydWN0b3IiLCJzdXBlcmNsYXNzIiwiX0lFRW51bUZpeCIsIkFERCIsInVzZXJBZ2VudCIsImZuYW1lIiwiZXgiLCJLSlVSIiwiYXNuMSIsIkFTTjFVdGlsIiwiaW50ZWdlclRvQnl0ZUhleCIsImJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4IiwiYmlnSW50ZWdlclZhbHVlIiwieG9yTGVuIiwiaE1hc2siLCJnZXRQRU1TdHJpbmdGcm9tSGV4IiwiZGF0YUhleCIsInBlbUhlYWRlciIsImhleHRvcGVtIiwibmV3T2JqZWN0IiwiX0tKVVJfYXNuMSIsIl9ERVJCb29sZWFuIiwiREVSQm9vbGVhbiIsIl9ERVJJbnRlZ2VyIiwiREVSSW50ZWdlciIsIl9ERVJCaXRTdHJpbmciLCJERVJCaXRTdHJpbmciLCJfREVST2N0ZXRTdHJpbmciLCJERVJPY3RldFN0cmluZyIsIl9ERVJOdWxsIiwiREVSTnVsbCIsIl9ERVJPYmplY3RJZGVudGlmaWVyIiwiREVST2JqZWN0SWRlbnRpZmllciIsIl9ERVJFbnVtZXJhdGVkIiwiREVSRW51bWVyYXRlZCIsIl9ERVJVVEY4U3RyaW5nIiwiREVSVVRGOFN0cmluZyIsIl9ERVJOdW1lcmljU3RyaW5nIiwiREVSTnVtZXJpY1N0cmluZyIsIl9ERVJQcmludGFibGVTdHJpbmciLCJERVJQcmludGFibGVTdHJpbmciLCJfREVSVGVsZXRleFN0cmluZyIsIkRFUlRlbGV0ZXhTdHJpbmciLCJfREVSSUE1U3RyaW5nIiwiREVSSUE1U3RyaW5nIiwiX0RFUlVUQ1RpbWUiLCJERVJVVENUaW1lIiwiX0RFUkdlbmVyYWxpemVkVGltZSIsIkRFUkdlbmVyYWxpemVkVGltZSIsIl9ERVJTZXF1ZW5jZSIsIkRFUlNlcXVlbmNlIiwiX0RFUlNldCIsIkRFUlNldCIsIl9ERVJUYWdnZWRPYmplY3QiLCJERVJUYWdnZWRPYmplY3QiLCJfbmV3T2JqZWN0IiwicGFyYW1MaXN0IiwiYXNuMU9iaiIsInRhZ1BhcmFtIiwiY2FsbCIsIm9iaiIsImV4cGxpY2l0IiwibmV3UGFyYW0iLCJqc29uVG9BU04xSEVYIiwiZ2V0RW5jb2RlZEhleCIsIm9pZEhleFRvSW50IiwiaGV4IiwiaTAxIiwiYmluYnVmIiwiYmluIiwic2xpY2UiLCJvaWRJbnRUb0hleCIsIm9pZFN0cmluZyIsIml0b3giLCJyb2lkdG94Iiwicm9pZCIsInBhZExlbiIsImJQYWQiLCJiOCIsImkwIiwiQVNOMU9iamVjdCIsImdldExlbmd0aEhleEZyb21WYWx1ZSIsImhWIiwiaE4iLCJoTmxlbiIsImhUTFYiLCJpc01vZGlmaWVkIiwiZ2V0RnJlc2hWYWx1ZUhleCIsImhMIiwiaFQiLCJnZXRWYWx1ZUhleCIsIkRFUkFic3RyYWN0U3RyaW5nIiwicGFyYW1zIiwiZ2V0U3RyaW5nIiwic2V0U3RyaW5nIiwibmV3UyIsInN0b2hleCIsInNldFN0cmluZ0hleCIsIm5ld0hleFN0cmluZyIsIkRFUkFic3RyYWN0VGltZSIsImxvY2FsRGF0ZVRvVVRDIiwidXRjIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0RGF0ZSIsImRhdGVPYmplY3QiLCJ3aXRoTWlsbGlzIiwiemVyb1BhZGRpbmciLCJ5ZWFyIiwibWlsbGlzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic01pbGxpcyIsImpvaW4iLCJzZXRCeURhdGVWYWx1ZSIsIm1vbnRoIiwiZGF5IiwiaG91ciIsInNlYyIsIlVUQyIsInNldEJ5RGF0ZSIsIkRFUkFic3RyYWN0U3RydWN0dXJlZCIsInNldEJ5QVNOMU9iamVjdEFycmF5IiwiYXNuMU9iamVjdEFycmF5IiwiYXNuMUFycmF5IiwiYXBwZW5kQVNOMU9iamVjdCIsImFzbjFPYmplY3QiLCJzZXRCeUJpZ0ludGVnZXIiLCJzZXRCeUludGVnZXIiLCJiaSIsInNldFZhbHVlSGV4IiwibyIsInNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyIsIm5ld0hleFN0cmluZ0luY2x1ZGluZ1VudXNlZEJpdHMiLCJzZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWUiLCJ1bnVzZWRCaXRzIiwiaFZhbHVlIiwiaFVudXNlZEJpdHMiLCJzZXRCeUJpbmFyeVN0cmluZyIsImJpbmFyeVN0cmluZyIsInNldEJ5Qm9vbGVhbkFycmF5IiwiYm9vbGVhbkFycmF5IiwibmV3RmFsc2VBcnJheSIsIm5MZW5ndGgiLCJzZXRWYWx1ZU9pZFN0cmluZyIsInNldFZhbHVlTmFtZSIsIm9pZE5hbWUiLCJvaWQiLCJ4NTA5IiwiT0lEIiwibmFtZTJvaWQiLCJkYXRlIiwic29ydEZsYWciLCJzb3J0ZmxhZyIsImlzRXhwbGljaXQiLCJzZXRBU04xT2JqZWN0IiwiaXNFeHBsaWNpdEZsYWciLCJ0YWdOb0hleCIsImV4dGVuZFN0YXRpY3MiLCJfYSIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiVHlwZUVycm9yIiwiX18iLCJKU0VuY3J5cHRSU0FLZXkiLCJfc3VwZXIiLCJwYXJzZUtleSIsImhhc1ByaXZhdGVLZXlQcm9wZXJ0eSIsImhhc1B1YmxpY0tleVByb3BlcnR5IiwicGFyc2VQcm9wZXJ0aWVzRnJvbSIsInBlbSIsIm1vZHVsdXMiLCJwdWJsaWNfZXhwb25lbnQiLCJkZXIiLCJIZXgiLCJwcml2YXRlX2V4cG9uZW50IiwicHJpbWUxIiwicHJpbWUyIiwiZXhwb25lbnQxIiwiZXhwb25lbnQyIiwiY29lZmZpY2llbnQiLCJzZXF1ZW5jZSIsImdldFByaXZhdGVCYXNlS2V5IiwiaW50IiwiYmlnaW50IiwiZ2V0UHJpdmF0ZUJhc2VLZXlCNjQiLCJnZXRQdWJsaWNCYXNlS2V5IiwiZmlyc3Rfc2VxdWVuY2UiLCJzZWNvbmRfc2VxdWVuY2UiLCJiaXRfc3RyaW5nIiwiZ2V0UHVibGljQmFzZUtleUI2NCIsIndvcmR3cmFwIiwicmVnZXgiLCJnZXRQcml2YXRlS2V5IiwiZ2V0UHVibGljS2V5IiwidmVyc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJucG1fcGFja2FnZV92ZXJzaW9uIiwiSlNFbmNyeXB0IiwiZGVmYXVsdF9rZXlfc2l6ZSIsImRlZmF1bHRfcHVibGljX2V4cG9uZW50Iiwic2V0S2V5Iiwic2V0UHJpdmF0ZUtleSIsInByaXZrZXkiLCJzZXRQdWJsaWNLZXkiLCJwdWJrZXkiLCJnZXRLZXkiLCJjYiIsImdldFByaXZhdGVLZXlCNjQiLCJnZXRQdWJsaWNLZXlCNjQiLCJkaXNwYXRjaCIsInJlc29sdmVPYmplY3QiLCJqc2VuY3J5cHQiLCJkZWNyeXB0T2JqZWN0IiwiYXN5bmMiLCJodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVRleHQiLCIkc3RvcmUiLCJnZXRTdG9yYWdlIiwianNvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInNhdmV0aW1lIiwic2V0U3RvcmFnZSIsInNldEl0ZW0iLCJCYXNpY1Byb3BlcnR5IiwiZ2V0SW1nIiwiZW1pdCIsImV2ZW50TmFtZSIsIkFic3RyYWN0Q29tcG9uZW50IiwiQ29tcG9uZW50VHlwZSIsIk1ldGFEYXRhIiwiY29tcG9uZW50cyIsImZpZWxkTmFtZXMiLCJtZXRob2ROYW1lcyIsImNvbXB1dGVzIiwid2F0Y2hzIiwicHJvcE1hcCIsIk1hcCIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJnZXRGaWVsZHMiLCJzZWxmIiwiJGNsYXNzIiwidmlkIiwiZmllbGROYW1lIiwiZ2V0TWV0aG9kcyIsIiRlbWl0IiwiYXBwTW91bnRlZCIsIm1vdW50ZWROYW1lIiwibWV0aG9kTmFtZSIsImdldENvbXB1dGVkcyIsImNvbXB1dGUiLCJzZXRQcm9wIiwiZGVmaW5lIiwic2V0IiwiZ2V0UHJvcHMiLCJnZXRNb3VudGVkIiwiZ2V0VGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsImdldFdhdGNocyIsIndhdGNoIiwiaGFuZGxlciIsImZ1bmNOYW1lIiwiZGVlcCIsImdldENvbXBvbmVudHMiLCIkcmVnaXN0cnkiLCJnZXRDb21wb25lbnQiLCJidWlsZENvbXBvbmVudCIsIm1vdW50ZWQiLCJtZXRob2RzIiwiY29tcHV0ZWQiLCJwcm9wcyIsImJ1aWxkQW5kUmVnaXN0IiwiY29tcG9uZW50IiwicmVnaXN0VnVlIiwiTGFuZ0l0ZW0iLCJSc2FDb25zdCIsIlJpZ2h0TWVudSIsImxhYmVsIiwiaXNEaXNwbGF5IiwiRmllbGQiLCJwcm9wZXJ0eUtleSIsIk1ldGhvZCIsImRlc2NyaXB0b3IiLCJQcm9wIiwiZGVmIiwicmVxdWlyZWQiLCJkZWZhdWx0IiwiVGVtcGxhdGUiLCJNb3VudGVkIiwiQ29tcHV0ZSIsIkNvbXBvbmVudCIsIldhdGNoIiwiZmllbGQiLCJTZXJ2aWNlIiwiY29tcG9uZW50Q2xhc3MiLCJpUHJvcCIsIkJ1dHRvblgiLCJnZXRDbGFzcyIsIiR0eXBlIiwiZ2V0U3R5bGUiLCIkc2l6ZSIsImlQcm9wcyIsInNpbmdsZUNsaWNrIiwic2l6ZSIsIklucHV0WCIsImZvY3VzIiwiZGVmYXVsdFZhbHVlIiwic2V0VmFsdWUiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm9uT3ZlciIsIm9uRW50ZXIiLCJjYXB0aW9uIiwicGxhY2Vob2xkZXIiLCIkY2FwdGlvbiIsIlN3aXRjaFgiLCJhY3RpdmUiLCJ4U2l6ZSIsIm9uY2xpY2tlZCIsInBvc3RUZXh0IiwicHJlVGV4dCIsInByZVR4dCIsInBvc3RUeHQiLCJDb21ib1giLCIkb25DaGFuZ2UiLCJnZXRMYWJlbCIsImdldFZhbHVlIiwiTmF2aWdhdG9yWCIsImdldENhcHRpb24iLCJTY3JvbGxlclkiLCJpbmRleCIsIk5hdmlnYXRvclZpZXciLCJUYWJQYW5lbFgiLCJjbGlja2VkIiwiZmlsdGVyIiwiZ2V0SWQiLCJmbG9hdEVsZW1lbnQiLCJvZmZzZXRXaWR0aCIsImxlZnQiLCJvZmZzZXRMZWZ0Iiwic3RpbGxFeGlzdCIsIlNjcm9sbGVyWCIsIlRhYlZpZXciLCJ0YWJQYW5lbElkIiwidGFiUGFuZWxMb2FkZWQiLCJhcmdzIiwiVGFibGVYIiwiY2hlY2tBbGwiLCJjaGVja2VkTGlzdCIsImJlc3RXaWR0aENhY2hlIiwibG9hZGVkIiwiZXhwb3J0VG9FeGNlbCIsImdlbkhlYWRQcm9wcyIsImNvbHVtbiIsImJpbmRJZCIsImdldENvbHVtbktleSIsImNvbHVtbktleSIsInRpdGxlQ29sdW1uTWVudXMiLCJnZW5MaW5lUHJvcHMiLCJsaW5lIiwicm93TWVudXMiLCJnZW5Cb2R5UHJvcHMiLCJib2R5TWVudXMiLCJjaGVja09uZSIsImZsZXgiLCJmbGV4Q29sdW1ucyIsImdldEJlc3RXaWR0aCIsImRvQ2hlY2tBbGwiLCJjb2x1bW5zIiwiY29sdW1uVGl0bGUiLCJnZXRDb2x1bW5MYWJlbCIsIndpZHRoQXJyYXkiLCJjb2x1bW5Db250ZW50IiwiZ2V0Q2VsbCIsIm1heFdpZHRoIiwic3RyaW5nIiwiY2VsbCIsInRpdGxlIiwic2VxdWVuY2VOdW0iLCJzZWxlY3RhYmxlIiwiUHJvZ3Jlc3NYIiwiZ2V0Q29udGFpbmVyU3R5bGUiLCJnZXRQcm9ncmVzc1N0eWxlIiwicGVyY2VudCIsInR4dFBvc2l0aW9uIiwiTW9kYWxYIiwicG9zaXRpb24iLCJjbGVhblhZIiwiY2xvc2VNb2RhbCIsIm9uQ2xvc2UiLCJyZWNvcmRYWSIsIm1vZGFsIiwibW9kYWxJbmZvIiwic2NyZWVuWCIsInNjcmVlblkiLCJtb3ZlWFkiLCJjYW5jZWwiLCJvayIsImRpc3BsYXkiLCJDb250ZXh0TWVudVgiLCJoaWRkZW4iLCJiaW5kaW5nIiwiJGxpc3QiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImNsaWVudFgiLCJjbGllbnRZIiwiY29udGV4dE1lbnUiLCJpbm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsInRyYW5zZm9ybSIsInJlbW92ZVByb3BlcnR5IiwiY29uZGl0aW9uSWZEaXNwbGF5IiwiJGN0eCIsIkZpbGVUcmVlWCIsImlQcm9wczRDaGlsZHJlbiIsInJvb3QiLCJwYXJlbnQiLCJzZWxlY3QiLCJleHBhbmQiLCJjbGlja0VsZW1lbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJ0YWdOYW1lIiwicmVzdWx0U3RhY2siLCJUcmVlVmlldyIsInRlbXAiLCJzZWxlY3RMaXN0IiwibW91c2Vkb3duIiwiaVByb3BzNFRyZWUiLCJzZWxlY3RlZCIsInRhYlByb3BzIiwiVGV4dEFyZWFYIiwiZXZlbnRUeXBlIiwib3JpZ2luIiwiaXNOYU4iLCJmaWVsZHMiLCJjYXNlTmFtZSIsImN1cnJlbnRSb3ciLCJ0b3RhbFJvdyIsImRiVHlwZSIsImN1cnJlbnRTdGVwIiwidG90YWxTdGVwIiwiemlwIiwibGV2ZWwiLCJjYXNlUGF0aCIsInRpbWVDb3N0IiwiQ2FzZSIsInN0YXR1c0NvbnN0YW50Iiwic3RhdHMiLCJFUlJPUiIsImVycFZlcnNpb24iLCJjbGV2ZWwiLCJ0ZXN0Y2FzZU5hbWUiLCJ0ZXN0Q2FzZU5hbWUiLCJ0ZXN0Y2FzZVBhdGgiLCJlbmRTdGVwTnVtIiwidG90YWxTdGVwTnVtIiwidGlja2V0SWQiLCJ0b0ZpeGVkIiwiX2ZpZWxkTWFwXyIsIl9maWVsZHNfIiwiRGF0YUZpbHRlciIsImdyb3VwTmFtZSIsInRhYk5hbWUiLCJncm91cFJlZ0V4cCIsInRhYlJlZ0V4cCIsImlzUm93IiwiaWdub3JlQ29sdW1ucyIsImFyZyIsIkdyb3VwU3RyYXRlZ3kiLCJPcmRlclRpY2tldCIsInRpY2tldDEiLCJ0aWNrZXQyIiwiVGFiU3RyYXRlZ3kiLCJyZXZlcnNlIiwiVGFiUGFnZVN0cmF0ZWd5Iiwic3VtbWFyeSIsInJlcG9ydGVyIiwib3duZXIiLCJwcmlvcml0eSIsInJlc29sdXRpb24iLCJjaGFuZ2V0aW1lIiwicGxhbmRhdGUiLCJwaW5ndGFpIiwicHJvamVjdCIsInRpY2tldGNsYXNzIiwidGVzdGFkanVzdCIsInRlc3RyZXBvcnQiLCJ0ZXN0b3dlcjEiLCJrZXl3b3JkcyIsImNjIiwibmVlZGJ1aWxkIiwiZGV2dHlwZSIsImRpbmdsal9ub3RlIiwiVGlja2V0IiwiY2xhc3NOYW1lIiwidHJpbSIsImNhY2hlRmllbGRzIiwiZm9yTG9jYWxUZXN0IiwidW5rbm93bkNvbHVtbiIsImZpZWxkVmFsdWVzIiwidmFsdWVzIiwibG9jYWxVcmwiLCJkZWNvZGVVUkkiLCJzaXR1YXRpb25NYXAiLCJzaXR1YXRpb24iLCJnZXRVcmwiLCJwcm9wS2V5IiwiYXJyIiwicHJlcGFyZSIsImdldFRpY2tldFVybCIsIkZpbHRlciIsImtleXdvcmQiLCJtb2RlIiwiY2FyZENudCIsInZlcnNpb25MaXN0Iiwib25GaWx0ZXJDaGFuZ2UiLCJuZXdWYWwiLCJvbGRWYWwiLCJ2ZXJzaW9uTmFtZXMiLCJDYXJkIiwiZ2V0TGluZVByb2dyZXNzUHJvcHMiLCJnZXRTdGVwUHJvZ3Jlc3NQcm9wcyIsIm9wZW5DYXJkVGlja2V0IiwiX2Nhc2VfIiwiZ3JvdXBEYXRhIiwic3RhdHVzTmFtZXMiLCJUYWJsZU1vZGUiLCJ0YWJsZVByb3BzIiwic3RhdHVzTmFtZSIsImdldENvbHVtbnNUb0Rpc3BsYXkiLCJwYXJhIiwibGlzdDREaXNwbGF5IiwiQXBwIiwiYWxsVmVyc2lvbkRhdGFzIiwiZGlzcGxheURhdGEiLCJncm91cEJ5U3RhdHVzIiwiY29tcG9uZW50TmFtZSIsImdyb3VwQnlDb21wb25lbnQiLCJvcmRlciIsInRhYlRpdGxlIiwidGFiVmlld1Byb3BzIiwiaXNBY3RpdmUiLCJjYXJkTW9kZVByb3BzIiwidGFibGVNb2RlUHJvcHMiLCJ4ZmlsdGVyIiwieGNhcmQiLCJ4dGFibGUiLCJjb21wb25lbnROYW1lcyIsInJlYWREYXRhIiwiZ2V0RGVmYXVsdFZhbHVlIiwib3JpZ2luRGF0YSIsImZpcnN0R3JvdXAiLCJmaWx0ZXJlZERhdGEiLCJjcmVhdGVWdWUiXSwic291cmNlUm9vdCI6IiJ9