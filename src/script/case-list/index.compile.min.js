/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={814:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("linkCss",(function(t){window.linkCss(window.dinglj_home,t)})),window.defunc("linkCss",(function(t,e){var n=document.createElement("style"),i=window.mergePath(t,e);n.innerHTML=window.get(i),document.head.appendChild(n)})),window.defunc("get",(function(t){return window.get(t,{callback:null,async:!1})})),window.defunc("get",(function(t,e){var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText})),window.defunc("imgUrl",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t,e){return t.endsWith("/")||t.endsWith("\\")||(t+="/"),(e.startsWith("/")||e.startsWith("\\"))&&(e=e.substring(1)),"".concat(t).concat(e)})),window.defunc("byId",(function(t){return document.getElementById(t)})),window.defunc("byClass",(function(t){var e=[],n=document.getElementsByClassName(t);return n&&e.push.apply(e,n),e})),window.defunc("query",(function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e})),window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,i){var o=document.createElement("canvas").getContext("2d");o.font="".concat(e," ").concat(n," ").concat(i);var r=o.measureText(t).width;return Math.floor(r)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var i="";"string"==typeof e?i=t[e]:"function"==typeof e&&(i=e(t)),n[i]?n[i].push(t):n[i]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,i){if(null==t||null==t)return n;for(var o=t,r=0,s=e.split(".");r<s.length;r++)if(!(o=o[s[r]]))return i&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return o})),window.defunc("getConfigOrDefault",(function(t,e,n,i){return window.getConfigOrDefault(t,e,n,i,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,i,o){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,c=Object.keys(r);u<c.length;u++)a[p=c[u]]=r[p]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&o&&a.push.apply(a,s);else if("object"==typeof s&&o)for(var l=0,h=Object.keys(s);l<h.length;l++){var p;null==a[p=h[l]]&&(a[p]=s[p])}}return"NOT_FOUND"==a&&(a=i,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var i=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),o=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return i==o?e<n?-1:e>n?1:0:i-o}return e<n?-1:e>n?1:0}))},687:()=>{window.encodeConfig=function(){return{constant:{status:{TICKET:{en:"$DINGLJ-ENCODE=A6YcHIenKO7gHaY18P0Rz6ouMz2gR5J27acKq2pqlQL0LHDzk7MazqCMmryezfsiDsTfeMegodLx0rPKZD9H7WMNYEsesuFWqi53M5eYqtfp9B4RQpCVKUMoGNoDXiNcfHaD4wN1gEL5Uia+Q5zp7/AAyM9O9j+uHpyVzUvwyrk=",zh:"$DINGLJ-ENCODE=PwhuWPdwWc8ivcQce3zgUUmeS57hRCX/3b9haLgmfDe+3cTQU0+rn6aaq1/6FyjIi3PVe8CsZhoDiQEoaJXDKZyR4SDqmHWIYmtg+cct5XEY+oyAHniQlY0Rt382iuu+IYNUtQbwh5ReP5JncoZBKxjyLtd0/muy/bFT7IX4YRc="},FAILED:{en:"$DINGLJ-ENCODE=NX2mGWwZALLPiVqDb8MOmHFgZVXcsboYOF+tt4cXRdkplmn4n84XQ0nZejwmaLFIrCf2dArXikpXqMiIrHVH4kIXwJv9SnxKgOSa3reWvakcqLoJ3Is6cBWsAl2XNTAaJow3T75ihkJp5PorcZkwVRbrvo/joRKjxt6bVJNWYwE=",zh:"$DINGLJ-ENCODE=RO8DaTF1TQ+DzxEP4EsZmWh42wswHrMsegxGyzq32JOBLcvptqESThMxUldqTGhp2T5AF0IorZZZoxqfM+R8vTZFo6m/tsDI5JeSuwpVpimBg3t49JDVrwjbUdOakAckbW9/jDOdK2zzj+Z+s5IPGhymTcfck+x/WQlFNPJKnHA="},SUCCESS:{en:"$DINGLJ-ENCODE=e620KOqi7qGJMH+g3VGmbaDNzqJ4rUF9TMstg+cgL6vgZzh4kx8dk4HMTDElv3JWfvpv73yx6hruG0UM65Lkhry2m09TCTdMLJsDx2YhxEgzwV3V8UYe8ySm0TydB50vgoedhO11H1b0D7pCFzJiXJ5zOa4Whu4MldFIfuI/780=",zh:"$DINGLJ-ENCODE=Ag+h9qQDsyVDNsEV9OTKPnxg6OdlX9g15UIbayn/X3JOJt0FsQeYJqhNmgfJR7rt4Mfox9n7xF2LuqlSFS1zVlkFqzwrkGLOl9n0bWmJq8uA4SZ8k0jIZt2eJiiTIqPmbGcYq4KBgFe2d0CUpav2ic9cQpCI4IjQ2piyJvdHFKI="},RUNNING:{en:"$DINGLJ-ENCODE=B8HK1uHOEuTvOhtVyan4emN2rus9Km4OBbm9HEY7iD/Nj87/rN9/CsnzHNN7Dx/F9f7/UHBn3Mqefus9w+p1gckERnzyUunSxEqfyVVP/ThqmDNk4LZxnTzOlEnR1Du8f9hBRz840Cwm2f/sHHoTzNkuyyjiAe7GHYMxMgXxVpQ=",zh:"$DINGLJ-ENCODE=bHoZrXo+uXmABavcjJyOpIxaOk4Day8sQWf/a9X5vZWqJxPAKhQj0UASbDSM5tCBgnMv7chfbBRL/FSRlhRSzvm+M9Bp7kDbNIANayOigPg+ZnwsQIkDcKlCGXQPawIuDreArutjG5lfcard5jU5zNmB2+GzoWJzQmEOyob9nQU="},SENDED:{en:"$DINGLJ-ENCODE=HqrDH8ZDUSNpTlCRPpij4cPp4sevri9wiHv71xcAg5rN6+9v/pl2zOVjDwEE2ZpWYlehX4G8Wc3eUBswFLysPYahEpKcVBe1jAkeHDnCp4Ee6jRXMaO2wpBmz1ESI/EetoWCRlu0bQDqC25rCWs72vVPs//ouGS4fizz4PsgvvY=",zh:"$DINGLJ-ENCODE=P42/fKlsYwuUmfFLER1vHzvTbQ32qyhjVYHAn8DcL4SsXy8yDNhhUJPRIKhZ0bzZ55NDfzEXBtqYcGk6ml8uLPWAO2LiUboi8M6V+pAvSVUBIEMXnh84FeYzvB2qrDGkInIkejWlE8lNi6UJBr6TazYhtHCj/UUYvYuAtEL9Vc8="},NOTSEND:{en:"$DINGLJ-ENCODE=B90Xa4TZ1d1KqEnjmuuuo7eNeAnhOnOCT6MgFWy5+vTZRtD6UXAGOuhfL5uzRO1wV2IljY/nDBbihHjqYxRL0ChlO/NpkManf9Mt/9vqox2HPNrvxXRUVclN4LlCQcDyY6Fb8qopm1h09/mVDGogDcsX5losue7fAIrYDlGC93s=",zh:"$DINGLJ-ENCODE=AG5MRSbCyj18Cmed6SHAFl3EHrLxiiFZnO5reKaHh1ViezoXq4QDA5EIFGhnPBXlk267U+4OjAkvoKLDJY2w6nkXixsOxGK5LukHoo/y1Prlk+XWb8RqxFmiVXcrWBn7Zz9O/qV1zTV+rCMNq6SfSK9QHPP2mnzetc245bP1yAU="},WAITTING:{en:"$DINGLJ-ENCODE=liQtSxQeA6jDkaxiD9er9GLtmnGpK05HuGg6tbK9rYGeAdt77ZwthtEJdFmb8sQr8+sKuYzKH0Kfng0rRfnFaqyRCySjJmiQvEybYN/ZEgUVGK7jKmSzFhU1CIFVpdA2wKYoora/Gc6I1TaaTEfPqJq0cKjXgnx7KJuPqixipmk=",zh:"$DINGLJ-ENCODE=n48S6QwgqINpbiVpkfvZs1OBq6O6fPoBMx5zcrMf3fiao+wHP2JDy+AdRvDZ3cftP+noshhhA7v/btcBUUABeJinDiN+11mNd4sM1hgtQg1ly1qIcY8wtivGKtDgVq9uvALKwHXldxwtpOqDawvJ8DrI0YrKGRT5aVQqmCtsOjk="}}},datasource:{mysql:{DB_SERVER:"$DINGLJ-ENCODE=JakpMjkwEn7a0+AODx5LzBi9NQGPX+jlmqN7zDZ0ADYQbJrw9yjlmiubjkGTmRqOfKSp/OfdlcKBHSrwGC7mHXBGHrsBw5YfPviQzuXmOytmIYxtdNzHp9sO1FegzZp/QetWld94Ivph+kcpG3B6repoKUCrW+x8g/lLiNz2X8o=",DB_PASS:"$DINGLJ-ENCODE=XA1ZGnaiubWzRDsud/aG8Ufsyk0ulCG1Vh95iqH7oVq3HHOIxMxHWCwhNgr753m1jnzv9tZT94+fsfYiU5i2xlMo2Ayo7pO3cnJWQqGwklVL5Z5qE+1KmUe3OmhMIa0teAP5xl9IAYqfrw0w53Upc5vETtHje4Sjwe4Fi2QfbHk=",DB_TYPE:"$DINGLJ-ENCODE=P1QEMgL6EEUACKSV1v19jYyZmTVt5n0452SN8nvcLQyQu02iEqhSStRswXC+ROQAFgp6JXp0gAQZHJt1k0/0ywWoiv6XWAwBmGIbsAR2A6WaF2ugzY8d+92jFjEqsf64AqZwWy7QMeH6JBi3gSJgQBgFs5N+HaeKvQZ3uOEf+2o=",DB_USER:"$DINGLJ-ENCODE=oNycy0QwgoKTI77Apjcc737xtQO8qv08o2zzdH7pjFizKlGEY+KjHBCKoTXIZhGdtMIyLPAu5V6UT2vCi16nNhn4w/XFncZZ6g6wXDQH9FpKbpzIzEDxMa35xecVsliL5wwvRWAS1U9r75ZcwBSUSisw7M7UItYcL8vGJvMVeVQ=",DB_NAME:"$DINGLJ-ENCODE=mPnhMniJkFh9cxxZM7jKWVNU5BXIbKbcNeG9f5a1+2LUx0xiHSmzCKIpfdSn6Efn2MSwtZ5pZ5IqrEhrwaom8OfOIVmr89XAUTREXN+VHr5E1pq2QLHk81yJiA+0qFm+YBiyG7GFwRkVmwqwjiIEa9cPD19R/ttMdwVgBdMqWFM="},mssql:{DB_SERVER:"$DINGLJ-ENCODE=f1FzXN/ffFN4NT3BVuvNwOY5jLk5fBrQ8OC+iQmEsrCnGbHX9L5AorchoIhhvsYuzZp8gTiQ7OGjok2UmdP0TYVetxX6fQAHIkXDXL0V6uK7N6KxFJ2onQHnxY8TMwRgmMZ+XULcpyF7OD8lqKvM/MRiKVgJaCAPcogr9Ll5z60=",DB_PASS:"$DINGLJ-ENCODE=GwJCIR9KRkJPZhl1dZz/QyLB6fCkhnJbq4mRKMaiZio30iBcAx8d0R5IWJL8ULJybhkWiDCR5fuVuCB4xqytAQsKNx2NoOa0YWPGq4/VupQE4ro1cdnDanJozihXYCv4Tc+dBLww0vAEEQLGsCYRflN276XyznEd8bKW4C8bUX0=",DB_TYPE:"$DINGLJ-ENCODE=M86ohcHf7yx8veMdQotRhRh4eOBuPnqmoS4PMP63Lxg37zwDbXTt712LpOYW2Pee4/rup8TPa/oBm07JX40Lc+6mpNs+jfdZ3O+lN163Ow/8LqjFn4FD4HehvhGKOn0Mq/J5ApH3Cz+kwVfLgToa2zMMyFcYmFFwDRqPus+TO7E=",DB_USER:"$DINGLJ-ENCODE=AvBW0jVg5JTH5fBCnnxCXzud/jImR1FpyGyn1iZZB1EiVWC7tcuZl4QKYZT7fuP85HNuLIvtSTVX7VJMEPmFfBt99Ybdj/VkRFdBLD1o7+fY30j+GFgzpZKF+Ja0m5m0r2SEaHmjicbg38KXFw+AjDfJpDFdAR8blU5LTpbI+Ok=",DB_NAME:"$DINGLJ-ENCODE=aTZ1N2xi9q1mko9PeDwqveQeYEMsc09vF3oMBfNUxUeKoOyzRtriCFQ8byaFgsdh0DTbrvSpR3bJHeJ9dpA4zI9bKk5LwaVUZNvB0d3qik166aHmEkYZUzJQNLw6/85fpKqsHnVGhWU9seFlnQIFLuRZQcGwHXW1l34YrpS+/VA="},oracle:{DB_SERVER:"$DINGLJ-ENCODE=ZlV4xU9TAdflMz5J1uyltM2lZ09J+fiH+FNcGsX3SK8Gq/HTrFpqoUtquXg7W4Fw1r14o01DcCYm8Hlh0UW1C8lTc4DhBXk9Lo+B8wMQxIybPpr/B1IFpJUmFPdyVf9CgGG8ZDo/xXKF7F+nkY94NauVzZ3rxxodH3ROYWE4mU8=",DB_PASS:"$DINGLJ-ENCODE=Cs74hlIJCvhf3V+n5I4W7OVl5GY5F1hZACIl1n3HPz6nsNEdwHPrtUhmPvShtUdqxMEGi2i2s2nPQR2ZMxeWiC/M7/z3QXHuqjWEtMKwSGheD6cBkoqS2q8ZmJWjEdgxcge6HZE8XCk9yqZBBoKyeIlqvn7mvgvkmBdbPjwdgxg=",DB_TYPE:"$DINGLJ-ENCODE=bIf9g0wisUcuOLNZHRPRHKhpdvL6Q+aMDc1Dk8T5vB1UpYmfp6asskUGI3QVxhU54XRtR7x/wh50mhRXNBwkz0dNuRbc6k/HJL1ODWDdHTyo2dk8Tedz++Mwh8pkYOWANMPMP8uY5ZBlss39AMnVQ2xXG/X3CGTpaJ87VpNVPTQ=",DB_USER:"$DINGLJ-ENCODE=Ahx82x1XdCY9mrD/s2hknRIUgLEzRY9J25TUWeL7gEGT7o9Q3tx3vANybrzqt+VZsksiXq4YkvhdDAspe2qyxSyezyKisuDXRnHGdmy35/xs36JEppNyKW+gC5Y/dPVHOQ+f7PVRcf4crbUX4Bxu3hM3gP+FgJhOTzL/25K9jtg=",DB_NAME:"$DINGLJ-ENCODE=LCRnpVT/OU4FfXWCDPi/wlH5u5WXQ/pB43ukLeisimYLjpYFJlYgx3sIxeOHLrtb/igpkiFG/uxpe6xkHP0xpHhwEG2UASA+lYBP/5LunZ1xISdx5xXcUn+Jg1ScSeOWM8P8m0X+5Bda7eKmCMjLmCgua/snyKWCpybRe9v/zco="}},author:"dingljcn"}}},953:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,n,i,o){void 0===i&&(i=2e3),void 0===o&&(o="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)t(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",n),u.time=Date.now();var c=document.createElement("div");c.classList.add("dinglj-v-pop-msg-icon",n),c.innerText=n.substring(0,1).toUpperCase(),u.appendChild(c),u.innerHTML+=e,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){t(u,r)}),i)}window.defunc("info",(function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"info",n,i)})),window.defunc("err",(function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"err",n,i)})),window.defunc("warn",(function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"warn",n,i)}))}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{"use strict";var t,e=function(){function t(){this.meta=new i}return t.prototype.$emit=function(t,e){},t.prototype.getImg=function(t){return window.imgUrl(t)},t.prototype.emit=function(t,e){this.$emit(t,{value:e,vid:this.vid})},t.prototype.build=function(){var t=this,e=new this.meta.clazz,n={data:function(){var n={vid:"",name:t.name};if(t.meta.hasField())for(var i=0,o=t.meta.fieldNames;i<o.length;i++){var r=o[i];n[r]=e[r]}return n}};if(this.meta.hasMounted()&&(n.mounted=e[this.meta.hockMounted]),this.meta.hasTemplate()&&(n.template=e[this.meta.template]),n.methods={getImg:this.getImg,emit:this.emit},this.meta.hasMethod())for(var i=0,o=this.meta.methodNames;i<o.length;i++){var r=o[i];n.methods[r]=e[r]}if(this.meta.hasCompute()){n.computed={};for(var s=0,a=this.meta.computeInfos;s<a.length;s++){var u=a[s];n.computed[u.key]=u.func}}if(this.meta.hasProp()&&(n.props=this.meta.props),this.meta.hasWatch()){n.watch={};for(var c=0,l=this.meta.watchInfos;c<l.length;c++){var h=l[c];n.watch[h.field]={handler:e[h.resolve],deep:h.deep}}}return this.meta.hasComponents()&&(n.components=this.meta.components),window.registVue(this.type,n),n},t}(),i=function(){function t(){this.fieldNames=[],this.methodNames=[],this.computeInfos=[],this.props={},this.components={},this.hockMounted="",this.template="",this.watchInfos=[]}return t.prototype.hasWatch=function(){return this.watchInfos.length>0},t.prototype.hasField=function(){return this.fieldNames.length>0},t.prototype.hasMethod=function(){return this.methodNames.length>0},t.prototype.hasCompute=function(){return this.computeInfos.length>0},t.prototype.hasProp=function(){return Object.keys(this.props).length>0},t.prototype.hasComponents=function(){return Object.keys(this.components).length>0},t.prototype.hasMounted=function(){return""!=this.hockMounted},t.prototype.hasTemplate=function(){return""!=this.template},t}(),o=function(){function t(){}return t.getComponent=function(n){var i=n;if(null!=t.lastComponentType&&t.lastComponentType==i||(n?t.lastComponentType=i:i=t.lastComponentType),t.map.has(i))return t.map.get(i);var o=new e;return o.type=i,t.map.set(i,o),o},t.map=new Map,t.lastComponentName="",t.lastComponentType=null,t}();!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress"}(t||(t={}));var r={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"},s=function(){function t(t,e){if(t){t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error("未知的状态 {".concat(t.stats,"}, 结果 {").concat(t.result,"}, 请联系 dinglj 补充")):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error("未知的状态 {".concat(t.stats,"}, 请联系 dinglj 补充")):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error("未知的结果 {".concat(t.result,"}, 请联系 dinglj 补充")),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;var n=t.ticketId||t.log;this.ticket=n?parseInt(n):n,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}}return t.getCaption=function(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}},t._fieldMap_=r,t._fields_=Object.keys(r),t}(),a=function(t,e){this.en=t,this.zh=e};function u(t,e){o.getComponent().meta.fieldNames.push(e)}function c(t,e,n){o.getComponent().meta.methodNames.push(e)}function l(t,e,n){return void 0===n&&(n=!1),function(i,r){o.getComponent().meta.props[r]={type:t,default:e,required:n}}}function h(t,e){o.getComponent().meta.template=e}function p(t,e){return function(n,i,r){var s=o.getComponent(e);s.meta.hockMounted=i,s.meta.clazz=t,s.name=e}}function f(t){return function(e,n){o.getComponent().meta.computeInfos.push({key:n,func:t})}}var d,g=(d=function(t,e){return d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},d(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}d(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),y=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},v=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$emit(\'on-click\')">\n        <slot></slot>\n    </div>',t}g(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:this.xType.equalsIgnoreCase("primary"),cancel:this.xType.equalsIgnoreCase("cancel"),warn:this.xType.equalsIgnoreCase("warn"),error:this.xType.equalsIgnoreCase("error")}},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.xSize.equalsIgnoreCase("small")?"1px":this.xSize.equalsIgnoreCase("normal")?"2px":"3px"}},y([p(n,t.ButtonX)],n.prototype,"mounted",null),y([h],n.prototype,"template",void 0),y([l(String,"normal")],n.prototype,"xSize",void 0),y([l(String,"primary")],n.prototype,"xType",void 0),y([c],n.prototype,"getClass",null),y([c],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),m=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},w=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="placeholder" v-model="value" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',t.value="",t}v(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},n.prototype.setValue=function(t,e){this.value=t,this.emit("on-change",t),"input"==e&&this.emit("on-input",t),"blur"==e&&this.emit("on-blur",t)},m([p(n,t.InputX)],n.prototype,"mounted",null),m([h],n.prototype,"template",void 0),m([u],n.prototype,"value",void 0),m([c],n.prototype,"getStyle",null),m([c],n.prototype,"setValue",null),m([l(String,"normal")],n.prototype,"xSize",void 0),m([l(String,"")],n.prototype,"caption",void 0),m([l(String,"")],n.prototype,"placeholder",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),b=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},S=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',t.active=!1,t}w(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},n.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},n.prototype.onclicked=function(){this.active=!this.active,this.emit("on-change",this.active),this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info()},b([p(n,t.SwitchX)],n.prototype,"mounted",null),b([h],n.prototype,"template",void 0),b([u],n.prototype,"active",void 0),b([c],n.prototype,"getStyle",null),b([c],n.prototype,"getClass",null),b([c],n.prototype,"onclicked",null),b([l(String,"normal")],n.prototype,"xSize",void 0),b([l(String,"")],n.prototype,"preText",void 0),b([l(String,"")],n.prototype,"postText",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),T=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},D=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="caption" :id="vid">\n        <input :placeholder="placeholder" type="text" :value="list.includesIgnoreCase(value) ? getValue(value) : \'\'"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in list" @click="setValue(item)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n    </div>',t.value=null,t}S(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},n.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},T([p(n,t.ComboX)],n.prototype,"mounted",null),T([h],n.prototype,"template",void 0),T([u],n.prototype,"value",void 0),T([c],n.prototype,"setValue",null),T([c],n.prototype,"getStyle",null),T([l(Array,[])],n.prototype,"list",void 0),T([l(String,"normal")],n.prototype,"xSize",void 0),T([l(String,"")],n.prototype,"caption",void 0),T([l(String,"")],n.prototype,"placeholder",void 0),T([l(Function,(function(t){return t}))],n.prototype,"getCaption",void 0),T([l(Function,(function(t){return t}))],n.prototype,"getValue",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),C=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},E=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',t.value=null,t}D(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},n.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},C([p(n,t.NavigatorX)],n.prototype,"mounted",null),C([h],n.prototype,"template",void 0),C([u],n.prototype,"value",void 0),C([c],n.prototype,"setValue",null),C([f((function(){return null!=this.value?!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.setValue(this.list[0]):this.list.length>0&&this.setValue(this.list[0]),this.value}))],n.prototype,"validItem",void 0),C([l(Array,[])],n.prototype,"list",void 0),C([l(Object,null)],n.prototype,"default",void 0),C([l(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),O=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},x=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',t}E(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},O([p(n,t.ScrollerY)],n.prototype,"mounted",null),O([h],n.prototype,"template",void 0),O([l(Number,0)],n.prototype,"size",void 0),O([l(Number,0)],n.prototype,"index",void 0),O([c],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),N=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},I=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :list="list" :get-caption="getCaption" @on-change="changed">\n        </i-navigator>\n        <div class="dinglj-v-navigator-right">\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :index="list.indexOf(active)" :size="list.length">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            <slot name="after"></slot>\n        </div>\n    </div>',t.active=null,t}x(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name)},n.prototype.changed=function(t){this.active=t.value,this.emit("on-change",t)},N([p(n,t.NavigatorView)],n.prototype,"mounted",null),N([h],n.prototype,"template",void 0),N([u],n.prototype,"active",void 0),N([c],n.prototype,"changed",null),N([l(Array,[],!0)],n.prototype,"list",void 0),N([l(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),j=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},R=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',t.value=null,t}I(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0)},n.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},n.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},n.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.emit("on-change",t),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],i=window.byId(n.getId(e));i&&(t.style.width="".concat(i.offsetWidth,"px"),t.style.left="".concat(i.offsetLeft,"px"))}),50))},j([p(n,t.TabPanelX)],n.prototype,"mounted",null),j([h],n.prototype,"template",void 0),j([u],n.prototype,"value",void 0),j([c],n.prototype,"getClass",null),j([c],n.prototype,"getId",null),j([c],n.prototype,"clicked",null),j([f((function(){return!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.clicked(this.list[0],0),this.list.indexOf(this.value)}))],n.prototype,"index",void 0),j([l(Array,[],!0)],n.prototype,"list",void 0),j([l(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),A=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},P=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',t}R(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},A([p(n,t.ScrollerX)],n.prototype,"mounted",null),A([h],n.prototype,"template",void 0),A([l(Number,0)],n.prototype,"size",void 0),A([l(Number,0)],n.prototype,"index",void 0),A([c],n.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),B=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},V=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :list="list" :get-caption="getCaption" @on-change="changed" @mounted="tabPanelLoaded">\n            <i-scroller-x :index="index" :size="list.length">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',t.value=null,t.tabPanelId="",t}P(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},n.prototype.changed=function(t){this.value!=t.value&&(this.value=t.value,this.emit("on-change",t))},B([p(n,t.TabView)],n.prototype,"mounted",null),B([h],n.prototype,"template",void 0),B([u],n.prototype,"value",void 0),B([u],n.prototype,"tabPanelId",void 0),B([c],n.prototype,"tabPanelLoaded",null),B([c],n.prototype,"changed",null),B([f((function(){return this.list.indexOfIgnoreCase(this.value)}))],n.prototype,"index",void 0),B([l(Array,[],!0)],n.prototype,"list",void 0),B([l(Function,(function(t){return t}))],n.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),_=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},L=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template='<div class="dinglj-v-table" :id="vid">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" v-for="column in columns" :class="getClass(column)">\n                {{ getColumnCaption(column) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tbody">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in data" @click="checkOne(line)">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',t.cache={},t.checkAll=!1,t.checkedList=[],t.bestWidthCache=!1,t}V(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",i={"dinglj-v-cell":!0};return i[e]=!0,i[n]=!0,this.cache[e]=i,i},n.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},n.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.data),this.checkAll=!this.checkAll},n.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var i=n.getColumnKey(e),o=n.getColumnCaption(e),r=[window.calcTxtWidth("".concat(o))];r.push.apply(r,n.data.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[i]=s+30},n=this,i=0,o=this.columns;i<o.length;i++)e(o[i]);return this.bestWidthCache},_([p(n,t.TableX)],n.prototype,"mounted",null),_([h],n.prototype,"template",void 0),_([u],n.prototype,"cache",void 0),_([u],n.prototype,"checkAll",void 0),_([u],n.prototype,"checkedList",void 0),_([u],n.prototype,"bestWidthCache",void 0),_([c],n.prototype,"getClass",null),_([c],n.prototype,"getStyle",null),_([c],n.prototype,"doCheckAll",null),_([c],n.prototype,"getBestWidth",null),_([l(Array,[])],n.prototype,"flexColumns",void 0),_([l(Array,[])],n.prototype,"data",void 0),_([l(Boolean,!0)],n.prototype,"sequanceNum",void 0),_([l(Boolean,!0)],n.prototype,"selectable",void 0),_([l(Array,[])],n.prototype,"columns",void 0),_([l(Function,(function(t){return t}))],n.prototype,"getColumnKey",void 0),_([l(Function,(function(t){return t}))],n.prototype,"getColumnCaption",void 0),_([l(Function,(function(t,e){return t[e]}))],n.prototype,"getCell",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),k=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},q=(function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'rt' }\" v-if=\"['lt', 'rt'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'rb' }\" v-if=\"['lb', 'rb'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",t}L(n,e),n.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},n.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},n.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},k([p(n,t.ProgressX)],n.prototype,"mounted",null),k([h],n.prototype,"template",void 0),k([c],n.prototype,"getContainerStyle",null),k([c],n.prototype,"getProgressStyle",null),k([l(String,"5px")],n.prototype,"height",void 0),k([l(String,"100%")],n.prototype,"percent",void 0),k([l(String,"lt")],n.prototype,"position",void 0),k([l(String,"")],n.prototype,"caption",void 0)}(e),o.getComponent(t.ButtonX).build(),o.getComponent(t.InputX).build(),o.getComponent(t.SwitchX).build(),o.getComponent(t.ComboX).build(),o.getComponent(t.NavigatorX).build(),o.getComponent(t.ScrollerY).build(),o.getComponent(t.NavigatorView).build(),o.getComponent(t.TabPanelX).build(),o.getComponent(t.ScrollerX).build(),o.getComponent(t.TabView).build(),o.getComponent(t.TableX).build(),o.getComponent(t.ProgressX).build(),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),M=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},H=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input caption="搜索" placeholder="请输入关键字"\n                @on-change="data => filter.keyword = data.value">\n            </i-input>\n            <i-combo caption="状态" placeholder="请选择状态"\n                style="margin-left: 10px"\n                :list="Object.values(status)"\n                :get-value="i => i.en" \n                :get-caption="i => i.zh"\n                @on-change="s => filter.status = s.value">\n            </i-combo>\n            <i-combo caption="版本" placeholder="默认为当前版本"\n                style="margin-left: 10px; --width: 400px"\n                :list="versionNames"\n                @on-change="v => filter.versions = v.value">\n            </i-combo>\n            <div class="dinglj-v-flex"></div>\n            <i-switch pre-text="卡片视图" post-text="表格视图" @on-change="data => filter.mode = (data.value ? \'table\' : \'card\')">\n            </i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input caption="每列的卡片数" placeholder="请输入每列的卡片数量"\n                default-value="7"\n                @on-input="data => filter.cardCnt = ((isNaN(data.value) || data.value < 5) ? 5 : parseInt(data.value))">\n            </i-input>\n        </div>\n    </div>',e.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:7},e.versionList=[],e}var n;q(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.onFilterChange=function(t,e){this.emit("on-change",t),console.log(t)},M([p(e,"CL-Filter")],e.prototype,"mounted",null),M([h],e.prototype,"template",void 0),M([u],e.prototype,"filter",void 0),M([u],e.prototype,"versionList",void 0),M([("filter",void 0===n&&(n=!0),function(t,e){o.getComponent().meta.watchInfos.push({field:"filter",deep:n,resolve:e})})],e.prototype,"onFilterChange",null),M([f((function(){return window.readConfig()}))],e.prototype,"config",void 0),M([f((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),M([f((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),M([f((function(){if(window.isDev())return window.readVersion();if(0==this.versionList.length){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"urls.versions","",!1);this.versionList=JSON.parse(window.get(t))}return this.versionList}))],e.prototype,"versions",void 0),M([f((function(){return this.versions.map((function(t){return t.erpVersion}))}))],e.prototype,"versionNames",void 0)}(e),o.getComponent("CL-Filter").build()),z=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),F=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},U=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="statusName in statusNames">\n            <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                <div class="card-line card-title">\n                    <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                    <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                    <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                </div>\n                <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="lineCaption(_case_)" :percent="linePercent(_case_)"></i-progress>\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :caption="stepCaption(_case_)" :percent="stepPercent(_case_)"></i-progress>\n                </div>\n                <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                    <div>耗时: {{ _case_.timeCost }}</div>\n                </div>\n            </div>\n        </div>\n    </div>',e}z(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.openCardTicket=function(t){window.open("".concat(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.ticket","",!1),"/").concat(t.ticket),"#".concat(t.ticket))},e.prototype.lineCaption=function(t){return"行进度: ".concat(t.currentRow,"/").concat(t.totalRow,", ")},e.prototype.linePercent=function(t){return"".concat(t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0,"%")},e.prototype.stepCaption=function(t){return"步数进度: ".concat(t.currentStep,"/").concat(t.totalStep,", ")},e.prototype.stepPercent=function(t){return"".concat(t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0,"%")},F([p(e,"CL-Card")],e.prototype,"mounted",null),F([h],e.prototype,"template",void 0),F([c],e.prototype,"openCardTicket",null),F([c],e.prototype,"lineCaption",null),F([c],e.prototype,"linePercent",null),F([c],e.prototype,"stepCaption",null),F([c],e.prototype,"stepPercent",null),F([f((function(){return window.readConfig()}))],e.prototype,"config",void 0),F([f((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),F([l(Object,{})],e.prototype,"groupData",void 0),F([l(Array,[])],e.prototype,"statusNames",void 0),F([l(Number,5)],e.prototype,"cardCnt",void 0)}(e),o.getComponent("CL-Card").build()),K=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),G=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},J=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container table">\n        <i-table v-for="statusName in statusNames" class="every-tab" @mounted="onTableMounted" \n                :columns="getColumnsToDisplay(statusName)"  \n                :data="groupData[statusName]"\n                :get-column-key="col => col.en"\n                :get-column-caption="col => col.zh"\n                :flex-columns="[\'caseName\']">\n        </i-table>\n    </div>',e}K(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.onTableMounted=function(t){var e=this;window.query("#".concat(t.vid," .dinglj-v-tbody .dinglj-v-cell.ticket")).forEach((function(t){var n=t.innerText.trim();n&&(t.innerHTML="<div onclick=\"window.open('".concat(window.getConfigOrDefault(e.config,e.defaultConfig,"urls.ticket","",!1),"/").concat(n,"', '#").concat(n,"')\">#").concat(n,"</div>"))}))},e.prototype.getColumnsToDisplay=function(t){if(!this.groupData||!this.groupData[t]||!this.groupData[t].length)return[];var e=window.getConfigOrDefault(this.config,this.defaultConfig,"table.ignoreColumn",[],!1),n=this.groupData[t];return s._fields_.filter((function(t){if(e.includesIgnoreCase(t))return!1;for(var i=0,o=n;i<o.length;i++){var r=o[i];if(r&&r[t])return!0}return!1})).map((function(t){return new a(t,s._fieldMap_[t])}))},G([p(e,"CL-Table")],e.prototype,"mounted",null),G([h],e.prototype,"template",void 0),G([c],e.prototype,"onTableMounted",null),G([c],e.prototype,"getColumnsToDisplay",null),G([f((function(){return window.readConfig()}))],e.prototype,"config",void 0),G([f((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),G([l(Object,{})],e.prototype,"groupData",void 0),G([l(Array,[])],e.prototype,"statusNames",void 0)}(e),o.getComponent("CL-Table").build()),X=(n(687),"0123456789abcdefghijklmnopqrstuvwxyz");function Z(t){return X.charAt(t)}function W(t,e){return t&e}function Y(t,e){return t|e}function Q(t,e){return t^e}function $(t,e){return t&~e}function tt(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function et(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var nt,it="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function ot(t){var e,n,i="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),i+=it.charAt(n>>6)+it.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),i+=it.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),i+=it.charAt(n>>2)+it.charAt((3&n)<<4));(3&i.length)>0;)i+="=";return i}function rt(t){var e,n="",i=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=it.indexOf(t.charAt(e));r<0||(0==i?(n+=Z(r>>2),o=3&r,i=1):1==i?(n+=Z(o<<2|r>>4),o=15&r,i=2):2==i?(n+=Z(o),n+=Z(r>>2),o=3&r,i=3):(n+=Z(o<<2|r>>4),n+=Z(15&r),i=0))}return 1==i&&(n+=Z(o<<2)),n}var st,at={decode:function(t){var e;if(void 0===st){for(st=Object.create(null),e=0;e<64;++e)st["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(st["-"]=62,st._=63,e=0;e<9;++e)st["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],i=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=st[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);i|=r,++o>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,o=0):i<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=at.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return at.decode(t)}},ut=1e13,ct=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,i,o=this.buf,r=o.length;for(n=0;n<r;++n)(i=o[n]*t+e)<ut?e=0:i-=(e=0|i/ut)*ut,o[n]=i;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,i=this.buf,o=i.length;for(e=0;e<o;++e)(n=i[e]-t)<0?(n+=ut,t=1):t=0,i[e]=n;for(;0===i[i.length-1];)i.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),i=e.length-2;i>=0;--i)n+=(ut+e[i]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*ut+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),lt=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,ht=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function pt(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var ft,dt=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var i="",o=t;o<e;++o)if(i+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:i+="  ";break;case 15:i+="\n";break;default:i+=" "}return i},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var i=this.get(n);if(i<32||i>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",i=t;i<e;++i)n+=String.fromCharCode(this.get(i));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",i=t;i<e;){var o=this.get(i++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(i++)):String.fromCharCode((15&o)<<12|(63&this.get(i++))<<6|63&this.get(i++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,i,o="",r=t;r<e;)n=this.get(r++),i=this.get(r++),o+=String.fromCharCode(n<<8|i);return o},t.prototype.parseTime=function(t,e,n){var i=this.parseStringISO(t,e),o=(n?lt:ht).exec(i);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),i=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(i+=":"+o[5],o[6]&&(i+=":"+o[6],o[7]&&(i+="."+o[7]))),o[8]&&(i+=" UTC","Z"!=o[8]&&(i+=o[8],o[9]&&(i+=":"+o[9]))),i):"Unrecognized time: "+i},t.prototype.parseInteger=function(t,e){for(var n,i=this.get(t),o=i>127,r=o?255:0,s="";i==r&&++t<e;)i=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(s=i,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}o&&(i-=256);for(var a=new ct(i),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var i=this.get(t),o="("+((e-t-1<<3)-i)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?i:0,c=7;c>=u;--c)r+=a>>c&1?"1":"0";if(r.length>n)return o+pt(r,n)}return o+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return pt(this.parseStringISO(t,e),n);var i=e-t,o="("+i+" byte)\n";i>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return i>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var i="",o=new ct,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===i)if((o=o.simplify())instanceof ct)o.sub(80),i="2."+o.toString();else{var u=o<80?o<40?0:1:2;i=u+"."+(o-40*u)}else i+="."+o.toString();if(i.length>n)return pt(i,n);o=new ct,r=0}}return r>0&&(i+=".incomplete"),i},t}(),gt=function(){function t(t,e,n,i,o){if(!(i instanceof yt))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=i,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return pt(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return pt(this.stream.parseStringISO(e,e+n),t);case 30:return pt(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,i=this.sub.length;n<i;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var i=0;i<n;++i)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof dt?e:new dt(e,0);var i=new dt(n),o=new yt(n),r=t.decodeLength(n),s=n.pos,a=s-i.pos,u=null,c=function(){var e=[];if(null!==r){for(var i=s+r;n.pos<i;)e[e.length]=t.decode(n);if(n.pos!=i)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)u=c();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=c();for(var l=0;l<u.length;++l)if(u[l].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(i,a,r,o,u)},t}(),yt=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new ct;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),vt=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],mt=(1<<26)/vt[vt.length-1],wt=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,i=(1<<e)-1,o=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,r=Z(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&i,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(r+=Z(n));return o?r:"0"},t.prototype.negate=function(){var e=Ct();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+At(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=Ct();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new St(e):new Tt(e),this.exp(t,n)},t.prototype.clone=function(){var t=Ct();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,i=this.DB-t*this.DB%8,o=0;if(t-- >0)for(i<this.DB&&(n=this[t]>>i)!=(this.s&this.DM)>>i&&(e[o++]=n|this.s<<this.DB-i);t>=0;)i<8?(n=(this[t]&(1<<i)-1)<<8-i,n|=this[--t]>>(i+=this.DB-8)):(n=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=Ct();return this.bitwiseTo(t,W,e),e},t.prototype.or=function(t){var e=Ct();return this.bitwiseTo(t,Y,e),e},t.prototype.xor=function(t){var e=Ct();return this.bitwiseTo(t,Q,e),e},t.prototype.andNot=function(t){var e=Ct();return this.bitwiseTo(t,$,e),e},t.prototype.not=function(){for(var t=Ct(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=Ct();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=Ct();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+tt(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=et(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,Y)},t.prototype.clearBit=function(t){return this.changeBit(t,$)},t.prototype.flipBit=function(t){return this.changeBit(t,Q)},t.prototype.add=function(t){var e=Ct();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=Ct();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=Ct();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=Ct();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=Ct();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=Ct(),n=Ct();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,i,o=t.bitLength(),r=Rt(1);if(o<=0)return r;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new St(e):e.isEven()?new Dt(e):new Tt(e);var s=[],a=3,u=n-1,c=(1<<n)-1;if(s[1]=i.convert(this),n>1){var l=Ct();for(i.sqrTo(s[1],l);a<=c;)s[a]=Ct(),i.mulTo(l,s[a-2],s[a]),a+=2}var h,p,f=t.t-1,d=!0,g=Ct();for(o=At(t[f])-1;f>=0;){for(o>=u?h=t[f]>>o-u&c:(h=(t[f]&(1<<o+1)-1)<<u-o,f>0&&(h|=t[f-1]>>this.DB+o-u)),a=n;0==(1&h);)h>>=1,--a;if((o-=a)<0&&(o+=this.DB,--f),d)s[h].copyTo(r),d=!1;else{for(;a>1;)i.sqrTo(r,g),i.sqrTo(g,r),a-=2;a>0?i.sqrTo(r,g):(p=r,r=g,g=p),i.mulTo(g,s[h],r)}for(;f>=0&&0==(t[f]&1<<o);)i.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--f)}return i.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),r=Rt(1),s=Rt(0),a=Rt(0),u=Rt(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(o)>=0?(i.subTo(o,i),n&&r.subTo(a,r),s.subTo(u,s)):(o.subTo(i,o),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=o.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new bt)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var i=e;e=n,n=i}var o=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=vt[vt.length-1]){for(e=0;e<vt.length;++e)if(n[0]==vt[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<vt.length;){for(var i=vt[e],o=e+1;o<vt.length&&i<mt;)i*=vt[o++];for(i=n.modInt(i);e<o;)if(i%vt[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var i;if(16==n)i=4;else if(8==n)i=3;else if(256==n)i=8;else if(2==n)i=1;else if(32==n)i=5;else{if(4!=n)return void this.fromRadix(e,n);i=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==i?255&+e[o]:jt(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,i=this.DB-n,o=(1<<i)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>i|s,s=(this[a]&o)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var i=t%this.DB,o=this.DB-i,r=(1<<i)-1;e[0]=this[n]>>i;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<o,e[s-n]=this[s]>>i;i>0&&(e[this.t-n-1]|=(this.s&r)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]-t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i-=t[n],e[n++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[n++]=this.DV+i:i>0&&(e[n++]=i),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var i=this.abs(),o=e.abs(),r=i.t;for(n.t=r+o.t;--r>=0;)n[r]=0;for(r=0;r<o.t;++r)n[r+i.t]=i.am(0,o[r],n,r,0,i.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var i=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,i,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,i){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=n&&n.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=Ct());var s=Ct(),a=this.s,u=e.s,c=this.DB-At(o[o.t-1]);c>0?(o.lShiftTo(c,s),r.lShiftTo(c,i)):(o.copyTo(s),r.copyTo(i));var l=s.t,h=s[l-1];if(0!=h){var p=h*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/p,d=(1<<this.F1)/p,g=1<<this.F2,y=i.t,v=y-l,m=null==n?Ct():n;for(s.dlShiftTo(v,m),i.compareTo(m)>=0&&(i[i.t++]=1,i.subTo(m,i)),t.ONE.dlShiftTo(l,m),m.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--v>=0;){var w=i[--y]==h?this.DM:Math.floor(i[y]*f+(i[y-1]+g)*d);if((i[y]+=s.am(0,w,i,v,0,l))<w)for(s.dlShiftTo(v,m),i.subTo(m,i);i[y]<--w;)i.subTo(m,i)}null!=n&&(i.drShiftTo(l,n),a!=u&&t.ZERO.subTo(n,n)),i.t=l,i.clamp(),c>0&&i.rShiftTo(c,i),a<0&&t.ZERO.subTo(i,i)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var i=Ct(),o=Ct(),r=n.convert(this),s=At(e)-1;for(r.copyTo(i);--s>=0;)if(n.sqrTo(i,o),(e&1<<s)>0)n.mulTo(o,r,i);else{var a=i;i=o,o=a}return n.revert(i)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=Rt(n),o=Ct(),r=Ct(),s="";for(this.divRemTo(i,o,r);o.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var i=this.chunkSize(n),o=Math.pow(n,i),r=!1,s=0,a=0,u=0;u<e.length;++u){var c=jt(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+c,++s>=i&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,i){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),Y,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),n.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var i,o,r=Math.min(t.t,this.t);for(i=0;i<r;++i)n[i]=e(this[i],t[i]);if(t.t<this.t){for(o=t.s&this.DM,i=r;i<this.t;++i)n[i]=e(this[i],o);n.t=this.t}else{for(o=this.s&this.DM,i=r;i<t.t;++i)n[i]=e(o,t[i]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,n,i),i},t.prototype.addTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]+t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i+=t[n],e[n++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[n++]=i:i<-1&&(e[n++]=this.DV+i),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(var o=n.t-this.t;i<o;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(o=Math.min(t.t,e);i<o;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var i=n.t=this.t+t.t-e;for(n.s=0;--i>=0;)n[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)n[this.t+i-e]=this.am(e-i,t[i],n,0,0,this.t+i-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var i=this.t-1;i>=0;--i)n=(e*n+this[i])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),i=n.getLowestSetBit();if(i<=0)return!1;var o=n.shiftRight(i);(e=e+1>>1)>vt.length&&(e=vt.length);for(var r=Ct(),s=0;s<e;++s){r.fromInt(vt[Math.floor(Math.random()*vt.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<i&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=Ct();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(n.compareTo(i)<0){var o=n;n=i,i=o}var r=n.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),i.rShiftTo(s,i));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),n.compareTo(i)>=0?(n.subTo(i,n),n.rShiftTo(1,n)):(i.subTo(n,i),i.rShiftTo(1,i)),n.signum()>0?setTimeout(a,0):(s>0&&i.lShiftTo(s,i),setTimeout((function(){e(i)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,i,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),Y,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),bt=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),St=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Tt=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=Ct();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(wt.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=Ct();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],i=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Dt=function(){function t(t){this.m=t,this.r2=Ct(),this.q3=Ct(),wt.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=Ct();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function Ct(){return new wt(null)}function Et(t,e){return new wt(t,e)}var Ot="undefined"!=typeof navigator;Ot&&"Microsoft Internet Explorer"==navigator.appName?(wt.prototype.am=function(t,e,n,i,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],c=this[t++]>>15,l=a*u+c*s;o=((u=s*u+((32767&l)<<15)+n[i]+(1073741823&o))>>>30)+(l>>>15)+a*c+(o>>>30),n[i++]=1073741823&u}return o},ft=30):Ot&&"Netscape"!=navigator.appName?(wt.prototype.am=function(t,e,n,i,o,r){for(;--r>=0;){var s=e*this[t++]+n[i]+o;o=Math.floor(s/67108864),n[i++]=67108863&s}return o},ft=26):(wt.prototype.am=function(t,e,n,i,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],c=this[t++]>>14,l=a*u+c*s;o=((u=s*u+((16383&l)<<14)+n[i]+o)>>28)+(l>>14)+a*c,n[i++]=268435455&u}return o},ft=28),wt.prototype.DB=ft,wt.prototype.DM=(1<<ft)-1,wt.prototype.DV=1<<ft,wt.prototype.FV=Math.pow(2,52),wt.prototype.F1=52-ft,wt.prototype.F2=2*ft-52;var xt,Nt,It=[];for(xt="0".charCodeAt(0),Nt=0;Nt<=9;++Nt)It[xt++]=Nt;for(xt="a".charCodeAt(0),Nt=10;Nt<36;++Nt)It[xt++]=Nt;for(xt="A".charCodeAt(0),Nt=10;Nt<36;++Nt)It[xt++]=Nt;function jt(t,e){var n=It[t.charCodeAt(e)];return null==n?-1:n}function Rt(t){var e=Ct();return e.fromInt(t),e}function At(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}wt.ZERO=Rt(0),wt.ONE=Rt(1);var Pt,Bt,Vt=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,i;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,i=this.S[e],this.S[e]=this.S[n],this.S[n]=i;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),_t=null;if(null==_t){_t=[],Bt=0;var Lt=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var kt=new Uint32Array(256);for(window.crypto.getRandomValues(kt),Lt=0;Lt<kt.length;++Lt)_t[Bt++]=255&kt[Lt]}var qt=0,Mt=function(t){if((qt=qt||0)>=256||Bt>=256)window.removeEventListener?window.removeEventListener("mousemove",Mt,!1):window.detachEvent&&window.detachEvent("onmousemove",Mt);else try{var e=t.x+t.y;_t[Bt++]=255&e,qt+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",Mt,!1):window.attachEvent&&window.attachEvent("onmousemove",Mt))}function Ht(){if(null==Pt){for(Pt=new Vt;Bt<256;){var t=Math.floor(65536*Math.random());_t[Bt++]=255&t}for(Pt.init(_t),Bt=0;Bt<_t.length;++Bt)_t[Bt]=0;Bt=0}return Pt.next()}var zt=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Ht()},t}(),Ft=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Et(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=t.length-1;i>=0&&e>0;){var o=t.charCodeAt(i--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var r=new zt,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new wt(n)}(t,e);if(null==n)return null;var i=this.doPublic(n);if(null==i)return null;for(var o=i.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Et(t,16),this.e=parseInt(e,16),this.d=Et(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,i,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Et(t,16),this.e=parseInt(e,16),this.d=Et(n,16),this.p=Et(i,16),this.q=Et(o,16),this.dmp1=Et(r,16),this.dmq1=Et(s,16),this.coeff=Et(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new zt,i=t>>1;this.e=parseInt(e,16);for(var o=new wt(e,16);;){for(;this.p=new wt(t-i,1,n),0!=this.p.subtract(wt.ONE).gcd(o).compareTo(wt.ONE)||!this.p.isProbablePrime(10););for(;this.q=new wt(i,1,n),0!=this.q.subtract(wt.ONE).gcd(o).compareTo(wt.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(wt.ONE),a=this.q.subtract(wt.ONE),u=s.multiply(a);if(0==u.gcd(o).compareTo(wt.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=Et(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),i=0;i<n.length&&0==n[i];)++i;if(n.length-i!=e-1||2!=n[i])return null;for(++i;0!=n[i];)if(++i>=n.length)return null;for(var o="";++i<n.length;){var r=255&n[i];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&n[i+1]),++i):(o+=String.fromCharCode((15&r)<<12|(63&n[i+1])<<6|63&n[i+2]),i+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var i=new zt,o=t>>1;this.e=parseInt(e,16);var r=new wt(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(wt.ONE),i=s.q.subtract(wt.ONE),o=e.multiply(i);0==o.gcd(r).compareTo(wt.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(i),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=Ct(),s.q.fromNumberAsync(o,1,i,(function(){s.q.subtract(wt.ONE).gcda(r,(function(t){0==t.compareTo(wt.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},c=function(){s.p=Ct(),s.p.fromNumberAsync(t-o,1,i,(function(){s.p.subtract(wt.ONE).gcda(r,(function(t){0==t.compareTo(wt.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(c,0)}))}))};setTimeout(c,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var i=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,i="",o=0;o<n;o+=2)i+="ff";return Et("0001"+i+"00"+t,16)}((Ut[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==i)return null;var o=this.doPrivate(i);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var i=Et(e,16),o=this.doPublic(i);return null==o?null:function(t){for(var e in Ut)if(Ut.hasOwnProperty(e)){var n=Ut[e],i=n.length;if(t.substr(0,i)==n)return t.substr(i)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),Ut={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},Kt={};Kt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var i=function(){};if(i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var n=s[o],i=e[n];"function"==typeof i&&i!=Object.prototype[n]&&(t[n]=i)}})}catch(t){}r(t.prototype,n)}}};var Gt={};void 0!==Gt.asn1&&Gt.asn1||(Gt.asn1={}),Gt.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var i="",o=0;o<n;o++)i+="f";e=new wt(i,16).xor(t).add(wt.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=Gt.asn1,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,c=e.DERUTF8String,l=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,f=e.DERIA5String,d=e.DERUTCTime,g=e.DERGeneralizedTime,y=e.DERSequence,v=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var S=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+S+":"))throw"undefined key: "+S;if("bool"==S)return new n(t[S]);if("int"==S)return new i(t[S]);if("bitstr"==S)return new o(t[S]);if("octstr"==S)return new r(t[S]);if("null"==S)return new s(t[S]);if("oid"==S)return new a(t[S]);if("enum"==S)return new u(t[S]);if("utf8str"==S)return new c(t[S]);if("numstr"==S)return new l(t[S]);if("prnstr"==S)return new h(t[S]);if("telstr"==S)return new p(t[S]);if("ia5str"==S)return new f(t[S]);if("utctime"==S)return new d(t[S]);if("gentime"==S)return new g(t[S]);if("seq"==S){for(var T=t[S],D=[],C=0;C<T.length;C++){var E=w(T[C]);D.push(E)}return new y({array:D})}if("set"==S){for(T=t[S],D=[],C=0;C<T.length;C++)E=w(T[C]),D.push(E);return new v({array:D})}if("tag"==S){var O=t[S];if("[object Array]"===Object.prototype.toString.call(O)&&3==O.length){var x=w(O[2]);return new m({tag:O[0],explicit:O[1],obj:x})}var N={};if(void 0!==O.explicit&&(N.explicit=O.explicit),void 0!==O.tag&&(N.tag=O.tag),void 0===O.obj)throw"obj shall be specified for 'tag'.";return N.obj=w(O.obj),new m(N)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},Gt.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),i=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);i+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new wt(i,2).toString(10),i="")}return e},Gt.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new wt(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);return i},Gt.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},Gt.asn1.DERAbstractString=function(t){Gt.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},Kt.lang.extend(Gt.asn1.DERAbstractString,Gt.asn1.ASN1Object),Gt.asn1.DERAbstractTime=function(t){Gt.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var i=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+i(String(o.getMonth()+1),2)+i(String(o.getDate()),2)+i(String(o.getHours()),2)+i(String(o.getMinutes()),2)+i(String(o.getSeconds()),2);if(!0===n){var a=o.getMilliseconds();if(0!=a){var u=i(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,i,o,r){var s=new Date(Date.UTC(t,e-1,n,i,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},Kt.lang.extend(Gt.asn1.DERAbstractTime,Gt.asn1.ASN1Object),Gt.asn1.DERAbstractStructured=function(t){Gt.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},Kt.lang.extend(Gt.asn1.DERAbstractStructured,Gt.asn1.ASN1Object),Gt.asn1.DERBoolean=function(){Gt.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},Kt.lang.extend(Gt.asn1.DERBoolean,Gt.asn1.ASN1Object),Gt.asn1.DERInteger=function(t){Gt.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Gt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new wt(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Kt.lang.extend(Gt.asn1.DERInteger,Gt.asn1.ASN1Object),Gt.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Gt.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}Gt.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var i="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),i+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+i},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},Kt.lang.extend(Gt.asn1.DERBitString,Gt.asn1.ASN1Object),Gt.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Gt.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}Gt.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},Kt.lang.extend(Gt.asn1.DEROctetString,Gt.asn1.DERAbstractString),Gt.asn1.DERNull=function(){Gt.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},Kt.lang.extend(Gt.asn1.DERNull,Gt.asn1.ASN1Object),Gt.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new wt(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};Gt.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=i},this.setValueName=function(t){var e=Gt.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},Kt.lang.extend(Gt.asn1.DERObjectIdentifier,Gt.asn1.ASN1Object),Gt.asn1.DEREnumerated=function(t){Gt.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Gt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new wt(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Kt.lang.extend(Gt.asn1.DEREnumerated,Gt.asn1.ASN1Object),Gt.asn1.DERUTF8String=function(t){Gt.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},Kt.lang.extend(Gt.asn1.DERUTF8String,Gt.asn1.DERAbstractString),Gt.asn1.DERNumericString=function(t){Gt.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},Kt.lang.extend(Gt.asn1.DERNumericString,Gt.asn1.DERAbstractString),Gt.asn1.DERPrintableString=function(t){Gt.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},Kt.lang.extend(Gt.asn1.DERPrintableString,Gt.asn1.DERAbstractString),Gt.asn1.DERTeletexString=function(t){Gt.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},Kt.lang.extend(Gt.asn1.DERTeletexString,Gt.asn1.DERAbstractString),Gt.asn1.DERIA5String=function(t){Gt.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},Kt.lang.extend(Gt.asn1.DERIA5String,Gt.asn1.DERAbstractString),Gt.asn1.DERUTCTime=function(t){Gt.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},Kt.lang.extend(Gt.asn1.DERUTCTime,Gt.asn1.DERAbstractTime),Gt.asn1.DERGeneralizedTime=function(t){Gt.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},Kt.lang.extend(Gt.asn1.DERGeneralizedTime,Gt.asn1.DERAbstractTime),Gt.asn1.DERSequence=function(t){Gt.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},Kt.lang.extend(Gt.asn1.DERSequence,Gt.asn1.DERAbstractStructured),Gt.asn1.DERSet=function(t){Gt.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},Kt.lang.extend(Gt.asn1.DERSet,Gt.asn1.DERAbstractStructured),Gt.asn1.DERTaggedObject=function(t){Gt.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},Kt.lang.extend(Gt.asn1.DERTaggedObject,Gt.asn1.ASN1Object);var Jt,Xt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Zt=function(t){function e(n){var i=t.call(this)||this;return n&&("string"==typeof n?i.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&i.parsePropertiesFrom(n)),i}return Xt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,i=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===nt){var n="0123456789ABCDEF";for(nt={},e=0;e<16;++e)nt[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)nt[n.charAt(e)]=e;for(e=0;e<8;++e)nt[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=nt[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(i[i.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return i}(t):at.unarmor(t),o=gt.decode(i);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=Et(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=o.sub[3].getHexStringValue();this.d=Et(r,16);var s=o.sub[4].getHexStringValue();this.p=Et(s,16);var a=o.sub[5].getHexStringValue();this.q=Et(a,16);var u=o.sub[6].getHexStringValue();this.dmp1=Et(u,16);var c=o.sub[7].getHexStringValue();this.dmq1=Et(c,16);var l=o.sub[8].getHexStringValue();this.coeff=Et(l,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=Et(e,16),n=h.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=Et(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new Gt.asn1.DERInteger({int:0}),new Gt.asn1.DERInteger({bigint:this.n}),new Gt.asn1.DERInteger({int:this.e}),new Gt.asn1.DERInteger({bigint:this.d}),new Gt.asn1.DERInteger({bigint:this.p}),new Gt.asn1.DERInteger({bigint:this.q}),new Gt.asn1.DERInteger({bigint:this.dmp1}),new Gt.asn1.DERInteger({bigint:this.dmq1}),new Gt.asn1.DERInteger({bigint:this.coeff})]};return new Gt.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return ot(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new Gt.asn1.DERSequence({array:[new Gt.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new Gt.asn1.DERNull]}),e=new Gt.asn1.DERSequence({array:[new Gt.asn1.DERInteger({bigint:this.n}),new Gt.asn1.DERInteger({int:this.e})]}),n=new Gt.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new Gt.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return ot(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(Ft),Wt="undefined"!=typeof process?null===(Jt=process.env)||void 0===Jt?void 0:Jt.npm_package_version:void 0;const Yt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new Zt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(rt(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return ot(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return ot(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,rt(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new Zt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=Wt,t}();function Qt(t){return"object"==typeof t?function(t){for(let e of Object.keys(t))t[e]=Qt(t[e]);return t}(t):"string"==typeof t?function(t){if(t.startsWith("$DINGLJ-ENCODE=")){t=t.replace("$DINGLJ-ENCODE=","");let e="";for(let n of t.split("$DINGLJ-SPLIT-FLAG$"))e+=n.decrypt();return e}return t}(t):void 0}Array.prototype.includesIgnoreCase=function(t){let e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((t=>"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t)).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){let e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((t=>"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t)).indexOf(e)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(){window.info(this,2e3,"10%")},String.prototype.warn=function(){window.warn(this,2e3,"10%")},String.prototype.err=function(){window.err(this,2e3,"10%")},Element.prototype.animate=function(t,e){const n=getComputedStyle(this).transition,i=Object.keys(t);for(let e of i)this.style[e]=t[e][0];setTimeout((()=>{const o=e/1e3+"s";this.style.transition=o;for(let e of i)this.style[e]=t[e][1];setTimeout((()=>{this.style.transition=n}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],n=this.children;for(let i=0;i<n.length;i++)n[i].classList.contains(t)&&e.push(n[i]);return e},Window.prototype.encrypt=function(t){if(null==this.window.rsa&&alert("请更新脚本, 添加 rsa 密钥的配置"),this.window.rsa.pri){const e=new Yt;return e.setPrivateKey(window.rsa.pri),e.setPublicKey(window.rsa.pub),e.encrypt(t)}return t},Window.prototype.encrypt=function(t){if(window.rsa.pub){const e=new Yt;return e.setPublicKey(window.rsa.pub),e.encrypt(t)}return t},Window.prototype.decrypt=function(t){if(null==this.window.rsa&&alert("请更新脚本, 添加 rsa 密钥的配置"),window.rsa.pri){const e=new Yt;return e.setPrivateKey(window.rsa.pri),e.decrypt(t)}return t},String.prototype.encrypt=function(){return window.encrypt(this)},String.prototype.decrypt=function(){return window.decrypt(this)},Window.prototype.defaultConfig=function(){return Qt(this.window.encodeConfig())},n(814),n(953),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css");var $t=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),te=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n    <i-nav-view :list="componentNames">\n        <template v-slot:before>\n            <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n        </template>\n        <template v-slot:content id="case-list-view">\n            <i-tab-view v-for="componentName in componentNames"\n                :list="tabTitle(componentName)"\n                :get-caption="item => item.zh">\n                <xcard  v-if="filter.data.mode == \'card\'"\n                    :status-names="statusNames(componentName)" \n                    :group-data="groupByStatus(componentName)"\n                    :card-cnt="filter.data.cardCnt">\n                </xcard>\n                <xtable v-else\n                    :status-names="statusNames(componentName)"\n                    :group-data="groupByStatus(componentName)">\n                </xtable>\n            </i-tab-view>\n        </template>\n        <template v-slot:after></template>\n    </i-nav-view>\n</div>',function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allVersionDatas={},e.filter={data:{mode:"card",cardCnt:7}},e}var n;$t(e,t),e.prototype.mounted=function(){var t=this;window.displayData=function(){console.log(t)}},e.prototype.groupByStatus=function(t){return window.groupBy(this.groupByComponent[t],(function(t){return t.status.en}))},e.prototype.statusNames=function(t){var e=this.groupByStatus(t),n=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferStatus",[],!1).map((function(t){return t.toLowerCase()}));return Object.keys(e).sort((function(t,e){return window.compareStringByArray(n,t.toLowerCase(),e.toLowerCase())}))},e.prototype.tabTitle=function(t){var e=this;return this.statusNames(t).map((function(t){return new a(t,e.status[t].zh)}))},te([(n={xfilter:H,xcard:U,xtable:J},function(t,e){o.getComponent().meta.components=n}),p(e,"App")],e.prototype,"mounted",null),te([u],e.prototype,"allVersionDatas",void 0),te([u],e.prototype,"filter",void 0),te([c],e.prototype,"groupByStatus",null),te([c],e.prototype,"statusNames",null),te([c],e.prototype,"tabTitle",null),te([f((function(){return window.readConfig()}))],e.prototype,"config",void 0),te([f((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),te([f((function(){return window.getConfigOrDefault(this.config,this.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),te([f((function(){var t,e=this,n=this.filter.data.versions||"default";if(window.isDev())return window.readData(n);if(this.allVersionDatas[n])return this.allVersionDatas[n];if("default"==n){var i=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.defaultVersionData","",!1));t=JSON.parse(i).testCaseTasks}else i=window.get(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.readVersion","",!1)+n),t=JSON.parse(i);return this.allVersionDatas[n]=t.map((function(t){return new s(t,e.status)})),this.allVersionDatas[n]}))],e.prototype,"originData",void 0),te([f((function(){var t=this,e=this.originData;return this.filter.data.keyword&&(e=e.filter((function(e){return e.caseName.includesIgnoreCase(t.filter.data.keyword)}))),this.filter.data.status&&(e=e.filter((function(e){return JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)}))),0==e.length&&"未找到任何有效数据".err(),e}))],e.prototype,"filteredData",void 0),te([f((function(){var t=window.groupBy(this.filteredData,"component"),e=this.filteredData.filter((function(t){return 0==t.level}));return e.length>0&&(t.UNIT=e),t}))],e.prototype,"groupByComponent",void 0),te([f((function(){var t=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferComponent",[],!1).map((function(t){return t.toLowerCase()}));return t.unshift("unit"),Object.keys(this.groupByComponent).sort((function(e,n){return window.compareStringByArray(t,e.toLowerCase(),n.toLowerCase())}))}))],e.prototype,"componentNames",void 0)}(e),window.createVue(o.getComponent("App").build(),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,