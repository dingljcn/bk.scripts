/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={384:()=>{Array.prototype.includesIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).indexOf(e)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){var e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExist=function(t,e){for(var n=[],o=0;o<this.length;o++){var i=this[o];$get(i,t)==e&&n.push(i)}return n}},836:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t){return void 0===t&&(t="yyyy-MM-dd HH:mm:ss"),t.replace(/yyyy/,"".concat(this.getFullYear())).replace(/yy/,"".concat(this.getFullYear()%100)).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:"0".concat(this.getMonth()+1)).replace(/dd/,this.getDate()>9?this.getDate():"0".concat(this.getDate())).replace(/HH/,this.getHours()>9?this.getHours():"0".concat(this.getHours())).replace(/mm/,this.getMinutes()>9?this.getMinutes():"0".concat(this.getMinutes())).replace(/ss/,this.getSeconds()>9?this.getSeconds():"0".concat(this.getSeconds()))}},374:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e){void 0===e&&(e=window.document);var n=[],o=e.getElementsByClassName(t);return o&&n.push.apply(n,o),n},Window.prototype.query=function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,o){var i=document.createElement("canvas").getContext("2d");i.font="".concat(e," ").concat(n," ").concat(o);var r=i.measureText(t).width;return Math.floor(r)})),Element.prototype.animate=function(t,e){for(var n=this,o=getComputedStyle(this).transition,i=Object.keys(t),r=0,s=i;r<s.length;r++){var a=s[r];this.style[a]=t[a][0]}setTimeout((function(){var r=e/1e3+"s";n.style.transition=r;for(var s=0,a=i;s<a.length;s++){var u=a[s];n.style[u]=t[u][1]}setTimeout((function(){n.style.transition=o}),e)}),50)},Element.prototype.findChildrenByClass=function(t){for(var e=[],n=this.children,o=0;o<n.length;o++)n[o].classList.contains(t)&&e.push(n[o]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Window.prototype.indexOfChildByClass=function(t,e){for(var n=t.children,o=0;o<n.length;o++)if(n[o].classList.contains(e))return o;return-1}},726:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var o="";"string"==typeof e?o=t[e]:"function"==typeof e&&(o=e(t)),n[o]?n[o].push(t):n[o]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,o){if(null==t||null==t)return n;for(var i=t,r=0,s=e.split(".");r<s.length;r++)if(!(i=i[s[r]]))return o&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return i})),window.defunc("getConfigOrDefault",(function(t,e,n,o){return window.getConfigOrDefault(t,e,n,o,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,o,i){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,c=Object.keys(r);u<c.length;u++)a[h=c[u]]=r[h]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&i&&a.push.apply(a,s);else if("object"==typeof s&&i)for(var l=0,p=Object.keys(s);l<p.length;l++){var h;null==a[h=p[l]]&&(a[h]=s[h])}}return"NOT_FOUND"==a&&(a=o,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var o=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),i=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return o==i?e<n?-1:e>n?1:0:o-i}return e<n?-1:e>n?1:0})),Window.prototype.pushToArrayInObject=function(t,e,n,o){if(void 0===o&&(o=!1),Array.isArray(t[e])){var i=t[e];o&&i.includes(n)||i.push(n)}else t[e]=[n];return t},Window.prototype.unshiftToArrayInObject=function(t,e,n){return Array.isArray(t[e])?t[e].unshift(n):t[e]=[n],t},Window.prototype.defaultConfig=function(){return $rsa.decryptObject(window.encodeConfig())},Window.prototype.timer=function(t,e){void 0===e&&(e=30),e=e<30?30:e;var n=setInterval((function(){t()&&clearInterval(n)}),e)},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){var e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);var n=document.createRange();n.selectNodeContents(e);var o=window.getSelection();o.addRange(n),document.execCommand("Copy",!1,null),o.removeAllRanges(),"已复制: ".concat(t).info(),e.remove()}},506:()=>{function t(t){for(var e=new ArrayBuffer(t.length),n=new Uint8Array(e),o=0;o!=t.length;o++)n[o]=255&t.charCodeAt(o);return e}window.$excel={},window.$excel.export=function(e,n){window.isEnableExcel||window.enableExcel();var o=function(e,n){var o={SheetNames:[n=n||"sheet1"],Sheets:{}};$set(o.Sheets,n,e);var i=window.XLSX.write(o,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(i)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(n));!function(t,e){var n=t;"object"==typeof n&&n instanceof Blob&&(n=URL.createObjectURL(n));var o=document.createElement("a");o.href=n,o.download=e||"",o.click()}(o,e)}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,n){void 0===n&&(n="");var o=t;n&&(o="".concat(t,":").concat(n));var i=$queue.eventPool[o];if(Array.isArray(i)){if(1==i.length)return i[0](e);for(var r=[],s=0,a=i;s<a.length;s++){var u=a[s];r.push(u(e))}}else window.pushToArrayInObject($queue.eventQueue,o,e)},$queue.on=function(t,e,n){void 0===n&&(n="");var o=t;n&&(o="".concat(t,":").concat(n)),window.pushToArrayInObject($queue.eventPool,o,e);var i=$queue.eventQueue[o];if(Array.isArray(o))for(var r=0,s=i;r<s.length;r++)e(s[r])}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,n,o,i){void 0===o&&(o=2e3),void 0===i&&(i="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=i;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)t(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",n),u.time=Date.now();var c=document.createElement("div");c.classList.add("dinglj-v-pop-msg-icon",n),c.innerText=n.substring(0,1).toUpperCase(),u.appendChild(c),u.innerHTML+=e,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){t(u,r)}),o)}window.$tip={},$tip.info=function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"info",n,o)},$tip.warn=function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"warn",n,o)},$tip.err=function(t,n,o){void 0===n&&(n=2e3),void 0===o&&(o="10%"),e(t,"err",n,o)}},168:()=>{window.encodeConfig=function(){return{constant:{status:{TICKET:{en:"$DINGLJ-ENCODE-START$SWDK2DwUBWdGpBsfTImU7d6dUdvqvSuSHaUMWEibE6a6L57aNcwJ0/HrVjZo7a7FtpWJ5hk2txSWHqmNgG4WyTOb6eqkCD6moMCK7noWaC+1t2U4KCN8NDkiTmnRwffI1k/BuuId5Ddt14a2dOmdVHE5qwgD8dCnFv/tLnuasis=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$E1ynOZ+PTSB7D3kLj4HN1UKJJ/qnuvA0I8plOdCwe0ZmiFvWn7alFWkhg6FdHwXG+ITsERy4WTK9hulaTgkJbh+1OPogxaYd6hy0xkC9xnHgVn8IW35RVdGGycWP1uwFXyxYBaq+B8SBo/jb5e9/ExbMG1Uu8Y0M+vhnpSp6dCw=$DINGLJ-ENCODE-END$"},FAILED:{en:"$DINGLJ-ENCODE-START$YcwmSNa8HfdRfruXODMHwizzdk1bWIuH0HVxaVPe53GpT2xHviNL4dpLPZQshgxweW/wu2ZgXiJnr6F56fYQXqXWjo7xEPSEtS1vlAu5qCasc+POYN88jgJHBzm/Nwqz6aZmc6u0WmoWTCCKBa/VlrWUheAeZtuQJ05Col+6pTQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$V1STI8tZH5nhD467NJfWIcNQvSJglAIShVFbzLbj4pUCUfbgaakryeCY2Z/ObaYNwGmHqo5Ix4WY5jNZg1B3XNT0BZ7hpo68If9THmOaJivr/OSXZ9uu+s3ULb2xfrBYjcbkNQlpOqiCZyMdOq3UdMg94OVrqn1xnspMsifNdg8=$DINGLJ-ENCODE-END$"},SUCCESS:{en:"$DINGLJ-ENCODE-START$ng3O9IRoz6bWxNMHFtqHaQvM1dyjilWlcWCvjy86zdDgsPElt0cjLBRsJrq5wk9do1JbcXkgEtjcmb+wvNoqvOkHRiVowLRl+DqQ8DK/QAS32xUrN7KXq0TEB/xuv1gu3dZ9Sc6TLxcXr9MmMhRTkTVfTUzYWIIv8El6l0N2gFQ=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$QYqF/OI04akgr9lA1AyPNqFEdetLDNTS+KDVcDlPd4CWDJfJykPVWOtHz/D0n4L27z4vDisKJMTaww39JHkPPhy+ZudKngOXt0pZrMvr3+Dy3HzaOttaJJcWayP5vqT+6DLDj79zhbMRRg9PSD8Q8PrA628Xnj0PsL0We8urNXA=$DINGLJ-ENCODE-END$"},RUNNING:{en:"$DINGLJ-ENCODE-START$eemimj7E7vgbKL2UE3Jsqd6I8cyGHlX676eCRyHbTF1hS4If4zOq23RW6/jLBnxqVJADqhF7/ec3gqYcR1Pos/om/KGou53qEpGHDHdBt0j4uYcBMqFXw3GaHjhHVYyxV6EKt/xs9ZTKihNpjTy20wd/tFWx+wVuqp68Qk4G0FI=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$W+OnWfVHX5FRjd7Bzqhnn2kaJ/rhK/XOH+0j6RMX9Li1mf8BMpIL+zMUDxeBxh+CNxLI0tWNpNDQ2h6NIpx+VcEWEVOCErm1iNcKODaLBm4khHLh1U1Iq1HJvh9vY3j00JHrPAyEGfQ87Ln2vuAJLmEdG59ec4/7LKQZ49Fm+9M=$DINGLJ-ENCODE-END$"},SENDED:{en:"$DINGLJ-ENCODE-START$bR7qOSAjw+Kh2iJElIgaj2lV4Ev/j1TldkEIbyYwLumCRLa7lD9jWNIdPSsje1mKnNk7KYfRVLOqG+kCcT8gN0gqt1hrwCuaK8sshjBhbR2NXcYAfbguTyBfa5EB5VXLXO/i52TK6sylrULvWetZcKfRSRVZMByYKqv9typCxtA=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$c9XRDY+IXP0+TR9MyfinkN8ryv4hW4cRjMDRJhGwtgcQqn3SGMX1rGi5YfvjN/L5Br5CDfKvSbOI6MUXHFoBfL8pZDCFLuWJKSO3QdJuMRGko9nQOAqfroYQYBR8PX4p0vFmm3MrWgg59QNPK9XM+/37GcAbJ6NyuSYc1N2hTCw=$DINGLJ-ENCODE-END$"},NOTSEND:{en:"$DINGLJ-ENCODE-START$eGAdYFHx0T521gfy92DhZYQofc2zDDAlMXu8aw5/AsGZAp8PTQky8i4wv0MqTJ1cKTtXbJyhEGqMnXsPb16Qw7r6x+QME+NYdmHK4DWug7pqlYQ+SBVogMxeBUx2xeifXzI487abj+8oTJvyWsMQNuf0GCwAlB0TjPrC0oGqbAk=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$mbJ/AV1OnBNUvsFBoXkIjv2o4n414lFn3y4a0cUasyVhfuIAhlDirPzvcBbNgTsh+/5extVaijgIa/QandFULalefX2+fw67wIwWlDkAFZxv0F6ICmdFYR6OnlKM6aDNzwPH4w6MjxQDDtRp20cJkKu6V+C1WJ/pwtQoeq86O70=$DINGLJ-ENCODE-END$"},WAITTING:{en:"$DINGLJ-ENCODE-START$GH7B9Lm3faslgKGEmvksIkXyLlTx3WjlsZvLATzRe+DA8KefzG4nes4MMBjIqC2UZRQLMEkFRtYjworZTYsnqyuJoxk7+XkQyaSumxJne1L9X5X/occznR1bZ8pV32771CG/q5FmtoNbkXKe/0f+jUwylU4lCfxQtIWPm5C4Sno=$DINGLJ-ENCODE-END$",zh:"$DINGLJ-ENCODE-START$FsF6SW79MtDRCQLcAFemaXJwN/nFa5525JCvwgQ0T6P1pSiwf+MBXYz/83wGYw9xn/0b2u1XnuI3EDFtQuk18adp/N1X8urgFaHdqG9/ykE3AS/6K7KmUcJgt7jQxYt0+5omrFuXdJCfTK1g8kJgRlhoJVk5JJNTb7B43Ig6fr8=$DINGLJ-ENCODE-END$"}}},datasource:{mysql:{DB_SERVER:"$DINGLJ-ENCODE-START$ScT2wurV227zvmKUepqjsIblZI+NIR+Q7UwsWDKuFdcyZj4DuSIjnj0QT4Bozm6m705P2YNKQcAkIc5UAU+NBZfBeN7RYOBLoLwz3MnoSSsQr1NRPJWpxmgis2Ud+giDLA0zizi/Bolo0c8ex0fSRZDyOCHqfGoqjzbs0WKxbF8=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$GJVy1zgR7N7Pkp/tmoIXcd8AxUfT+pg8dLIa4efltMmI6uI26JwMDCqnqiTtpdsaOCZ7L5WgkNy3tWRNcZDJ0EFJdFXV84SBCMAWNFcmbALSlrHvvJrU10BBS66ifcfH398/fdQV6gz99PwS7gRdbntxjRMPPrGvbPVdn0xhuMw=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$N5J5aQlKJzwO18nY+iPac7lrKRABo1fOgN5kXKEfcKq7Fe0v9bHAc5eLRoqvTgboojTrt5IqLktnxRvZnqFTU0BRokPQYGBQPlbzYDLyNWsRMdtGjbVsml0pfglkyUYj+qelor+Ilz+62OIjtC07JkEs+J83fv9O7uehCDKhzUs=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$dJbs2D207kWcNHVeBkgKHSx+U2wZNltSgDnQ0RUHa3MCr4Z5CQVfSYGE7YmRvBCyrVivItQxCmt5DB5L+7MTyjRXx9ES8Gq2oLBAuN6jiFBLj8WshkS29eMvLv0/csCid7GU0FEU+HZ+Sa7dWR3GlQnRfTHUWLJ1dIKY6dx1was=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$aGCp0kJbug0Efi3VyKJQACPTn+bg6DEs+6ZeTyLlQf3VzMczIY6O7ddyEiZER/sECssGbrseO6pWocMx2YinkP+I752wYaWU8AiG5aqV8izr7aaCXTOcO6nokPvvLmMVJ+MPoiWme6SwoCfLx6GkNKuc3Z3K1AwlxElSAJgY5Dk=$DINGLJ-ENCODE-END$"},mssql:{DB_SERVER:"$DINGLJ-ENCODE-START$jrtb66A5zaPkIHvcmfZJSsR+ZuK0b6mXUWJbSrSx6ac6JEICn2aIUX+M06rMRZOSJd3DykBFZK2bcfx/XHX+/Nm9S0cKu0Cv6AwxMsDi9nl8PThDtMa+iCSpu9teDdJuCwZpV/5h36+8MWiwnxbmgLK/t9hmcluQv5rdJL3hYc4=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$kyd0tZL+6DO9qHAyZ2LvNjCulRmLU9FPQCWTcz2dnyYjAx5nuaSV68+2eNFhGMbX9eNT/CwfwpN0b1I3EkmRhigCZD/3j3PwNljTAfqMTi6Q1xdMfcpxFo7p2aGcts5ukAQDFnjDkQwRbtSQnHOg6SEygUyggR16TNUQeEa1qFY=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$bp/4SXCp3IjRl96kdK9QcnQFJE0jvkcehW9I5s44p94MAplwDof3jkf/+ufeJ/VqL5N6PBAJH3z8g+yGOYb5Pbe8z6omIQ36Mw2YT7MV/gXXX0yfhyer6RMPORf2NWHuIRdDMGFmRZp4iGWMQu0wUJIzVXFj2yuYHE+q596bAFY=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$c3lTAvKUGHIsxRmGYbg5F2qCJDX2gI7QHXeo2kNaZVLftGVHK4XXa0e5wKbZEHDagT5reo+K/vvw12RwUPMteRV/aRVv0uY4rSPOWCyGet00i61tdp8+U6wQvb2K5dD7CuEVGWZDcfE88qQdQ0yssHVj7qHvZraehVFKcXxixP0=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$SDDc6wwLQYPoQ+MD7nTWitznj6lAS1zH64tTVwHakcU7tQtoaLmK9VOVdbxFl1UPviFCQdaFUb+XYyCqYTidB3RNNHJKVHWHIDmKFEVeS+/SdI+W31BZbYrciyNPO+3owakIcAdpB8b3TKbLJ2I0CVkUpprRnzGqvBwJffTKjb8=$DINGLJ-ENCODE-END$"},oracle:{DB_SERVER:"$DINGLJ-ENCODE-START$kP1L/rAqC6lOCmNySmSisUncRmraij9KBlT4sX9n/TCibryrSTa/rvYb9E5x5aVmhsOFqdOHtE/V7MKcVjisKlXi18rqGPy6eSKZdx37/JMHk36k4LNBPOOgKvhSwfgnXgJyQiFFyvzcgdG/vCRqFQmXA+M5hqEGa+ha3nMU7s0=$DINGLJ-ENCODE-END$",DB_PASS:"$DINGLJ-ENCODE-START$f0jLmd24CiiWY/ZGP9gdog/UOuhC/jR9n/VpTSenuUY71SN+RV69SYIljXDdyD5blNu75KLqQk+g0QyxDtJcoklBeq5HAu06+F1fA5Xwe/TQpZxrsRJZAYjzCEao6qGmzMee0ZVmwIUI04cuAKZnHvLVARNYTGfzmfEAjUAVxl8=$DINGLJ-ENCODE-END$",DB_TYPE:"$DINGLJ-ENCODE-START$PkR3Ade8oCYCRgnRc06dkh8fv8TdovhG+Hn5FkoIgtmLm7ROqYXU8xXA+vN9jCwOThtGbGdVS84t/oqXylQMbUQ9+YmpklztmDOJS9/USPLXCEi8iZyA8m/0mSndZr5OLaoEBawxnO6cQcH39ok8dFIqDe3JHfAei8ttDJnGRWo=$DINGLJ-ENCODE-END$",DB_USER:"$DINGLJ-ENCODE-START$WWRHyyBZ2EOWZqL5R8XkuIPTzDc2F/vgAjMfvNlmdORjtiO4a2NwaA6rPb8K0bRQ7h1PWm+Vd+OkN/HtQw8wSWuOgZGiBMV7fb/6DZqMfzlEVytxiKhcXtcaaeXI7BVJ/b8eTeBABbroz6lJdIN/Xl7PtvEE+pTIHz15MrSnvu4=$DINGLJ-ENCODE-END$",DB_NAME:"$DINGLJ-ENCODE-START$F522ygn1YT/VZxYt/sadPpXB50+osFZuMOEdgKsop6bJdh2hfxWBj8IlyR1gvCUkyPMr61hT7etBVwjMLO6xL0pwT2v61dB6zMT6tBS8N2UoI81lXSG7p5HADv32ZBtxk6qTSUMvHjvPF5jBApt7q9D8a9KyvuC7trI2cmltdKQ=$DINGLJ-ENCODE-END$"}},author:"dingljcn"}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}(()=>{"use strict";n(726),n(384),Window.prototype.linkCss=function(t,e){void 0===e&&(e=window.dinglj_home.decrypt());var n=document.createElement("style"),o=window.mergePath(t,e);n.innerHTML=window.get(o),document.head.appendChild(n)},n(374),Window.prototype.get=function(t,e){void 0===e&&(e={callback:null,async:!1});var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText},Window.prototype.mergePath=function(t,e){return void 0===e&&(e=window.dinglj_home.decrypt()),e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),"".concat(e).concat(t)};var t={},e={};String.prototype.encrypt=function(e){if(void 0===e&&(e=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub),$get(t,this))return $get(t,this);for(var n="'".concat(w.flag_start),o=this;;){if(o.length<100){n+=$rsa.encrypt(o,e);break}var i=o.substring(0,100);o=o.substring(100),n="".concat(n).concat($rsa.encrypt(i,e)).concat(w.flag_split)}return $set(t,this,"".concat(n).concat(w.flag_end,"'")),$get(t,this)},String.prototype.decrypt=function(t){if(void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri),$get(e,this))return $get(e,this);var n=this.startsWith(w.flag_start);if(n!=this.endsWith(w.flag_end))return $set(e,this,this),this;if(n){for(var o="",i=0,r=this.replace(w.flag_start,"").replace(w.flag_end,"").split(w.flag_split);i<r.length;i++){var s=r[i];o+=$rsa.decrypt(s,t)}return $set(e,this,o),o}return $set(e,this,this),this},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t){void 0===t&&(t=2e3),$tip.info(this,t,"10%")},String.prototype.warn=function(t){void 0===t&&(t=2e3),$tip.warn(this,t,"10%")},String.prototype.err=function(t){void 0===t&&(t=2e3),$tip.err(this,t,"10%")},Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,n){t[e]=n},window.$store={},window.$store.getStorage=function(t,e){void 0===e&&(e=void 0);var n=localStorage.getItem(t);if(n){var o=JSON.parse(n);return o.timeout>0&&Date.now()-o.savetime>o.timeout?("本地缓存".concat(t,"已过期").warn(),e):o.data}return e},window.$store.setStorage=function(t,e,n){void 0===n&&(n=-1);var o={savetime:Date.now(),timeout:n,data:e};localStorage.setItem(t,JSON.stringify(o))},n(836);var o=function(){function t(){}return t.prototype.getImg=function(t){return""},t.prototype.emit=function(t,e){},t}();window.BasicProperty=o;const i=o;var r,s=(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(i);window.AbstractComponent=a;const u=a;var c;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu"}(c||(c={})),window.ComponentType=c;const l=c;var p=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.components={},e.fieldNames=[],e.methodNames=[],e.computes=[],e.watchs=[],e.propMap=new Map,e}return p(e,t),e.prototype.getInstance=function(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null},e.prototype.getFields=function(){var t=this,e=this.getInstance();return function(){for(var n={$class:e,vid:"",name:t.name},o=0,i=t.fieldNames;o<i.length;o++){var r=i[o];$set(n,r,$get(e,r))}return n}},e.prototype.getMethods=function(){for(var t=this.getInstance(),e={getImg:function(t){return window.mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):function(){}},n=0,o=this.methodNames;n<o.length;n++){var i=o[n];e[i]=$get(t,i)}return e},e.prototype.getComputeds=function(){for(var t={},e=0,n=this.computes;e<n.length;e++){var o=n[e];t[o.fieldName]=o.func}return t},e.prototype.setProp=function(t,e){this.propMap.set(t,e)},e.prototype.getProps=function(){var t={};return this.propMap.forEach((function(e,n){$set(t,n,e)})),t},e.prototype.getMounted=function(){return function(){var t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(function(){return t}),t.vid),t.appMounted()}},e.prototype.getTemplate=function(){return $get(this.getInstance(),this.template)},e.prototype.getWatchs=function(){for(var t=this.getInstance(),e={},n=0,o=this.watchs;n<o.length;n++){var i=o[n];e[i.target]={handler:$get(t,i.funcName),deep:i.deep}}return e},e.prototype.getComponents=function(){return this.components},e}(i);window.MetaData=h;const f=h;var d=null,g=new Map;window.$registry={},$registry.getComponent=function(t){return t&&d?(g.set(t,d),d=null,g.get(t)):d||(d=new f)},$registry.buildComponent=function(t){var e=g.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){var e=g.get(t),n=$registry.buildComponent(t);return window.registVue(e.name,n)};var v=function(t,e){this.en=t,this.zh=e};window.LangItem=v;const y=v;var m;window.RightMenu=function(t,e,n){void 0===e&&(e=function(t,e){}),void 0===n&&(n=function(t,e){return!0}),this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=n},function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(m||(m={})),window.RsaConst=m;const w=m;n(676),n(894);var b="0123456789abcdefghijklmnopqrstuvwxyz";function C(t){return b.charAt(t)}function S(t,e){return t&e}function T(t,e){return t|e}function E(t,e){return t^e}function D(t,e){return t&~e}function x(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function O(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var N,P="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function R(t){var e,n,o="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),o+=P.charAt(n>>6)+P.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),o+=P.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),o+=P.charAt(n>>2)+P.charAt((3&n)<<4));(3&o.length)>0;)o+="=";return o}function I(t){var e,n="",o=0,i=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=P.indexOf(t.charAt(e));r<0||(0==o?(n+=C(r>>2),i=3&r,o=1):1==o?(n+=C(i<<2|r>>4),i=15&r,o=2):2==o?(n+=C(i),n+=C(r>>2),i=3&r,o=3):(n+=C(i<<2|r>>4),n+=C(15&r),o=0))}return 1==o&&(n+=C(i<<2)),n}var j,A={decode:function(t){var e;if(void 0===j){for(j=Object.create(null),e=0;e<64;++e)j["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(j["-"]=62,j._=63,e=0;e<9;++e)j["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],o=0,i=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=j[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);o|=r,++i>=4?(n[n.length]=o>>16,n[n.length]=o>>8&255,n[n.length]=255&o,o=0,i=0):o<<=6}}switch(i){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=o>>10;break;case 3:n[n.length]=o>>16,n[n.length]=o>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=A.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return A.decode(t)}},M=1e13,L=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,o,i=this.buf,r=i.length;for(n=0;n<r;++n)(o=i[n]*t+e)<M?e=0:o-=(e=0|o/M)*M,i[n]=o;e>0&&(i[n]=e)},t.prototype.sub=function(t){var e,n,o=this.buf,i=o.length;for(e=0;e<i;++e)(n=o[e]-t)<0?(n+=M,t=1):t=0,o[e]=n;for(;0===o[o.length-1];)o.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),o=e.length-2;o>=0;--o)n+=(M+e[o]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*M+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),B=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,$=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function V(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var _,k=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var o="",i=t;i<e;++i)if(o+=this.hexByte(this.get(i)),!0!==n)switch(15&i){case 7:o+="  ";break;case 15:o+="\n";break;default:o+=" "}return o},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var o=this.get(n);if(o<32||o>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",o=t;o<e;++o)n+=String.fromCharCode(this.get(o));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",o=t;o<e;){var i=this.get(o++);n+=i<128?String.fromCharCode(i):i>191&&i<224?String.fromCharCode((31&i)<<6|63&this.get(o++)):String.fromCharCode((15&i)<<12|(63&this.get(o++))<<6|63&this.get(o++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,o,i="",r=t;r<e;)n=this.get(r++),o=this.get(r++),i+=String.fromCharCode(n<<8|o);return i},t.prototype.parseTime=function(t,e,n){var o=this.parseStringISO(t,e),i=(n?B:$).exec(o);return i?(n&&(i[1]=+i[1],i[1]+=+i[1]<70?2e3:1900),o=i[1]+"-"+i[2]+"-"+i[3]+" "+i[4],i[5]&&(o+=":"+i[5],i[6]&&(o+=":"+i[6],i[7]&&(o+="."+i[7]))),i[8]&&(o+=" UTC","Z"!=i[8]&&(o+=i[8],i[9]&&(o+=":"+i[9]))),o):"Unrecognized time: "+o},t.prototype.parseInteger=function(t,e){for(var n,o=this.get(t),i=o>127,r=i?255:0,s="";o==r&&++t<e;)o=this.get(t);if(0==(n=e-t))return i?-1:0;if(n>4){for(s=o,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}i&&(o-=256);for(var a=new L(o),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var o=this.get(t),i="("+((e-t-1<<3)-o)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?o:0,c=7;c>=u;--c)r+=a>>c&1?"1":"0";if(r.length>n)return i+V(r,n)}return i+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return V(this.parseStringISO(t,e),n);var o=e-t,i="("+o+" byte)\n";o>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)i+=this.hexByte(this.get(r));return o>n&&(i+="…"),i},t.prototype.parseOID=function(t,e,n){for(var o="",i=new L,r=0,s=t;s<e;++s){var a=this.get(s);if(i.mulAdd(128,127&a),r+=7,!(128&a)){if(""===o)if((i=i.simplify())instanceof L)i.sub(80),o="2."+i.toString();else{var u=i<80?i<40?0:1:2;o=u+"."+(i-40*u)}else o+="."+i.toString();if(o.length>n)return V(o,n);i=new L,r=0}}return r>0&&(o+=".incomplete"),o},t}(),q=function(){function t(t,e,n,o,i){if(!(o instanceof H))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=o,this.sub=i}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return V(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return V(this.stream.parseStringISO(e,e+n),t);case 30:return V(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,o=this.sub.length;n<o;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var o=0;o<n;++o)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof k?e:new k(e,0);var o=new k(n),i=new H(n),r=t.decodeLength(n),s=n.pos,a=s-o.pos,u=null,c=function(){var e=[];if(null!==r){for(var o=s+r;n.pos<o;)e[e.length]=t.decode(n);if(n.pos!=o)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var i=t.decode(n);if(i.tag.isEOC())break;e[e.length]=i}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(i.tagConstructed)u=c();else if(i.isUniversal()&&(3==i.tagNumber||4==i.tagNumber))try{if(3==i.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=c();for(var l=0;l<u.length;++l)if(u[l].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(o,a,r,i,u)},t}(),H=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new L;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),F=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],J=(1<<26)/F[F.length-1],G=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,o=(1<<e)-1,i=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(i=!0,r=C(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&o,a<=0&&(a+=this.DB,--s)),n>0&&(i=!0),i&&(r+=C(n));return i?r:"0"},t.prototype.negate=function(){var e=W();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+it(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=W();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new X(e):new z(e),this.exp(t,n)},t.prototype.clone=function(){var t=W();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,o=this.DB-t*this.DB%8,i=0;if(t-- >0)for(o<this.DB&&(n=this[t]>>o)!=(this.s&this.DM)>>o&&(e[i++]=n|this.s<<this.DB-o);t>=0;)o<8?(n=(this[t]&(1<<o)-1)<<8-o,n|=this[--t]>>(o+=this.DB-8)):(n=this[t]>>(o-=8)&255,o<=0&&(o+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(e[i++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=W();return this.bitwiseTo(t,S,e),e},t.prototype.or=function(t){var e=W();return this.bitwiseTo(t,T,e),e},t.prototype.xor=function(t){var e=W();return this.bitwiseTo(t,E,e),e},t.prototype.andNot=function(t){var e=W();return this.bitwiseTo(t,D,e),e},t.prototype.not=function(){for(var t=W(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=W();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=W();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+x(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=O(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,T)},t.prototype.clearBit=function(t){return this.changeBit(t,D)},t.prototype.flipBit=function(t){return this.changeBit(t,E)},t.prototype.add=function(t){var e=W();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=W();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=W();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=W();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=W();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=W(),n=W();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,o,i=t.bitLength(),r=ot(1);if(i<=0)return r;n=i<18?1:i<48?3:i<144?4:i<768?5:6,o=i<8?new X(e):e.isEven()?new U(e):new z(e);var s=[],a=3,u=n-1,c=(1<<n)-1;if(s[1]=o.convert(this),n>1){var l=W();for(o.sqrTo(s[1],l);a<=c;)s[a]=W(),o.mulTo(l,s[a-2],s[a]),a+=2}var p,h,f=t.t-1,d=!0,g=W();for(i=it(t[f])-1;f>=0;){for(i>=u?p=t[f]>>i-u&c:(p=(t[f]&(1<<i+1)-1)<<u-i,f>0&&(p|=t[f-1]>>this.DB+i-u)),a=n;0==(1&p);)p>>=1,--a;if((i-=a)<0&&(i+=this.DB,--f),d)s[p].copyTo(r),d=!1;else{for(;a>1;)o.sqrTo(r,g),o.sqrTo(g,r),a-=2;a>0?o.sqrTo(r,g):(h=r,r=g,g=h),o.mulTo(g,s[p],r)}for(;f>=0&&0==(t[f]&1<<i);)o.sqrTo(r,g),h=r,r=g,g=h,--i<0&&(i=this.DB-1,--f)}return o.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var o=e.clone(),i=this.clone(),r=ot(1),s=ot(0),a=ot(0),u=ot(1);0!=o.signum();){for(;o.isEven();)o.rShiftTo(1,o),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;i.isEven();)i.rShiftTo(1,i),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);o.compareTo(i)>=0?(o.subTo(i,o),n&&r.subTo(a,r),s.subTo(u,s)):(i.subTo(o,i),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=i.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new K)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var o=e;e=n,n=o}var i=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(i<r&&(r=i),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=F[F.length-1]){for(e=0;e<F.length;++e)if(n[0]==F[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<F.length;){for(var o=F[e],i=e+1;i<F.length&&o<J;)o*=F[i++];for(o=n.modInt(o);e<i;)if(o%F[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var o;if(16==n)o=4;else if(8==n)o=3;else if(256==n)o=8;else if(2==n)o=1;else if(32==n)o=5;else{if(4!=n)return void this.fromRadix(e,n);o=2}this.t=0,this.s=0;for(var i=e.length,r=!1,s=0;--i>=0;){var a=8==o?255&+e[i]:nt(e,i);a<0?"-"==e.charAt(i)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+o>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=o)>=this.DB&&(s-=this.DB))}8==o&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,o=this.DB-n,i=(1<<o)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>o|s,s=(this[a]&i)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var o=t%this.DB,i=this.DB-o,r=(1<<o)-1;e[0]=this[n]>>o;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<i,e[s-n]=this[s]>>o;o>0&&(e[this.t-n-1]|=(this.s&r)<<i),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,o=0,i=Math.min(t.t,this.t);n<i;)o+=this[n]-t[n],e[n++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o-=t.s;n<this.t;)o+=this[n],e[n++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;n<t.t;)o-=t[n],e[n++]=o&this.DM,o>>=this.DB;o-=t.s}e.s=o<0?-1:0,o<-1?e[n++]=this.DV+o:o>0&&(e[n++]=o),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var o=this.abs(),i=e.abs(),r=o.t;for(n.t=r+i.t;--r>=0;)n[r]=0;for(r=0;r<i.t;++r)n[r+o.t]=o.am(0,i[r],n,r,0,o.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var o=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,o,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,o){var i=e.abs();if(!(i.t<=0)){var r=this.abs();if(r.t<i.t)return null!=n&&n.fromInt(0),void(null!=o&&this.copyTo(o));null==o&&(o=W());var s=W(),a=this.s,u=e.s,c=this.DB-it(i[i.t-1]);c>0?(i.lShiftTo(c,s),r.lShiftTo(c,o)):(i.copyTo(s),r.copyTo(o));var l=s.t,p=s[l-1];if(0!=p){var h=p*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/h,d=(1<<this.F1)/h,g=1<<this.F2,v=o.t,y=v-l,m=null==n?W():n;for(s.dlShiftTo(y,m),o.compareTo(m)>=0&&(o[o.t++]=1,o.subTo(m,o)),t.ONE.dlShiftTo(l,m),m.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--y>=0;){var w=o[--v]==p?this.DM:Math.floor(o[v]*f+(o[v-1]+g)*d);if((o[v]+=s.am(0,w,o,y,0,l))<w)for(s.dlShiftTo(y,m),o.subTo(m,o);o[v]<--w;)o.subTo(m,o)}null!=n&&(o.drShiftTo(l,n),a!=u&&t.ZERO.subTo(n,n)),o.t=l,o.clamp(),c>0&&o.rShiftTo(c,o),a<0&&t.ZERO.subTo(o,o)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var o=W(),i=W(),r=n.convert(this),s=it(e)-1;for(r.copyTo(o);--s>=0;)if(n.sqrTo(o,i),(e&1<<s)>0)n.mulTo(i,r,o);else{var a=o;o=i,i=a}return n.revert(o)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),o=ot(n),i=W(),r=W(),s="";for(this.divRemTo(o,i,r);i.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,i.divRemTo(o,i,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var o=this.chunkSize(n),i=Math.pow(n,o),r=!1,s=0,a=0,u=0;u<e.length;++u){var c=nt(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+c,++s>=o&&(this.dMultiply(i),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,o){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,o),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),T,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var i=[],r=7&e;i.length=1+(e>>3),n.nextBytes(i),r>0?i[0]&=(1<<r)-1:i[0]=0,this.fromString(i,256)}},t.prototype.bitwiseTo=function(t,e,n){var o,i,r=Math.min(t.t,this.t);for(o=0;o<r;++o)n[o]=e(this[o],t[o]);if(t.t<this.t){for(i=t.s&this.DM,o=r;o<this.t;++o)n[o]=e(this[o],i);n.t=this.t}else{for(i=this.s&this.DM,o=r;o<t.t;++o)n[o]=e(i,t[o]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var o=t.ONE.shiftLeft(e);return this.bitwiseTo(o,n,o),o},t.prototype.addTo=function(t,e){for(var n=0,o=0,i=Math.min(t.t,this.t);n<i;)o+=this[n]+t[n],e[n++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o+=t.s;n<this.t;)o+=this[n],e[n++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;n<t.t;)o+=t[n],e[n++]=o&this.DM,o>>=this.DB;o+=t.s}e.s=o<0?-1:0,o>0?e[n++]=o:o<-1&&(e[n++]=this.DV+o),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var o=Math.min(this.t+t.t,e);for(n.s=0,n.t=o;o>0;)n[--o]=0;for(var i=n.t-this.t;o<i;++o)n[o+this.t]=this.am(0,t[o],n,o,0,this.t);for(i=Math.min(t.t,e);o<i;++o)this.am(0,t[o],n,o,0,e-o);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var o=n.t=this.t+t.t-e;for(n.s=0;--o>=0;)n[o]=0;for(o=Math.max(e-this.t,0);o<t.t;++o)n[this.t+o-e]=this.am(e-o,t[o],n,0,0,this.t+o-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var o=this.t-1;o>=0;--o)n=(e*n+this[o])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),o=n.getLowestSetBit();if(o<=0)return!1;var i=n.shiftRight(o);(e=e+1>>1)>F.length&&(e=F.length);for(var r=W(),s=0;s<e;++s){r.fromInt(F[Math.floor(Math.random()*F.length)]);var a=r.modPow(i,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<o&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=W();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),o=t.s<0?t.negate():t.clone();if(n.compareTo(o)<0){var i=n;n=o,o=i}var r=n.getLowestSetBit(),s=o.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),o.rShiftTo(s,o));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=o.getLowestSetBit())>0&&o.rShiftTo(r,o),n.compareTo(o)>=0?(n.subTo(o,n),n.rShiftTo(1,n)):(o.subTo(n,o),o.rShiftTo(1,o)),n.signum()>0?setTimeout(a,0):(s>0&&o.lShiftTo(s,o),setTimeout((function(){e(o)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,o,i){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,o),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),T,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){i()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),K=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),X=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),z=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=W();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(G.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=W();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],o=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,o,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),U=function(){function t(t){this.m=t,this.r2=W(),this.q3=W(),G.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=W();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function W(){return new G(null)}function Y(t,e){return new G(t,e)}var Z="undefined"!=typeof navigator;Z&&"Microsoft Internet Explorer"==navigator.appName?(G.prototype.am=function(t,e,n,o,i,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],c=this[t++]>>15,l=a*u+c*s;i=((u=s*u+((32767&l)<<15)+n[o]+(1073741823&i))>>>30)+(l>>>15)+a*c+(i>>>30),n[o++]=1073741823&u}return i},_=30):Z&&"Netscape"!=navigator.appName?(G.prototype.am=function(t,e,n,o,i,r){for(;--r>=0;){var s=e*this[t++]+n[o]+i;i=Math.floor(s/67108864),n[o++]=67108863&s}return i},_=26):(G.prototype.am=function(t,e,n,o,i,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],c=this[t++]>>14,l=a*u+c*s;i=((u=s*u+((16383&l)<<14)+n[o]+i)>>28)+(l>>14)+a*c,n[o++]=268435455&u}return i},_=28),G.prototype.DB=_,G.prototype.DM=(1<<_)-1,G.prototype.DV=1<<_,G.prototype.FV=Math.pow(2,52),G.prototype.F1=52-_,G.prototype.F2=2*_-52;var Q,tt,et=[];for(Q="0".charCodeAt(0),tt=0;tt<=9;++tt)et[Q++]=tt;for(Q="a".charCodeAt(0),tt=10;tt<36;++tt)et[Q++]=tt;for(Q="A".charCodeAt(0),tt=10;tt<36;++tt)et[Q++]=tt;function nt(t,e){var n=et[t.charCodeAt(e)];return null==n?-1:n}function ot(t){var e=W();return e.fromInt(t),e}function it(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}G.ZERO=ot(0),G.ONE=ot(1);var rt,st,at=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,o;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,o=this.S[e],this.S[e]=this.S[n],this.S[n]=o;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),ut=null;if(null==ut){ut=[],st=0;var ct=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var lt=new Uint32Array(256);for(window.crypto.getRandomValues(lt),ct=0;ct<lt.length;++ct)ut[st++]=255&lt[ct]}var pt=0,ht=function(t){if((pt=pt||0)>=256||st>=256)window.removeEventListener?window.removeEventListener("mousemove",ht,!1):window.detachEvent&&window.detachEvent("onmousemove",ht);else try{var e=t.x+t.y;ut[st++]=255&e,pt+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",ht,!1):window.attachEvent&&window.attachEvent("onmousemove",ht))}function ft(){if(null==rt){for(rt=new at;st<256;){var t=Math.floor(65536*Math.random());ut[st++]=255&t}for(rt.init(ut),st=0;st<ut.length;++st)ut[st]=0;st=0}return rt.next()}var dt=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=ft()},t}(),gt=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],o=t.length-1;o>=0&&e>0;){var i=t.charCodeAt(o--);i<128?n[--e]=i:i>127&&i<2048?(n[--e]=63&i|128,n[--e]=i>>6|192):(n[--e]=63&i|128,n[--e]=i>>6&63|128,n[--e]=i>>12|224)}n[--e]=0;for(var r=new dt,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new G(n)}(t,e);if(null==n)return null;var o=this.doPublic(n);if(null==o)return null;for(var i=o.toString(16),r=i.length,s=0;s<2*e-r;s++)i="0"+i;return i},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16),this.d=Y(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,o,i,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16),this.d=Y(n,16),this.p=Y(o,16),this.q=Y(i,16),this.dmp1=Y(r,16),this.dmq1=Y(s,16),this.coeff=Y(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new dt,o=t>>1;this.e=parseInt(e,16);for(var i=new G(e,16);;){for(;this.p=new G(t-o,1,n),0!=this.p.subtract(G.ONE).gcd(i).compareTo(G.ONE)||!this.p.isProbablePrime(10););for(;this.q=new G(o,1,n),0!=this.q.subtract(G.ONE).gcd(i).compareTo(G.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(G.ONE),a=this.q.subtract(G.ONE),u=s.multiply(a);if(0==u.gcd(i).compareTo(G.ONE)){this.n=this.p.multiply(this.q),this.d=i.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=Y(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),o=0;o<n.length&&0==n[o];)++o;if(n.length-o!=e-1||2!=n[o])return null;for(++o;0!=n[o];)if(++o>=n.length)return null;for(var i="";++o<n.length;){var r=255&n[o];r<128?i+=String.fromCharCode(r):r>191&&r<224?(i+=String.fromCharCode((31&r)<<6|63&n[o+1]),++o):(i+=String.fromCharCode((15&r)<<12|(63&n[o+1])<<6|63&n[o+2]),o+=2)}return i}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var o=new dt,i=t>>1;this.e=parseInt(e,16);var r=new G(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(G.ONE),o=s.q.subtract(G.ONE),i=e.multiply(o);0==i.gcd(r).compareTo(G.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(i),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(o),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=W(),s.q.fromNumberAsync(i,1,o,(function(){s.q.subtract(G.ONE).gcda(r,(function(t){0==t.compareTo(G.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},c=function(){s.p=W(),s.p.fromNumberAsync(t-i,1,o,(function(){s.p.subtract(G.ONE).gcda(r,(function(t){0==t.compareTo(G.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(c,0)}))}))};setTimeout(c,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var o=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,o="",i=0;i<n;i+=2)o+="ff";return Y("0001"+o+"00"+t,16)}((vt[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==o)return null;var i=this.doPrivate(o);if(null==i)return null;var r=i.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var o=Y(e,16),i=this.doPublic(o);return null==i?null:function(t){for(var e in vt)if(vt.hasOwnProperty(e)){var n=vt[e],o=n.length;if(t.substr(0,o)==n)return t.substr(o)}return t}(i.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),vt={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},yt={};yt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var o=function(){};if(o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var i;for(i in n)t.prototype[i]=n[i];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(i=0;i<s.length;i+=1){var n=s[i],o=e[n];"function"==typeof o&&o!=Object.prototype[n]&&(t[n]=o)}})}catch(t){}r(t.prototype,n)}}};var mt={};void 0!==mt.asn1&&mt.asn1||(mt.asn1={}),mt.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var o="",i=0;i<n;i++)o+="f";e=new G(o,16).xor(t).add(G.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=mt.asn1,n=e.DERBoolean,o=e.DERInteger,i=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,c=e.DERUTF8String,l=e.DERNumericString,p=e.DERPrintableString,h=e.DERTeletexString,f=e.DERIA5String,d=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var C=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+C+":"))throw"undefined key: "+C;if("bool"==C)return new n(t[C]);if("int"==C)return new o(t[C]);if("bitstr"==C)return new i(t[C]);if("octstr"==C)return new r(t[C]);if("null"==C)return new s(t[C]);if("oid"==C)return new a(t[C]);if("enum"==C)return new u(t[C]);if("utf8str"==C)return new c(t[C]);if("numstr"==C)return new l(t[C]);if("prnstr"==C)return new p(t[C]);if("telstr"==C)return new h(t[C]);if("ia5str"==C)return new f(t[C]);if("utctime"==C)return new d(t[C]);if("gentime"==C)return new g(t[C]);if("seq"==C){for(var S=t[C],T=[],E=0;E<S.length;E++){var D=w(S[E]);T.push(D)}return new v({array:T})}if("set"==C){for(S=t[C],T=[],E=0;E<S.length;E++)D=w(S[E]),T.push(D);return new y({array:T})}if("tag"==C){var x=t[C];if("[object Array]"===Object.prototype.toString.call(x)&&3==x.length){var O=w(x[2]);return new m({tag:x[0],explicit:x[1],obj:O})}var N={};if(void 0!==x.explicit&&(N.explicit=x.explicit),void 0!==x.tag&&(N.tag=x.tag),void 0===x.obj)throw"obj shall be specified for 'tag'.";return N.obj=w(x.obj),new m(N)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},mt.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),o=(e=Math.floor(n/40)+"."+n%40,""),i=2;i<t.length;i+=2){var r=("00000000"+parseInt(t.substr(i,2),16).toString(2)).slice(-8);o+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new G(o,2).toString(10),o="")}return e},mt.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",o=new G(t,10).toString(2),i=7-o.length%7;7==i&&(i=0);for(var r="",s=0;s<i;s++)r+="0";for(o=r+o,s=0;s<o.length-1;s+=7){var a=o.substr(s,7);s!=o.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var o="",i=t.split("."),r=40*parseInt(i[0])+parseInt(i[1]);o+=e(r),i.splice(0,2);for(var s=0;s<i.length;s++)o+=n(i[s]);return o},mt.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},mt.asn1.DERAbstractString=function(t){mt.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},yt.lang.extend(mt.asn1.DERAbstractString,mt.asn1.ASN1Object),mt.asn1.DERAbstractTime=function(t){mt.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var o=this.zeroPadding,i=this.localDateToUTC(t),r=String(i.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+o(String(i.getMonth()+1),2)+o(String(i.getDate()),2)+o(String(i.getHours()),2)+o(String(i.getMinutes()),2)+o(String(i.getSeconds()),2);if(!0===n){var a=i.getMilliseconds();if(0!=a){var u=o(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,o,i,r){var s=new Date(Date.UTC(t,e-1,n,o,i,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},yt.lang.extend(mt.asn1.DERAbstractTime,mt.asn1.ASN1Object),mt.asn1.DERAbstractStructured=function(t){mt.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},yt.lang.extend(mt.asn1.DERAbstractStructured,mt.asn1.ASN1Object),mt.asn1.DERBoolean=function(){mt.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},yt.lang.extend(mt.asn1.DERBoolean,mt.asn1.ASN1Object),mt.asn1.DERInteger=function(t){mt.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=mt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new G(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},yt.lang.extend(mt.asn1.DERInteger,mt.asn1.ASN1Object),mt.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=mt.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}mt.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var o="";for(n=0;n<t.length-1;n+=8){var i=t.substr(n,8),r=parseInt(i,2).toString(16);1==r.length&&(r="0"+r),o+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+o},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},yt.lang.extend(mt.asn1.DERBitString,mt.asn1.ASN1Object),mt.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=mt.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}mt.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},yt.lang.extend(mt.asn1.DEROctetString,mt.asn1.DERAbstractString),mt.asn1.DERNull=function(){mt.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},yt.lang.extend(mt.asn1.DERNull,mt.asn1.ASN1Object),mt.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",o=new G(t,10).toString(2),i=7-o.length%7;7==i&&(i=0);for(var r="",s=0;s<i;s++)r+="0";for(o=r+o,s=0;s<o.length-1;s+=7){var a=o.substr(s,7);s!=o.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};mt.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var o="",i=t.split("."),r=40*parseInt(i[0])+parseInt(i[1]);o+=e(r),i.splice(0,2);for(var s=0;s<i.length;s++)o+=n(i[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=o},this.setValueName=function(t){var e=mt.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},yt.lang.extend(mt.asn1.DERObjectIdentifier,mt.asn1.ASN1Object),mt.asn1.DEREnumerated=function(t){mt.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=mt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new G(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},yt.lang.extend(mt.asn1.DEREnumerated,mt.asn1.ASN1Object),mt.asn1.DERUTF8String=function(t){mt.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},yt.lang.extend(mt.asn1.DERUTF8String,mt.asn1.DERAbstractString),mt.asn1.DERNumericString=function(t){mt.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},yt.lang.extend(mt.asn1.DERNumericString,mt.asn1.DERAbstractString),mt.asn1.DERPrintableString=function(t){mt.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},yt.lang.extend(mt.asn1.DERPrintableString,mt.asn1.DERAbstractString),mt.asn1.DERTeletexString=function(t){mt.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},yt.lang.extend(mt.asn1.DERTeletexString,mt.asn1.DERAbstractString),mt.asn1.DERIA5String=function(t){mt.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},yt.lang.extend(mt.asn1.DERIA5String,mt.asn1.DERAbstractString),mt.asn1.DERUTCTime=function(t){mt.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},yt.lang.extend(mt.asn1.DERUTCTime,mt.asn1.DERAbstractTime),mt.asn1.DERGeneralizedTime=function(t){mt.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},yt.lang.extend(mt.asn1.DERGeneralizedTime,mt.asn1.DERAbstractTime),mt.asn1.DERSequence=function(t){mt.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},yt.lang.extend(mt.asn1.DERSequence,mt.asn1.DERAbstractStructured),mt.asn1.DERSet=function(t){mt.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},yt.lang.extend(mt.asn1.DERSet,mt.asn1.DERAbstractStructured),mt.asn1.DERTaggedObject=function(t){mt.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},yt.lang.extend(mt.asn1.DERTaggedObject,mt.asn1.ASN1Object);var wt,bt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ct=function(t){function e(n){var o=t.call(this)||this;return n&&("string"==typeof n?o.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&o.parsePropertiesFrom(n)),o}return bt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,o=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===N){var n="0123456789ABCDEF";for(N={},e=0;e<16;++e)N[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)N[n.charAt(e)]=e;for(e=0;e<8;++e)N[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var o=[],i=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=N[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);i|=s,++r>=2?(o[o.length]=i,i=0,r=0):i<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return o}(t):A.unarmor(t),i=q.decode(o);if(3===i.sub.length&&(i=i.sub[2].sub[0]),9===i.sub.length){e=i.sub[1].getHexStringValue(),this.n=Y(e,16),n=i.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=i.sub[3].getHexStringValue();this.d=Y(r,16);var s=i.sub[4].getHexStringValue();this.p=Y(s,16);var a=i.sub[5].getHexStringValue();this.q=Y(a,16);var u=i.sub[6].getHexStringValue();this.dmp1=Y(u,16);var c=i.sub[7].getHexStringValue();this.dmq1=Y(c,16);var l=i.sub[8].getHexStringValue();this.coeff=Y(l,16)}else{if(2!==i.sub.length)return!1;if(i.sub[0].sub){var p=i.sub[1].sub[0];e=p.sub[0].getHexStringValue(),this.n=Y(e,16),n=p.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=i.sub[0].getHexStringValue(),this.n=Y(e,16),n=i.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new mt.asn1.DERInteger({int:0}),new mt.asn1.DERInteger({bigint:this.n}),new mt.asn1.DERInteger({int:this.e}),new mt.asn1.DERInteger({bigint:this.d}),new mt.asn1.DERInteger({bigint:this.p}),new mt.asn1.DERInteger({bigint:this.q}),new mt.asn1.DERInteger({bigint:this.dmp1}),new mt.asn1.DERInteger({bigint:this.dmq1}),new mt.asn1.DERInteger({bigint:this.coeff})]};return new mt.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return R(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new mt.asn1.DERSequence({array:[new mt.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new mt.asn1.DERNull]}),e=new mt.asn1.DERSequence({array:[new mt.asn1.DERInteger({bigint:this.n}),new mt.asn1.DERInteger({int:this.e})]}),n=new mt.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new mt.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return R(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(gt),St="undefined"!=typeof process?null===(wt=process.env)||void 0===wt?void 0:wt.npm_package_version:void 0;const Tt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new Ct(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(I(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return R(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return R(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,I(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new Ct,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=St,t}();function Et(t,e){return"object"==typeof t?function(t,e){for(let n of Object.keys(t))t[n]=Et(t[n],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const n=new Tt;return n.setPrivateKey(e),n.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const n=new Tt;return n.setPrivateKey(e),n.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return Et(t,e)},n(506),window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,n){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,n){return void 0===n&&(n=!1),function(o,i){$registry.getComponent().propMap.set(i,{type:t,default:e,required:n})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,n){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,n){$registry.getComponent().computes.push({fieldName:n,func:t})}},window.Component=function(t){return function(e,n){$registry.getComponent().components=t}},window.Watch=function(t,e){return void 0===e&&(e=!0),function(n,o){$registry.getComponent().watchs.push({target:t,deep:e,funcName:o})}},window.Service=function(t,e,n){return function(o){var i=$registry.getComponent(e);i.clazz=t,i.name=e,i.setProp("iProps",{type:Object,default:{},required:!!n})}};var Dt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),xt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>',e}Dt(e,t),e.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}},e.prototype.getStyle=function(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}},xt([Template],e.prototype,"template",void 0),xt([Method],e.prototype,"getClass",null),xt([Method],e.prototype,"getStyle",null),xt([Compute((function(t){return t.iProps.singleClick||function(t){}}))],e.prototype,"$singleClick",void 0),xt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),xt([Compute((function(t){return t.iProps.type||"primary"}))],e.prototype,"$type",void 0),e=xt([Service(e,l.ButtonX,!0)],e)}(u),$registry.buildAndRegist(l.ButtonX);var Ot=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Nt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',e.value="",e}Ot(e,t),e.prototype.mounted=function(){var t=this;$queue.on("dinglj-v-input-text::clear",(function(){t.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(function(){window.byId(t.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""},e.prototype.getStyle=function(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}},e.prototype.setValue=function(t,e){this.value=t;var n={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(n),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(n),this.iProps.onOver&&this.iProps.onOver(n)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(n),this.iProps.onOver&&this.iProps.onOver(n))},Nt([Mounted],e.prototype,"mounted",null),Nt([Template],e.prototype,"template",void 0),Nt([Field],e.prototype,"value",void 0),Nt([Method],e.prototype,"getStyle",null),Nt([Method],e.prototype,"setValue",null),Nt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),Nt([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"$caption",void 0),Nt([Compute((function(t){return t.iProps.placeholder||"请输入".concat(t.$caption)}))],e.prototype,"$placeholder",void 0),e=Nt([Service(e,l.InputX,!0)],e)}(u),$registry.buildAndRegist(l.InputX);var Pt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Rt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',e.active=!1,e}Pt(e,t),e.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},e.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},e.prototype.onclicked=function(){this.active=!this.active,this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})},Rt([Template],e.prototype,"template",void 0),Rt([Field],e.prototype,"active",void 0),Rt([Method],e.prototype,"getStyle",null),Rt([Method],e.prototype,"getClass",null),Rt([Method],e.prototype,"onclicked",null),Rt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"xSize",void 0),Rt([Compute((function(t){return t.iProps.preTxt||""}))],e.prototype,"preText",void 0),Rt([Compute((function(t){return t.iProps.postTxt||""}))],e.prototype,"postText",void 0),e=Rt([Service(e,l.SwitchX,!0)],e)}(u),$registry.buildAndRegist(l.SwitchX);var It=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),jt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',e.value=null,e}It(e,t),e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.$onChange(t))},e.prototype.getStyle=function(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}},e.prototype.$onChange=function(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})},jt([Template],e.prototype,"template",void 0),jt([Field],e.prototype,"value",void 0),jt([Method],e.prototype,"setValue",null),jt([Method],e.prototype,"getStyle",null),jt([Method],e.prototype,"$onChange",null),jt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"$list",void 0),jt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),jt([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"$caption",void 0),jt([Compute((function(t){return t.iProps.placeholder||"请选择".concat(t.$caption)}))],e.prototype,"$placeholder",void 0),jt([Compute((function(t){return t.iProps.getLabel||function(t){return t}}))],e.prototype,"$getLabel",void 0),jt([Compute((function(t){return t.iProps.getValue||function(t){return t}}))],e.prototype,"$getValue",void 0),e=jt([Service(e,l.ComboX,!0)],e)}(u),$registry.buildAndRegist(l.ComboX);var At=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Mt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',e.value=null,e}At(e,t),e.prototype.mounted=function(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))},Mt([Mounted],e.prototype,"mounted",null),Mt([Template],e.prototype,"template",void 0),Mt([Field],e.prototype,"value",void 0),Mt([Method],e.prototype,"setValue",null),Mt([Compute((function(t){return null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value}))],e.prototype,"validItem",void 0),Mt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),Mt([Compute((function(t){return t.iProps.default||(t.list.length>0?t.list[0]:null)}))],e.prototype,"default",void 0),Mt([Compute((function(t){return t.iProps.getCaption||function(t){return t}}))],e.prototype,"getCaption",void 0),e=Mt([Service(e,l.NavigatorX,!0)],e)}(u),$registry.buildAndRegist(l.NavigatorX);var Lt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Bt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}Lt(e,t),e.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},Bt([Template],e.prototype,"template",void 0),Bt([Compute((function(t){return t.iProps.size||0}))],e.prototype,"size",void 0),Bt([Compute((function(t){return t.iProps.index||0}))],e.prototype,"index",void 0),Bt([Method],e.prototype,"getStyle",null),e=Bt([Service(e,l.ScrollerY,!0)],e)}(u),$registry.buildAndRegist(l.ScrollerY);var $t=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Vt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-navigator-view">\n        \x3c!-- 左侧导航窗格 --\x3e\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n            \x3c!-- 主要内容部分用纵向滚动视图, 并提供插槽 --\x3e\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',e.active=null,e}$t(e,t),Vt([Template],e.prototype,"template",void 0),Vt([Field],e.prototype,"active",void 0),Vt([Compute((function(t){return{list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}}}))],e.prototype,"navigatorProps",void 0),Vt([Compute((function(t){return{size:t.list.length,index:t.list.indexOf(t.active)}}))],e.prototype,"scrollyProps",void 0),Vt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),e=Vt([Service(e,l.NavigatorView,!0)],e)}(u),$registry.buildAndRegist(l.NavigatorView);var _t=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),kt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',e.value=null,e}_t(e,t),e.prototype.mounted=function(){var t=this;Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(function(){var e=(t.index+1+t.list.length)%t.list.length;t.clicked(t.list[e],e)}),this.vid),$queue.on("tab-panel:to",(function(e){var n=t.list.filter((function(t){return JSON.stringify(t)==JSON.stringify(e)}));n.length>0&&t.clicked(n[0],t.list.indexOf(n[0]))}),this.vid)},e.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},e.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},e.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],o=window.byId(n.getId(e));o&&(t.style.width="".concat(o.offsetWidth,"px"),t.style.left="".concat(o.offsetLeft,"px"))}),50))},kt([Mounted],e.prototype,"mounted",null),kt([Template],e.prototype,"template",void 0),kt([Field],e.prototype,"value",void 0),kt([Method],e.prototype,"getClass",null),kt([Method],e.prototype,"getId",null),kt([Method],e.prototype,"clicked",null),kt([Compute((function(t){return!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value)}))],e.prototype,"index",void 0),kt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),kt([Compute((function(t){return t.iProps.getLabel||function(t){return t}}))],e.prototype,"getLabel",void 0),e=kt([Service(e,l.TabPanelX,!0)],e)}(u),$registry.buildAndRegist(l.TabPanelX);var qt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ht=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}qt(e,t),e.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},Ht([Template],e.prototype,"template",void 0),Ht([Compute((function(t){return t.iProps.size||0}))],e.prototype,"size",void 0),Ht([Compute((function(t){return t.iProps.index||0}))],e.prototype,"index",void 0),Ht([Method],e.prototype,"getStyle",null),e=Ht([Service(e,l.ScrollerX,!0)],e)}(u),$registry.buildAndRegist(l.ScrollerX);var Ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Jt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        \x3c!-- TabView 总容器 --\x3e\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            \x3c!-- TabView 内容 --\x3e\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',e.value=null,e.tabPanelId="",e}Ft(e,t),e.prototype.mounted=function(){var t=this;$queue.on("tab-view:next",(function(){$queue.sendMsg("tab-panel:next",null,t.tabPanelId)}),this.vid),$queue.on("tab-view:to",(function(e){$queue.sendMsg("tab-panel:to",e,t.tabPanelId)}),this.vid)},e.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},Jt([Mounted],e.prototype,"mounted",null),Jt([Template],e.prototype,"template",void 0),Jt([Compute((function(t){return{size:t.list.length,index:t.index}}))],e.prototype,"scrollxProps",void 0),Jt([Compute((function(t){return{list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}}}))],e.prototype,"tabPanelProps",void 0),Jt([Field],e.prototype,"value",void 0),Jt([Field],e.prototype,"tabPanelId",void 0),Jt([Method],e.prototype,"tabPanelLoaded",null),Jt([Compute((function(t){return t.list.indexOfIgnoreCase(t.value)}))],e.prototype,"index",void 0),Jt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),e=Jt([Service(e,l.TabView,!0)],e)}(u),$registry.buildAndRegist(l.TabView);var Gt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Kt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-table" :id="vid" :data-title="title">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',e.cache={},e.checkAll=!1,e.checkedList=[],e.bestWidthCache=!1,e}Gt(e,t),e.prototype.mounted=function(){var t=this;window.timer((function(){var e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)},e.prototype.genHeadProps=function(t){return{bindId:"".concat(this.vid,"-Col-").concat(this.getColumnKey(t)),data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}},e.prototype.genLineProps=function(t,e){return{bindId:"".concat(this.vid,"-").concat(e),data:t,list:this.rowMenus}},e.prototype.genBodyProps=function(){return{bindId:"".concat(this.vid,"-Body"),data:this.list,list:this.bodyMenus}},e.prototype.checkOne=function(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))},e.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",o={"dinglj-v-cell":!0};return o[e]=!0,o[n]=!0,this.cache[e]=o,o},e.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},e.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.list),this.checkAll=!this.checkAll},e.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var o=n.getColumnKey(e),i=n.getColumnLabel(e),r=[window.calcTxtWidth("".concat(i))];r.push.apply(r,n.list.map((function(e){var n=t.getCell(e,o);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[o]=s+30},n=this,o=0,i=this.columns;o<i.length;o++)e(i[o]);return this.bestWidthCache},e.prototype.exportToExcel=function(){var t=this;window.timer((function(){var e=window.byId(t.vid);if(!e)return!1;for(var n="",o=0,i=e.children[0].children;o<i.length;o++)(c=i[o]).classList.contains("dinglj-v-table-select")||(n+=c.innerText);n+="\n";for(var r=0,s=e.children[1].children[0].children;r<s.length;r++){for(var a=0,u=s[r].children;a<u.length;a++){var c;(c=u[a]).classList.contains("dinglj-v-table-select")||(n+=c.innerText)}n+="\n"}return console.log(n),!0}))},Kt([Mounted],e.prototype,"mounted",null),Kt([Template],e.prototype,"template",void 0),Kt([Field],e.prototype,"cache",void 0),Kt([Field],e.prototype,"checkAll",void 0),Kt([Field],e.prototype,"checkedList",void 0),Kt([Field],e.prototype,"bestWidthCache",void 0),Kt([Method],e.prototype,"genHeadProps",null),Kt([Method],e.prototype,"genLineProps",null),Kt([Method],e.prototype,"genBodyProps",null),Kt([Method],e.prototype,"checkOne",null),Kt([Method],e.prototype,"getClass",null),Kt([Method],e.prototype,"getStyle",null),Kt([Method],e.prototype,"doCheckAll",null),Kt([Method],e.prototype,"getBestWidth",null),Kt([Method],e.prototype,"exportToExcel",null),Kt([Compute((function(t){return t.iProps.title||""}))],e.prototype,"title",void 0),Kt([Compute((function(t){return t.iProps.flexColumns||[]}))],e.prototype,"flexColumns",void 0),Kt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),Kt([Compute((function(t){return t.iProps.sequenceNum||!0}))],e.prototype,"sequenceNum",void 0),Kt([Compute((function(t){return t.iProps.selectable||!0}))],e.prototype,"selectable",void 0),Kt([Compute((function(t){return t.iProps.columns||[]}))],e.prototype,"columns",void 0),Kt([Compute((function(t){return t.iProps.getColumnKey||function(t){return t}}))],e.prototype,"getColumnKey",void 0),Kt([Compute((function(t){return t.iProps.getColumnLabel||function(t){return t}}))],e.prototype,"getColumnLabel",void 0),Kt([Compute((function(t){return t.iProps.getCell||function(e,n){var o=t.iProps.getColumnKey(n);return $get(e,o)}}))],e.prototype,"getCell",void 0),Kt([Compute((function(t){return t.iProps.rowMenus||[]}))],e.prototype,"rowMenus",void 0),Kt([Compute((function(t){return t.iProps.bodyMenus||[]}))],e.prototype,"bodyMenus",void 0),Kt([Compute((function(t){return t.iProps.titleColumnMenus||[]}))],e.prototype,"titleColumnMenus",void 0),e=Kt([Service(e,l.TableX,!0)],e)}(u),$registry.buildAndRegist(l.TableX);var Xt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),zt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",e}Xt(e,t),e.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},e.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},zt([Template],e.prototype,"template",void 0),zt([Method],e.prototype,"getContainerStyle",null),zt([Method],e.prototype,"getProgressStyle",null),zt([Compute((function(t){return(t.iProps.height||5)+"px"}))],e.prototype,"height",void 0),zt([Compute((function(t){return t.iProps.percent||"100%"}))],e.prototype,"percent",void 0),zt([Compute((function(t){return t.iProps.txtPosition||"TopLeft"}))],e.prototype,"position",void 0),zt([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"caption",void 0),e=zt([Service(e,l.ProgressX,!0)],e)}(u),$registry.buildAndRegist(l.ProgressX);var Ut=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Wt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<teleport to="body" v-if="display">\n        <div class="dinglj-v-modal-mask"></div>\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',e.position={x:-1,y:-1},e}Ut(e,t),e.prototype.mounted=function(){window.addEventListener("mouseup",this.cleanXY)},e.prototype.getStyle=function(){return{width:"".concat(this.width,"px"),height:"".concat(this.height,"px")}},e.prototype.closeModal=function(){this.iProps.onClose()},e.prototype.recordXY=function(t){var e=window.byId(this.vid);if(e){var n=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(n.left),y:t.screenY-parseInt(n.top)}}else this.cleanXY()},e.prototype.moveXY=function(t){if(window.getVal(this.position,"x",-1)>=0){var e=window.byId(this.vid);e.style.left="".concat(t.screenX-this.position.x,"px"),e.style.top="".concat(t.screenY-this.position.y,"px")}},e.prototype.cleanXY=function(){this.position={x:-1,y:-1}},Wt([Mounted],e.prototype,"mounted",null),Wt([Template],e.prototype,"template",void 0),Wt([Field],e.prototype,"position",void 0),Wt([Method],e.prototype,"getStyle",null),Wt([Method],e.prototype,"closeModal",null),Wt([Method],e.prototype,"recordXY",null),Wt([Method],e.prototype,"moveXY",null),Wt([Method],e.prototype,"cleanXY",null),Wt([Compute((function(t){return{type:"cancel",singleClick:function(e){t.cancel()}}}))],e.prototype,"cancelProps",void 0),Wt([Compute((function(t){return{singleClick:function(e){t.ok()}}}))],e.prototype,"okProps",void 0),Wt([Compute((function(t){return t.iProps.display||!1}))],e.prototype,"display",void 0),Wt([Compute((function(t){return t.iProps.ok||t.closeModal}))],e.prototype,"ok",void 0),Wt([Compute((function(t){return t.iProps.cancel||t.closeModal}))],e.prototype,"cancel",void 0),Wt([Compute((function(t){return t.iProps.width||600}))],e.prototype,"width",void 0),Wt([Compute((function(t){return t.iProps.height||300}))],e.prototype,"height",void 0),e=Wt([Service(e,l.ModalX,!0)],e)}(u),$registry.buildAndRegist(l.ModalX);var Yt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Zt=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<teleport to="body" v-if="display">\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            <div v-for="item in $list">\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',e.display=!1,e.position={top:"0px",left:"0px",opacity:"0"},e}Yt(e,t),e.prototype.mounted=function(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()},e.prototype.binding=function(){var t=this;window.timer((function(){return!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){$queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){var e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)}))})),!0))}),500)},e.prototype.hidden=function(){this.position.opacity="0",this.display=!1},e.prototype.conditionIfDisplay=function(t){return t.isDisplay(this.$ctx,this.element)},e.prototype.execCommand=function(t){t.event(this.$ctx,this.element),this.hidden()},Zt([Mounted],e.prototype,"mounted",null),Zt([Template],e.prototype,"template",void 0),Zt([Field],e.prototype,"display",void 0),Zt([Field],e.prototype,"element",void 0),Zt([Field],e.prototype,"position",void 0),Zt([Method],e.prototype,"binding",null),Zt([Method],e.prototype,"hidden",null),Zt([Method],e.prototype,"conditionIfDisplay",null),Zt([Method],e.prototype,"execCommand",null),Zt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"$list",void 0),Zt([Compute((function(t){return t.iProps.data||{}}))],e.prototype,"$ctx",void 0),e=Zt([Service(e,l.ContextMenuX,!0)],e)}(u),$registry.buildAndRegist(l.ContextMenuX),window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css");var Qt={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"},te=function(){function t(t,e){if(t){t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error("未知的状态 {".concat(t.stats,"}, 结果 {").concat(t.result,"}, 请联系 dinglj 补充")):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error("未知的状态 {".concat(t.stats,"}, 请联系 dinglj 补充")):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error("未知的结果 {".concat(t.result,"}, 请联系 dinglj 补充")),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;var n=t.ticketId||t.log;this.ticket=n?parseInt(n):n,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}}return t.getCaption=function(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}},t._fieldMap_=Qt,t._fields_=Object.keys(Qt),t}(),ee=function(){function t(){}return t.prototype.exec=function(t,e,n,o,i){if(void 0===i&&(i=""),this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,o):this.func(t,e,n,i);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(i)}return!1},t}();window.defunc("RowFilter",(function(t,e,n){var o=new ee;return o.isRow=!0,o.groupRegExp=t,o.tabRegExp=e,o.func=n,o})),window.defunc("ColFilter",(function(t,e,n){var o=new ee;return o.isRow=!1,o.groupRegExp=t,o.tabRegExp=e,Array.isArray(n)?(o.ignoreColumns=n,o.type="array"):"function"==typeof n?(o.func=n,o.type="function"):(o.ignoreColumns=[n],o.type="single"),o}));var ne=function(){function t(){}return t.prototype.exec=function(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""},t}();window.defunc("GroupStrategy",(function(t,e,n){var o=new ne;return o.fieldKey=t,o.expectValue=e,o.groupName=n,Array.isArray(e)?o.expectValue=e:o.expectValue=[e],o})),window.defunc("GroupStrategy",(function(t){var e=new ne;return e.func=t,e}));var oe=function(){function t(){}return t.prototype.exec=function(t,e,n,o){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,n,o):window.compareStringByArray(this.expectValue,n.get(this.fieldKey),o.get(this.fieldKey))},t}();window.defunc("OrderTicket",(function(t,e,n,o){var i=new oe;return i.groupRegExp=t,i.tabRegExp=e,i.fieldKey=n,Array.isArray(o)?i.expectValue=o:i.expectValue=[o],i})),window.defunc("OrderTicket",(function(t,e,n){var o=new oe;return o.groupRegExp=t,o.tabRegExp=e,o.func=n,o}));var ie=function(){function t(){}return t.prototype.exec=function(t,e){var n=this.groupRegExp.test(t);if(this.reverse&&(n=!n),n){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""},t}();window.defunc("TabPageStrategy",(function(t,e,n,o){return window.TabPageStrategy(t,e,n,o,!1)})),window.defunc("TabPageStrategy",(function(t,e,n,o,i){var r=new ie;return r.groupRegExp=t,r.fieldKey=e,r.tabName=o,r.reverse=i,Array.isArray(n)?r.expectValue=n:r.expectValue=[n],r})),window.defunc("TabPageStrategy",(function(t,e){return window.TabPageStrategy(t,e,!1)})),window.defunc("TabPageStrategy",(function(t,e,n){var o=new ie;return o.groupRegExp=t,o.func=e,o.reverse=n,o}));var re={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",dinglj_note:"备注"},se=(function(){function t(t){if(void 0===t&&(t=null),null!=t)for(var e=$store.getStorage("dinglj-v-ticket-info",{}),n=0,o=t.children;n<o.length;n++){var i=o[n],r=i.className,s=i.innerText.trim();this.set(r,s),"id".equalsIgnoreCase(r)&&e[s]&&this.set("dinglj_note",e[s].note)}}t.getCaption=function(e){return t.fieldNames.includesIgnoreCase(e)?t.fields[e]:e},t.forLocalTest=function(e){for(var n=new t,o=$store.getStorage("dinglj-v-ticket-info",{}),i=0,r=Object.keys(e);i<r.length;i++){var s=r[i],a=$get(e,s);n.set(s,a),"id".equalsIgnoreCase(s)&&o[a]&&n.set("dinglj_note",o[a].note)}return n},t.prototype.set=function(e,n){t.fieldNames.includesIgnoreCase(e)?this[e]=n:t.unknownColumn.includesIgnoreCase(e)||("不存在的列: ".concat(e).warn(),t.unknownColumn.push(e))},t.prototype.get=function(t){return $get(this,t)?$get(this,t):""},t.fields=re,t.fieldNames=Object.keys(re),t.fieldValues=Object.values(re),t.unknownColumn=["sel"]}(),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),ae=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="case-filter">\n        <div class="filter-row">\n            <i-input :i-props="keywordProps"></i-input>\n            <i-combo style="margin-left: 10px" :i-props="statusProps"></i-combo>\n            <i-combo style="margin-left: 10px; --width: 400px" :i-props="versionProps"></i-combo>\n            <div class="dinglj-v-flex"></div>\n            <i-switch :i-props="modeProps"></i-switch>\n        </div>\n        <div class="filter-row" v-if="filter.mode == \'card\'">\n            <i-input :i-props="cardCntProps"></i-input>\n        </div>\n    </div>',e.filter={keyword:"",status:"",versions:"",mode:"card",cardCnt:"7"},e.versionList=[],e}se(e,t),e.prototype.onFilterChange=function(t,e){this.emit("on-change",t)},ae([Template],e.prototype,"template",void 0),ae([Field],e.prototype,"filter",void 0),ae([Field],e.prototype,"versionList",void 0),ae([Compute((function(t){return{caption:"搜索",placeholder:"请输入关键字",onChange:function(e){return t.filter.keyword=e.value}}}))],e.prototype,"keywordProps",void 0),ae([Compute((function(t){return{caption:"状态",list:Object.values(t.status),getValue:function(t){return t.en},getLabel:function(t){return t.zh},onChange:function(e){return t.filter.status=e.value}}}))],e.prototype,"statusProps",void 0),ae([Compute((function(t){return{caption:"版本",placeholder:"默认为当前版本",list:t.versionNames,onChange:function(e){return t.filter.status=e.value}}}))],e.prototype,"versionProps",void 0),ae([Compute((function(t){return{preTxt:"卡片视图",postTxt:"表格视图",onChange:function(e){return t.filter.mode=e.value?"table":"card"}}}))],e.prototype,"modeProps",void 0),ae([Compute((function(t){return{caption:"每列的卡片数",placeholder:"请输入每列的卡片数量",defaultValue:"7",onChange:function(e){return t.filter.cardCnt=e.value}}}))],e.prototype,"cardCntProps",void 0),ae([Compute(window.readConfig)],e.prototype,"config",void 0),ae([Compute(window.defaultConfig)],e.prototype,"defaultConfig",void 0),ae([Compute((function(t){return window.getConfigOrDefault(t.config,t.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),ae([Compute((function(t){if(window.isDev())return window.readVersion();if(0==t.versionList.length){var e=window.getConfigOrDefault(t.config,t.defaultConfig,"urls.versions","",!1);t.versionList=JSON.parse(window.get(e))}return t.versionList}))],e.prototype,"versions",void 0),ae([Compute((function(t){return t.versions.map((function(t){return t.erpVersion}))}))],e.prototype,"versionNames",void 0),ae([Watch("filter")],e.prototype,"onFilterChange",null),e=ae([Service(e,"CL-Filter")],e)}(u);const ue=$registry.buildComponent("CL-Filter");var ce=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),le=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container card">\n        <div class="case-list-status-page" v-for="statusName in statusNames">\n            <div :class="\'case-list-card \' + _case_.status.en.toLowerCase()" :style="{ \'--cnt\': cardCnt }" v-for="_case_ in groupData[statusName]">\n                <div class="card-line card-title">\n                    <div class="card-ticket" v-if="_case_.ticket" @click="openCardTicket(_case_)">#{{ _case_.ticket }}</div>\n                    <div :class="_case_.status.en.toLowerCase()" v-else>{{ _case_.status.en }}</div>\n                    <div class="card-name" :title="_case_.caseName">{{ _case_.caseName.replace(/^2.0[-_]/, \'\').replace(/.[xX][lL][sS][xX]?$/, \'\') }}</div>\n                </div>\n                <div class="card-line card-percent" v-if="[\'ticket\',\'running\'].includesIgnoreCase(_case_.status.en)">\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getLineProgressProps(_case_)"></i-progress>\n                    <i-progress :style="{ \'--bg\': \'ticket\'.equalsIgnoreCase(_case_.status.en) ? \'red\' : \'rgb(180,180,180)\' }" class="card-line-item" :i-props="getStepProgressProps(_case_)"></i-progress>\n                </div>\n                <div class="card-line card-time-cost" v-if="[\'ticket\'].includesIgnoreCase(_case_.status.en)">\n                    <div>耗时: {{ _case_.timeCost }}</div>\n                </div>\n            </div>\n        </div>\n    </div>',e}ce(e,t),e.prototype.getLineProgressProps=function(t){return{caption:"行进度: ".concat(t.currentRow,"/").concat(t.totalRow,", "),percent:"".concat(t.totalRow?(t.currentRow/t.totalRow*100).toFixed(2):0,"%")}},e.prototype.getStepProgressProps=function(t){return{caption:"步数进度: ".concat(t.currentStep,"/").concat(t.totalStep,", "),percent:"".concat(t.totalStep?(t.currentStep/t.totalStep*100).toFixed(2):0,"%")}},e.prototype.openCardTicket=function(t){window.open("".concat(window.getConfigOrDefault(this.config,this.defaultConfig,"urls.ticket","",!1),"/").concat(t.ticket),"#".concat(t.ticket))},le([Template],e.prototype,"template",void 0),le([Method],e.prototype,"getLineProgressProps",null),le([Method],e.prototype,"getStepProgressProps",null),le([Method],e.prototype,"openCardTicket",null),le([Compute(window.readConfig)],e.prototype,"config",void 0),le([Compute(window.defaultConfig)],e.prototype,"defaultConfig",void 0),le([Compute((function(t){return t.iProps.groupData||{}}))],e.prototype,"groupData",void 0),le([Compute((function(t){return t.iProps.statusNames||[]}))],e.prototype,"statusNames",void 0),le([Compute((function(t){return t.iProps.cardCnt||"5"}))],e.prototype,"cardCnt",void 0),e=le([Service(e,"AppCard",!0)],e)}(u);const pe=$registry.buildComponent("AppCard");var he=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),fe=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="mode-container table">\n        <i-table v-for="statusName in statusNames" class="every-tab" :i-props="tableProps(statusName)"></i-table>\n    </div>',e}he(e,t),e.prototype.tableProps=function(t){var e=this;return{list:this.groupData[t],columns:this.getColumnsToDisplay(t),flexColumns:["caseName"],getColumnKey:function(t){return t.en},getColumnLabel:function(t){return t.zh},getCell:function(t,e){return e instanceof y?$get(t,e.en):$get(t,e)},loaded:function(t){window.query("#".concat(t.vid," .dinglj-v-tbody .dinglj-v-cell.ticket")).forEach((function(t){var n=t.innerText.trim();n&&(t.innerHTML="<div onclick=\"window.open('".concat(window.getConfigOrDefault(e.config,e.defaultConfig,"urls.ticket","",!1),"/").concat(n,"', '#").concat(n,"')\">#").concat(n,"</div>"))}))}}},e.prototype.getColumnsToDisplay=function(t){if(!this.groupData||!this.groupData[t]||!this.groupData[t].length)return[];var e=window.getConfigOrDefault(this.config,this.defaultConfig,"table.ignoreColumn",[],!1),n=this.groupData[t];return te._fields_.filter((function(t){if(e.includesIgnoreCase(t))return!1;for(var o=0,i=n;o<i.length;o++){var r=i[o];if(r&&r[t])return!0}return!1})).map((function(t){return new y(t,te._fieldMap_[t])}))},fe([Template],e.prototype,"template",void 0),fe([Method],e.prototype,"tableProps",null),fe([Method],e.prototype,"getColumnsToDisplay",null),fe([Compute(window.readConfig)],e.prototype,"config",void 0),fe([Compute(window.defaultConfig)],e.prototype,"defaultConfig",void 0),fe([Compute((function(t){return t.iProps.groupData||{}}))],e.prototype,"groupData",void 0),fe([Compute((function(t){return t.iProps.statusNames||[]}))],e.prototype,"statusNames",void 0),e=fe([Service(e,"AppTable",!0)],e)}(u);const de=$registry.buildComponent("AppTable");n(168);var ge=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ve=function(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};window.linkCss("/src/script/case-list/index.css"),window.document.body.innerHTML='<div id="case-list-dinglj-container">\n    <i-nav-view :i-props="navProps">\n        <template v-slot:before>\n            <xfilter @on-change="obj => filter.data = obj.value"></xfilter>\n        </template>\n        <template v-slot:content id="case-list-view">\n            <i-tab-view v-for="componentName in componentNames" :i-props="tabViewProps(componentName)">\n                <xcard  v-if="filter.data.mode == \'card\'" :i-props="cardModeProps(componentName)"></xcard>\n                <xtable v-else :i-props="tableModeProps(componentName)"></xtable>\n            </i-tab-view>\n        </template>\n        <template v-slot:after></template>\n    </i-nav-view>\n</div>',function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allVersionDatas={},e.filter={data:{mode:"card",cardCnt:"7",versions:"",keyword:"",status:""}},e}ge(e,t),e.prototype.mounted=function(){var t=this;window.displayData=function(){console.log(t)}},e.prototype.groupByStatus=function(t){return window.groupBy(this.groupByComponent[t],(function(t){return t.status.en}))},e.prototype.statusNames=function(t){var e=this.groupByStatus(t),n=window.getConfigOrDefault(this.config,this.defaultConfig,"order.preferStatus",[],!1).map((function(t){return t.toLowerCase()}));return Object.keys(e).sort((function(t,e){return window.compareStringByArray(n,t.toLowerCase(),e.toLowerCase())}))},e.prototype.tabTitle=function(t){var e=this;return this.statusNames(t).map((function(t){return new y(t,e.status[t].zh)}))},e.prototype.tabViewProps=function(t){return{list:this.tabTitle(t),getLabel:function(t){return t.zh}}},e.prototype.cardModeProps=function(t){return{statusNames:this.statusNames(t),groupData:this.groupByStatus(t),cardCnt:this.filter.data.cardCnt}},e.prototype.tableModeProps=function(t){return{statusNames:this.statusNames(t),groupData:this.groupByStatus(t)}},ve([Component({xfilter:ue,xcard:pe,xtable:de}),Mounted],e.prototype,"mounted",null),ve([Field],e.prototype,"allVersionDatas",void 0),ve([Field],e.prototype,"filter",void 0),ve([Method],e.prototype,"groupByStatus",null),ve([Method],e.prototype,"statusNames",null),ve([Method],e.prototype,"tabTitle",null),ve([Compute((function(t){return{list:t.componentNames}}))],e.prototype,"navProps",void 0),ve([Method],e.prototype,"tabViewProps",null),ve([Method],e.prototype,"cardModeProps",null),ve([Method],e.prototype,"tableModeProps",null),ve([Compute(window.readConfig)],e.prototype,"config",void 0),ve([Compute(window.defaultConfig)],e.prototype,"defaultConfig",void 0),ve([Compute((function(t){return window.getConfigOrDefault(t.config,t.defaultConfig,"constant.status",[],!0)}))],e.prototype,"status",void 0),ve([Compute((function(t){var e,n=t.filter.data.versions||"default";if(window.isDev())return window.readData(n);if(t.allVersionDatas[n])return t.allVersionDatas[n];if("default"==n){var o=window.get(window.getConfigOrDefault(t.config,t.defaultConfig,"urls.defaultVersionData","",!1));e=JSON.parse(o).testCaseTasks}else o=window.get(window.getConfigOrDefault(t.config,t.defaultConfig,"urls.readVersion","",!1)+n),e=JSON.parse(o);return t.allVersionDatas[n]=e.map((function(e){return new te(e,t.status)})),t.allVersionDatas[n]}))],e.prototype,"originData",void 0),ve([Compute((function(t){var e=t.originData;return t.filter.data.keyword&&(e=e.filter((function(e){return e.caseName.includesIgnoreCase(t.filter.data.keyword)}))),t.filter.data.status&&(e=e.filter((function(e){return JSON.stringify(e.status)==JSON.stringify(t.filter.data.status)}))),0==e.length&&"未找到任何有效数据".err(),e}))],e.prototype,"filteredData",void 0),ve([Compute((function(t){var e=window.groupBy(t.filteredData,"component"),n=t.filteredData.filter((function(t){return 0==t.level}));return n.length>0&&(e.UNIT=n),e}))],e.prototype,"groupByComponent",void 0),ve([Compute((function(t){var e=window.getConfigOrDefault(t.config,t.defaultConfig,"order.preferComponent",[],!1).map((function(t){return t.toLowerCase()}));return e.unshift("unit"),Object.keys(t.groupByComponent).sort((function(t,n){return window.compareStringByArray(e,t.toLowerCase(),n.toLowerCase())}))}))],e.prototype,"componentNames",void 0),e=ve([Service(e,"App")],e)}(u),window.createVue($registry.buildComponent("App"),"#case-list-dinglj-container")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,