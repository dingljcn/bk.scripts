/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={176:()=>{function t(t){return"string"==typeof t?t.toLowerCase():JSON.stringify(t).toLowerCase()}Array.prototype.includesIgnoreCase=function(t){return-1!=this.indexOfIgnoreCase(t)},Array.prototype.indexOfIgnoreCase=function(e){const i=t(e);return this.map((e=>t(e))).indexOf(i)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){let e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExistByKey=function(t,e){let i=[];for(let n of this)$get(n,t)==e&&i.push(n);return i},Array.prototype.compareBy=function(t,e){if(this.length>0){let i=-1==this.indexOfIgnoreCase(t)?9999:this.indexOfIgnoreCase(t),n=-1==this.indexOfIgnoreCase(e)?9999:this.indexOfIgnoreCase(e);return i==n?t<e?-1:t>e?1:0:i-n}return t<e?-1:t>e?1:0}},228:()=>{Window.prototype.getConfigOrDefault=function(t,e,i=!0){let n=window.getVal($userConfig,t,"NOT_FOUND"),o=window.getVal($systemConfig,t,"NOT_FOUND"),r="NOT_FOUND";if("NOT_FOUND"!=n)if(Array.isArray(n))r=[...n];else{if("object"!=typeof n)return n;r={};for(let t of Object.keys(n))r[t]=n[t]}if("NOT_FOUND"!=o){if("NOT_FOUND"==r)return o;if(Array.isArray(n)&&Array.isArray(o)&&i)r.push(...o);else if("object"==typeof o&&i)for(let t of Object.keys(o))null==r[t]&&(r[t]=o[t])}return"NOT_FOUND"==r&&(r=e,console.error(`${t}: 配置不存在, 请检查脚本`)),r}},816:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t="yyyy-MM-dd HH:mm:ss"){return t.replace(/yyyy/,`${this.getFullYear()}`).replace(/yy/,""+this.getFullYear()%100).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:`0${this.getMonth()+1}`).replace(/dd/,this.getDate()>9?this.getDate():`0${this.getDate()}`).replace(/HH/,this.getHours()>9?this.getHours():`0${this.getHours()}`).replace(/mm/,this.getMinutes()>9?this.getMinutes():`0${this.getMinutes()}`).replace(/ss/,this.getSeconds()>9?this.getSeconds():`0${this.getSeconds()}`)}},599:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e=window.document){const i=[],n=e.getElementsByClassName(t);return n&&i.push(...n),i},Window.prototype.selector=function(t){let e=[];const i=document.querySelectorAll(t);return i&&e.push(...i),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){const e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"700","14px","Microsoft YaHei")})),window.defunc(window,"calcTxtWidth",(function(t,e,i,n){const o=document.createElement("canvas").getContext("2d");o.font=`${e} ${i} ${n}`;const{width:r}=o.measureText(t);return Math.floor(r)})),Element.prototype.animate=function(t,e){const i=getComputedStyle(this).transition,n=Object.keys(t);for(let e of n)this.style[e]=t[e][0];setTimeout((()=>{const o=e/1e3+"s";this.style.transition=o;for(let e of n)this.style[e]=t[e][1];setTimeout((()=>{this.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],i=this.children;for(let n=0;n<i.length;n++)i[n].classList.contains(t)&&e.push(i[n]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Element.prototype.indexByClass=function(t){return this.parentElement.indexByClassInChildren(t)},Element.prototype.indexByClassInChildren=function(t){let e=this.children;for(let i=0;i<e.length;i++)if(e[i].classList.contains(t))return i;return-1}},904:()=>{Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,i){t[e]=i},Window.prototype.pushToArray=function(t,e,i,n=!1){if(Array.isArray(t[e])){let o=t[e];n&&o.includes(i)||o.push(i)}else t[e]=[i]},Window.prototype.unshiftToArray=function(t,e,i){Array.isArray(t[e])?t[e].unshift(i):t[e]=[i]},Window.prototype.getVal=function(t,e,i,n=!1){if(null==t||null==t)return i;let o=t;for(let t of e.split("."))if(o=o[t],!o)return n&&console.error(`未能取到 ${e} 的值`),i;return o}},374:()=>{Window.prototype.uuid=function(t="",e=10){return`${t}-${(""+1e7*Math.random()).replace(".","").substring(0,e)}`},Window.prototype.groupBy=function(t,e){let i={};return t.forEach((t=>{let n="";"string"==typeof e?n=t[e]:"function"==typeof e&&(n=e(t)),i[n]?i[n].push(t):i[n]=[t]})),i},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){let e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);let i=document.createRange();i.selectNodeContents(e);const n=window.getSelection();n.addRange(i),document.execCommand("Copy",!1,null),n.removeAllRanges(),`已复制: ${t}`.info(),e.remove()};let t=null;Window.prototype.isMatch=function(){if(null!=t)return t;if(window.isDev())return t=!0;let e=window.location.href;const i=window.getConfigOrDefault("enableWebs",[]);if(0==i.length)return t=!0;let n=!1;for(let t of i)if(e.startsWith(t)){n=!0,e=e.replace(t,"");break}if(!n)return"脚本尚未适配当前网址, 请联系 dinglj 修改配置".warn(),t=!1;const o=window.getConfigOrDefault("matchList",[]);for(let i of o)if(window.createRegExp(i).test(e))return t=!0;for(let e of o)if(window.createRegExp(e).test(window.location.href))return t=!0;return console.error("脚本尚未适配当前网址, 请联系 dinglj 修改默认配置, 或自行在油猴脚本中增加 matchList 配置"),t=!1},Window.prototype.StringPool={},Window.prototype.toCache=function(t,e){e=e||window.uuid();const i={};return Window.prototype.StringPool[e]=i,e=>i[e]||(i[e]=t(e))}},506:()=>{function t(t){var e=new ArrayBuffer(t.length),i=new Uint8Array(e);for(let e=0;e!=t.length;e++)i[e]=255&t.charCodeAt(e);return e}function e(t){t=t.toLowerCase();let e=0;for(let i=0;i<t.length;i++)e+=(t.charCodeAt(i)-96)*Math.pow(26,t.length-i-1);return e}function i(t){t-=1;let e=26;const i=t=>String.fromCharCode("A".charCodeAt(0)+t);let n=1;for(;t>=e;)t-=e,e*=26,n++;let o=i(t%26);for(;t>=26;)o=i((t=Math.floor(t/26))%26)+o;return o="A".repeat(n-o.length)+o,o}window.$excel={},window.$excel.export=function(e,i){window.isEnableExcel||window.enableExcel();let n=function(e,i){let n={SheetNames:[i=i||"sheet1"],Sheets:{}};$set(n.Sheets,i,e);let o=window.XLSX.write(n,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(o)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(i));!function(t,e){let i=t;"object"==typeof i&&i instanceof Blob&&(i=URL.createObjectURL(i));var n=document.createElement("a");n.href=i,n.download=e||"",n.click()}(n,e)},window.$excel.readFile=function(t,e){return window.isEnableExcel||window.enableExcel(),window.XLSX.readFile(t,e)},window.$excel.read=function(t,e){window.isEnableExcel||window.enableExcel();const i=new FileReader;return i.onload=function(t){var i=t.target.result,n=window.XLSX.read(i,{type:"binary"});for(let t=0;t<n.SheetNames.length;t++){const e=n.SheetNames[t];n.Sheets[e]["!ref"]||n.SheetNames.splice(t,1)}e&&e(n)},i.readAsBinaryString(t),null},window.$excel.resolveSheets=function(t){for(let e of t.SheetNames)window.$excel.resolveSheet(t,e);return null},window.$excel.resolveSheet=function(t,n){const o=t.Sheets[n]["!ref"];if(!o)return[[]];const r=[],[s,l]=o.split(":"),a=/(\d+)/.exec(s)[1],u=s.replace(a,""),c=/(\d+)/.exec(l)[1],h=l.replace(c,""),p=parseInt(a),d=parseInt(c),f=e(u),g=e(h);for(let e=p;e<=d;e++){let o=[];for(let r=f;r<=g;r++){const s=i(r)+e;o.push(t.Sheets[n][s])}o.length>0&&r.push(o)}return window.pushToArray(t,"array",{sheetName:n,value:r}),r}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`);const o=$queue.eventPool[n];if(Array.isArray(o)){if(1==o.length)return o[0](e);let t=[];for(let i of o)t.push(i(e))}else pushToArray($queue.eventQueue,n,e)},$queue.on=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`),pushToArray($queue.eventPool,n,e);const o=$queue.eventQueue[n];if(Array.isArray(n))for(let t of o)e(t)}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((()=>{t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,i,n=2e3,o="10%"){let r=window.byId("dinglj-v-pop-msg-container");r||(r=document.createElement("div"),r.id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;const s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort(((t,e)=>t.time-e.time));for(let e=0;e<s.length-4;e++)t(s[e],void 0)}const l=document.createElement("div");l.classList.add("dinglj-v-pop-msg",i),l.time=Date.now();const a=document.createElement("div");a.classList.add("dinglj-v-pop-msg-icon",i),a.innerText=i.substring(0,1).toUpperCase(),l.appendChild(a),l.innerHTML+=e,r.appendChild(l),l.animate({height:["0px",getComputedStyle(l).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),l.classList.add("active"),setTimeout((()=>{t(l,r)}),n)}window.$tip={},$tip.info=function(t,i=2e3,n="10%"){e(t,"info",i,n)},$tip.warn=function(t,i=2e3,n="10%"){e(t,"warn",i,n)},$tip.err=function(t,i=2e3,n="10%"){e(t,"err",i,n)}},818:()=>{window.dinglj_home||(window.dinglj_home="$DINGLJ-ENCODE-START$UyP7gDkWD0N+RPB4i+IO+pTEm5K3NKxBh5xpkzpj/SQURqaBwIv5Cou1GmRjZWP2JJ/aBHfilLle13q1F6D9FhKQkkzaMfmHM1SAGfeeQTZAhRhRxYNc6U1e+9dQUQckTza9492EdU94858Xel9HHJxXZc9GHyhZI4GndMSCOss=$DINGLJ-ENCODE-END$"),window.encodeConfig=function(){return{panels:["$DINGLJ-ENCODE-START$EgSg+QmDGO0ZRSwCdP16lv7etr+UPfABbo/pU4KEzETGvSatMPe2y3Tk5AxaoQVpO4cZN/L0MbEPCq4jUir+yMgBpPI6ljvf/y/mj2Tui3k49UHtB9aIbn4aQhCXBEW7BPnsdOAyax3fB3m47AV/N6IpfCjtjxNd7myMv04U2uM=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$DkKU3h/Ex2SPWxGK5OyTNRo6VI7kysFfICyiJb8x66SlyHigUrJjnK2/8vattzPtM+tVRY+qHzxphUZQWqBHum693RRSuxt3vRgYT1cRHFbBIg+XFQT6+OCXSOj/I2wWnEuqpevLVUU+SHjBvQO7hOfiaVJLZw9qmCcr7BweHyw=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$ENqM66jqPz7LIpUpMWtsBYKgcOdWHryGa4ajh9gTaILJsan9PWtLVUuJNWDU+bVZrs0oTS8V1VZDC1gD83r8IhBHJWssnt8EmuGyRna79pKu3uH9+UUrcfRvNC09t7nz6V5bv666qFyQB6dgRHuJFc8g8GLdpvYcryiRXhkm0GI=$DINGLJ-ENCODE-END$"],urlTypes:{k8s:0},hotKey:{back:"$DINGLJ-ENCODE-START$BW/zIRrC9ng/zhGnpzbqHGJRUdBBGAU1sPJsFQ7cSl7VxouiZcW9gTGmQyP+vZjxeMfvtEsnbNmcwaMLYQKB1A+wgl7KcDYyMG70m4fWwoPcM6DLfWweUQWC2YUDUVB0uN38TKoHxQTfVjppSCsu8PJtiHdMd7pLNO9+1+NfWXY=$DINGLJ-ENCODE-END$",addStar:"$DINGLJ-ENCODE-START$a2plEdqxSbp3hRmNDaCqS1LN3N07lNhAC6toqdSCeYzSr0f50cTFHUpC2q+BT7meDqJf54vIjJiqn+irk37OBS1k7YcnPYqCL6kwfiqj+h/07FbiLFyTCF4eekLKK56YvI5YAo9Duwm+L3Q0ten4bQHJwOMsdocgjywLFkgqxhM=$DINGLJ-ENCODE-END$",cleanStar:"$DINGLJ-ENCODE-START$kUTMi/p4oIUyVA4z0b+6KjSWAf0t7oSAJExwse/YyUNDv2LauUPQRYx28K7rnVOCoYULcNmCpoWYRfy19fa8CVaaj1uTr/5kWDLH3DWNejYA9uKPdH5Em/HrFngVZf1w6X6guNQmUPp8e0UcnT0RJnPUsM6xvr0/EuMGrl82ZWc=$DINGLJ-ENCODE-END$",cleanHistory:"$DINGLJ-ENCODE-START$ZiExczfg2U+cXWuIA9cfBvEppq86zc0Hlc9rGFxCA3v88JjtY9zgwreiyQzzcjWxtaMPlo5eBCCV/wQLpsEhj/ZLQoMpFaAqw7T4ARyg1O+i1M7injAlK3xi+z42/u9a5va+OGOMZ+uajY7XPiZgXS0yguMgrmcm1+4j/oabM5Q=$DINGLJ-ENCODE-END$",downloadCase:"$DINGLJ-ENCODE-START$QyaqoXvPxKOb/FiAb5GJW8sie53Z0OOVbMRgr9bxgDhVohsHh2p/RCDoV3uSPHuWpLhhyvHtU4fTUbSqYzK761yJzde6P8QL8iT7HAq7mquB4vlIFjUSMNn6DbgdRQq6MIxs6zaXX+XN6Wly3zfdp1V24teACamxwu4yPg9vDek=$DINGLJ-ENCODE-END$",defaultStep:"$DINGLJ-ENCODE-START$JouZ3HQDynVZaYNpHw8zr4jQkKISXqhGlG+XDZadXOLdfWSZJ3bhWUNMZi9owP4hgm4YqeL/YkUZOSChi4SdxpfrX1RMVX3G/Agl709NPGX3sEjf2gF0mV+p4GkAGurOY9/G14jQESbV8fmwymC0tlRQn1oGoVsvWapgZKnaqOg=$DINGLJ-ENCODE-END$",erpLog:"$DINGLJ-ENCODE-START$YdU34oqTpbV929GYUiPbjBLIN5i4SNHJcghF54FdvGCWT66EWUwZJmrX7vBxbRu5XKO+ZnbEZ1lgvI/KD6GWiEFs55rJfDgyN5doWjLkNejBRixAxqhv688DUPN4Uq1sc72bvvJD6pmfLn6RbVUxf4SE5R/K/MXb/v17T5/l4Ks=$DINGLJ-ENCODE-END$",logs:"$DINGLJ-ENCODE-START$O7z9RkObM7bMnJWBqn4i+DcIpRusYKFTg0iScprDeQWcyn1SjX1PO48bTSFkFteGpFLhROHPxTJRJaEiiEELv+cFVF9fIuoHO3q6+wQfnboqgbivTfAbOiD8O17F/43yDtIlafhajEaRGwma0m7mK5EJS4BpUpJlMTeKyAuyFSE=$DINGLJ-ENCODE-END$",line:"$DINGLJ-ENCODE-START$nvIyr5IImt50fxMX3KJWwrWcawNhQHJP7BZ0XIiEVFR/2W0knmuEEBkOkBBU1ISJM6/4wUtQkowQwFKmo8vzc6TMqEdwisu8aqxMAKCTyF71leGNPyJKdw2fKCbsupY/E3UtWP0YBEFqyNWvdTVjM39VdvZpH9pgI704d6EApOI=$DINGLJ-ENCODE-END$",step:"$DINGLJ-ENCODE-START$HFeTiWeogBTAf21EccpoEPjEYoA5NGShf7RBLVUuiWdHswIGud7Ed2JJ85Ci44PCUGh8d/QSvJgAf7o90u4KsZ2JSyi5GLBaKQPCdi+IDyvBQbU6qG7u47M9HOja9ArALJymamYS4gOhgZqSzfdFA9h6Teju5W23blM0jf2f9io=$DINGLJ-ENCODE-END$"},enableWebs:["$DINGLJ-ENCODE-START$ZnCdcKmJMJR9nfQFCK44HeqgJd/WdlcPpHol+YAds/HKfQit0xIr96CwwJgSvwmE+f8kVgYj7Ovz4CKAjoCub8UaaHH7xWr+6hGk3QQCV6r9lPsCa8jf89FUAtdDAHabtsZ86tU56/ADBubd2cckjhRHRwFDlIJumQWdIK6Z3Gk=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$bFIQnswLH8892RmJsIm+n8bsryyaHRN2pPEruLVpsunx40GgnI85r7KivDBd6Cwgv3q30YLfwshg8kzTCm/mppFEnjVycX/gIptoUWAnztQ6zgRrJVFGGb2E5DVmiCqI2G7sR9DnNfG9Iv4wCJ665edCjX2Whs0ba6PtBpiP6Nc=$DINGLJ-ENCODE-END$"],matchList:["$DINGLJ-ENCODE-START$M+Z3aaLbV1Lm+SSggAPtFOOdTPobX+ZOryjwar2ZxstI4yiybVu3y1MrJRTzE98W0WqKlrExzHJCwZg4vqgcGTVvf/4k9iZnHkBMJLYVyEG+r+FfUPFUSE8ZiwHeibzJesLWCRe3kRzeb0mEYgYmYnhPT6bakgQP3Fi4nIPnCBs=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$VLtyonBT2FTxYKEqfq+PmlqZ3b+H5KOJfNS/aL7yK4kOtJ0qyk2jg+lfEoVnH5LmNUjkfe2u/WK6nja8CSYHHvSHkmfC0M8DLX4BBb+0XuE4U/WHlaF5TfpKXuCr9kienZ592tPv2yhenUJMOXagTT0loaMEFYzkystPqCZKiX4=$DINGLJ-ENCODE-END$"]}},window.readConfig||(window.readConfig=function(){return{}})},601:()=>{window.$tool={},$tool.getActivePanel=function(){let t=window.byClass("arrow active");if(t)return t[0];{let t=window.byClass("step arrow")[0];return t.classList.add("active"),t}},$tool.getOneHeight=function(t){if(0==t.children.length)return 0;const e=t.children[0];return parseInt(getComputedStyle(e).margin)+e.offsetHeight},$tool.getScrollQty=function(t,e,i){return t<e?0:t+i-e},$tool.getLimit=function(t,e=-1){if(-1==e&&(e=$tool.getOneHeight(t)),null==t.parentNode)return 0;let i=t.parentNode.offsetHeight,n=Math.floor(i/e);return Math.floor(n/2)},$tool.getCurrentIndex=function(t){let e=-1;return-1==e&&(e=t.indexByClassInChildren("active")),-1==e&&(e=t.indexByClassInChildren("last")),-1==e&&(e=0),e},$tool.getScrollProp=function(t,e){const i=$tool.getCurrentIndex(t),n=$tool.getOneHeight(t),o=$tool.getLimit(t,n);return{current:i,height:n,limit:o,qty:$tool.getScrollQty(i,o,e),size:t.children.length,direction:e}},window.altDown=!1;const t=window.getConfigOrDefault("hotKey",{}),e=Object.values(t).map((t=>t.toUpperCase()));window.addEventListener("keyup",(t=>{"AltLeft"!=t.code&&"AltRight"!=t.code||(window.altDown=!1)})),window.addEventListener("keydown",(i=>{let n=i.code;if(n=n.replace(/^(Key)|(Digit)|(Numpad)/,""),"ArrowDown"==n||"ArrowUp"==n){i.preventDefault();const t=$tool.getActivePanel(),e="ArrowDown"==n?1:-1,o=$tool.getScrollProp(t,e);t.classList.contains("line")?$queue.sendMsg("update-line",o):t.classList.contains("step")?$queue.sendMsg("update-step",o):t.classList.contains("history")&&$queue.sendMsg("update-history",o)}else if("ArrowLeft"==n||"ArrowRight"==n){i.preventDefault();const t="ArrowRight"==n?1:-1;$queue.sendMsg("change-panel",t)}else if("AltLeft"==n||"AltRight"==n)window.altDown=!0;else if(e.includes(n)&&window.altDown)for(let e of Object.keys(t))if(t[e]==n)switch(e){case"back":window.open("..");break;case"addStar":$queue.sendMsg("add-star",null);break;case"cleanStar":$queue.sendMsg("clean-star",null);break;case"cleanHistory":$queue.sendMsg("clean-history",null);break;case"downloadCase":window.open("test.xls");break;case"defaultStep":window.open("默认步骤");break;case"erpLog":window.open("erpLog");break;case"logs":window.open("logs");break;case"line":$queue.sendMsg("focus-line",null);break;case"step":$queue.sendMsg("focus-step",null)}}))}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}(()=>{"use strict";i(818),i(374),i(904),i(816),i(176);const t={};String.prototype.encrypt=function(e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if($get(t,this))return $get(t,this);let i=`'${St.flag_start}`,n=this;for(;;){if(n.length<100){i+=$rsa.encrypt(n,e);break}{let t=n.substring(0,100);n=n.substring(100),i=`${i}${$rsa.encrypt(t,e)}${St.flag_split}`}}return $set(t,this,`${i}${St.flag_end}'`),$get(t,this)};const e=window.toCache(((t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)())=>{let i=t.startsWith(St.flag_start);if(i!=t.endsWith(St.flag_end))return t;if(i){let i=t.replace(St.flag_start,"").replace(St.flag_end,""),n="";for(let t of i.split(St.flag_split))n+=$rsa.decrypt(t,e);return n}return t}),"rsa-decode-map");String.prototype.decrypt=function(){return e(this)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t=2e3){$tip.info(this,t,"10%")},String.prototype.warn=function(t=2e3){$tip.warn(this,t,"10%")},String.prototype.err=function(t=2e3){$tip.err(this,t,"10%")},i(599),Window.prototype.mergePath=function(t,e=window.dinglj_home.decrypt()){return e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),`${e}${t}`},Window.prototype.timer=function(t,e){let i=30,n=null;e&&("number"==typeof e?i=e:n=e),i=i<30?30:i;let o=setInterval((()=>{t(n)&&clearInterval(o)}),i)},Window.prototype.linkCss=function(t,e=window.dinglj_home.decrypt()){const i=document.createElement("style"),n=mergePath(t,e);i.innerHTML=$net.get(n),document.head.appendChild(i)};var n="0123456789abcdefghijklmnopqrstuvwxyz";function o(t){return n.charAt(t)}function r(t,e){return t&e}function s(t,e){return t|e}function l(t,e){return t^e}function a(t,e){return t&~e}function u(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function c(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var h,p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function d(t){var e,i,n="";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),n+=p.charAt(i>>6)+p.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),n+=p.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),n+=p.charAt(i>>2)+p.charAt((3&i)<<4));(3&n.length)>0;)n+="=";return n}function f(t){var e,i="",n=0,r=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var s=p.indexOf(t.charAt(e));s<0||(0==n?(i+=o(s>>2),r=3&s,n=1):1==n?(i+=o(r<<2|s>>4),r=15&s,n=2):2==n?(i+=o(r),i+=o(s>>2),r=3&s,n=3):(i+=o(r<<2|s>>4),i+=o(15&s),n=0))}return 1==n&&(i+=o(r<<2)),i}var g,v={decode:function(t){var e;if(void 0===g){for(g=Object.create(null),e=0;e<64;++e)g["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(g["-"]=62,g._=63,e=0;e<9;++e)g["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],n=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=g[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);n|=r,++o>=4?(i[i.length]=n>>16,i[i.length]=n>>8&255,i[i.length]=255&n,n=0,o=0):n<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:i[i.length]=n>>10;break;case 3:i[i.length]=n>>16,i[i.length]=n>>8&255}return i},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=v.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return v.decode(t)}},y=1e13,m=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,n,o=this.buf,r=o.length;for(i=0;i<r;++i)(n=o[i]*t+e)<y?e=0:n-=(e=0|n/y)*y,o[i]=n;e>0&&(o[i]=e)},t.prototype.sub=function(t){var e,i,n=this.buf,o=n.length;for(e=0;e<o;++e)(i=n[e]-t)<0?(i+=y,t=1):t=0,n[e]=i;for(;0===n[n.length-1];)n.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,i=e[e.length-1].toString(),n=e.length-2;n>=0;--n)i+=(y+e[n]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*y+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),w=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,b=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function x(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var S,T=function(){function t(e,i){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var n="",o=t;o<e;++o)if(n+=this.hexByte(this.get(o)),!0!==i)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var n=this.get(i);if(n<32||n>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i="",n=t;n<e;++n)i+=String.fromCharCode(this.get(n));return i},t.prototype.parseStringUTF=function(t,e){for(var i="",n=t;n<e;){var o=this.get(n++);i+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,n,o="",r=t;r<e;)i=this.get(r++),n=this.get(r++),o+=String.fromCharCode(i<<8|n);return o},t.prototype.parseTime=function(t,e,i){var n=this.parseStringISO(t,e),o=(i?w:b).exec(n);return o?(i&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n},t.prototype.parseInteger=function(t,e){for(var i,n=this.get(t),o=n>127,r=o?255:0,s="";n==r&&++t<e;)n=this.get(t);if(0==(i=e-t))return o?-1:0;if(i>4){for(s=n,i<<=3;0==(128&(+s^r));)s=+s<<1,--i;s="("+i+" bit)\n"}o&&(n-=256);for(var l=new m(n),a=t+1;a<e;++a)l.mulAdd(256,this.get(a));return s+l.toString()},t.prototype.parseBitString=function(t,e,i){for(var n=this.get(t),o="("+((e-t-1<<3)-n)+" bit)\n",r="",s=t+1;s<e;++s){for(var l=this.get(s),a=s==e-1?n:0,u=7;u>=a;--u)r+=l>>u&1?"1":"0";if(r.length>i)return o+x(r,i)}return o+r},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return x(this.parseStringISO(t,e),i);var n=e-t,o="("+n+" byte)\n";n>(i/=2)&&(e=t+i);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return n>i&&(o+="…"),o},t.prototype.parseOID=function(t,e,i){for(var n="",o=new m,r=0,s=t;s<e;++s){var l=this.get(s);if(o.mulAdd(128,127&l),r+=7,!(128&l)){if(""===n)if((o=o.simplify())instanceof m)o.sub(80),n="2."+o.toString();else{var a=o<80?o<40?0:1:2;n=a+"."+(o-40*a)}else n+="."+o.toString();if(n.length>i)return x(n,i);o=new m,r=0}}return r>0&&(n+=".incomplete"),n},t}(),C=function(){function t(t,e,i,n,o){if(!(n instanceof E))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=i,this.tag=n,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return x(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return x(this.stream.parseStringISO(e,e+i),t);case 30:return x(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var i=0,n=this.sub.length;i<n;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===i)return null;e=0;for(var n=0;n<i;++n)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof T?e:new T(e,0);var n=new T(i),o=new E(i),r=t.decodeLength(i),s=i.pos,l=s-n.pos,a=null,u=function(){var e=[];if(null!==r){for(var n=s+r;i.pos<n;)e[e.length]=t.decode(i);if(i.pos!=n)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(i);if(o.tag.isEOC())break;e[e.length]=o}r=s-i.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)a=u();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=i.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");a=u();for(var c=0;c<a.length;++c)if(a[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){a=null}if(null===a){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);i.pos=s+Math.abs(r)}return new t(n,l,r,o,a)},t}(),E=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new m;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),D=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],P=(1<<26)/D[D.length-1],$=function(){function t(t,e,i){null!=t&&("number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,r=!1,s="",l=this.t,a=this.DB-l*this.DB%e;if(l-- >0)for(a<this.DB&&(i=this[l]>>a)>0&&(r=!0,s=o(i));l>=0;)a<e?(i=(this[l]&(1<<a)-1)<<e-a,i|=this[--l]>>(a+=this.DB-e)):(i=this[l]>>(a-=e)&n,a<=0&&(a+=this.DB,--l)),i>0&&(r=!0),r&&(s+=o(i));return r?s:"0"},t.prototype.negate=function(){var e=M();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+H(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=M();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new O(e):new R(e),this.exp(t,i)},t.prototype.clone=function(){var t=M();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,n=this.DB-t*this.DB%8,o=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[o++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==o&&(128&this.s)!=(128&i)&&++o,(o>0||i!=this.s)&&(e[o++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=M();return this.bitwiseTo(t,r,e),e},t.prototype.or=function(t){var e=M();return this.bitwiseTo(t,s,e),e},t.prototype.xor=function(t){var e=M();return this.bitwiseTo(t,l,e),e},t.prototype.andNot=function(t){var e=M();return this.bitwiseTo(t,a,e),e},t.prototype.not=function(){for(var t=M(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=M();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=M();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+u(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=c(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,s)},t.prototype.clearBit=function(t){return this.changeBit(t,a)},t.prototype.flipBit=function(t){return this.changeBit(t,l)},t.prototype.add=function(t){var e=M();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=M();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=M();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=M();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=M();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=M(),i=M();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,n,o=t.bitLength(),r=k(1);if(o<=0)return r;i=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new O(e):e.isEven()?new N(e):new R(e);var s=[],l=3,a=i-1,u=(1<<i)-1;if(s[1]=n.convert(this),i>1){var c=M();for(n.sqrTo(s[1],c);l<=u;)s[l]=M(),n.mulTo(c,s[l-2],s[l]),l+=2}var h,p,d=t.t-1,f=!0,g=M();for(o=H(t[d])-1;d>=0;){for(o>=a?h=t[d]>>o-a&u:(h=(t[d]&(1<<o+1)-1)<<a-o,d>0&&(h|=t[d-1]>>this.DB+o-a)),l=i;0==(1&h);)h>>=1,--l;if((o-=l)<0&&(o+=this.DB,--d),f)s[h].copyTo(r),f=!1;else{for(;l>1;)n.sqrTo(r,g),n.sqrTo(g,r),l-=2;l>0?n.sqrTo(r,g):(p=r,r=g,g=p),n.mulTo(g,s[h],r)}for(;d>=0&&0==(t[d]&1<<o);)n.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--d)}return n.revert(r)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var n=e.clone(),o=this.clone(),r=k(1),s=k(0),l=k(0),a=k(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),i?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),i?(l.isEven()&&a.isEven()||(l.addTo(this,l),a.subTo(e,a)),l.rShiftTo(1,l)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);n.compareTo(o)>=0?(n.subTo(o,n),i&&r.subTo(l,r),s.subTo(a,s)):(o.subTo(n,o),i&&l.subTo(r,l),a.subTo(s,a))}return 0!=o.compareTo(t.ONE)?t.ZERO:a.compareTo(e)>=0?a.subtract(e):a.signum()<0?(a.addTo(e,a),a.signum()<0?a.add(e):a):a},t.prototype.pow=function(t){return this.exp(t,new I)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var o=e.getLowestSetBit(),r=i.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),i.rShiftTo(r,i));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=i.getLowestSetBit())>0&&i.rShiftTo(o,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return r>0&&i.lShiftTo(r,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=D[D.length-1]){for(e=0;e<D.length;++e)if(i[0]==D[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<D.length;){for(var n=D[e],o=e+1;o<D.length&&n<P;)n*=D[o++];for(n=i.modInt(n);e<o;)if(n%D[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var n;if(16==i)n=4;else if(8==i)n=3;else if(256==i)n=8;else if(2==i)n=1;else if(32==i)n=5;else{if(4!=i)return void this.fromRadix(e,i);n=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var l=8==n?255&+e[o]:q(e,o);l<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=l:s+n>this.DB?(this[this.t-1]|=(l&(1<<this.DB-s)-1)<<s,this[this.t++]=l>>this.DB-s):this[this.t-1]|=l<<s,(s+=n)>=this.DB&&(s-=this.DB))}8==n&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,n=this.DB-i,o=(1<<n)-1,r=Math.floor(t/this.DB),s=this.s<<i&this.DM,l=this.t-1;l>=0;--l)e[l+r+1]=this[l]>>n|s,s=(this[l]&o)<<i;for(l=r-1;l>=0;--l)e[l]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,o=this.DB-n,r=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&r)<<o,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&r)<<o),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var n=this.abs(),o=e.abs(),r=n.t;for(i.t=r+o.t;--r>=0;)i[r]=0;for(r=0;r<o.t;++r)i[r+n.t]=n.am(0,o[r],i,r,0,n.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,n){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=i&&i.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=M());var s=M(),l=this.s,a=e.s,u=this.DB-H(o[o.t-1]);u>0?(o.lShiftTo(u,s),r.lShiftTo(u,n)):(o.copyTo(s),r.copyTo(n));var c=s.t,h=s[c-1];if(0!=h){var p=h*(1<<this.F1)+(c>1?s[c-2]>>this.F2:0),d=this.FV/p,f=(1<<this.F1)/p,g=1<<this.F2,v=n.t,y=v-c,m=null==i?M():i;for(s.dlShiftTo(y,m),n.compareTo(m)>=0&&(n[n.t++]=1,n.subTo(m,n)),t.ONE.dlShiftTo(c,m),m.subTo(s,s);s.t<c;)s[s.t++]=0;for(;--y>=0;){var w=n[--v]==h?this.DM:Math.floor(n[v]*d+(n[v-1]+g)*f);if((n[v]+=s.am(0,w,n,y,0,c))<w)for(s.dlShiftTo(y,m),n.subTo(m,n);n[v]<--w;)n.subTo(m,n)}null!=i&&(n.drShiftTo(c,i),l!=a&&t.ZERO.subTo(i,i)),n.t=c,n.clamp(),u>0&&n.rShiftTo(u,n),l<0&&t.ZERO.subTo(n,n)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var n=M(),o=M(),r=i.convert(this),s=H(e)-1;for(r.copyTo(n);--s>=0;)if(i.sqrTo(n,o),(e&1<<s)>0)i.mulTo(o,r,n);else{var l=n;n=o,o=l}return i.revert(n)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=k(i),o=M(),r=M(),s="";for(this.divRemTo(n,o,r);o.signum()>0;)s=(i+r.intValue()).toString(t).substr(1)+s,o.divRemTo(n,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var n=this.chunkSize(i),o=Math.pow(i,n),r=!1,s=0,l=0,a=0;a<e.length;++a){var u=q(e,a);u<0?"-"==e.charAt(a)&&0==this.signum()&&(r=!0):(l=i*l+u,++s>=n&&(this.dMultiply(o),this.dAddOffset(l,0),s=0,l=0))}s>0&&(this.dMultiply(Math.pow(i,s)),this.dAddOffset(l,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,n){if("number"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),i.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,i){var n,o,r=Math.min(t.t,this.t);for(n=0;n<r;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(o=t.s&this.DM,n=r;n<this.t;++n)i[n]=e(this[n],o);i.t=this.t}else{for(o=this.s&this.DM,n=r;n<t.t;++n)i[n]=e(o,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var n=t.ONE.shiftLeft(e);return this.bitwiseTo(n,i,n),n},t.prototype.addTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var n=Math.min(this.t+t.t,e);for(i.s=0,i.t=n;n>0;)i[--n]=0;for(var o=i.t-this.t;n<o;++n)i[n+this.t]=this.am(0,t[n],i,n,0,this.t);for(o=Math.min(t.t,e);n<o;++n)this.am(0,t[n],i,n,0,e-n);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),n=i.getLowestSetBit();if(n<=0)return!1;var o=i.shiftRight(n);(e=e+1>>1)>D.length&&(e=D.length);for(var r=M(),s=0;s<e;++s){r.fromInt(D[Math.floor(Math.random()*D.length)]);var l=r.modPow(o,this);if(0!=l.compareTo(t.ONE)&&0!=l.compareTo(i)){for(var a=1;a++<n&&0!=l.compareTo(i);)if(0==(l=l.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=l.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=M();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(i.compareTo(n)<0){var o=i;i=n,n=o}var r=i.getLowestSetBit(),s=n.getLowestSetBit();if(s<0)e(i);else{r<s&&(s=r),s>0&&(i.rShiftTo(s,i),n.rShiftTo(s,n));var l=function(){(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),i.compareTo(n)>=0?(i.subTo(n,i),i.rShiftTo(1,i)):(n.subTo(i,n),n.rShiftTo(1,n)),i.signum()>0?setTimeout(l,0):(s>0&&n.lShiftTo(s,n),setTimeout((function(){e(n)}),0))};setTimeout(l,10)}},t.prototype.fromNumberAsync=function(e,i,n,o){if("number"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);var r=this,l=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(i)?setTimeout((function(){o()}),0):setTimeout(l,0)};setTimeout(l,0)}else{var a=[],u=7&e;a.length=1+(e>>3),i.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),I=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),O=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),R=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=M();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo($.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=M();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),N=function(){function t(t){this.m=t,this.r2=M(),this.q3=M(),$.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=M();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function M(){return new $(null)}function j(t,e){return new $(t,e)}var A="undefined"!=typeof navigator;A&&"Microsoft Internet Explorer"==navigator.appName?($.prototype.am=function(t,e,i,n,o,r){for(var s=32767&e,l=e>>15;--r>=0;){var a=32767&this[t],u=this[t++]>>15,c=l*a+u*s;o=((a=s*a+((32767&c)<<15)+i[n]+(1073741823&o))>>>30)+(c>>>15)+l*u+(o>>>30),i[n++]=1073741823&a}return o},S=30):A&&"Netscape"!=navigator.appName?($.prototype.am=function(t,e,i,n,o,r){for(;--r>=0;){var s=e*this[t++]+i[n]+o;o=Math.floor(s/67108864),i[n++]=67108863&s}return o},S=26):($.prototype.am=function(t,e,i,n,o,r){for(var s=16383&e,l=e>>14;--r>=0;){var a=16383&this[t],u=this[t++]>>14,c=l*a+u*s;o=((a=s*a+((16383&c)<<14)+i[n]+o)>>28)+(c>>14)+l*u,i[n++]=268435455&a}return o},S=28),$.prototype.DB=S,$.prototype.DM=(1<<S)-1,$.prototype.DV=1<<S,$.prototype.FV=Math.pow(2,52),$.prototype.F1=52-S,$.prototype.F2=2*S-52;var L,V,B=[];for(L="0".charCodeAt(0),V=0;V<=9;++V)B[L++]=V;for(L="a".charCodeAt(0),V=10;V<36;++V)B[L++]=V;for(L="A".charCodeAt(0),V=10;V<36;++V)B[L++]=V;function q(t,e){var i=B[t.charCodeAt(e)];return null==i?-1:i}function k(t){var e=M();return e.fromInt(t),e}function H(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}$.ZERO=k(0),$.ONE=k(1);var F,K,U=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,n;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[i],this.S[i]=n;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),W=null;if(null==W){W=[],K=0;var z=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var G=new Uint32Array(256);for(window.crypto.getRandomValues(G),z=0;z<G.length;++z)W[K++]=255&G[z]}var J=0,X=function(t){if((J=J||0)>=256||K>=256)window.removeEventListener?window.removeEventListener("mousemove",X,!1):window.detachEvent&&window.detachEvent("onmousemove",X);else try{var e=t.x+t.y;W[K++]=255&e,J+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",X,!1):window.attachEvent&&window.attachEvent("onmousemove",X))}function Y(){if(null==F){for(F=new U;K<256;){var t=Math.floor(65536*Math.random());W[K++]=255&t}for(F.init(W),K=0;K<W.length;++K)W[K]=0;K=0}return F.next()}var _=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Y()},t}(),Z=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=j(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,i=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var i=[],n=t.length-1;n>=0&&e>0;){var o=t.charCodeAt(n--);o<128?i[--e]=o:o>127&&o<2048?(i[--e]=63&o|128,i[--e]=o>>6|192):(i[--e]=63&o|128,i[--e]=o>>6&63|128,i[--e]=o>>12|224)}i[--e]=0;for(var r=new _,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);i[--e]=s[0]}return i[--e]=2,i[--e]=0,new $(i)}(t,e);if(null==i)return null;var n=this.doPublic(i);if(null==n)return null;for(var o=n.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=j(t,16),this.e=parseInt(e,16),this.d=j(i,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,i,n,o,r,s,l){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=j(t,16),this.e=parseInt(e,16),this.d=j(i,16),this.p=j(n,16),this.q=j(o,16),this.dmp1=j(r,16),this.dmq1=j(s,16),this.coeff=j(l,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var i=new _,n=t>>1;this.e=parseInt(e,16);for(var o=new $(e,16);;){for(;this.p=new $(t-n,1,i),0!=this.p.subtract($.ONE).gcd(o).compareTo($.ONE)||!this.p.isProbablePrime(10););for(;this.q=new $(n,1,i),0!=this.q.subtract($.ONE).gcd(o).compareTo($.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract($.ONE),l=this.q.subtract($.ONE),a=s.multiply(l);if(0==a.gcd(o).compareTo($.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(a),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(l),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=j(t,16),i=this.doPrivate(e);return null==i?null:function(t,e){for(var i=t.toByteArray(),n=0;n<i.length&&0==i[n];)++n;if(i.length-n!=e-1||2!=i[n])return null;for(++n;0!=i[n];)if(++n>=i.length)return null;for(var o="";++n<i.length;){var r=255&i[n];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&i[n+1]),++n):(o+=String.fromCharCode((15&r)<<12|(63&i[n+1])<<6|63&i[n+2]),n+=2)}return o}(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var n=new _,o=t>>1;this.e=parseInt(e,16);var r=new $(e,16),s=this,l=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract($.ONE),n=s.q.subtract($.ONE),o=e.multiply(n);0==o.gcd(r).compareTo($.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(n),s.coeff=s.q.modInverse(s.p),setTimeout((function(){i()}),0)):setTimeout(l,0)},a=function(){s.q=M(),s.q.fromNumberAsync(o,1,n,(function(){s.q.subtract($.ONE).gcda(r,(function(t){0==t.compareTo($.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(a,0)}))}))},u=function(){s.p=M(),s.p.fromNumberAsync(t-o,1,n,(function(){s.p.subtract($.ONE).gcda(r,(function(t){0==t.compareTo($.ONE)&&s.p.isProbablePrime(10)?setTimeout(a,0):setTimeout(u,0)}))}))};setTimeout(u,0)};setTimeout(l,0)},t.prototype.sign=function(t,e,i){var n=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var i=e-t.length-6,n="",o=0;o<i;o+=2)n+="ff";return j("0001"+n+"00"+t,16)}((Q[i]||"")+e(t).toString(),this.n.bitLength()/4);if(null==n)return null;var o=this.doPrivate(n);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,i){var n=j(e,16),o=this.doPublic(n);return null==o?null:function(t){for(var e in Q)if(Q.hasOwnProperty(e)){var i=Q[e],n=i.length;if(t.substr(0,n)==i)return t.substr(n)}return t}(o.toString(16).replace(/^1f+00/,""))==i(t).toString()},t}(),Q={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},tt={};tt.lang={extend:function(t,e,i){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i){var o;for(o in i)t.prototype[o]=i[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var i=s[o],n=e[i];"function"==typeof n&&n!=Object.prototype[i]&&(t[i]=n)}})}catch(t){}r(t.prototype,i)}}};var et={};void 0!==et.asn1&&et.asn1||(et.asn1={}),et.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var n="",o=0;o<i;o++)n+="f";e=new $(n,16).xor(t).add($.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=et.asn1,i=e.DERBoolean,n=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,l=e.DERObjectIdentifier,a=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var x=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+x+":"))throw"undefined key: "+x;if("bool"==x)return new i(t[x]);if("int"==x)return new n(t[x]);if("bitstr"==x)return new o(t[x]);if("octstr"==x)return new r(t[x]);if("null"==x)return new s(t[x]);if("oid"==x)return new l(t[x]);if("enum"==x)return new a(t[x]);if("utf8str"==x)return new u(t[x]);if("numstr"==x)return new c(t[x]);if("prnstr"==x)return new h(t[x]);if("telstr"==x)return new p(t[x]);if("ia5str"==x)return new d(t[x]);if("utctime"==x)return new f(t[x]);if("gentime"==x)return new g(t[x]);if("seq"==x){for(var S=t[x],T=[],C=0;C<S.length;C++){var E=w(S[C]);T.push(E)}return new v({array:T})}if("set"==x){for(S=t[x],T=[],C=0;C<S.length;C++)E=w(S[C]),T.push(E);return new y({array:T})}if("tag"==x){var D=t[x];if("[object Array]"===Object.prototype.toString.call(D)&&3==D.length){var P=w(D[2]);return new m({tag:D[0],explicit:D[1],obj:P})}var $={};if(void 0!==D.explicit&&($.explicit=D.explicit),void 0!==D.tag&&($.tag=D.tag),void 0===D.obj)throw"obj shall be specified for 'tag'.";return $.obj=w(D.obj),new m($)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},et.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",i=parseInt(t.substr(0,2),16),n=(e=Math.floor(i/40)+"."+i%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);n+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new $(n,2).toString(10),n="")}return e},et.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new $(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var l=n.substr(s,7);s!=n.length-7&&(l="1"+l),i+=e(parseInt(l,2))}return i};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);return n},et.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var i=e.length/2;if(i>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},et.asn1.DERAbstractString=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},tt.lang.extend(et.asn1.DERAbstractString,et.asn1.ASN1Object),et.asn1.DERAbstractTime=function(t){et.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var n=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+n(String(o.getMonth()+1),2)+n(String(o.getDate()),2)+n(String(o.getHours()),2)+n(String(o.getMinutes()),2)+n(String(o.getSeconds()),2);if(!0===i){var l=o.getMilliseconds();if(0!=l){var a=n(String(l),3);s=s+"."+(a=a.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,n,o,r){var s=new Date(Date.UTC(t,e-1,i,n,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},tt.lang.extend(et.asn1.DERAbstractTime,et.asn1.ASN1Object),et.asn1.DERAbstractStructured=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},tt.lang.extend(et.asn1.DERAbstractStructured,et.asn1.ASN1Object),et.asn1.DERBoolean=function(){et.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},tt.lang.extend(et.asn1.DERBoolean,et.asn1.ASN1Object),et.asn1.DERInteger=function(t){et.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new $(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DERInteger,et.asn1.ASN1Object),et.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}et.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var i="0"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+="0";var n="";for(i=0;i<t.length-1;i+=8){var o=t.substr(i,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),n+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",i=0;i<t.length;i++)1==t[i]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},tt.lang.extend(et.asn1.DERBitString,et.asn1.ASN1Object),et.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}et.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},tt.lang.extend(et.asn1.DEROctetString,et.asn1.DERAbstractString),et.asn1.DERNull=function(){et.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},tt.lang.extend(et.asn1.DERNull,et.asn1.ASN1Object),et.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new $(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var l=n.substr(s,7);s!=n.length-7&&(l="1"+l),i+=e(parseInt(l,2))}return i};et.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=n},this.setValueName=function(t){var e=et.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},tt.lang.extend(et.asn1.DERObjectIdentifier,et.asn1.ASN1Object),et.asn1.DEREnumerated=function(t){et.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new $(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DEREnumerated,et.asn1.ASN1Object),et.asn1.DERUTF8String=function(t){et.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},tt.lang.extend(et.asn1.DERUTF8String,et.asn1.DERAbstractString),et.asn1.DERNumericString=function(t){et.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},tt.lang.extend(et.asn1.DERNumericString,et.asn1.DERAbstractString),et.asn1.DERPrintableString=function(t){et.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},tt.lang.extend(et.asn1.DERPrintableString,et.asn1.DERAbstractString),et.asn1.DERTeletexString=function(t){et.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},tt.lang.extend(et.asn1.DERTeletexString,et.asn1.DERAbstractString),et.asn1.DERIA5String=function(t){et.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},tt.lang.extend(et.asn1.DERIA5String,et.asn1.DERAbstractString),et.asn1.DERUTCTime=function(t){et.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},tt.lang.extend(et.asn1.DERUTCTime,et.asn1.DERAbstractTime),et.asn1.DERGeneralizedTime=function(t){et.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},tt.lang.extend(et.asn1.DERGeneralizedTime,et.asn1.DERAbstractTime),et.asn1.DERSequence=function(t){et.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},tt.lang.extend(et.asn1.DERSequence,et.asn1.DERAbstractStructured),et.asn1.DERSet=function(t){et.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},tt.lang.extend(et.asn1.DERSet,et.asn1.DERAbstractStructured),et.asn1.DERTaggedObject=function(t){et.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},tt.lang.extend(et.asn1.DERTaggedObject,et.asn1.ASN1Object);var it,nt,ot=(it=function(t,e){return it=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},it(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}it(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),rt=function(t){function e(i){var n=t.call(this)||this;return i&&("string"==typeof i?n.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&n.parsePropertiesFrom(i)),n}return ot(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,n=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===h){var i="0123456789ABCDEF";for(h={},e=0;e<16;++e)h[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)h[i.charAt(e)]=e;for(e=0;e<8;++e)h[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=h[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(n[n.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return n}(t):v.unarmor(t),o=C.decode(n);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=j(e,16),i=o.sub[2].getHexStringValue(),this.e=parseInt(i,16);var r=o.sub[3].getHexStringValue();this.d=j(r,16);var s=o.sub[4].getHexStringValue();this.p=j(s,16);var l=o.sub[5].getHexStringValue();this.q=j(l,16);var a=o.sub[6].getHexStringValue();this.dmp1=j(a,16);var u=o.sub[7].getHexStringValue();this.dmq1=j(u,16);var c=o.sub[8].getHexStringValue();this.coeff=j(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var p=o.sub[1].sub[0];e=p.sub[0].getHexStringValue(),this.n=j(e,16),i=p.sub[1].getHexStringValue(),this.e=parseInt(i,16)}else e=o.sub[0].getHexStringValue(),this.n=j(e,16),i=o.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new et.asn1.DERInteger({int:0}),new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e}),new et.asn1.DERInteger({bigint:this.d}),new et.asn1.DERInteger({bigint:this.p}),new et.asn1.DERInteger({bigint:this.q}),new et.asn1.DERInteger({bigint:this.dmp1}),new et.asn1.DERInteger({bigint:this.dmq1}),new et.asn1.DERInteger({bigint:this.coeff})]};return new et.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return d(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new et.asn1.DERSequence({array:[new et.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new et.asn1.DERNull]}),e=new et.asn1.DERSequence({array:[new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e})]}),i=new et.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new et.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return d(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(i,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(Z),st="undefined"!=typeof process?null===(nt=process.env)||void 0===nt?void 0:nt.npm_package_version:void 0;const lt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new rt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(f(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return d(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,i){try{return d(this.getKey().sign(t,e,i))}catch(t){return!1}},t.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,f(e),i)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new rt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=st,t}();function at(t,e){return"object"==typeof t?function(t,e){for(let i of Object.keys(t))t[i]=at(t[i],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const i=new lt;return i.setPrivateKey(e),i.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const i=new lt;return i.setPrivateKey(e),i.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return at(t,e)},i(506),i(676),i(894),window.$net={},window.$net.get=function(t,e={callback:null,async:!1}){const i=new XMLHttpRequest;return i.open("GET",t,!!e.async),i.send(),4==i.readyState&&200==i.status&&e.callback&&e.callback(i.responseText),i.responseText},window.$store={},window.$store.getStorage=function(t,e=void 0){let i=localStorage.getItem(t);if(i){const n=JSON.parse(i);return n.timeout>0&&Date.now()-n.savetime>n.timeout?(`本地缓存${t}已过期`.warn(),e):n.data}return e},window.$store.setStorage=function(t,e,i=-1){let n={savetime:Date.now(),timeout:i,data:e};localStorage.setItem(t,JSON.stringify(n))},i(228);class ut{getImg(t){return""}emit(t,e){}}window.BasicProperty=ut;const ct=ut;class ht extends ct{}window.AbstractComponent=ht;const pt=ht;var dt;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu",t.FileTreeX="I-File-Tree",t.TreeView="I-Tree-View",t.TextAreaX="I-Text-Area"}(dt||(dt={})),window.ComponentType=dt;const ft=dt;class gt extends ct{constructor(){super(...arguments),this.components={},this.fieldNames=[],this.methodNames=[],this.computes=[],this.watchs=[],this.propMap=new Map}getInstance(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null}getFields(){const t=this,e=this.getInstance();return function(){const i={$class:e,vid:"",name:t.name};for(let n of t.fieldNames)$set(i,n,$get(e,n));return i}}getMethods(){const t=this.getInstance(),e={getImg:function(t){return mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):()=>{}};for(let i of this.methodNames)e[i]=$get(t,i);return e}getComputeds(){let t={};for(let e of this.computes)t[e.fieldName]=e.func;return t}setProp(t,e){this.propMap.set(t,e)}getProps(){const t={};return this.propMap.forEach(((e,i)=>{$set(t,i,e)})),t}getMounted(){return function(){const t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(()=>t),t.vid),t.appMounted()}}getTemplate(){return $get(this.getInstance(),this.template)}getWatchs(){const t=this.getInstance();let e={};for(let i of this.watchs)e[i.target]={handler:$get(t,i.funcName),deep:i.deep};return e}getComponents(){return this.components}}window.MetaData=gt;const vt=gt;let yt=null;const mt=new Map;window.$registry={},$registry.getComponent=function(t){return t&&yt?(mt.set(t,yt),yt=null,mt.get(t)):yt||(yt=new vt,yt)},$registry.buildComponent=function(t){const e=mt.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){const e=mt.get(t),i=$registry.buildComponent(t);return window.registVue(e.name,i)};window.LangItem=class{constructor(t,e){this.en=t,this.zh=e}};class wt{constructor(t,e=function(t,e){},i=function(t,e){return!0}){this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=i}}window.RightMenu=wt;const bt=wt;var xt;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(xt||(xt={})),window.RsaConst=xt;const St=xt;window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,i){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,i=!1){return function(n,o){$registry.getComponent().propMap.set(o,{type:t,default:e,required:i})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,i){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,i){$registry.getComponent().computes.push({fieldName:i,func:t})}},window.Component=function(t){return function(e,i){$registry.getComponent().components=t}},window.Watch=function(t,e=!0){return function(i,n){$registry.getComponent().watchs.push({target:t,deep:e,funcName:n})}},window.Service=function(t,e,i){return function(n){const o=$registry.getComponent(e);o.clazz=t,o.name=e,o.setProp("iProps",{type:Object,default:{},required:!!i})}};var Tt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ct=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 按钮 --\x3e\n    <div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>'}getClass(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}}getStyle(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-top-bottom":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}}};Tt([Template],Ct.prototype,"template",void 0),Tt([Method],Ct.prototype,"getClass",null),Tt([Method],Ct.prototype,"getStyle",null),Tt([Compute((t=>t.iProps.singleClick||(t=>{})))],Ct.prototype,"$singleClick",void 0),Tt([Compute((t=>t.iProps.size||"normal"))],Ct.prototype,"$size",void 0),Tt([Compute((t=>t.iProps.type||"primary"))],Ct.prototype,"$type",void 0),Ct=Tt([Service(Ct,ft.ButtonX,!0)],Ct),$registry.buildAndRegist(ft.ButtonX);var Et=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Dt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 文本输入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        \x3c!-- 文本输入框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',this.value=""}mounted(){$queue.on("dinglj-v-input-text::clear",(()=>{this.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(()=>{window.byId(this.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}};Et([Mounted],Dt.prototype,"mounted",null),Et([Template],Dt.prototype,"template",void 0),Et([Field],Dt.prototype,"value",void 0),Et([Method],Dt.prototype,"getStyle",null),Et([Method],Dt.prototype,"setValue",null),Et([Compute((t=>t.iProps.size||"normal"))],Dt.prototype,"$size",void 0),Et([Compute((t=>t.iProps.caption||""))],Dt.prototype,"$caption",void 0),Et([Compute((t=>t.iProps.placeholder||`请输入${t.$caption}`))],Dt.prototype,"$placeholder",void 0),Dt=Et([Service(Dt,ft.InputX,!0)],Dt),$registry.buildAndRegist(ft.InputX);var Pt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let $t=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 开关 --\x3e\n    <div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',this.active=!1}getStyle(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-top-bottom":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}}getClass(){return{"dinglj-v-switch-btn":!0,active:this.active}}onclicked(){this.active=!this.active,this.active?this.postText&&`已切换至: ${this.postText}`.info():this.preText&&`已切换至: ${this.preText}`.info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})}};Pt([Template],$t.prototype,"template",void 0),Pt([Field],$t.prototype,"active",void 0),Pt([Method],$t.prototype,"getStyle",null),Pt([Method],$t.prototype,"getClass",null),Pt([Method],$t.prototype,"onclicked",null),Pt([Compute((t=>t.iProps.size||"normal"))],$t.prototype,"xSize",void 0),Pt([Compute((t=>t.iProps.preTxt||""))],$t.prototype,"preText",void 0),Pt([Compute((t=>t.iProps.postTxt||""))],$t.prototype,"postText",void 0),$t=Pt([Service($t,ft.SwitchX,!0)],$t),$registry.buildAndRegist(ft.SwitchX);var It=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ot=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 下拉框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        \x3c!-- 下拉框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        \x3c!-- 下拉框选项集合 --\x3e\n        <div class="dinglj-v-combo-selections">\n            \x3c!-- 下拉框选项 --\x3e\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',this.value=null}setValue(t){this.value!=t&&(this.value=t,this.$onChange(t))}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}$onChange(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})}};It([Template],Ot.prototype,"template",void 0),It([Field],Ot.prototype,"value",void 0),It([Method],Ot.prototype,"setValue",null),It([Method],Ot.prototype,"getStyle",null),It([Method],Ot.prototype,"$onChange",null),It([Compute((t=>t.iProps.list||[]))],Ot.prototype,"$list",void 0),It([Compute((t=>t.iProps.size||"normal"))],Ot.prototype,"$size",void 0),It([Compute((t=>t.iProps.caption||""))],Ot.prototype,"$caption",void 0),It([Compute((t=>t.iProps.placeholder||`请选择${t.$caption}`))],Ot.prototype,"$placeholder",void 0),It([Compute((t=>t.iProps.getLabel||(t=>t)))],Ot.prototype,"$getLabel",void 0),It([Compute((t=>t.iProps.getValue||(t=>t)))],Ot.prototype,"$getValue",void 0),Ot=It([Service(Ot,ft.ComboX,!0)],Ot),$registry.buildAndRegist(ft.ComboX);var Rt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Nt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 导航菜单 --\x3e\n    <div id="dinglj-v-navigator">\n        \x3c!-- 每一个菜单 --\x3e\n        <div class="dinglj-v-navigator-item" v-for="item in list" @click="setValue(item)" :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',this.value=null}mounted(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])}setValue(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))}};Rt([Mounted],Nt.prototype,"mounted",null),Rt([Template],Nt.prototype,"template",void 0),Rt([Field],Nt.prototype,"value",void 0),Rt([Method],Nt.prototype,"setValue",null),Rt([Compute((t=>(null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value)))],Nt.prototype,"validItem",void 0),Rt([Compute((t=>t.iProps.list||[]))],Nt.prototype,"list",void 0),Rt([Compute((t=>t.iProps.default||(t.list.length>0?t.list[0]:null)))],Nt.prototype,"default",void 0),Rt([Compute((t=>t.iProps.getCaption||(t=>t)))],Nt.prototype,"getCaption",void 0),Nt=Rt([Service(Nt,ft.NavigatorX,!0)],Nt),$registry.buildAndRegist(ft.NavigatorX);var Mt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let jt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 纵向滚动视图 --\x3e\n    <div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{top:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,height:`${this.size}00%`}}};Mt([Template],jt.prototype,"template",void 0),Mt([Compute((t=>t.iProps.size||0))],jt.prototype,"size",void 0),Mt([Compute((t=>t.iProps.index||0))],jt.prototype,"index",void 0),Mt([Method],jt.prototype,"getStyle",null),jt=Mt([Service(jt,ft.ScrollerY,!0)],jt),$registry.buildAndRegist(ft.ScrollerY);var At=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Lt=class extends pt{constructor(){super(...arguments),this.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content" :active="active"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',this.active=null}};At([Template],Lt.prototype,"template",void 0),At([Field],Lt.prototype,"active",void 0),At([Compute((t=>({list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}})))],Lt.prototype,"navigatorProps",void 0),At([Compute((t=>({size:t.list.length,index:t.list.indexOf(t.active)})))],Lt.prototype,"scrollyProps",void 0),At([Compute((t=>t.iProps.list||[]))],Lt.prototype,"list",void 0),Lt=At([Service(Lt,ft.NavigatorView,!0)],Lt),$registry.buildAndRegist(ft.NavigatorView);var Vt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Bt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- Tab --\x3e\n    <div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        \x3c!-- Tab 页标题 --\x3e\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\x3c!-- Tab 页标题的浮动下划线 --\x3e\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        \x3c!-- Tab 页具体内容 --\x3e\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',this.value=null}mounted(){Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(()=>{const t=(this.index+1+this.list.length)%this.list.length;this.clicked(this.list[t],t)}),this.vid),$queue.on("tab-panel:to",(t=>{const e=this.list.filter((e=>JSON.stringify(e)==JSON.stringify(t)));e.length>0&&this.clicked(e[0],this.list.indexOf(e[0]))}),this.vid)}getClass(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}}getId(t){return`${this.vid}-${t}`}clicked(t,e){t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),window.timer((t=>{const i=window.selector(`#${t.vid} .dinglj-v-tab-float`);if(!i)return!1;const n=i[0],o=window.byId(t.getId(e));return o&&(n.style.width=`${o.offsetWidth}px`,n.style.left=`${o.offsetLeft}px`),!0}),this))}};Vt([Mounted],Bt.prototype,"mounted",null),Vt([Template],Bt.prototype,"template",void 0),Vt([Field],Bt.prototype,"value",void 0),Vt([Method],Bt.prototype,"getClass",null),Vt([Method],Bt.prototype,"getId",null),Vt([Method],Bt.prototype,"clicked",null),Vt([Compute((t=>(!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value))))],Bt.prototype,"index",void 0),Vt([Compute((t=>{if(!t.iProps.list)return[];let e=!1;for(let i of t.iProps.list)if(JSON.stringify(t.value)==JSON.stringify(i)){e=!0;break}return e||t.clicked(t.iProps.list[0],0),t.iProps.list}))],Bt.prototype,"list",void 0),Vt([Compute((t=>t.iProps.getLabel||(t=>t)))],Bt.prototype,"getLabel",void 0),Bt=Vt([Service(Bt,ft.TabPanelX,!0)],Bt),$registry.buildAndRegist(ft.TabPanelX);var qt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let kt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 横向滚动视图 --\x3e\n    <div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{left:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,width:`${this.size}00%`}}};qt([Template],kt.prototype,"template",void 0),qt([Compute((t=>t.iProps.size||0))],kt.prototype,"size",void 0),qt([Compute((t=>t.iProps.index||0))],kt.prototype,"index",void 0),qt([Method],kt.prototype,"getStyle",null),kt=qt([Service(kt,ft.ScrollerX,!0)],kt),$registry.buildAndRegist(ft.ScrollerX);var Ht=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ft=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- Tab 页视图 --\x3e\n    <div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',this.value=null,this.tabPanelId=""}mounted(){$queue.on("tab-view:next",(()=>{$queue.sendMsg("tab-panel:next",null,this.tabPanelId)}),this.vid),$queue.on("tab-view:to",(t=>{$queue.sendMsg("tab-panel:to",t,this.tabPanelId)}),this.vid)}tabPanelLoaded(t){this.tabPanelId=t.value}};Ht([Mounted],Ft.prototype,"mounted",null),Ht([Template],Ft.prototype,"template",void 0),Ht([Compute((t=>({size:t.list.length,index:t.index})))],Ft.prototype,"scrollxProps",void 0),Ht([Compute((t=>({list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}})))],Ft.prototype,"tabPanelProps",void 0),Ht([Field],Ft.prototype,"value",void 0),Ht([Field],Ft.prototype,"tabPanelId",void 0),Ht([Method],Ft.prototype,"tabPanelLoaded",null),Ht([Compute((t=>t.list.indexOfIgnoreCase(t.value)))],Ft.prototype,"index",void 0),Ht([Compute((t=>t.iProps.list||[]))],Ft.prototype,"list",void 0),Ft=Ht([Service(Ft,ft.TabView,!0)],Ft),$registry.buildAndRegist(ft.TabView);var Kt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ut=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 表格 --\x3e\n    <div class="dinglj-v-table" :id="vid" :data-title="title">\n        \x3c!-- 表头 --\x3e\n        <div class="dinglj-v-thead dinglj-v-tr">\n            \x3c!-- 复选框 --\x3e\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            \x3c!-- 序号 --\x3e\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            \x3c!-- 表头的每一列 --\x3e\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                \x3c!-- 表头的右键菜单 --\x3e\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        \x3c!-- 表体 --\x3e\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                \x3c!-- 表格的每一行内容 --\x3e\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    \x3c!-- 复选框 --\x3e\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    \x3c!-- 序号 --\x3e\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    \x3c!-- 表格中的每一列 --\x3e\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    \x3c!-- 表格每一行的右键菜单 --\x3e\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                \x3c!-- 表格空白处的右键菜单 --\x3e\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',this.cache={},this.checkAll=!1,this.checkedList=[],this.bestWidthCache=!1}mounted(){const t=this;window.timer((()=>{const e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)}genHeadProps(t){return{bindId:`${this.vid}-Col-${this.getColumnKey(t)}`,data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}}genLineProps(t,e){return{bindId:`${this.vid}-${e}`,data:t,list:this.rowMenus}}genBodyProps(){return{bindId:`${this.vid}-Body`,data:this.list,list:this.bodyMenus}}checkOne(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))}getClass(t){const e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];let i=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed";const n={"dinglj-v-cell":!0};return n[e]=!0,n[i]=!0,this.cache[e]=n,n}getStyle(t){let e;return e=""==t?80:this.getBestWidth()[t],{width:`${e}px`}}doCheckAll(){this.checkedList.length=0,this.checkAll||this.checkedList.push(...this.list),this.checkAll=!this.checkAll}getBestWidth(){if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(let t of this.columns){const e=this.getColumnKey(t),i=this.getColumnLabel(t);let n=[window.calcTxtWidth(`${i}`)];n.push(...this.list.map((t=>{const i=this.getCell(t,e);return window.calcTxtWidth(i)})));const o=Math.max(...n);this.bestWidthCache[e]=o+20}return this.bestWidthCache}exportToExcel(){const t=this;window.timer((function(){const e=window.byId(t.vid);if(!e)return!1;let i="";for(let t of e.children[0].children)t.classList.contains("dinglj-v-table-select")||(i+=t.innerText);i+="\n";for(let t of e.children[1].children[0].children){for(let e of t.children)e.classList.contains("dinglj-v-table-select")||(i+=e.innerText);i+="\n"}return console.log(i),!0}))}};Kt([Mounted],Ut.prototype,"mounted",null),Kt([Template],Ut.prototype,"template",void 0),Kt([Field],Ut.prototype,"cache",void 0),Kt([Field],Ut.prototype,"checkAll",void 0),Kt([Field],Ut.prototype,"checkedList",void 0),Kt([Field],Ut.prototype,"bestWidthCache",void 0),Kt([Method],Ut.prototype,"genHeadProps",null),Kt([Method],Ut.prototype,"genLineProps",null),Kt([Method],Ut.prototype,"genBodyProps",null),Kt([Method],Ut.prototype,"checkOne",null),Kt([Method],Ut.prototype,"getClass",null),Kt([Method],Ut.prototype,"getStyle",null),Kt([Method],Ut.prototype,"doCheckAll",null),Kt([Method],Ut.prototype,"getBestWidth",null),Kt([Method],Ut.prototype,"exportToExcel",null),Kt([Compute((t=>t.iProps.title||""))],Ut.prototype,"title",void 0),Kt([Compute((t=>t.iProps.flexColumns||[]))],Ut.prototype,"flexColumns",void 0),Kt([Compute((t=>t.iProps.list||[]))],Ut.prototype,"list",void 0),Kt([Compute((t=>t.iProps.sequenceNum||!0))],Ut.prototype,"sequenceNum",void 0),Kt([Compute((t=>t.iProps.selectable||!0))],Ut.prototype,"selectable",void 0),Kt([Compute((t=>t.iProps.columns||[]))],Ut.prototype,"columns",void 0),Kt([Compute((t=>t.iProps.getColumnKey||(t=>t)))],Ut.prototype,"getColumnKey",void 0),Kt([Compute((t=>t.iProps.getColumnLabel||(t=>t)))],Ut.prototype,"getColumnLabel",void 0),Kt([Compute((t=>t.iProps.getCell||((e,i)=>{let n=t.iProps.getColumnKey(i);return $get(e,n)})))],Ut.prototype,"getCell",void 0),Kt([Compute((t=>t.iProps.rowMenus||[]))],Ut.prototype,"rowMenus",void 0),Kt([Compute((t=>t.iProps.bodyMenus||[]))],Ut.prototype,"bodyMenus",void 0),Kt([Compute((t=>t.iProps.titleColumnMenus||[]))],Ut.prototype,"titleColumnMenus",void 0),Ut=Kt([Service(Ut,ft.TableX,!0)],Ut),$registry.buildAndRegist(ft.TableX);var Wt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let zt=class extends pt{constructor(){super(...arguments),this.template="\x3c!-- 进度条 --\x3e\n    <div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        \x3c!-- 上方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        \x3c!-- 进度条本体 --\x3e\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        \x3c!-- 下方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>"}getContainerStyle(){return{"--bar-height":this.height}}getProgressStyle(){return window.timer((t=>{const e=window.byId(t.vid);return!!e&&(e.findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent,!0)}),this),{width:"0%"}}};Wt([Template],zt.prototype,"template",void 0),Wt([Method],zt.prototype,"getContainerStyle",null),Wt([Method],zt.prototype,"getProgressStyle",null),Wt([Compute((t=>(t.iProps.height||5)+"px"))],zt.prototype,"height",void 0),Wt([Compute((t=>t.iProps.percent||"100%"))],zt.prototype,"percent",void 0),Wt([Compute((t=>t.iProps.txtPosition||"TopLeft"))],zt.prototype,"position",void 0),Wt([Compute((t=>t.iProps.caption||""))],zt.prototype,"caption",void 0),zt=Wt([Service(zt,ft.ProgressX,!0)],zt),$registry.buildAndRegist(ft.ProgressX);var Gt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Jt=class extends pt{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 对话框这招背景遮罩 --\x3e\n        <div class="dinglj-v-modal-mask"></div>\n        \x3c!-- 对话框 --\x3e\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            \x3c!-- 标题 --\x3e\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            \x3c!-- 内容 --\x3e\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            \x3c!-- 按钮 --\x3e\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',this.position={x:-1,y:-1}}mounted(){window.addEventListener("mouseup",this.cleanXY)}getStyle(){return{width:`${this.width}px`,height:`${this.height}px`}}closeModal(){this.iProps.onClose()}recordXY(t){const e=window.byId(this.vid);if(!e)return void this.cleanXY();let i=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(i.left),y:t.screenY-parseInt(i.top)}}moveXY(t){if(window.getVal(this.position,"x",-1)>=0){const e=window.byId(this.vid);e.style.left=t.screenX-this.position.x+"px",e.style.top=t.screenY-this.position.y+"px"}}cleanXY(){this.position={x:-1,y:-1}}};Gt([Mounted],Jt.prototype,"mounted",null),Gt([Template],Jt.prototype,"template",void 0),Gt([Field],Jt.prototype,"position",void 0),Gt([Method],Jt.prototype,"getStyle",null),Gt([Method],Jt.prototype,"closeModal",null),Gt([Method],Jt.prototype,"recordXY",null),Gt([Method],Jt.prototype,"moveXY",null),Gt([Method],Jt.prototype,"cleanXY",null),Gt([Compute((t=>({type:"cancel",singleClick:function(e){t.cancel()}})))],Jt.prototype,"cancelProps",void 0),Gt([Compute((t=>({singleClick:function(e){t.ok()}})))],Jt.prototype,"okProps",void 0),Gt([Compute((t=>t.iProps.display||!1))],Jt.prototype,"display",void 0),Gt([Compute((t=>t.iProps.ok||t.closeModal))],Jt.prototype,"ok",void 0),Gt([Compute((t=>t.iProps.cancel||t.closeModal))],Jt.prototype,"cancel",void 0),Gt([Compute((t=>t.iProps.width||600))],Jt.prototype,"width",void 0),Gt([Compute((t=>t.iProps.height||300))],Jt.prototype,"height",void 0),Jt=Gt([Service(Jt,ft.ModalX,!0)],Jt),$registry.buildAndRegist(ft.ModalX);var Xt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Yt=class extends pt{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 右键菜单 --\x3e\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            \x3c!-- 右键菜单集合 --\x3e\n            <div v-for="item in $list">\n                \x3c!-- 每一个右键菜单 --\x3e\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',this.display=!1,this.position={top:"0px",left:"0px",opacity:"0"}}mounted(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()}binding(){const t=this;window.timer((()=>!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){t.$list&&0!=t.$list.length&&($queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){let e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)})))})),!0))),500)}hidden(){this.position.opacity="0",this.display=!1}conditionIfDisplay(t){return t.isDisplay(this.$ctx,this.element)}execCommand(t){t.event(this.$ctx,this.element),this.hidden()}};Xt([Mounted],Yt.prototype,"mounted",null),Xt([Template],Yt.prototype,"template",void 0),Xt([Field],Yt.prototype,"display",void 0),Xt([Field],Yt.prototype,"element",void 0),Xt([Field],Yt.prototype,"position",void 0),Xt([Method],Yt.prototype,"binding",null),Xt([Method],Yt.prototype,"hidden",null),Xt([Method],Yt.prototype,"conditionIfDisplay",null),Xt([Method],Yt.prototype,"execCommand",null),Xt([Compute((t=>t.iProps.list||[]))],Yt.prototype,"$list",void 0),Xt([Compute((t=>t.iProps.data||{}))],Yt.prototype,"$ctx",void 0),Yt=Xt([Service(Yt,ft.ContextMenuX,!0)],Yt),$registry.buildAndRegist(ft.ContextMenuX);var _t=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Zt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 树形导航菜单 --\x3e\n    <div :style="{ \'margin-left\': root ? \'0px\' : indent + \'px\' }" v-for="item in list" :data-title="item.label">\n        <div class="dinglj-v-tree-label" @click.stop="expand($event, item)">\n            <img class="dinglj-v-menu-icon" v-if="item.type == \'entry\'" :src="getImg(\'folder.png\')"/>\n            <img class="dinglj-v-menu-icon" v-else :src="getImg(\'excel.png\')"/>\n            <span>{{ item.label }}</span>\n        </div>\n        <div class="dinglj-v-tree-children">\n            <div>\n                <i-file-tree :i-props="iProps4Children(item)"></i-file-tree>\n            </div>\n        </div>\n    </div>'}iProps4Children(t){const e=this;return{root:!1,indent:this.indent,list:t.children,parent:t,select:function(t){console.log(t),e.iProps.parent&&t.unshift(e.iProps.parent),e.iProps.select(t)}}}expand(t,e){if("entry"==e.type){let e=t.target;e.classList.contains("dinglj-v-tree-label")?e=e.nextElementSibling:"SPAN"==e.tagName&&e.parentElement.classList.contains("dinglj-v-tree-label")&&(e=e.parentElement.nextElementSibling),e.classList.contains("expand")?e.classList.remove("expand"):e.classList.add("expand")}else{const t=[e];this.iProps.parent&&t.unshift(this.iProps.parent),this.iProps.select(t)}}};_t([Template],Zt.prototype,"template",void 0),_t([Compute((t=>null==t.iProps.root))],Zt.prototype,"root",void 0),_t([Compute((t=>t.iProps.list||[]))],Zt.prototype,"list",void 0),_t([Compute((t=>t.iProps.indent||20))],Zt.prototype,"indent",void 0),_t([Method],Zt.prototype,"iProps4Children",null),_t([Method],Zt.prototype,"expand",null),Zt=_t([Service(Zt,ft.FileTreeX,!0)],Zt),$registry.buildAndRegist(ft.FileTreeX);var Qt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let te=class extends pt{constructor(){super(...arguments),this.temp='\x3c!-- 树形视图 --\x3e\n    <div class="dinglj-v-tree-view">\n        <div class="dinglj-v-tree-nav">\n            <i-file-tree :i-props="iProps4Tree()"></i-file-tree>\n        </div>\n        <div class="dinglj-v-spliter" @mousedown="mousedown"></div>\n        <div class="dinglj-v-main-view">\n            <i-tab-view :i-props="tabProps()">\n                <div v-for="item in selectList">\n                    <slot name="content" :item="item.value"></slot>\n                </div>\n            </i-tab-view>\n        </div>\n    </div>',this.selectList=[],this.position={x:-1,width:0}}mounted(){const t=this;window.addEventListener("mousemove",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`})),window.addEventListener("mouseup",(function(e){if(-1==t.position.x)return;const i=e.clientX-t.position.x;window.selector(".dinglj-v-tree-nav")[0].style.width=`${t.position.width+i}px`,t.position={x:-1,width:0}}))}mousedown(t){const e=window.selector(".dinglj-v-tree-nav")[0];this.position={x:t.clientX,width:e?e.offsetWidth:0}}iProps4Tree(){const t=this;return{list:t.iProps.list,indent:t.iProps.indent,parent:t.iProps.parent,root:t.iProps.root,select:function(e){e.length>0&&(t.selected=e[e.length-1],t.selectList.pushNew(t.selected)),t.iProps.select(e,t.selected)}}}tabProps(){return{list:this.selectList.filter((t=>t)).map((t=>t.label))}}};Qt([Mounted],te.prototype,"mounted",null),Qt([Template],te.prototype,"temp",void 0),Qt([Field],te.prototype,"selectList",void 0),Qt([Field],te.prototype,"selected",void 0),Qt([Field],te.prototype,"position",void 0),Qt([Method],te.prototype,"mousedown",null),Qt([Method],te.prototype,"iProps4Tree",null),Qt([Method],te.prototype,"tabProps",null),te=Qt([Service(te,ft.TreeView,!0)],te),$registry.buildAndRegist(ft.TreeView);var ee=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let ie=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 文本域入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text-area" :caption="caption" :style="getStyle()" :id="vid">\n        <textarea\n            :placeholder="placeholder"\n            v-model="value"\n            @keyup.enter="setValue(value, \'enter\')"\n            @input="setValue(value, \'input\')"\n            @blur="setValue(value, \'blur\')"\n            @change="setValue(value, \'change\')"/>\n    </div>',this.value=""}mounted(){this.value=this.iProps.defaultValue||""}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}getStyle(){return{"--text-area-height":this.height}}};ee([Mounted],ie.prototype,"mounted",null),ee([Template],ie.prototype,"template",void 0),ee([Field],ie.prototype,"value",void 0),ee([Compute((t=>t.iProps.caption))],ie.prototype,"caption",void 0),ee([Compute((t=>t.iProps.placeholder))],ie.prototype,"placeholder",void 0),ee([Compute((t=>{const e=t.iProps.height||0;if(isNaN(e))return e;const i=parseInt(e);return e<100?"100px":`${i}px`}))],ie.prototype,"height",void 0),ee([Method],ie.prototype,"setValue",null),ee([Method],ie.prototype,"getStyle",null),ie=ee([Service(ie,ft.TextAreaX,!0)],ie),$registry.buildAndRegist(ft.TextAreaX);const ne={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"};class oe{constructor(t,e){if(!t)return;t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error(`未知的状态 {${t.stats}}, 结果 {${t.result}}, 请联系 dinglj 补充`):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error(`未知的状态 {${t.stats}}, 请联系 dinglj 补充`):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error(`未知的结果 {${t.result}}, 请联系 dinglj 补充`),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;let i=t.ticketId||t.log;this.ticket=i?parseInt(i):i,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}static getCaption(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}}}oe._fieldMap_=ne,oe._fields_=Object.keys(ne);class re{exec(t,e,i,n,o=""){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,n):this.func(t,e,i,o);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(o)}return!1}}window.defunc("RowFilter",((t,e,i)=>{let n=new re;return n.isRow=!0,n.groupRegExp=t,n.tabRegExp=e,n.func=i,n})),window.defunc("ColFilter",((t,e,i)=>{let n=new re;return n.isRow=!1,n.groupRegExp=t,n.tabRegExp=e,Array.isArray(i)?(n.ignoreColumns=i,n.type="array"):"function"==typeof i?(n.func=i,n.type="function"):(n.ignoreColumns=[i],n.type="single"),n}));class se{exec(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""}}window.defunc("GroupStrategy",((t,e,i)=>{let n=new se;return n.fieldKey=t,n.expectValue=e,n.groupName=i,Array.isArray(e)?n.expectValue=e:n.expectValue=[e],n})),window.defunc("GroupStrategy",(t=>{let e=new se;return e.func=t,e}));class le{exec(t,e,i,n){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,i,n):this.expectValue.compareBy(i.get(this.fieldKey),n.get(this.fieldKey))}}window.defunc("OrderTicket",((t,e,i,n)=>{let o=new le;return o.groupRegExp=t,o.tabRegExp=e,o.fieldKey=i,Array.isArray(n)?o.expectValue=n:o.expectValue=[n],o})),window.defunc("OrderTicket",((t,e,i)=>{let n=new le;return n.groupRegExp=t,n.tabRegExp=e,n.func=i,n}));class ae{exec(t,e){let i=this.groupRegExp.test(t);if(this.reverse&&(i=!i),i){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""}}window.defunc("TabPageStrategy",((t,e,i,n)=>window.TabPageStrategy(t,e,i,n,!1))),window.defunc("TabPageStrategy",((t,e,i,n,o)=>{const r=new ae;return r.groupRegExp=t,r.fieldKey=e,r.tabName=n,r.reverse=o,Array.isArray(i)?r.expectValue=i:r.expectValue=[i],r})),window.defunc("TabPageStrategy",((t,e)=>window.TabPageStrategy(t,e,!1))),window.defunc("TabPageStrategy",((t,e,i)=>{const n=new ae;return n.groupRegExp=t,n.func=e,n.reverse=i,n}));const ue={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",needbuild:"需打包",devtype:"开发类型",dinglj_note:"备注"};class ce{static getCaption(t){return ce.fieldNames.includesIgnoreCase(t)?ce.fields[t]:t}constructor(t=null){if(null==t)return;const e=$store.getStorage("dinglj-v-ticket-cache",{});for(let i of t.children){const t=i.className,n=i.innerText.trim();if(this.set(t,n),"id".equalsIgnoreCase(t)&&e[n]){const t=Object.keys(e[n]);for(let i of t)this.set(i,e[n][i])}}}static forLocalTest(t){let e=new ce;const i=$store.getStorage("dinglj-v-ticket-cache",{});for(let n of Object.keys(t)){const o=$get(t,n);if(e.set(n,o),"id".equalsIgnoreCase(n)&&i[o]){const t=Object.keys(i[o]);for(let n of t)e.set(n,i[o][n])}}return e}set(t,e){ce.fieldNames.includesIgnoreCase(t)?this[t]=e:ce.unknownColumn.includesIgnoreCase(t)||(`不存在的列: ${t}`.warn(),ce.unknownColumn.push(t))}get(t){return $get(this,t)?$get(this,t):""}}ce.fields=ue,ce.fieldNames=Object.keys(ue),ce.fieldValues=Object.values(ue),ce.unknownColumn=["sel"],Window.prototype.$systemConfig=window.toCache((()=>$rsa.decryptObject(window.encodeConfig())),"dinglj-system-config")("dinglj-system-config"),Window.prototype.$userConfig=window.toCache((()=>window.readConfig()),"dinglj-user-config")("dinglj-user-config"),window.isMatch&&!window.isMatch()||(window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css")),i(601);var he=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let pe=class extends pt{constructor(){super(...arguments),this.template='<div id="line-container">\n        <div :class="containerClass">\n            <div :title="lineNumber" :class="itemClass(idx)" v-for="(lineNumber, idx) of lines" @click="setIdx(idx)">\n                {{ lineNumber }}\n            </div>\n        </div>\n    </div>',this.current=-1,this.last=-1}mounted(){window.timer((()=>this.lines.length>0&&(this.setIdx(this.lines.length-1,!0,!0),!0))),$queue.on("update-line",(t=>{this.doScroll(t)})),$queue.on("toPrevLine",(()=>{this.setIdx(this.current-1,!0,!0)})),$queue.on("toNextLine",(()=>{this.setIdx(this.current+1,!0,!1)})),$queue.on("jumpToLine",(t=>{let e=this.lines.indexOf(t);-1!=e&&this.setIdx(e)}))}itemClass(t){return{"line-number":!0,active:this.current==t,last:this.last==t}}setIdx(t,e=!1,i=!1){const n=window.byClass("line arrow")[0];if(n){const o=$tool.getLimit(n);this.doScroll({size:this.lines.length,current:t,direction:0,height:$tool.getOneHeight(n),qty:$tool.getScrollQty(t,o,0),toStep:e,toLastStep:i})}}doScroll(t){const e=t.current+t.direction;e<0?"已经到第一行了".info():e>=t.size?"已经到最后一行了".info():this.current!=e&&(window.byId("line-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,$queue.sendMsg("line-changed",{line:this.lines[e],expect:t.toLastStep?-1:0,toStep:!!t.toStep}),$queue.sendMsg("change-active-panel","Line"))}};he([Mounted],pe.prototype,"mounted",null),he([Template],pe.prototype,"template",void 0),he([Compute((t=>({line:!0,arrow:!0,active:"Line"==t.arrow})))],pe.prototype,"containerClass",void 0),he([Method],pe.prototype,"itemClass",null),he([Field],pe.prototype,"current",void 0),he([Field],pe.prototype,"last",void 0),he([Method],pe.prototype,"setIdx",null),he([Method],pe.prototype,"doScroll",null),he([Compute((t=>{const e=/.*<a href="([0-9]+\/)".*/;return window.readLines?window.readLines():$net.get(`${window.location.href}1`).split("\n").map((t=>e.test(t)?e.exec(t)[1]:"")).filter((t=>""!=t)).map((t=>t.replace(/\/$/,"")))}))],pe.prototype,"lines",void 0),he([Prop(String,"Step",!0)],pe.prototype,"arrow",void 0),pe=he([Service(pe,"AppLine")],pe);const de=$registry.buildComponent("AppLine");var fe=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let ge=class extends pt{constructor(){super(...arguments),this.template='<div id="step-container">\n        <div :class="containerClass">\n            <div :title="stepNumber" :class="itemClass(idx)" v-for="(stepNumber, idx) of steps" @click="setIdx(idx)">\n                {{ stepNumber.replace(/.png/, \'\') }}\n            </div>\n        </div>\n    </div>',this.map={},this.current=-1,this.last=-1,this.line="",this.lastSteps=[]}mounted(){$queue.on("init-steps",(t=>{this.line=t,window.timer((t=>t.steps.length>0&&(t.setIdx(t.steps.length-1),!0)),this)})),$queue.on("line-changed",(t=>{this.lastSteps=this.steps,this.line=t.line,window.timer((e=>e.lastSteps!=e.steps&&(t.expect?t.expect>0&&t.expect<e.steps.length?e.setIdx(t.expect,!0):e.setIdx(e.steps.length-1,!0):e.setIdx(0,!0),t.toStep||$queue.sendMsg("change-active-panel","Line"),!0)),this)})),$queue.on("update-step",(t=>{this.doScroll(t)})),$queue.on("jumpToStep",(t=>{let e=-1;for(let i=0;i<this.steps.length;i++)if(this.steps[i].startsWith(`${t}_`)){e=i;break}-1!=e&&this.setIdx(e)}))}itemClass(t){return{"step-number":!0,active:this.current==t,last:this.last==t}}setIdx(t,e=!1){const i=window.byClass("step arrow")[0];if(i){const n=$tool.getLimit(i);this.doScroll({size:this.steps.length,current:t,direction:0,height:$tool.getOneHeight(i),qty:$tool.getScrollQty(t,n,0),lineChanged:e})}}doScroll(t){const e=t.current+t.direction;(t.lineChanged||this.current!=e)&&(e<0?$queue.sendMsg("toPrevLine",{}):e>=this.steps.length?$queue.sendMsg("toNextLine",{}):(window.byId("step-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,$queue.sendMsg("change-img",`1/${this.line}/${this.steps[e]}`)),t.lineChanged&&(this.last=-1),$queue.sendMsg("tab-view:to","当前图片",this.tabPanelId),$queue.sendMsg("change-active-panel","Step"))}};fe([Mounted],ge.prototype,"mounted",null),fe([Template],ge.prototype,"template",void 0),fe([Compute((t=>({step:!0,arrow:!0,active:"Step"==t.arrow})))],ge.prototype,"containerClass",void 0),fe([Method],ge.prototype,"itemClass",null),fe([Field],ge.prototype,"map",void 0),fe([Field],ge.prototype,"current",void 0),fe([Field],ge.prototype,"last",void 0),fe([Field],ge.prototype,"line",void 0),fe([Field],ge.prototype,"lastSteps",void 0),fe([Method],ge.prototype,"setIdx",null),fe([Method],ge.prototype,"doScroll",null),fe([Compute((t=>{if(""==t.line.trim())return[];if(t.map[t.line])return t.map[t.line];if(window.readSteps){const e=window.readSteps(t.line);return t.map[t.line]=e,e}const e=/.*\.png">(.*.png)<\/a>.*/,i=$net.get(`${window.location.href}1/${t.line}`).split("\n").map((t=>e.test(t)?e.exec(t)[1]:"")).filter((t=>""!=t)).map((t=>t.replace(/\/$/,"")));return t.map[t.line]=i,i}))],ge.prototype,"steps",void 0),fe([Prop(String,"Step",!0)],ge.prototype,"arrow",void 0),fe([Prop(String,"")],ge.prototype,"tabPanelId",void 0),ge=fe([Service(ge,"AppStep")],ge);const ve=$registry.buildComponent("AppStep");var ye=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let me=class extends pt{constructor(){super(...arguments),this.template='<div id="history-container" class="right-panel" @click="changePanel">\n        <div :class="containerClass">\n            <div :title="historyNumber" :class="itemClass(idx)" v-for="(historyNumber, idx) of list" @click="setIdx(idx)">\n                {{ historyNumber.substring(2).replace(/.png/, \'\') }}\n            </div>\n        </div>\n    </div>',this.current=-1,this.last=-1}mounted(){$queue.on("update-history",(t=>{this.doScroll(t)}))}changePanel(){$queue.sendMsg("change-active-panel","History")}setIdx(t){const e=window.byClass("history arrow")[0];if(e){const i=$tool.getLimit(e);this.doScroll({size:this.list.length,current:t,direction:0,height:$tool.getOneHeight(e),qty:$tool.getScrollQty(t,i,0)})}}itemClass(t){return{"history-number":!0,active:this.current==t,last:this.last==t}}doScroll(t){const e=t.current+t.direction;e<0?"已经是第一张".info():e>=t.size?"已经是最后一张".info():this.current!=e&&(window.byId("history-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,$queue.sendMsg("tab-view:to",this.tabPanelId,"当前图片"),$queue.sendMsg("change-img",this.list[e]))}onArrowChange(t){"History"==this.arrow&&-1==this.current&&-1==this.last&&this.list.length>0&&this.setIdx(0)}};ye([Mounted],me.prototype,"mounted",null),ye([Template],me.prototype,"template",void 0),ye([Field],me.prototype,"current",void 0),ye([Field],me.prototype,"last",void 0),ye([Method],me.prototype,"changePanel",null),ye([Method],me.prototype,"setIdx",null),ye([Compute((t=>({history:!0,arrow:!0,active:"History"==t.arrow})))],me.prototype,"containerClass",void 0),ye([Method],me.prototype,"itemClass",null),ye([Method],me.prototype,"doScroll",null),ye([Prop(Array,[],!0)],me.prototype,"list",void 0),ye([Prop(String,"Step",!0)],me.prototype,"arrow",void 0),ye([Prop(String,"")],me.prototype,"tabPanelId",void 0),ye([Watch("arrow")],me.prototype,"onArrowChange",null),me=ye([Service(me,"AppHistory")],me);const we=$registry.buildComponent("AppHistory");var be=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};window.isMatch()&&(window.linkCss("/src/script/ticket-image-viewer/index.css"),window.document.body.innerHTML='<div id="dinglj-main">\n        <div id="iv-toolbar">\n            <div id="iv-options">\n                <div @click="openUrl(\'..\')">返回上一层{{ getHotKey(\'back\') }}</div>\n                <div @click="addStar(display)">添加关注{{ getHotKey(\'addStar\') }}</div>\n                <div @click="stars.length = 0">清空关注{{ getHotKey(\'cleanStar\') }}</div>\n                <div @click="history.length = 0">清空历史{{ getHotKey(\'cleanHistory\') }}</div>\n                <div @click="openUrl(\'test.xls\')">下载用例{{ getHotKey(\'downloadCase\') }}</div>\n                <div @click="openUrl(\'默认步骤\')">默认步骤{{ getHotKey(\'defaultStep\') }}</div>\n                <div @click="openUrl(\'erpLog\')">ERP日志{{ getHotKey(\'erpLog\') }}</div>\n                <div @click="openUrl(\'logs\')">工具日志{{ getHotKey(\'logs\') }}</div>\n            </div>\n            <div class="dinglj-v-flex"></div>\n            <i-input :i-props="lineProps" @mounted="emit => ids.lineInput = emit.vid"></i-input>\n            <i-input :i-props="stepProps" @mounted="emit => ids.stepInput = emit.vid"></i-input>\n        </div>\n        <div id="iv-under-toolbar">\n            <ivline :arrow="arrow"></ivline>\n            <ivstep :arrow="arrow" :tab-panel-id="ids.tabPanelView"></ivstep>\n            <div class="content-view dinglj-v-flex">\n                <i-tab-view :i-props="tabViewProps" @mounted="tabPanelViewMounted">\n                    <div v-for="(src, idx) of images" style="width: 100%; height: 100%; position: relative">\n                        <img class="display-img" :id="getImageId(src, idx)" :src="src"/>\n                        <i-context-menu :i-props="getImgContextMenu(src, idx)"></i-context-menu>\n                    </div>\n                </i-tab-view>\n            </div>\n            <ivhistory :arrow="arrow" @on-clicked="data => { display = data; }" :list="history" :tab-panel-id="ids.tabPanelView"></ivhistory>\n        </div>\n    </div>');let xe=class extends pt{constructor(){super(...arguments),this.ids={lineInput:"",stepInput:"",tabPanelView:""},this.arrow="Step",this.display="",this.stars=[],this.history=[],this.imageIds={},this.init={tabPanelView:!0}}mounted(){const t=this;window.displayData=function(){return t},$queue.on("change-panel",(t=>{this.changePanel(t)})),$queue.on("add-star",(()=>{this.addStar(this.display)})),$queue.on("clean-star",(()=>{this.stars.length=0})),$queue.on("clean-history",(()=>{this.history.length=0})),$queue.on("change-active-panel",(t=>{this.arrow=t})),$queue.on("focus-line",(()=>{$queue.sendMsg("dinglj-v-input-text::focus",null,this.ids.lineInput)})),$queue.on("focus-step",(()=>{$queue.sendMsg("dinglj-v-input-text::focus",null,this.ids.stepInput)})),$queue.on("change-img",(t=>{this.history.pushNew(t),this.display=t}))}openUrl(t){window.open(t)}tabPanelViewMounted(t){this.ids.tabPanelView=t.vid,this.init.tabPanelView&&(this.init.tabPanelView=!1,window.addEventListener("keydown",(e=>{"Tab"==e.code&&(e.preventDefault(),$queue.sendMsg("tab-view:next",null,t.vid))})))}getImageId(t,e){return 0==e?"main-image":t}getImgContextMenu(t,e){const i=this,n=this.getImageId(t,e);return{data:t,bindId:n,list:[new bt("关注",(t=>i.addStar(t)),(t=>"main-image"==n)),new bt("取消关注",(t=>i.stars.remove(t)),(t=>"main-image"!=n))]}}changePanel(t){const e=window.getConfigOrDefault("panels",[]),i=(e.indexOfIgnoreCase(this.arrow)+e.length+t)%e.length;this.arrow=e[i]}addStar(t){this.stars.includesIgnoreCase(t)?"无需重复关注".warn():this.stars.push(t)}getHotKey(t){return`(${window.getConfigOrDefault("hotKey",{})[t]})`}};be([Component({ivline:de,ivstep:ve,ivhistory:we}),Mounted],xe.prototype,"mounted",null),be([Field],xe.prototype,"ids",void 0),be([Field],xe.prototype,"arrow",void 0),be([Field],xe.prototype,"display",void 0),be([Field],xe.prototype,"stars",void 0),be([Field],xe.prototype,"history",void 0),be([Field],xe.prototype,"imageIds",void 0),be([Field],xe.prototype,"init",void 0),be([Method],xe.prototype,"openUrl",null),be([Method],xe.prototype,"tabPanelViewMounted",null),be([Method],xe.prototype,"getImageId",null),be([Method],xe.prototype,"getImgContextMenu",null),be([Method],xe.prototype,"changePanel",null),be([Method],xe.prototype,"addStar",null),be([Method],xe.prototype,"getHotKey",null),be([Compute((t=>({caption:"",placeholder:`请输入行数进行跳转${t.getHotKey("line")}`,onOver:t=>{$queue.sendMsg("jumpToLine",t.value),$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)}})))],xe.prototype,"lineProps",void 0),be([Compute((t=>({caption:"",placeholder:`请输入步数进行跳转${t.getHotKey("step")}`,onOver:t=>{$queue.sendMsg("jumpToStep",t.value),$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)}})))],xe.prototype,"stepProps",void 0),be([Compute((t=>({list:t.tabNames})))],xe.prototype,"tabViewProps",void 0),be([Compute((t=>{const e=[];return t.display&&e.push(t.display),e.push(...t.stars),e}))],xe.prototype,"images",void 0),be([Compute((t=>{let e=["当前图片"];for(let i=1;i<t.images.length;i++)e.push(t.images[i].replace(/1\/(\d+)\/(.*)(\.png)/,"第$1行: $2"));return e}))],xe.prototype,"tabNames",void 0),xe=be([Service(xe,"App")],xe),window.createVue($registry.buildComponent("App"),"#dinglj-main")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,