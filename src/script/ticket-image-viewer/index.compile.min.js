/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={384:()=>{Array.prototype.includesIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).indexOf(e)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){var e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)}},144:()=>{window.defunc("linkCss",(function(t){window.linkCss(window.dinglj_home,t)})),window.defunc("linkCss",(function(t,e){var n=document.createElement("style"),i=window.mergePath(t,e);n.innerHTML=window.get(i),document.head.appendChild(n)}))},374:()=>{window.defunc("byId",(function(t){return document.getElementById(t)})),window.defunc("byClass",(function(t){var e=[],n=document.getElementsByClassName(t);return n&&e.push.apply(e,n),e})),window.defunc("query",(function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e})),window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,i){var o=document.createElement("canvas").getContext("2d");o.font="".concat(e," ").concat(n," ").concat(i);var r=o.measureText(t).width;return Math.floor(r)})),Element.prototype.animate=function(t,e){for(var n=this,i=getComputedStyle(this).transition,o=Object.keys(t),r=0,s=o;r<s.length;r++){var a=s[r];this.style[a]=t[a][0]}setTimeout((function(){var r=e/1e3+"s";n.style.transition=r;for(var s=0,a=o;s<a.length;s++){var u=a[s];n.style[u]=t[u][1]}setTimeout((function(){n.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){for(var e=[],n=this.children,i=0;i<n.length;i++)n[i].classList.contains(t)&&e.push(n[i]);return e},window.defunc("indexOfChildByClass",(function(t,e){for(var n=t.children,i=0;i<n.length;i++)if(n[i].classList.contains(e))return i;return-1}))},343:()=>{window.defunc("get",(function(t){return window.get(t,{callback:null,async:!1})})),window.defunc("get",(function(t,e){var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText}))},963:()=>{window.defunc("imgUrl",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t){return window.mergePath(window.dinglj_home,t)})),window.defunc("mergePath",(function(t,e){return t.endsWith("/")||t.endsWith("\\")||(t+="/"),(e.startsWith("/")||e.startsWith("\\"))&&(e=e.substring(1)),"".concat(t).concat(e)}))},726:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var i="";"string"==typeof e?i=t[e]:"function"==typeof e&&(i=e(t)),n[i]?n[i].push(t):n[i]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,i){if(null==t||null==t)return n;for(var o=t,r=0,s=e.split(".");r<s.length;r++)if(!(o=o[s[r]]))return i&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return o})),window.defunc("getConfigOrDefault",(function(t,e,n,i){return window.getConfigOrDefault(t,e,n,i,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,i,o){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,l=Object.keys(r);u<l.length;u++)a[p=l[u]]=r[p]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&o&&a.push.apply(a,s);else if("object"==typeof s&&o)for(var c=0,h=Object.keys(s);c<h.length;c++){var p;null==a[p=h[c]]&&(a[p]=s[p])}}return"NOT_FOUND"==a&&(a=i,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var i=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),o=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return i==o?e<n?-1:e>n?1:0:i-o}return e<n?-1:e>n?1:0})),window.defunc("pushToArrayInObject",(function(t,e,n){return Array.isArray(t[e])?t[e].push(n):t[e]=[n],t})),Window.prototype.defaultConfig=function(){return window.$rsa.decryptObject(window.encodeConfig())},Window.prototype.timer=function(t,e){void 0===e&&(e=30),e=e<30?30:e;var n=setInterval((function(){t()&&clearInterval(n)}),e)},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))}},818:()=>{window.encodeConfig=function(){return{panels:["$DINGLJ-ENCODE-START$UPRnZkwIOy/4B/VYu22wc39NHH2NqVl3AVZZ2Ourw+mAwNw9qzfl/dTSVlRYuojOHqd2J7n//s/Bs9qxHaPxtyNer4btFcvdnNwG5eq5IRAjAGpre4EluNIIgbfOqEvmP1+JaFONgi0Bn/TKX5TBEP21UO7l6TGV3SUfMPjs9XQ=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$F71jOvb8ItbL3/t3iw73/q1Q3euGnacPcWmiN/xTP7ZBeJS+AdZMYTtKGFZZnlBS3saBpmeNQfqpwhwvmydUz38IiNJzO+VcXwCfmLzw6JdzbjoEl6GJF1lOvL7O45XJKyn2tMjM37z/XJq7w+tgiNZw/vAmz+XTrcN2EtEEjlg=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$JtcY1gbjX3GOjmPB23IUcy2+hLIIGgzAg1RaWABxVObV2rzjfuHoGvEj2R2d6VAz2y0dzN9dVdrLJg9DSw+bmIupRhxu/4xz2hPY3MSl3PAkXDhFh1Rg/4EMUkqpzC2rPTuJ6Ts9ZMHJznhQFe10cfmQN07AvJNbAJG2t2bRfhY=$DINGLJ-ENCODE-END$"],urlTypes:{k8s:0},hotKey:{back:"$DINGLJ-ENCODE-START$C3Mgh/u80/NmAXSvYgOJW5Tk0R46faBFwy3WMrIjyBkTlV7p8fqE0/NGp+T0BG/cpkD7fcDeynsxMNXbeKDDa1X2G5mhdPPb/I/NMj79BQr30oh+ButnsLTv3Wvh6ktxYaFtf/Bgx/Ar3iIwMZchv4EI+67yJGB0xhk8it92X44=$DINGLJ-ENCODE-END$",addStar:"$DINGLJ-ENCODE-START$ehk3xDGdYhWbwSaHFmHdD46vltmBTOKzhMI2L1uZzTQLYgOHn0/bZ6+OsxmqCxCGmaH0AhkhZ8MUiDq9BNo0XLwH9XhebX63Ehckix7RHmS8UgS2NManY9jq8RGhopT9XCpjXyWBKlyeC4hWqIzFfGKhGYiisG8O8USlMyscShI=$DINGLJ-ENCODE-END$",cleanStar:"$DINGLJ-ENCODE-START$Bj51aYesnCjyim5cT7pdLKjThgnZfsKDDLxiNqTuJ/IhbO77CTdtM6iu/MVw5zQp1uOfYgCxcrle66tYqxN81X1Qtibe3CygP4I748wpsyecfV9o/YoLQrg2qoFB3o4fl1AEVp9DMM/IclDxg1oeaNO/LX6Z2NoCG0UoGkql2Qw=$DINGLJ-ENCODE-END$",cleanHistory:"$DINGLJ-ENCODE-START$EeMnITLGUJwPHrId8pwpCJ/jy0KEXd/AroYxTZwuhKAo0EyEbVwq+eESKSx6jx9PqEpW8+h1vJgorUoid+jX70x1mDQZuBwuVWktbl6sudYqt7SQP0qJOHEq17WQBw6D9lJJSJuYWwTELWs845nxZ2En1SBReAKURkD54ScRqBY=$DINGLJ-ENCODE-END$",downloadCase:"$DINGLJ-ENCODE-START$lkmbGrAz2LxSPxh8AJkFTgPe6x058gNnyeX9yv9w8dx06JU31A0EIrg/4tQosWjNMoqGLNu1V9yxlhgoDOLjh/UTmRLszsnZIsTK2msxFpCfxhZhvYWYGj34IkL79W8CxEjPL6z+ox8mK59TC1QpMY4pllbWs35tH6w1c91byJ4=$DINGLJ-ENCODE-END$",defaultStep:"$DINGLJ-ENCODE-START$Q6eohqxWFpFms718+VPhMWR0CNFaT91cMy0d+kKzhaYDt9N/2tmYQPcbS1KfVn3pOwUr25Cg5+rAAw4n6H1XZB7QBB2f4/lR99eYFXUdB7Zh1zgBKkzttTV6lyAayaUwtRjoqsBPEI/9S7IdDRW+oV2/kfFJbJ18ocFo+2McLBs=$DINGLJ-ENCODE-END$",erpLog:"$DINGLJ-ENCODE-START$jJ1scCKQDvNZr/H5lGFn6BVhHiEk1tJklyNqamgon9yO3zqVCTiCQPijfuPrjhUosO/C0lpTg3QuB9lhXCx9uygq/8rFs1gijCTDuMfnAIPrYBtG9koCj5y/UyX6fJVt5I8o8kC80NcG6prR1eIu23PQus9c0JfMv9AZUOqKujc=$DINGLJ-ENCODE-END$",logs:"$DINGLJ-ENCODE-START$IF47MuWBN7QYR9ydRngvPZDZ69QwK/XeFU6mHLjOSdVnzXeL1PhXPLoiIzDZaiAdXOouoWm6xDWP1LxoTQKUwTxlqtxuYvNqzQHXMJqp6LAkb+2QHP2oMYqfXCGldY5yEqbXRmPRs4O2n+VpWeKVwgpSxYLIK464fZpLSSEcg1Q=$DINGLJ-ENCODE-END$",line:"$DINGLJ-ENCODE-START$Jgy1TR4mLMLnchNJZTCrVq9fLxd4DquD1AMqfgJQcOjOKgUPcGsIOMIUWB2MYIPNi4qVob8YNlsRknTztHJfuXNuyC5Gr13z2RtTNdFsd3CZJbHjpFY3d0J89SP2+AkEpNLrzK1QF8tuy8+NVZWhPiH+UbA1A10RIv7dXfadSFw=$DINGLJ-ENCODE-END$",step:"$DINGLJ-ENCODE-START$ja11bLWTZPj5HqhD950Ix/O/WWL4H/gJcx5wWBfy4viWdkXEl9SaKmcgsG6aedaksS5LO+LjlTCUe+yDi9GI1iuMNKG+7UzJbMv0jYZCrhLeqXgz730KtTOWsVGD+kZ1YhjO9ezQgMAlinCadYbcK8IjQbqGV6P8WpFVP43HAGY=$DINGLJ-ENCODE-END$"},matchList:["$DINGLJ-ENCODE-START$UyG00sHx8Apbgn6MXM0f7aibEmew3u70KUOykuQA3CJsxsoIER04DQ6NX1LX/551nsNFOpy3iloY+WXNkWf3/2MRnolcAzegkKM+Hzs0MadWBaSVVM3Q8iCKQTxCjRBRFekbtsdQlxWTkMXnfHq1gnBbsGWxmmI5GP+TqEBsRTA=$DINGLJ-SPLIT-FLAG$UX6BfmTvvovynsJoamg3kjT6t+jRSGbyQQxBfTwiB4LzMDrbFRJhruxpNwZT4d3qB6vOkXbmfxZWfE8jh2DkZhNYtl8XSeUHllBn1oICAl0800OJvEt9VJ7Y4t8zMst+DKCyH5emGawJl7+hdrqgoZFCBnUKBOAT8DONUhkdpII=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$gF85AogSaq4c6MALKAzm8kBuP9oJNVGQvdB7FEEP5xQXY4UaGctQrRA81r2LXPuuNKLNJsG3jprmd84Axg5dLuZDuiuRFN8yoSeXTZD0fGFj06+/DZX0f1k4iEGZ8ZY2BZDRbdy/mnE1YwPlc4BLCaSIyprB1dsCknip20NiRxA=$DINGLJ-SPLIT-FLAG$LgDH6iJHIxCPE51XSdQLnCD8Y+UTHeZcYvRfUL7uw3i7Q6LtGsubT4w9hK1OWnW7J5s/Sd8fXk8sBEesV6giqJ6tq5qijzC22pbnSPNKcpwDcVaIrQYEr1H6CbGFGEc7stc5276imVyrPudx5mFpTrwikOjBKMp0J7V1jRYHhaE=$DINGLJ-ENCODE-END$"]}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{"use strict";n(726),n(384),n(144),n(374),n(343),n(963);var t=function(){function t(){this.meta=new o}return t.prototype.$emit=function(t,e){},t.prototype.getImg=function(t){return window.imgUrl(t)},t.prototype.emit=function(t,e){this.$emit(t,{value:e,vid:this.vid})},t.prototype.build=function(){var t=this,e=new this.meta.clazz,n={data:function(){var n={vid:"",name:t.name};if(t.meta.hasField())for(var i=0,o=t.meta.fieldNames;i<o.length;i++){var r=o[i];n[r]=e[r]}return n}};if(this.meta.hasMounted()&&(n.mounted=e[this.meta.hockMounted]),this.meta.hasTemplate()&&(n.template=e[this.meta.template]),n.methods={getImg:this.getImg,emit:this.emit},this.meta.hasMethod())for(var i=0,o=this.meta.methodNames;i<o.length;i++){var r=o[i];n.methods[r]=e[r]}if(this.meta.hasCompute()){n.computed={};for(var s=0,a=this.meta.computeInfos;s<a.length;s++){var u=a[s];n.computed[u.key]=u.func}}if(this.meta.hasProp()&&(n.props=this.meta.props),this.meta.hasWatch()){n.watch={};for(var l=0,c=this.meta.watchInfos;l<c.length;l++){var h=c[l];n.watch[h.field]={handler:e[h.resolve],deep:h.deep}}}return this.meta.hasComponents()&&(n.components=this.meta.components),window.registVue(this.type,n),n},t}();window.AbstractComponent=t;const e=t;window.LangItem=function(t,e){this.en=t,this.zh=e};var i=function(){function t(){this.fieldNames=[],this.methodNames=[],this.computeInfos=[],this.props={},this.components={},this.hockMounted="",this.template="",this.watchInfos=[]}return t.prototype.hasWatch=function(){return this.watchInfos.length>0},t.prototype.hasField=function(){return this.fieldNames.length>0},t.prototype.hasMethod=function(){return this.methodNames.length>0},t.prototype.hasCompute=function(){return this.computeInfos.length>0},t.prototype.hasProp=function(){return Object.keys(this.props).length>0},t.prototype.hasComponents=function(){return Object.keys(this.components).length>0},t.prototype.hasMounted=function(){return""!=this.hockMounted},t.prototype.hasTemplate=function(){return""!=this.template},t}();window.MetaInfo=i;const o=i;var r=function(){function t(){}return t.getComponent=function(n){var i=n;if(null!=t.lastComponentType&&t.lastComponentType==i||(n?t.lastComponentType=i:i=t.lastComponentType),t.map.has(i))return t.map.get(i);var o=new e;return o.type=i,t.map.set(i,o),o},t.map=new Map,t.lastComponentName="",t.lastComponentType=null,t}();window.Registry=r;const s=r;var a=function(t,e,n){void 0===n&&(n=function(){return!0}),this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=n};window.RightMenu=a;const u=a;var l;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress"}(l||(l={})),window.ComponentType=l;const c=l;var h;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(h||(h={})),window.RsaConst=h;const p=h;String.prototype.encrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub);for(var e="'".concat(p.flag_start),n=this;;){if(n.length<100){e+=window.$rsa.encrypt(n,t);break}var i=n.substring(0,100);n=n.substring(100),e="".concat(e).concat(window.$rsa.encrypt(i,t)).concat(p.flag_split)}return"".concat(e).concat(p.flag_end,"'")},String.prototype.decrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri);var e=this.startsWith(p.flag_start);if(e!=this.endsWith(p.flag_end))return"加密配置错误: ".concat(this).err(),this;if(e){for(var n="",i=0,o=this.replace(p.flag_start,"").replace(p.flag_end,"").split(p.flag_split);i<o.length;i++){var r=o[i];n+=window.$rsa.decrypt(r,t)}return n}return this},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(){window.$tip.info(this,2e3,"10%")},String.prototype.warn=function(){window.$tip.warn(this,2e3,"10%")},String.prototype.err=function(){window.$tip.err(this,2e3,"10%")};var d={eventPool:{},eventQueue:{},sendMsg:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n));var o=window.$queue.eventPool[i];if(Array.isArray(o)){if(1==o.length)return o[0](e);for(var r=[],s=0,a=o;s<a.length;s++){var u=a[s];r.push(u(e))}}else window.pushToArrayInObject(window.$queue.eventQueue,i,e)},on:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n)),window.pushToArrayInObject(window.$queue.eventPool,i,e);var o=window.$queue.eventQueue[i];if(Array.isArray(i))for(var r=0,s=o;r<s.length;r++)e(s[r])}};window.$queue=d;var f={distoryPopMsg:function(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))},createPopMsg:function(t,e,n,i){var o=this;void 0===n&&(n=2e3),void 0===i&&(i="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=i;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)this.distoryPopMsg(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",e),u.time=Date.now();var l=document.createElement("div");l.classList.add("dinglj-v-pop-msg-icon",e),l.innerText=e.substring(0,1).toUpperCase(),u.appendChild(l),u.innerHTML+=t,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){o.distoryPopMsg(u,r)}),n)},info:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"info",e,n)},warn:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"warn",e,n)},err:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"err",e,n)}};window.$tip=f;var g="0123456789abcdefghijklmnopqrstuvwxyz";function v(t){return g.charAt(t)}function y(t,e){return t&e}function m(t,e){return t|e}function w(t,e){return t^e}function b(t,e){return t&~e}function S(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function T(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var x,E="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function O(t){var e,n,i="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),i+=E.charAt(n>>6)+E.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),i+=E.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),i+=E.charAt(n>>2)+E.charAt((3&n)<<4));(3&i.length)>0;)i+="=";return i}function D(t){var e,n="",i=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=E.indexOf(t.charAt(e));r<0||(0==i?(n+=v(r>>2),o=3&r,i=1):1==i?(n+=v(o<<2|r>>4),o=15&r,i=2):2==i?(n+=v(o),n+=v(r>>2),o=3&r,i=3):(n+=v(o<<2|r>>4),n+=v(15&r),i=0))}return 1==i&&(n+=v(o<<2)),n}var C,I={decode:function(t){var e;if(void 0===C){for(C=Object.create(null),e=0;e<64;++e)C["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(C["-"]=62,C._=63,e=0;e<9;++e)C["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],i=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=C[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);i|=r,++o>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,o=0):i<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=I.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return I.decode(t)}},N=1e13,j=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,i,o=this.buf,r=o.length;for(n=0;n<r;++n)(i=o[n]*t+e)<N?e=0:i-=(e=0|i/N)*N,o[n]=i;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,i=this.buf,o=i.length;for(e=0;e<o;++e)(n=i[e]-t)<0?(n+=N,t=1):t=0,i[e]=n;for(;0===i[i.length-1];)i.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),i=e.length-2;i>=0;--i)n+=(N+e[i]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*N+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),A=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,R=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function P(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var L,B=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var i="",o=t;o<e;++o)if(i+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:i+="  ";break;case 15:i+="\n";break;default:i+=" "}return i},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var i=this.get(n);if(i<32||i>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",i=t;i<e;++i)n+=String.fromCharCode(this.get(i));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",i=t;i<e;){var o=this.get(i++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(i++)):String.fromCharCode((15&o)<<12|(63&this.get(i++))<<6|63&this.get(i++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,i,o="",r=t;r<e;)n=this.get(r++),i=this.get(r++),o+=String.fromCharCode(n<<8|i);return o},t.prototype.parseTime=function(t,e,n){var i=this.parseStringISO(t,e),o=(n?A:R).exec(i);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),i=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(i+=":"+o[5],o[6]&&(i+=":"+o[6],o[7]&&(i+="."+o[7]))),o[8]&&(i+=" UTC","Z"!=o[8]&&(i+=o[8],o[9]&&(i+=":"+o[9]))),i):"Unrecognized time: "+i},t.prototype.parseInteger=function(t,e){for(var n,i=this.get(t),o=i>127,r=o?255:0,s="";i==r&&++t<e;)i=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(s=i,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}o&&(i-=256);for(var a=new j(i),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var i=this.get(t),o="("+((e-t-1<<3)-i)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?i:0,l=7;l>=u;--l)r+=a>>l&1?"1":"0";if(r.length>n)return o+P(r,n)}return o+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return P(this.parseStringISO(t,e),n);var i=e-t,o="("+i+" byte)\n";i>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return i>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var i="",o=new j,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===i)if((o=o.simplify())instanceof j)o.sub(80),i="2."+o.toString();else{var u=o<80?o<40?0:1:2;i=u+"."+(o-40*u)}else i+="."+o.toString();if(i.length>n)return P(i,n);o=new j,r=0}}return r>0&&(i+=".incomplete"),i},t}(),V=function(){function t(t,e,n,i,o){if(!(i instanceof q))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=i,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return P(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return P(this.stream.parseStringISO(e,e+n),t);case 30:return P(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,i=this.sub.length;n<i;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var i=0;i<n;++i)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof B?e:new B(e,0);var i=new B(n),o=new q(n),r=t.decodeLength(n),s=n.pos,a=s-i.pos,u=null,l=function(){var e=[];if(null!==r){for(var i=s+r;n.pos<i;)e[e.length]=t.decode(n);if(n.pos!=i)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)u=l();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=l();for(var c=0;c<u.length;++c)if(u[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(i,a,r,o,u)},t}(),q=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new j;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),M=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],_=(1<<26)/M[M.length-1],k=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,i=(1<<e)-1,o=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,r=v(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&i,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(r+=v(n));return o?r:"0"},t.prototype.negate=function(){var e=G();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+Q(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=G();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new H(e):new K(e),this.exp(t,n)},t.prototype.clone=function(){var t=G();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,i=this.DB-t*this.DB%8,o=0;if(t-- >0)for(i<this.DB&&(n=this[t]>>i)!=(this.s&this.DM)>>i&&(e[o++]=n|this.s<<this.DB-i);t>=0;)i<8?(n=(this[t]&(1<<i)-1)<<8-i,n|=this[--t]>>(i+=this.DB-8)):(n=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=G();return this.bitwiseTo(t,y,e),e},t.prototype.or=function(t){var e=G();return this.bitwiseTo(t,m,e),e},t.prototype.xor=function(t){var e=G();return this.bitwiseTo(t,w,e),e},t.prototype.andNot=function(t){var e=G();return this.bitwiseTo(t,b,e),e},t.prototype.not=function(){for(var t=G(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=G();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=G();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+S(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=T(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,m)},t.prototype.clearBit=function(t){return this.changeBit(t,b)},t.prototype.flipBit=function(t){return this.changeBit(t,w)},t.prototype.add=function(t){var e=G();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=G();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=G();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=G();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=G();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=G(),n=G();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,i,o=t.bitLength(),r=Y(1);if(o<=0)return r;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new H(e):e.isEven()?new F(e):new K(e);var s=[],a=3,u=n-1,l=(1<<n)-1;if(s[1]=i.convert(this),n>1){var c=G();for(i.sqrTo(s[1],c);a<=l;)s[a]=G(),i.mulTo(c,s[a-2],s[a]),a+=2}var h,p,d=t.t-1,f=!0,g=G();for(o=Q(t[d])-1;d>=0;){for(o>=u?h=t[d]>>o-u&l:(h=(t[d]&(1<<o+1)-1)<<u-o,d>0&&(h|=t[d-1]>>this.DB+o-u)),a=n;0==(1&h);)h>>=1,--a;if((o-=a)<0&&(o+=this.DB,--d),f)s[h].copyTo(r),f=!1;else{for(;a>1;)i.sqrTo(r,g),i.sqrTo(g,r),a-=2;a>0?i.sqrTo(r,g):(p=r,r=g,g=p),i.mulTo(g,s[h],r)}for(;d>=0&&0==(t[d]&1<<o);)i.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--d)}return i.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),r=Y(1),s=Y(0),a=Y(0),u=Y(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(o)>=0?(i.subTo(o,i),n&&r.subTo(a,r),s.subTo(u,s)):(o.subTo(i,o),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=o.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new $)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var i=e;e=n,n=i}var o=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=M[M.length-1]){for(e=0;e<M.length;++e)if(n[0]==M[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<M.length;){for(var i=M[e],o=e+1;o<M.length&&i<_;)i*=M[o++];for(i=n.modInt(i);e<o;)if(i%M[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var i;if(16==n)i=4;else if(8==n)i=3;else if(256==n)i=8;else if(2==n)i=1;else if(32==n)i=5;else{if(4!=n)return void this.fromRadix(e,n);i=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==i?255&+e[o]:Z(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,i=this.DB-n,o=(1<<i)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>i|s,s=(this[a]&o)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var i=t%this.DB,o=this.DB-i,r=(1<<i)-1;e[0]=this[n]>>i;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<o,e[s-n]=this[s]>>i;i>0&&(e[this.t-n-1]|=(this.s&r)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]-t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i-=t[n],e[n++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[n++]=this.DV+i:i>0&&(e[n++]=i),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var i=this.abs(),o=e.abs(),r=i.t;for(n.t=r+o.t;--r>=0;)n[r]=0;for(r=0;r<o.t;++r)n[r+i.t]=i.am(0,o[r],n,r,0,i.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var i=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,i,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,i){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=n&&n.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=G());var s=G(),a=this.s,u=e.s,l=this.DB-Q(o[o.t-1]);l>0?(o.lShiftTo(l,s),r.lShiftTo(l,i)):(o.copyTo(s),r.copyTo(i));var c=s.t,h=s[c-1];if(0!=h){var p=h*(1<<this.F1)+(c>1?s[c-2]>>this.F2:0),d=this.FV/p,f=(1<<this.F1)/p,g=1<<this.F2,v=i.t,y=v-c,m=null==n?G():n;for(s.dlShiftTo(y,m),i.compareTo(m)>=0&&(i[i.t++]=1,i.subTo(m,i)),t.ONE.dlShiftTo(c,m),m.subTo(s,s);s.t<c;)s[s.t++]=0;for(;--y>=0;){var w=i[--v]==h?this.DM:Math.floor(i[v]*d+(i[v-1]+g)*f);if((i[v]+=s.am(0,w,i,y,0,c))<w)for(s.dlShiftTo(y,m),i.subTo(m,i);i[v]<--w;)i.subTo(m,i)}null!=n&&(i.drShiftTo(c,n),a!=u&&t.ZERO.subTo(n,n)),i.t=c,i.clamp(),l>0&&i.rShiftTo(l,i),a<0&&t.ZERO.subTo(i,i)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var i=G(),o=G(),r=n.convert(this),s=Q(e)-1;for(r.copyTo(i);--s>=0;)if(n.sqrTo(i,o),(e&1<<s)>0)n.mulTo(o,r,i);else{var a=i;i=o,o=a}return n.revert(i)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=Y(n),o=G(),r=G(),s="";for(this.divRemTo(i,o,r);o.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var i=this.chunkSize(n),o=Math.pow(n,i),r=!1,s=0,a=0,u=0;u<e.length;++u){var l=Z(e,u);l<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+l,++s>=i&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,i){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),n.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var i,o,r=Math.min(t.t,this.t);for(i=0;i<r;++i)n[i]=e(this[i],t[i]);if(t.t<this.t){for(o=t.s&this.DM,i=r;i<this.t;++i)n[i]=e(this[i],o);n.t=this.t}else{for(o=this.s&this.DM,i=r;i<t.t;++i)n[i]=e(o,t[i]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,n,i),i},t.prototype.addTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]+t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i+=t[n],e[n++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[n++]=i:i<-1&&(e[n++]=this.DV+i),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(var o=n.t-this.t;i<o;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(o=Math.min(t.t,e);i<o;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var i=n.t=this.t+t.t-e;for(n.s=0;--i>=0;)n[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)n[this.t+i-e]=this.am(e-i,t[i],n,0,0,this.t+i-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var i=this.t-1;i>=0;--i)n=(e*n+this[i])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),i=n.getLowestSetBit();if(i<=0)return!1;var o=n.shiftRight(i);(e=e+1>>1)>M.length&&(e=M.length);for(var r=G(),s=0;s<e;++s){r.fromInt(M[Math.floor(Math.random()*M.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<i&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=G();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(n.compareTo(i)<0){var o=n;n=i,i=o}var r=n.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),i.rShiftTo(s,i));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),n.compareTo(i)>=0?(n.subTo(i,n),n.rShiftTo(1,n)):(i.subTo(n,i),i.rShiftTo(1,i)),n.signum()>0?setTimeout(a,0):(s>0&&i.lShiftTo(s,i),setTimeout((function(){e(i)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,i,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),$=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),H=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),K=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=G();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(k.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=G();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],i=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),F=function(){function t(t){this.m=t,this.r2=G(),this.q3=G(),k.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=G();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function G(){return new k(null)}function z(t,e){return new k(t,e)}var U="undefined"!=typeof navigator;U&&"Microsoft Internet Explorer"==navigator.appName?(k.prototype.am=function(t,e,n,i,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],l=this[t++]>>15,c=a*u+l*s;o=((u=s*u+((32767&c)<<15)+n[i]+(1073741823&o))>>>30)+(c>>>15)+a*l+(o>>>30),n[i++]=1073741823&u}return o},L=30):U&&"Netscape"!=navigator.appName?(k.prototype.am=function(t,e,n,i,o,r){for(;--r>=0;){var s=e*this[t++]+n[i]+o;o=Math.floor(s/67108864),n[i++]=67108863&s}return o},L=26):(k.prototype.am=function(t,e,n,i,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],l=this[t++]>>14,c=a*u+l*s;o=((u=s*u+((16383&c)<<14)+n[i]+o)>>28)+(c>>14)+a*l,n[i++]=268435455&u}return o},L=28),k.prototype.DB=L,k.prototype.DM=(1<<L)-1,k.prototype.DV=1<<L,k.prototype.FV=Math.pow(2,52),k.prototype.F1=52-L,k.prototype.F2=2*L-52;var J,X,W=[];for(J="0".charCodeAt(0),X=0;X<=9;++X)W[J++]=X;for(J="a".charCodeAt(0),X=10;X<36;++X)W[J++]=X;for(J="A".charCodeAt(0),X=10;X<36;++X)W[J++]=X;function Z(t,e){var n=W[t.charCodeAt(e)];return null==n?-1:n}function Y(t){var e=G();return e.fromInt(t),e}function Q(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}k.ZERO=Y(0),k.ONE=Y(1);var tt,et,nt=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,i;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,i=this.S[e],this.S[e]=this.S[n],this.S[n]=i;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),it=null;if(null==it){it=[],et=0;var ot=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var rt=new Uint32Array(256);for(window.crypto.getRandomValues(rt),ot=0;ot<rt.length;++ot)it[et++]=255&rt[ot]}var st=0,at=function(t){if((st=st||0)>=256||et>=256)window.removeEventListener?window.removeEventListener("mousemove",at,!1):window.detachEvent&&window.detachEvent("onmousemove",at);else try{var e=t.x+t.y;it[et++]=255&e,st+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",at,!1):window.attachEvent&&window.attachEvent("onmousemove",at))}function ut(){if(null==tt){for(tt=new nt;et<256;){var t=Math.floor(65536*Math.random());it[et++]=255&t}for(tt.init(it),et=0;et<it.length;++et)it[et]=0;et=0}return tt.next()}var lt=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=ut()},t}(),ct=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=t.length-1;i>=0&&e>0;){var o=t.charCodeAt(i--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var r=new lt,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new k(n)}(t,e);if(null==n)return null;var i=this.doPublic(n);if(null==i)return null;for(var o=i.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16),this.d=z(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,i,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16),this.d=z(n,16),this.p=z(i,16),this.q=z(o,16),this.dmp1=z(r,16),this.dmq1=z(s,16),this.coeff=z(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new lt,i=t>>1;this.e=parseInt(e,16);for(var o=new k(e,16);;){for(;this.p=new k(t-i,1,n),0!=this.p.subtract(k.ONE).gcd(o).compareTo(k.ONE)||!this.p.isProbablePrime(10););for(;this.q=new k(i,1,n),0!=this.q.subtract(k.ONE).gcd(o).compareTo(k.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(k.ONE),a=this.q.subtract(k.ONE),u=s.multiply(a);if(0==u.gcd(o).compareTo(k.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=z(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),i=0;i<n.length&&0==n[i];)++i;if(n.length-i!=e-1||2!=n[i])return null;for(++i;0!=n[i];)if(++i>=n.length)return null;for(var o="";++i<n.length;){var r=255&n[i];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&n[i+1]),++i):(o+=String.fromCharCode((15&r)<<12|(63&n[i+1])<<6|63&n[i+2]),i+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var i=new lt,o=t>>1;this.e=parseInt(e,16);var r=new k(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(k.ONE),i=s.q.subtract(k.ONE),o=e.multiply(i);0==o.gcd(r).compareTo(k.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(i),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=G(),s.q.fromNumberAsync(o,1,i,(function(){s.q.subtract(k.ONE).gcda(r,(function(t){0==t.compareTo(k.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},l=function(){s.p=G(),s.p.fromNumberAsync(t-o,1,i,(function(){s.p.subtract(k.ONE).gcda(r,(function(t){0==t.compareTo(k.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(l,0)}))}))};setTimeout(l,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var i=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,i="",o=0;o<n;o+=2)i+="ff";return z("0001"+i+"00"+t,16)}((ht[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==i)return null;var o=this.doPrivate(i);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var i=z(e,16),o=this.doPublic(i);return null==o?null:function(t){for(var e in ht)if(ht.hasOwnProperty(e)){var n=ht[e],i=n.length;if(t.substr(0,i)==n)return t.substr(i)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),ht={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},pt={};pt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var i=function(){};if(i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var n=s[o],i=e[n];"function"==typeof i&&i!=Object.prototype[n]&&(t[n]=i)}})}catch(t){}r(t.prototype,n)}}};var dt={};void 0!==dt.asn1&&dt.asn1||(dt.asn1={}),dt.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var i="",o=0;o<n;o++)i+="f";e=new k(i,16).xor(t).add(k.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=dt.asn1,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,l=e.DERUTF8String,c=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var S=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+S+":"))throw"undefined key: "+S;if("bool"==S)return new n(t[S]);if("int"==S)return new i(t[S]);if("bitstr"==S)return new o(t[S]);if("octstr"==S)return new r(t[S]);if("null"==S)return new s(t[S]);if("oid"==S)return new a(t[S]);if("enum"==S)return new u(t[S]);if("utf8str"==S)return new l(t[S]);if("numstr"==S)return new c(t[S]);if("prnstr"==S)return new h(t[S]);if("telstr"==S)return new p(t[S]);if("ia5str"==S)return new d(t[S]);if("utctime"==S)return new f(t[S]);if("gentime"==S)return new g(t[S]);if("seq"==S){for(var T=t[S],x=[],E=0;E<T.length;E++){var O=w(T[E]);x.push(O)}return new v({array:x})}if("set"==S){for(T=t[S],x=[],E=0;E<T.length;E++)O=w(T[E]),x.push(O);return new y({array:x})}if("tag"==S){var D=t[S];if("[object Array]"===Object.prototype.toString.call(D)&&3==D.length){var C=w(D[2]);return new m({tag:D[0],explicit:D[1],obj:C})}var I={};if(void 0!==D.explicit&&(I.explicit=D.explicit),void 0!==D.tag&&(I.tag=D.tag),void 0===D.obj)throw"obj shall be specified for 'tag'.";return I.obj=w(D.obj),new m(I)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},dt.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),i=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);i+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new k(i,2).toString(10),i="")}return e},dt.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new k(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);return i},dt.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},dt.asn1.DERAbstractString=function(t){dt.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},pt.lang.extend(dt.asn1.DERAbstractString,dt.asn1.ASN1Object),dt.asn1.DERAbstractTime=function(t){dt.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var i=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+i(String(o.getMonth()+1),2)+i(String(o.getDate()),2)+i(String(o.getHours()),2)+i(String(o.getMinutes()),2)+i(String(o.getSeconds()),2);if(!0===n){var a=o.getMilliseconds();if(0!=a){var u=i(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,i,o,r){var s=new Date(Date.UTC(t,e-1,n,i,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},pt.lang.extend(dt.asn1.DERAbstractTime,dt.asn1.ASN1Object),dt.asn1.DERAbstractStructured=function(t){dt.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},pt.lang.extend(dt.asn1.DERAbstractStructured,dt.asn1.ASN1Object),dt.asn1.DERBoolean=function(){dt.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},pt.lang.extend(dt.asn1.DERBoolean,dt.asn1.ASN1Object),dt.asn1.DERInteger=function(t){dt.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=dt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new k(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(dt.asn1.DERInteger,dt.asn1.ASN1Object),dt.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=dt.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}dt.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var i="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),i+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+i},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},pt.lang.extend(dt.asn1.DERBitString,dt.asn1.ASN1Object),dt.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=dt.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}dt.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},pt.lang.extend(dt.asn1.DEROctetString,dt.asn1.DERAbstractString),dt.asn1.DERNull=function(){dt.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},pt.lang.extend(dt.asn1.DERNull,dt.asn1.ASN1Object),dt.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new k(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};dt.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=i},this.setValueName=function(t){var e=dt.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},pt.lang.extend(dt.asn1.DERObjectIdentifier,dt.asn1.ASN1Object),dt.asn1.DEREnumerated=function(t){dt.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=dt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new k(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(dt.asn1.DEREnumerated,dt.asn1.ASN1Object),dt.asn1.DERUTF8String=function(t){dt.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},pt.lang.extend(dt.asn1.DERUTF8String,dt.asn1.DERAbstractString),dt.asn1.DERNumericString=function(t){dt.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},pt.lang.extend(dt.asn1.DERNumericString,dt.asn1.DERAbstractString),dt.asn1.DERPrintableString=function(t){dt.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},pt.lang.extend(dt.asn1.DERPrintableString,dt.asn1.DERAbstractString),dt.asn1.DERTeletexString=function(t){dt.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},pt.lang.extend(dt.asn1.DERTeletexString,dt.asn1.DERAbstractString),dt.asn1.DERIA5String=function(t){dt.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},pt.lang.extend(dt.asn1.DERIA5String,dt.asn1.DERAbstractString),dt.asn1.DERUTCTime=function(t){dt.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},pt.lang.extend(dt.asn1.DERUTCTime,dt.asn1.DERAbstractTime),dt.asn1.DERGeneralizedTime=function(t){dt.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},pt.lang.extend(dt.asn1.DERGeneralizedTime,dt.asn1.DERAbstractTime),dt.asn1.DERSequence=function(t){dt.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},pt.lang.extend(dt.asn1.DERSequence,dt.asn1.DERAbstractStructured),dt.asn1.DERSet=function(t){dt.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},pt.lang.extend(dt.asn1.DERSet,dt.asn1.DERAbstractStructured),dt.asn1.DERTaggedObject=function(t){dt.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},pt.lang.extend(dt.asn1.DERTaggedObject,dt.asn1.ASN1Object);var ft,gt,vt=(ft=function(t,e){return ft=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},ft(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}ft(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),yt=function(t){function e(n){var i=t.call(this)||this;return n&&("string"==typeof n?i.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&i.parsePropertiesFrom(n)),i}return vt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,i=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===x){var n="0123456789ABCDEF";for(x={},e=0;e<16;++e)x[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)x[n.charAt(e)]=e;for(e=0;e<8;++e)x[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=x[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(i[i.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return i}(t):I.unarmor(t),o=V.decode(i);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=z(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=o.sub[3].getHexStringValue();this.d=z(r,16);var s=o.sub[4].getHexStringValue();this.p=z(s,16);var a=o.sub[5].getHexStringValue();this.q=z(a,16);var u=o.sub[6].getHexStringValue();this.dmp1=z(u,16);var l=o.sub[7].getHexStringValue();this.dmq1=z(l,16);var c=o.sub[8].getHexStringValue();this.coeff=z(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=z(e,16),n=h.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=z(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new dt.asn1.DERInteger({int:0}),new dt.asn1.DERInteger({bigint:this.n}),new dt.asn1.DERInteger({int:this.e}),new dt.asn1.DERInteger({bigint:this.d}),new dt.asn1.DERInteger({bigint:this.p}),new dt.asn1.DERInteger({bigint:this.q}),new dt.asn1.DERInteger({bigint:this.dmp1}),new dt.asn1.DERInteger({bigint:this.dmq1}),new dt.asn1.DERInteger({bigint:this.coeff})]};return new dt.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return O(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new dt.asn1.DERSequence({array:[new dt.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new dt.asn1.DERNull]}),e=new dt.asn1.DERSequence({array:[new dt.asn1.DERInteger({bigint:this.n}),new dt.asn1.DERInteger({int:this.e})]}),n=new dt.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new dt.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return O(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(ct),mt="undefined"!=typeof process?null===(gt=process.env)||void 0===gt?void 0:gt.npm_package_version:void 0;const wt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new yt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(D(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return O(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return O(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,D(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new yt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=mt,t}();function bt(t,e){return"object"==typeof t?function(t,e){for(let n of Object.keys(t))t[n]=bt(t[n],e);return t}(t,e):"string"==typeof t?t.decrypt(e):void 0}null==window.$rsa&&(window.$rsa={}),window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const n=new wt;return n.setPrivateKey(e),n.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const n=new wt;return n.setPrivateKey(e),n.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return bt(t,e)},window.$rsa;var St={};function Tt(t,e){s.getComponent().meta.fieldNames.push(e)}function xt(t,e,n){s.getComponent().meta.methodNames.push(e)}function Et(t,e,n){return void 0===n&&(n=!1),function(i,o){s.getComponent().meta.props[o]={type:t,default:e,required:n}}}function Ot(t,e){s.getComponent().meta.template=e}function Dt(t,e){return function(n,i,o){var r=s.getComponent(e);r.meta.hockMounted=i,r.meta.clazz=t,r.name=e}}function Ct(t){return function(e,n){s.getComponent().meta.computeInfos.push({key:n,func:t})}}St.registRightClick=function(t,e,n){var i="right-click-menu-".concat(e);t.addEventListener("contextmenu",(function(t){for(var e=0,o=window.byClass("right-menu");e<o.length;e++)o[e].remove();t.preventDefault();var r=function(t){for(var e=document.createElement("div"),n=function(t){if(!t||!t.isDisplay())return"continue";var n=document.createElement("div");n.id=t.id,n.classList.add("right-click-item"),n.innerText=t.label,n.addEventListener("click",(function(){t.event()})),e.appendChild(n)},i=0,o=t.items;i<o.length;i++)n(o[i]);return e}(n);r.id=i,r.classList.add("right-menu"),r.style.left=t.clientX+"px",r.style.top=t.clientY+"px",document.body.appendChild(r)}))},document.addEventListener("click",(function(){for(var t=0,e=window.byClass("right-menu");t<e.length;t++)e[t].remove()})),window.$menu=St;var It,Nt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},At=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$emit(\'on-click\')">\n        <slot></slot>\n    </div>',e}Nt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:this.xType.equalsIgnoreCase("primary"),cancel:this.xType.equalsIgnoreCase("cancel"),warn:this.xType.equalsIgnoreCase("warn"),error:this.xType.equalsIgnoreCase("error")}},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.xSize.equalsIgnoreCase("small")?"1px":this.xSize.equalsIgnoreCase("normal")?"2px":"3px"}},jt([Dt(e,c.ButtonX)],e.prototype,"mounted",null),jt([Ot],e.prototype,"template",void 0),jt([Et(String,"normal")],e.prototype,"xSize",void 0),jt([Et(String,"primary")],e.prototype,"xType",void 0),jt([xt],e.prototype,"getClass",null),jt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Rt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Pt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',e.value="",e}At(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("dinglj-v-input-text::clear",(function(){t.value=""}),this.vid),window.$queue.on("dinglj-v-input-text::focus",(function(){window.byId(t.vid).children[0].focus()}),this.vid)},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},e.prototype.setValue=function(t,e){this.value=t,this.emit("on-change",t),"input"==e&&this.emit("on-input",t),"blur"==e&&(this.emit("on-blur",t),this.emit("on-over",t)),"enter"==e&&(this.emit("on-enter",t),this.emit("on-over",t))},Rt([Dt(e,c.InputX)],e.prototype,"mounted",null),Rt([Ot],e.prototype,"template",void 0),Rt([Tt],e.prototype,"value",void 0),Rt([xt],e.prototype,"getStyle",null),Rt([xt],e.prototype,"setValue",null),Rt([Et(String,"normal")],e.prototype,"xSize",void 0),Rt([Et(String,"")],e.prototype,"caption",void 0),Rt([Et(String,"")],e.prototype,"placeholder",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Lt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Bt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',e.active=!1,e}Pt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},e.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},e.prototype.onclicked=function(){this.active=!this.active,this.emit("on-change",this.active),this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info()},Lt([Dt(e,c.SwitchX)],e.prototype,"mounted",null),Lt([Ot],e.prototype,"template",void 0),Lt([Tt],e.prototype,"active",void 0),Lt([xt],e.prototype,"getStyle",null),Lt([xt],e.prototype,"getClass",null),Lt([xt],e.prototype,"onclicked",null),Lt([Et(String,"normal")],e.prototype,"xSize",void 0),Lt([Et(String,"")],e.prototype,"preText",void 0),Lt([Et(String,"")],e.prototype,"postText",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Vt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},qt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="caption" :id="vid">\n        <input :placeholder="placeholder" type="text" :value="list.includesIgnoreCase(value) ? getValue(value) : \'\'"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in list" @click="setValue(item)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n    </div>',e.value=null,e}Bt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},Vt([Dt(e,c.ComboX)],e.prototype,"mounted",null),Vt([Ot],e.prototype,"template",void 0),Vt([Tt],e.prototype,"value",void 0),Vt([xt],e.prototype,"setValue",null),Vt([xt],e.prototype,"getStyle",null),Vt([Et(Array,[])],e.prototype,"list",void 0),Vt([Et(String,"normal")],e.prototype,"xSize",void 0),Vt([Et(String,"")],e.prototype,"caption",void 0),Vt([Et(String,"")],e.prototype,"placeholder",void 0),Vt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0),Vt([Et(Function,(function(t){return t}))],e.prototype,"getValue",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Mt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},_t=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',e.value=null,e}qt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},Mt([Dt(e,c.NavigatorX)],e.prototype,"mounted",null),Mt([Ot],e.prototype,"template",void 0),Mt([Tt],e.prototype,"value",void 0),Mt([xt],e.prototype,"setValue",null),Mt([Ct((function(){return null!=this.value?!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.setValue(this.list[0]):this.list.length>0&&this.setValue(this.list[0]),this.value}))],e.prototype,"validItem",void 0),Mt([Et(Array,[])],e.prototype,"list",void 0),Mt([Et(Object,null)],e.prototype,"default",void 0),Mt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),kt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},$t=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}_t(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},kt([Dt(e,c.ScrollerY)],e.prototype,"mounted",null),kt([Ot],e.prototype,"template",void 0),kt([Et(Number,0)],e.prototype,"size",void 0),kt([Et(Number,0)],e.prototype,"index",void 0),kt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ht=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Kt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :list="list" :get-caption="getCaption" @on-change="changed">\n        </i-navigator>\n        <div class="dinglj-v-navigator-right">\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :index="list.indexOf(active)" :size="list.length">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            <slot name="after"></slot>\n        </div>\n    </div>',e.active=null,e}$t(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name)},e.prototype.changed=function(t){this.active=t.value,this.emit("on-change",t)},Ht([Dt(e,c.NavigatorView)],e.prototype,"mounted",null),Ht([Ot],e.prototype,"template",void 0),Ht([Tt],e.prototype,"active",void 0),Ht([xt],e.prototype,"changed",null),Ht([Et(Array,[],!0)],e.prototype,"list",void 0),Ht([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ft=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Gt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',e.value=null,e}Kt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),window.$queue.on("tab-panel:next",(function(){var e=(t.index+1+t.list.length)%t.list.length;t.clicked(t.list[e],e)}),this.vid),window.$queue.on("tab-panel:to",(function(e){var n=t.list.filter((function(t){return JSON.stringify(t)==JSON.stringify(e)}));n.length>0&&t.clicked(n[0],t.list.indexOf(n[0]))}),this.vid)},e.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},e.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},e.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.emit("on-change",t),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],i=window.byId(n.getId(e));i&&(t.style.width="".concat(i.offsetWidth,"px"),t.style.left="".concat(i.offsetLeft,"px"))}),50))},Ft([Dt(e,c.TabPanelX)],e.prototype,"mounted",null),Ft([Ot],e.prototype,"template",void 0),Ft([Tt],e.prototype,"value",void 0),Ft([xt],e.prototype,"getClass",null),Ft([xt],e.prototype,"getId",null),Ft([xt],e.prototype,"clicked",null),Ft([Ct((function(){return!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.clicked(this.list[0],0),this.list.indexOf(this.value)}))],e.prototype,"index",void 0),Ft([Et(Array,[],!0)],e.prototype,"list",void 0),Ft([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),zt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Ut=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}Gt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},zt([Dt(e,c.ScrollerX)],e.prototype,"mounted",null),zt([Ot],e.prototype,"template",void 0),zt([Et(Number,0)],e.prototype,"size",void 0),zt([Et(Number,0)],e.prototype,"index",void 0),zt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Xt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :list="list" :get-caption="getCaption" @on-change="changed" @mounted="tabPanelLoaded">\n            <i-scroller-x :index="index" :size="list.length">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',e.value=null,e.tabPanelId="",e}Ut(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("tab-view:next",(function(){window.$queue.sendMsg("tab-panel:next",null,t.tabPanelId)}),this.vid),window.$queue.on("tab-view:to",(function(e){window.$queue.sendMsg("tab-panel:to",e,t.tabPanelId)}),this.vid)},e.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},e.prototype.changed=function(t){this.value!=t.value&&(this.value=t.value,this.emit("on-change",t))},Jt([Dt(e,c.TabView)],e.prototype,"mounted",null),Jt([Ot],e.prototype,"template",void 0),Jt([Tt],e.prototype,"value",void 0),Jt([Tt],e.prototype,"tabPanelId",void 0),Jt([xt],e.prototype,"tabPanelLoaded",null),Jt([xt],e.prototype,"changed",null),Jt([Ct((function(){return this.list.indexOfIgnoreCase(this.value)}))],e.prototype,"index",void 0),Jt([Et(Array,[],!0)],e.prototype,"list",void 0),Jt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Wt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Zt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-table" :id="vid">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" v-for="column in columns" :class="getClass(column)">\n                {{ getColumnCaption(column) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tbody">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in data" @click="checkOne(line)">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',e.cache={},e.checkAll=!1,e.checkedList=[],e.bestWidthCache=!1,e}Xt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",i={"dinglj-v-cell":!0};return i[e]=!0,i[n]=!0,this.cache[e]=i,i},e.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},e.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.data),this.checkAll=!this.checkAll},e.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var i=n.getColumnKey(e),o=n.getColumnCaption(e),r=[window.calcTxtWidth("".concat(o))];r.push.apply(r,n.data.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[i]=s+30},n=this,i=0,o=this.columns;i<o.length;i++)e(o[i]);return this.bestWidthCache},Wt([Dt(e,c.TableX)],e.prototype,"mounted",null),Wt([Ot],e.prototype,"template",void 0),Wt([Tt],e.prototype,"cache",void 0),Wt([Tt],e.prototype,"checkAll",void 0),Wt([Tt],e.prototype,"checkedList",void 0),Wt([Tt],e.prototype,"bestWidthCache",void 0),Wt([xt],e.prototype,"getClass",null),Wt([xt],e.prototype,"getStyle",null),Wt([xt],e.prototype,"doCheckAll",null),Wt([xt],e.prototype,"getBestWidth",null),Wt([Et(Array,[])],e.prototype,"flexColumns",void 0),Wt([Et(Array,[])],e.prototype,"data",void 0),Wt([Et(Boolean,!0)],e.prototype,"sequanceNum",void 0),Wt([Et(Boolean,!0)],e.prototype,"selectable",void 0),Wt([Et(Array,[])],e.prototype,"columns",void 0),Wt([Et(Function,(function(t){return t}))],e.prototype,"getColumnKey",void 0),Wt([Et(Function,(function(t){return t}))],e.prototype,"getColumnCaption",void 0),Wt([Et(Function,(function(t,e){return t[e]}))],e.prototype,"getCell",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Yt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'rt' }\" v-if=\"['lt', 'rt'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'rb' }\" v-if=\"['lb', 'rb'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",e}Zt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},e.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},Yt([Dt(e,c.ProgressX)],e.prototype,"mounted",null),Yt([Ot],e.prototype,"template",void 0),Yt([xt],e.prototype,"getContainerStyle",null),Yt([xt],e.prototype,"getProgressStyle",null),Yt([Et(String,"5px")],e.prototype,"height",void 0),Yt([Et(String,"100%")],e.prototype,"percent",void 0),Yt([Et(String,"lt")],e.prototype,"position",void 0),Yt([Et(String,"")],e.prototype,"caption",void 0)})(e),s.getComponent(c.ButtonX).build(),s.getComponent(c.InputX).build(),s.getComponent(c.SwitchX).build(),s.getComponent(c.ComboX).build(),s.getComponent(c.NavigatorX).build(),s.getComponent(c.ScrollerY).build(),s.getComponent(c.NavigatorView).build(),s.getComponent(c.TabPanelX).build(),s.getComponent(c.ScrollerX).build(),s.getComponent(c.TabView).build(),s.getComponent(c.TableX).build(),s.getComponent(c.ProgressX).build(),window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),n(818),function(t){t.Line="line",t.Step="step",t.History="history"}(It||(It={}));const Qt=It;var te={};window.defunc(te,"getActivePanel",(function(){var t=window.byClass("arrow active");if(t)return t[0];var e=window.byClass("step arrow")[0];return e.classList.add("active"),e})),window.defunc(te,"getOneHeight",(function(t){if(0==t.children.length)return 0;var e=t.children[0];return parseInt(getComputedStyle(e).margin)+e.offsetHeight})),window.defunc(te,"getScrollQty",(function(t,e,n){return t<e?0:t+n-e})),window.defunc(te,"getLimit",(function(t){var e=te.getOneHeight(t);return te.getLimit(t,e)})),window.defunc(te,"getLimit",(function(t,e){if(null==t.parentNode)return 0;var n=t.parentNode.offsetHeight,i=Math.floor(n/e);return Math.floor(i/2)})),window.defunc(te,"getCurrentIndex",(function(t){var e=-1;return-1==e&&(e=window.indexOfChildByClass(t,"active")),-1==e&&(e=window.indexOfChildByClass(t,"last")),-1==e&&(e=0),e})),window.defunc(te,"getScrollProp",(function(t,e){var n=te.getCurrentIndex(t),i=te.getOneHeight(t),o=te.getLimit(t,i);return{current:n,height:i,limit:o,qty:te.getScrollQty(n,o,e),size:t.children.length,direction:e}})),window.altDown=!1;var ee=window.readConfig(),ne=window.defaultConfig(),ie=window.getConfigOrDefault(ee,ne,"hotKey",{}),oe=Object.values(ie).map((function(t){return t.toUpperCase()}));window.addEventListener("keyup",(function(t){"AltLeft"!=t.code&&"AltRight"!=t.code||(window.altDown=!1)})),window.addEventListener("keydown",(function(t){var e=t.code;if("ArrowDown"==(e=e.replace(/^(Key)|(Digit)|(Numpad)/,""))||"ArrowUp"==e){t.preventDefault();var n=te.getActivePanel(),i="ArrowDown"==e?1:-1,o=te.getScrollProp(n,i);n.classList.contains("line")?window.$queue.sendMsg("update-line",o):n.classList.contains("step")?window.$queue.sendMsg("update-step",o):n.classList.contains("history")&&window.$queue.sendMsg("update-history",o)}else if("ArrowLeft"==e||"ArrowRight"==e)t.preventDefault(),i="ArrowRight"==e?1:-1,window.$queue.sendMsg("change-panel",i);else if("AltLeft"==e||"AltRight"==e)window.altDown=!0;else if(oe.includes(e)&&window.altDown)for(var r=0,s=Object.keys(ie);r<s.length;r++){var a=s[r];if(ie[a]==e)switch(a){case"back":window.open("..");break;case"addStar":window.$queue.sendMsg("add-star",null);break;case"cleanStar":window.$queue.sendMsg("clean-star",null);break;case"cleanHistory":window.$queue.sendMsg("clean-history",null);break;case"downloadCase":window.open("test.xls");break;case"defaultStep":window.open("默认步骤");break;case"erpLog":window.open("erpLog");break;case"logs":window.open("logs");break;case"line":window.$queue.sendMsg("focus-line",null);break;case"step":window.$queue.sendMsg("focus-step",null)}}}));var re=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),se=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ae=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"line-container\">\n        <div :class=\"{ 'line': true, 'arrow': true, 'active': arrow == 'line' }\">\n            <div :title=\"lineNumber\" :class=\"{ 'line-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(lineNumber, idx) of lines\" @click=\"setIdx(idx)\">\n                {{ lineNumber }}\n            </div>\n        </div>\n    </div>",e.current=-1,e.last=-1,e}re(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.timer((function(){return t.lines.length>0&&(t.setIdx(t.lines.length-1,!0,!0),!0)})),window.$queue.on("update-line",(function(e){t.doScroll(e)})),window.$queue.on("toPrevLine",(function(){t.setIdx(t.current-1,!0,!0)})),window.$queue.on("toNextLine",(function(){t.setIdx(t.current+1,!0,!1)})),window.$queue.on("jumpToLine",(function(e){var n=t.lines.indexOf(e);-1!=n&&t.setIdx(n)}))},e.prototype.setIdx=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var i=window.byClass("line arrow")[0];if(i){var o=te.getLimit(i);this.doScroll({size:this.lines.length,current:t,direction:0,height:te.getOneHeight(i),qty:te.getScrollQty(t,o,0),toStep:e,toLastStep:n})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;e<0?"已经到第一行了".info():e>=t.size?"已经到最后一行了".info():this.current!=e&&(window.byId("line-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("line-changed",{line:this.lines[e],expect:t.toLastStep?-1:0,toStep:!!t.toStep}),window.$queue.sendMsg("change-active-panel",Qt.Line))},se([Dt(e,"iv-line")],e.prototype,"mounted",null),se([Ot],e.prototype,"template",void 0),se([Tt],e.prototype,"current",void 0),se([Tt],e.prototype,"last",void 0),se([xt],e.prototype,"setIdx",null),se([xt],e.prototype,"doScroll",null),se([Ct((function(){var t=/.*<a href="([0-9]+\/)".*/;return window.readLines?window.readLines():window.get("".concat(window.location.href,"1")).split("\n").map((function(e){return t.test(e)?t.exec(e)[1]:""})).filter((function(t){return""!=t})).map((function(t){return t.replace(/\/$/,"")}))}))],e.prototype,"lines",void 0),se([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0)}(e),s.getComponent("iv-line").build()),ue=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),le=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ce=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"step-container\">\n        <div :class=\"{ 'step': true, 'arrow': true, 'active': arrow == 'step' }\">\n            <div :title=\"stepNumber\" :class=\"{ 'step-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(stepNumber, idx) of steps\" @click=\"setIdx(idx)\">\n                {{ stepNumber.replace(/.png/, '') }}\n            </div>\n        </div>\n    </div>",e.map={},e.current=-1,e.last=-1,e.line="",e.lastSteps=[],e}ue(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("init-steps",(function(e){t.line=e,window.timer((function(){return t.steps.length>0&&(t.setIdx(t.steps.length-1),!0)}))})),window.$queue.on("line-changed",(function(e){t.lastSteps=t.steps,t.line=e.line,window.timer((function(){return t.lastSteps!=t.steps&&(e.expect?e.expect>0&&e.expect<t.steps.length?t.setIdx(e.expect,!0):t.setIdx(t.steps.length-1,!0):t.setIdx(0,!0),e.toStep||window.$queue.sendMsg("change-active-panel",Qt.Line),!0)}))})),window.$queue.on("update-step",(function(e){t.doScroll(e)})),window.$queue.on("jumpToStep",(function(e){for(var n=-1,i=0;i<t.steps.length;i++)if(t.steps[i].startsWith("".concat(e,"_"))){n=i;break}-1!=n&&t.setIdx(n)}))},e.prototype.setIdx=function(t,e){void 0===e&&(e=!1);var n=window.byClass("step arrow")[0];if(n){var i=te.getLimit(n);this.doScroll({size:this.steps.length,current:t,direction:0,height:te.getOneHeight(n),qty:te.getScrollQty(t,i,0),lineChanged:e})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;(t.lineChanged||this.current!=e)&&(e<0?window.$queue.sendMsg("toPrevLine",{}):e>=this.steps.length?window.$queue.sendMsg("toNextLine",{}):(window.byId("step-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("change-img","1/".concat(this.line,"/").concat(this.steps[e]))),t.lineChanged&&(this.last=-1),window.$queue.sendMsg("tab-view:to","当前图片",this.tabPanelId),window.$queue.sendMsg("change-active-panel","step"))},le([Dt(e,"iv-step")],e.prototype,"mounted",null),le([Ot],e.prototype,"template",void 0),le([Tt],e.prototype,"map",void 0),le([Tt],e.prototype,"current",void 0),le([Tt],e.prototype,"last",void 0),le([Tt],e.prototype,"line",void 0),le([Tt],e.prototype,"lastSteps",void 0),le([xt],e.prototype,"setIdx",null),le([xt],e.prototype,"doScroll",null),le([Ct((function(){if(""==this.line.trim())return[];if(this.map[this.line])return this.map[this.line];if(window.readSteps){var t=window.readSteps(this.line);return this.map[this.line]=t,t}var e=/.*\.png">(.*.png)<\/a>.*/,n=window.get("".concat(window.location.href,"1/").concat(this.line)).split("\n").map((function(t){return e.test(t)?e.exec(t)[1]:""})).filter((function(t){return""!=t})).map((function(t){return t.replace(/\/$/,"")}));return this.map[this.line]=n,n}))],e.prototype,"steps",void 0),le([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0),le([Et(String,"")],e.prototype,"tabPanelId",void 0)}(e),s.getComponent("iv-step").build()),he=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),pe=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},de=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"history-container\" class=\"right-panel\" @click=\"changePanel\">\n        <div :class=\"{ 'history': true, 'arrow': true, 'active': arrow == 'history' }\">\n            <div :title=\"historyNumber\" :class=\"{ 'history-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(historyNumber, idx) of list\" @click=\"setIdx(idx)\">\n                {{ historyNumber.substring(2).replace(/.png/, '') }}\n            </div>\n        </div>\n    </div>",e.current=-1,e.last=-1,e}var n;he(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("update-history",(function(e){t.doScroll(e)}))},e.prototype.changePanel=function(){window.$queue.sendMsg("change-active-panel","history")},e.prototype.setIdx=function(t){var e=window.byClass("history arrow")[0];if(e){var n=te.getLimit(e);this.doScroll({size:this.list.length,current:t,direction:0,height:te.getOneHeight(e),qty:te.getScrollQty(t,n,0)})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;e<0?"已经是第一张".info():e>=t.size?"已经是最后一张".info():this.current!=e&&(window.byId("history-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("tab-view:to",this.tabPanelId,"当前图片"),window.$queue.sendMsg("change-img",this.list[e]))},e.prototype.onArrowChange=function(t){"history"==this.arrow&&-1==this.current&&-1==this.last&&this.list.length>0&&this.setIdx(0)},pe([Dt(e,"iv-history")],e.prototype,"mounted",null),pe([Ot],e.prototype,"template",void 0),pe([Tt],e.prototype,"current",void 0),pe([Tt],e.prototype,"last",void 0),pe([xt],e.prototype,"changePanel",null),pe([xt],e.prototype,"setIdx",null),pe([xt],e.prototype,"doScroll",null),pe([Et(Array,[],!0)],e.prototype,"list",void 0),pe([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0),pe([Et(String,"")],e.prototype,"tabPanelId",void 0),pe([("arrow",void 0===n&&(n=!0),function(t,e){s.getComponent().meta.watchInfos.push({field:"arrow",deep:n,resolve:e})})],e.prototype,"onArrowChange",null)}(e),s.getComponent("iv-history").build()),fe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ge=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};(function(){if(window.isDev())return!0;for(var t=window.location.href,e=0,n=window.getConfigOrDefault(window.readConfig(),window.defaultConfig(),"matchList",[]);e<n.length;e++){var i=n[e];if(window.createRegExp(i).test(t))return!0}return"截图查看工具暂未匹配当前 url 地址, 你可以修改油猴脚本, 新增 matchList 的元素以进行适配, 如添加后仍无法适配, 请联系我".err(),!1})()&&(window.linkCss("/src/script/ticket-image-viewer/index.css"),window.document.body.innerHTML='<div id="dinglj-main">\n        <div id="iv-toolbar">\n            <div id="iv-options">\n                <div @click="openUrl(\'..\')">返回上一层{{ getHotKey(\'back\') }}</div>\n                <div @click="addStar(display)">添加关注{{ getHotKey(\'addStar\') }}</div>\n                <div @click="stars.length = 0">清空关注{{ getHotKey(\'cleanStar\') }}</div>\n                <div @click="history.length = 0">清空历史{{ getHotKey(\'cleanHistory\') }}</div>\n                <div @click="openUrl(\'test.xls\')">下载用例{{ getHotKey(\'downloadCase\') }}</div>\n                <div @click="openUrl(\'默认步骤\')">默认步骤{{ getHotKey(\'defaultStep\') }}</div>\n                <div @click="openUrl(\'erpLog\')">ERP日志{{ getHotKey(\'erpLog\') }}</div>\n                <div @click="openUrl(\'logs\')">工具日志{{ getHotKey(\'logs\') }}</div>\n            </div>\n            <div class="dinglj-v-flex"></div>\n            <i-input :placeholder="\'输入行数进行跳转\' + getHotKey(\'line\')" @on-over="jumpLine" @mounted="emit => ids.lineInput = emit.vid"></i-input>\n            <i-input :placeholder="\'输入步数进行跳转\' + getHotKey(\'step\')" @on-over="jumpStep" @mounted="emit => ids.stepInput = emit.vid"></i-input>\n        </div>\n        <div id="iv-under-toolbar">\n            <ivline :arrow="arrow"></ivline>\n            <ivstep :arrow="arrow" :tab-panel-id="ids.tabPanelView"></ivstep>\n            <div class="content-view dinglj-v-flex">\n                <i-tab-view :list="tabNames" @mounted="tabPanelViewMounted">\n                    <div v-for="(src, idx) of images" style="width: 100%; height: 100%; position: relative">\n                        <img class="display-img" :id="getImageId(src, idx)" :src="src"/>\n                    </div>\n                </i-tab-view>\n            </div>\n            <ivhistory :arrow="arrow" @on-clicked="data => { display = data; }" :list="history" :tab-panel-id="ids.tabPanelView"></ivhistory>\n        </div>\n    </div>'),function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.ids={lineInput:"",stepInput:"",tabPanelView:""},e.arrow=Qt.Step,e.display="",e.stars=[],e.history=[],e.imageIds={},e.init={tabPanelView:!0},e}var n;fe(e,t),e.prototype.mounted=function(){var t=this,e=this;window.displayData=function(){return e},window.$queue.on("change-panel",(function(e){t.changePanel(e)})),window.$queue.on("add-star",(function(){t.addStar(t.display)})),window.$queue.on("clean-star",(function(){t.stars.length=0})),window.$queue.on("clean-history",(function(){t.history.length=0})),window.$queue.on("change-active-panel",(function(e){t.arrow=e})),window.$queue.on("focus-line",(function(){window.$queue.sendMsg("dinglj-v-input-text::focus",null,t.ids.lineInput)})),window.$queue.on("focus-step",(function(){window.$queue.sendMsg("dinglj-v-input-text::focus",null,t.ids.stepInput)})),window.$queue.on("change-img",(function(e){t.history.pushNew(e),t.display=e}))},e.prototype.openUrl=function(t){window.open(t)},e.prototype.tabPanelViewMounted=function(t){this.ids.tabPanelView=t.vid,this.init.tabPanelView&&(this.init.tabPanelView=!1,window.addEventListener("keydown",(function(e){"Tab"==e.code&&(e.preventDefault(),window.$queue.sendMsg("tab-view:next",null,t.vid))})))},e.prototype.getImageId=function(t,e){var n=t;0==e&&(n="main-image");var i=this;return window.timer((function(){var e=window.byId(n);return null!=e&&(window.$menu.registRightClick(e,n,{items:["main-image"==n?new u("关注",(function(){i.addStar(t)})):void 0,"main-image"==n?void 0:new u("取消关注",(function(){i.stars.remove(t)?"图片已取消关注".info():"未找到需要取消关注的图片".warn()}))]}),!0)})),n},e.prototype.changePanel=function(t){var e=window.getConfigOrDefault(this.config,this.defaultConfig,"panels",[]),n=(e.indexOfIgnoreCase(this.arrow)+e.length+t)%e.length;this.arrow=e[n]},e.prototype.addStar=function(t){this.stars.includesIgnoreCase(t)?"无需重复关注".warn():this.stars.push(t)},e.prototype.getHotKey=function(t){var e=window.getConfigOrDefault(this.config,this.defaultConfig,"hotKey",{});return"(".concat(e[t],")")},e.prototype.jumpLine=function(t){window.$queue.sendMsg("jumpToLine",t.value),window.$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)},e.prototype.jumpStep=function(t){window.$queue.sendMsg("jumpToStep",t.value),window.$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)},ge([(n={ivline:ae,ivstep:ce,ivhistory:de},function(t,e){s.getComponent().meta.components=n}),Dt(e,"App")],e.prototype,"mounted",null),ge([Tt],e.prototype,"ids",void 0),ge([Tt],e.prototype,"arrow",void 0),ge([Tt],e.prototype,"display",void 0),ge([Tt],e.prototype,"stars",void 0),ge([Tt],e.prototype,"history",void 0),ge([Tt],e.prototype,"imageIds",void 0),ge([Tt],e.prototype,"init",void 0),ge([xt],e.prototype,"openUrl",null),ge([xt],e.prototype,"tabPanelViewMounted",null),ge([xt],e.prototype,"getImageId",null),ge([xt],e.prototype,"changePanel",null),ge([xt],e.prototype,"addStar",null),ge([xt],e.prototype,"getHotKey",null),ge([xt],e.prototype,"jumpLine",null),ge([xt],e.prototype,"jumpStep",null),ge([Ct((function(){return window.readConfig()}))],e.prototype,"config",void 0),ge([Ct((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),ge([Ct((function(){var t=[];return this.display&&t.push(this.display),t.push.apply(t,this.stars),t}))],e.prototype,"images",void 0),ge([Ct((function(){for(var t=["当前图片"],e=1;e<this.images.length;e++)t.push(this.images[e].replace(/1\/(\d+)\/(.*)(\.png)/,"第$1行: $2"));return t}))],e.prototype,"tabNames",void 0)}(e),window.createVue(s.getComponent("App").build(),"#dinglj-main")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUROQSxrQ0FRTSxJQUZOQSxpQ0FTTSxJQUROQSxpQ0FVTSxJQUhOUyxJQUFRLFdBQ0wsT0FBT3QwQixPQUFPa0ksWUFDbEIsa0NBT08sSUFITm9zQixJQUFRLFdBQ0wsT0FBT3QwQixPQUFPdUYsZUFDbEIseUNBV08sSUFSTit1QixJQUFRLFdBQ0wsSUFBTXB6QixFQUFTLEdBS2YsT0FKSTdCLEtBQUt3OUIsU0FDTDM3QixFQUFPdEIsS0FBS1AsS0FBS3c5QixTQUVyQjM3QixFQUFPdEIsS0FBSSxNQUFYc0IsRUFBZTdCLEtBQUt5OUIsT0FDYjU3QixDQUNYLGtDQVVPLElBUE5vekIsSUFBUSxXQUVMLElBREEsSUFBSXB6QixFQUFTLENBQUMsUUFDTG9DLEVBQUksRUFBR0EsRUFBSWpFLEtBQUtzK0IsT0FBT3A2QixPQUFRRCxJQUNwQ3BDLEVBQU90QixLQUFLUCxLQUFLcytCLE9BQU9yNkIsR0FBR3NCLFFBQVEsd0JBQXlCLGFBRWhFLE9BQU8xRCxDQUNYLG9DQW5NSixDQUF5QixHQXdNekJsQixPQUFPNDlCLFVBQVUsRUFBU2x5QixhQUFhLE9BQU94QyxRQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L2FycmF5L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2V4dC9jc3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L2VsZW1lbnQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L25ldHdvcmsvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L3BhdGgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L3dpbmRvdy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L3NjcmlwdC90aWNrZXQtaW1hZ2Utdmlld2VyL2VuY29kZS1jb25maWcudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2VudGl0eS9jbGFzcy9BYnN0cmFjdENvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9lbnRpdHkvY2xhc3MvTGFuZ0l0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZW50aXR5L2NsYXNzL01ldGFJbmZvLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2VudGl0eS9jbGFzcy9SZWdpc3RyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9lbnRpdHkvY2xhc3MvUmlnaHRNZW51LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2VudGl0eS9lbnVtL0NvbXBvbmVudFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZW50aXR5L2VudW0vUnNhQ29uc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXh0L3N0cmluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9mdW5jdGlvbi9xdWV1ZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9mdW5jdGlvbi90aXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9oZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2FzbjFqcy9pbnQxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvYXNuMWpzL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vanNibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9wcm5nNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9saWIvanNibi9ybmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzYm4vcnNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc2VuY3J5cHQvbGliL2xpYi9qc3JzYXNpZ24veWFob28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvbGliL2pzcnNhc2lnbi9hc24xLTEuMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNlbmNyeXB0L2xpYi9KU0VuY3J5cHRSU0FLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzZW5jcnlwdC9saWIvSlNFbmNyeXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc2VuY3J5cHQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3NlY3VyZS9kZWNsYXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Z1bmN0aW9uL3NlY3VyZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9mdW5jdGlvbi9jb250ZXh0bWVudS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9GaWVsZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9NZXRob2QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vUHJvcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9UZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYW5ub3RhdGlvbi9Nb3VudGVkLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hbm5vdGF0aW9uL0NvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvdGlja2V0LWltYWdlLXZpZXdlci9OYXZUeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9CdXR0b25YLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9JbnB1dFgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L1N3aXRjaFgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L0NvbWJvWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvTmF2aWdhdG9yWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvU2Nyb2xsZXJZLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hc3NlbWJsZS1jb21wb25lbnQvTmF2aWdhdG9yVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvYmFzZS1jb21wb25lbnQvVGFiUGFuZWxYLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9TY3JvbGxlclgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fzc2VtYmxlLWNvbXBvbmVudC9UYWJWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC9UYWJsZVgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Jhc2UtY29tcG9uZW50L1Byb2dyZXNzWC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb21wb25lbnQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvdGlja2V0LWltYWdlLXZpZXdlci90b29sLnRzIiwid2VicGFjazovLy8uL3NyYy9kZXYvc2NyaXB0L3RpY2tldC1pbWFnZS12aWV3ZXIvbGluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGV2L3NjcmlwdC90aWNrZXQtaW1hZ2Utdmlld2VyL3N0ZXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rldi9zY3JpcHQvdGlja2V0LWltYWdlLXZpZXdlci9oaXN0b3J5LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NvbXBvbmVudC9hbm5vdGF0aW9uL1dhdGNoLnRzIiwid2VicGFjazovLy8uL3NyYy9kZXYvc2NyaXB0L3RpY2tldC1pbWFnZS12aWV3ZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50L2Fubm90YXRpb24vQ29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzSWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGFub3RoZXIpIHtcclxuICAgIGxldCB0YXJnZXQ7XHJcbiAgICBpZiAodHlwZW9mIGFub3RoZXIgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIHRhcmdldCA9IEpTT04uc3RyaW5naWZ5KGFub3RoZXIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhbm90aGVyID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICB0YXJnZXQgPSBhbm90aGVyLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRhcmdldCA9IGFub3RoZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5tYXAoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlbGVtZW50KS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0pLmluY2x1ZGVzKHRhcmdldCk7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5pbmRleE9mSWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGFub3RoZXIpIHtcclxuICAgIGxldCB0YXJnZXQ7XHJcbiAgICBpZiAodHlwZW9mIGFub3RoZXIgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIHRhcmdldCA9IEpTT04uc3RyaW5naWZ5KGFub3RoZXIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhbm90aGVyID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICB0YXJnZXQgPSBhbm90aGVyLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRhcmdldCA9IGFub3RoZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5tYXAoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlbGVtZW50KS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0pLmluZGV4T2YodGFyZ2V0KTtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLnB1c2hOZXcgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMucHVzaChlbGVtZW50KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgbGV0IGlkeCA9IHRoaXMuaW5kZXhPZihlbGVtZW50KTtcclxuICAgIGlmIChpZHggPT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn0iLCJcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ2xpbmtDc3MnLCBmdW5jdGlvbihyZWxhdGl2ZVBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgd2luZG93LmxpbmtDc3Mod2luZG93LmRpbmdsal9ob21lLCByZWxhdGl2ZVBhdGgpO1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ2xpbmtDc3MnLCBmdW5jdGlvbihwYXJlbnRQYXRoOiBzdHJpbmcsIHJlbGF0aXZlUGF0aDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdHlsZUVsZW1lbnQ6IEhUTUxTdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgY29uc3QgdXJsID0gd2luZG93Lm1lcmdlUGF0aChwYXJlbnRQYXRoLCByZWxhdGl2ZVBhdGgpO1xyXG4gICAgc3R5bGVFbGVtZW50LmlubmVySFRNTCA9IHdpbmRvdy5nZXQ8c3RyaW5nPih1cmwpO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG59KTsiLCJcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ2J5SWQnLCBmdW5jdGlvbihpZDogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCdieUNsYXNzJywgZnVuY3Rpb24oY2xhc3Nlczogc3RyaW5nKTogQXJyYXk8SFRNTEVsZW1lbnQ+IHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8SFRNTEVsZW1lbnQ+ID0gW107XHJcbiAgICBjb25zdCBmaW5kRGF0YTogYW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc2VzKTtcclxuICAgIGlmIChmaW5kRGF0YSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmZpbmREYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygncXVlcnknLCBmdW5jdGlvbihzZWxlY3Rvcjogc3RyaW5nKTogQXJyYXk8SFRNTEVsZW1lbnQ+IHtcclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgIGNvbnN0IGZpbmREYXRhOiBhbnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgIGlmIChmaW5kRGF0YSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmZpbmREYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pO1xyXG5cclxuLyoqIOiuoeeul+aWh+acrOWuveW6piAqL1xyXG53aW5kb3cuZGVmdW5jKHdpbmRvdywgJ2NhbGNUeHRXaWR0aCcsIGZ1bmN0aW9uKGl0ZW06IHN0cmluZyB8IEhUTUxFbGVtZW50KTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpdGVtKTtcclxuICAgICAgICByZXR1cm4gd2luZG93LmNhbGNUeHRXaWR0aChpdGVtLmlubmVyVGV4dCwgY29tcHV0ZWRTdHlsZS5mb250V2VpZ2h0LCBjb21wdXRlZFN0eWxlLmZvbnRTaXplLCBjb21wdXRlZFN0eWxlLmZvbnRGYW1pbHkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpdGVtID0gaXRlbSArICcnO1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuY2FsY1R4dFdpZHRoKGl0ZW0sICc0MDAnLCAnMTJweCcsICflvq7ova/pm4Xpu5EnKTtcclxuICAgIH1cclxufSk7XHJcblxyXG4vKiog6K6h566X5paH5pys5a695bqmICovXHJcbndpbmRvdy5kZWZ1bmMod2luZG93LCAnY2FsY1R4dFdpZHRoJywgZnVuY3Rpb24odHh0OiBzdHJpbmcsIGZvbnRXZWlnaHQ6IHN0cmluZywgZm9udFNpemU6IHN0cmluZywgZm9udEZhbWlseTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgY3R4LmZvbnQgPSBgJHsgZm9udFdlaWdodCB9ICR7IGZvbnRTaXplIH0gJHsgZm9udEZhbWlseSB9YDtcclxuICAgIGNvbnN0IHsgd2lkdGggfSA9IGN0eC5tZWFzdXJlVGV4dCh0eHQpO1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3Iod2lkdGgpO1xyXG59KTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbihjb25maWcsIHRyYW5zaXRpb24pIHtcclxuICAgIGNvbnN0IG9sZF90cmFuc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS50cmFuc2l0aW9uO1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7XHJcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgIHRoaXMuc3R5bGVba2V5XSA9IGNvbmZpZ1trZXldWzBdO1xyXG4gICAgfVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0X3RyYW5zaXRpb24gPSB0cmFuc2l0aW9uIC8gMTAwMCArICdzJztcclxuICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb24gPSB0YXJnZXRfdHJhbnNpdGlvbjtcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlW2tleV0gPSBjb25maWdba2V5XVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNpdGlvbiA9IG9sZF90cmFuc2l0aW9uO1xyXG4gICAgICAgIH0sIHRyYW5zaXRpb24pO1xyXG4gICAgfSwgNTApO1xyXG59XHJcblxyXG4vKiog5qC55o2uIGNsYXNzIOaJvuWtqeWtkERPTeiKgueCuSAqL1xyXG5FbGVtZW50LnByb3RvdHlwZS5maW5kQ2hpbGRyZW5CeUNsYXNzID0gZnVuY3Rpb24oY2xhenopIHtcclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgIGxldCBsaXN0ID0gdGhpcy5jaGlsZHJlbjtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGxpc3RbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXp6KSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChsaXN0W2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuLyoqIOagueaNriBjbGFzcyDmib7lranlrZBET03oioLngrkgKi9cclxud2luZG93LmRlZnVuYygnaW5kZXhPZkNoaWxkQnlDbGFzcycsIChwYXJlbnQ6IEhUTUxFbGVtZW50LCBfY2xhc3M6IHN0cmluZykgPT4ge1xyXG4gICAgbGV0IGxpc3QgPSBwYXJlbnQuY2hpbGRyZW47XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChsaXN0W2ldLmNsYXNzTGlzdC5jb250YWlucyhfY2xhc3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufSk7IiwiXHJcblxyXG53aW5kb3cuZGVmdW5jKCdnZXQnLCBmdW5jdGlvbjxUPih1cmw6IHN0cmluZyk6IFQge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5nZXQ8VD4odXJsLCB7XHJcbiAgICAgICAgY2FsbGJhY2s6IG51bGwsXHJcbiAgICAgICAgYXN5bmM6IGZhbHNlLFxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygnZ2V0JywgZnVuY3Rpb248VD4odXJsOiBzdHJpbmcsIGNvbmZpZzogeyBjYWxsYmFjazogRnVuY3Rpb24sIGFzeW5jOiBib29sZWFuIH0pOiBUIHtcclxuICAgIGNvbnN0IGh0dHA6IFhNTEh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICBodHRwLm9wZW4oJ0dFVCcsIHVybCwgISFjb25maWcuYXN5bmMpO1xyXG4gICAgaHR0cC5zZW5kKCk7XHJcbiAgICBpZiAoaHR0cC5yZWFkeVN0YXRlID09IDQgJiYgaHR0cC5zdGF0dXMgPT0gMjAwICYmIGNvbmZpZy5jYWxsYmFjaykge1xyXG4gICAgICAgIGNvbmZpZy5jYWxsYmFjayhodHRwLnJlc3BvbnNlVGV4dCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaHR0cC5yZXNwb25zZVRleHQgYXMgVDtcclxufSk7IiwiXHJcblxyXG53aW5kb3cuZGVmdW5jKCdpbWdVcmwnLCBmdW5jdGlvbihyZWxhdGl2ZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gd2luZG93Lm1lcmdlUGF0aCh3aW5kb3cuZGluZ2xqX2hvbWUsIHJlbGF0aXZlUGF0aCk7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygnbWVyZ2VQYXRoJywgZnVuY3Rpb24ocmVsYXRpdmVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5tZXJnZVBhdGgod2luZG93LmRpbmdsal9ob21lLCByZWxhdGl2ZVBhdGgpO1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ21lcmdlUGF0aCcsIGZ1bmN0aW9uKHBhcmVudFBhdGg6IHN0cmluZywgcmVsYXRpdmVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKCFwYXJlbnRQYXRoLmVuZHNXaXRoKCcvJykgJiYgIXBhcmVudFBhdGguZW5kc1dpdGgoJ1xcXFwnKSkge1xyXG4gICAgICAgIHBhcmVudFBhdGggPSBwYXJlbnRQYXRoICsgJy8nO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKCcvJykgfHwgcmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoJ1xcXFwnKSkge1xyXG4gICAgICAgIHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlUGF0aC5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7IHBhcmVudFBhdGggfSR7IHJlbGF0aXZlUGF0aCB9YDtcclxufSk7IiwiXHJcblxyXG53aW5kb3cuZGVmdW5jKCd1dWlkJywgZnVuY3Rpb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB3aW5kb3cudXVpZCgnJywgMTApO1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ3V1aWQnLCBmdW5jdGlvbihwcmVmaXg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gd2luZG93LnV1aWQocHJlZml4LCAxMCk7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygndXVpZCcsIGZ1bmN0aW9uKHByZWZpeDogc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCByYW5kb21OdW1iZXIgPSBNYXRoLnJhbmRvbSgpICogMTAwMDAwMDA7XHJcbiAgICBjb25zdCBzdWJOdW1iZXIgPSAoJycgKyByYW5kb21OdW1iZXIpLnJlcGxhY2UoJy4nLCAnJykuc3Vic3RyaW5nKDAsIGxlbmd0aCk7XHJcbiAgICByZXR1cm4gYCR7IHByZWZpeCB9LSR7IHN1Yk51bWJlciB9YDtcclxufSk7XHJcblxyXG5cclxud2luZG93LmRlZnVuYygnZ3JvdXBCeScsIGZ1bmN0aW9uKGxpc3Q6IEFycmF5PGFueT4sIGV4cDogc3RyaW5nIHwgRnVuY3Rpb24pOiBvYmplY3Qge1xyXG4gICAgbGV0IHJlc3VsdDogYW55ID0ge307XHJcbiAgICBsaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgbGV0IGtleSA9ICcnO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZXhwID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGtleSA9IGl0ZW1bZXhwXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHAgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBrZXkgPSBleHAoaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHRba2V5XSkge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gWyBpdGVtIF07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59KTtcclxuXHJcbi8qKiDojrflj5bphY3nva4sIOWmguaenOWPluS4jeWIsOWImei/lOWbnum7mOiupOWAvCAqL1xyXG53aW5kb3cuZGVmdW5jKCdnZXRWYWwnLCBmdW5jdGlvbihkYXRhOiBhbnksIHBhdGg6IHN0cmluZywgX2RlZmF1bHQ6IGFueSk6IG9iamVjdCB7XHJcbiAgICByZXR1cm4gd2luZG93LmdldFZhbChkYXRhLCBwYXRoLCBfZGVmYXVsdCwgZmFsc2UpO1xyXG59KTtcclxuXHJcbi8qKiDojrflj5bphY3nva4sIOWmguaenOWPluS4jeWIsOWImei/lOWbnum7mOiupOWAvCwg5bm25qC55o2u5Y+C5pWw56Gu6K6k5piv5ZCm6KaB5oql6ZSZICovXHJcbndpbmRvdy5kZWZ1bmMoJ2dldFZhbCcsIGZ1bmN0aW9uKGRhdGE6IGFueSwgcGF0aDogc3RyaW5nLCBfZGVmYXVsdDogYW55LCBlcnJvcjogYm9vbGVhbik6IG9iamVjdCB7XHJcbiAgICBpZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xyXG4gICAgfVxyXG4gICAgbGV0IHJlc3VsdCA9IGRhdGE7XHJcbiAgICBmb3IgKGxldCBwcm9wTmFtZSBvZiBwYXRoLnNwbGl0KCcuJykpIHtcclxuICAgICAgICByZXN1bHQgPSByZXN1bHRbcHJvcE5hbWVdO1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7IC8vIOWmguaenOWPluS4jeWIsOWAvCwg5YiZ5oql6ZSZ5bm26L+U5Zue6buY6K6k5YC8XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHsgcGF0aCB9OiDphY3nva7kuI3lrZjlnKgsIOivt+ajgOafpeiEmuacrGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfZGVmYXVsdFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pO1xyXG5cclxuLyoqIOiOt+WPlumFjee9riwg5oiW5LuO6buY6K6k6YWN572u5Lit5Y+WLCDpu5jorqTphY3nva7kuZ/msqHmnIksIOWImei/lOWbnum7mOiupOWAvCAqL1xyXG53aW5kb3cuZGVmdW5jKCdnZXRDb25maWdPckRlZmF1bHQnLCBmdW5jdGlvbihjb25maWc6IGFueSwgZGVmYXVsdENvbmZpZzogYW55LCBwYXRoOiBzdHJpbmcsIF9kZWZhdWx0OiBhbnkpOiBvYmplY3Qge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCBwYXRoLCBfZGVmYXVsdCwgdHJ1ZSk7XHJcbn0pO1xyXG5cclxuLyoqIOiOt+WPlumFjee9riwg5oiW5LuO6buY6K6k6YWN572u5Lit5Y+WLCDpu5jorqTphY3nva7kuZ/msqHmnIksIOWImei/lOWbnum7mOiupOWAvCAqL1xyXG53aW5kb3cuZGVmdW5jKCdnZXRDb25maWdPckRlZmF1bHQnLCBmdW5jdGlvbihjb25maWc6IGFueSwgZGVmYXVsdENvbmZpZzogYW55LCBwYXRoOiBzdHJpbmcsIF9kZWZhdWx0OiBhbnksIG1lcmdlOiBib29sZWFuKTogb2JqZWN0IHtcclxuICAgIGxldCBjb25maWcxOiBhbnkgPSB3aW5kb3cuZ2V0VmFsKGNvbmZpZywgcGF0aCwgJ05PVF9GT1VORCcpO1xyXG4gICAgbGV0IGNvbmZpZzI6IGFueSA9IHdpbmRvdy5nZXRWYWwoZGVmYXVsdENvbmZpZywgcGF0aCwgJ05PVF9GT1VORCcpO1xyXG4gICAgbGV0IHJlc3VsdDogYW55ID0gJ05PVF9GT1VORCc7XHJcbiAgICBpZiAoY29uZmlnMSAhPSAnTk9UX0ZPVU5EJykgeyAvLyDov5jmmK/kvJjlhYjogIPomZHnlKjmiLfnmoTphY3nva7lkKdcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcxKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uY29uZmlnMSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbmZpZzEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGNvbmZpZzFba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWcxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb25maWcyICE9ICdOT1RfRk9VTkQnKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PSAnTk9UX0ZPVU5EJykge1xyXG4gICAgICAgICAgICAvLyBjb25maWcxIOayoeaVsOaNriwg5YiZ5a6M5YWo5L2/55SoIGNvbmZpZzJcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZzI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZzEpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbmZpZzEg5piv5pWw57uELCDopoHmsYIgY29uZmlnMiDkuZ/mmK/mlbDnu4QsIOWQpuWImeaXoOazleWQiOW5tlxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcyKSAmJiBtZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uY29uZmlnMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyID09ICdvYmplY3QnICYmIG1lcmdlKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbmZpZzEg5Yiw6L+Z6YeM5LiA5a6a5pivIG9iamVjdCwg6KaB5rGCIGNvbmZpZzIg5Lmf5pivIG9iamVjdCwg5ZCm5YiZ5peg5rOV5ZCI5bm2XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhjb25maWcyKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtrZXldID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gY29uZmlnMltrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHJlc3VsdCA9PSAnTk9UX0ZPVU5EJykgeyAvLyDku43nhLbmsqHmnInliJnnm7TmjqXmiqXplJksIOW5tui/lOWbnum7mOiupOWAvFxyXG4gICAgICAgIHJlc3VsdCA9IF9kZWZhdWx0O1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7IHBhdGggfTog6YWN572u5LiN5a2Y5ZyoLCDor7fmo4Dmn6XohJrmnKxgKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygnY29tcGFyZVN0cmluZ0J5QXJyYXknLCBmdW5jdGlvbihvcmRlcjogQXJyYXk8c3RyaW5nPiwgbGlzdDogQXJyYXk8c3RyaW5nPik6IHZvaWQge1xyXG4gICAgbGlzdC5zb3J0KChvMSwgbzIpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuY29tcGFyZVN0cmluZ0J5QXJyYXkob3JkZXIsIG8xLCBvMik7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCdjb21wYXJlU3RyaW5nQnlBcnJheScsIGZ1bmN0aW9uKG9yZGVyOiBBcnJheTxzdHJpbmc+LCBvMTogc3RyaW5nLCBvMjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGlmIChvcmRlciAmJiBvcmRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGlkeDEgPSBvcmRlci5pbmRleE9mSWdub3JlQ2FzZShvMSkgPT0gLTEgPyA5OTk5IDogb3JkZXIuaW5kZXhPZklnbm9yZUNhc2UobzEpO1xyXG4gICAgICAgIGxldCBpZHgyID0gb3JkZXIuaW5kZXhPZklnbm9yZUNhc2UobzIpID09IC0xID8gOTk5OSA6IG9yZGVyLmluZGV4T2ZJZ25vcmVDYXNlKG8yKTtcclxuICAgICAgICBpZiAoaWR4MSA9PSBpZHgyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvMSA8IG8yID8gLTEgOiAobzEgPiBvMiA/IDEgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlkeDEgLSBpZHgyO1xyXG4gICAgfVxyXG4gICAgaWYgKG8xIDwgbzIpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9IGVsc2UgaWYgKG8xID4gbzIpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJ3B1c2hUb0FycmF5SW5PYmplY3QnLCBmdW5jdGlvbihvYmplY3Q6IGFueSwgZmllbGRLZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IG9iamVjdCB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RbZmllbGRLZXldKSkge1xyXG4gICAgICAgIChvYmplY3RbZmllbGRLZXldIGFzIEFycmF5PGFueT4pLnB1c2godmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBvYmplY3RbZmllbGRLZXldID0gWyB2YWx1ZSBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxufSk7XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLmRlZmF1bHRDb25maWcgPSBmdW5jdGlvbigpOiBhbnkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy4kcnNhLmRlY3J5cHRPYmplY3Qod2luZG93LmVuY29kZUNvbmZpZygpKTtcclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZS50aW1lciA9IGZ1bmN0aW9uKGNvbmRpdGlvbkZ1bmM6IEZ1bmN0aW9uLCB0aW1lOiBudW1iZXIgPSAzMCkge1xyXG4gICAgdGltZSA9IHRpbWUgPCAzMCA/IDMwIDogdGltZTtcclxuICAgIGxldCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAoY29uZGl0aW9uRnVuYygpKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRpbWUpO1xyXG59XHJcblxyXG5XaW5kb3cucHJvdG90eXBlLmNyZWF0ZVJlZ0V4cCA9IGZ1bmN0aW9uKHN0cjogc3RyaW5nIHwgUmVnRXhwKTogUmVnRXhwIHtcclxuICAgIGlmIChzdHIgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcJF8vZywgJ1xcXFwnKTtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHN0cik7XHJcbn0iLCJ3aW5kb3cuZW5jb2RlQ29uZmlnID0gZnVuY3Rpb24oKTogYW55IHtcbiAgICBjb25zdCB1cmxUeXBlcyA9IHtcbiAgICAgICAgazhzOiAwLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFuZWxzOiBbXG4gICAgICAgICAgICAnJERJTkdMSi1FTkNPREUtU1RBUlQkVVBSblprd0lPeS80Qi9WWXUyMndjMzlOSEgyTnFWbDNBVlpaMk91cncrbUF3Tnc5cXpmbC9kVFNWbFJZdW9qT0hxZDJKN24vL3MvQnM5cXhIYVB4dHlOZXI0YnRGY3Zkbk53RzVlcTVJUkFqQUdwcmU0RWx1TklJZ2JmT3FFdm1QMStKYUZPTmdpMEJuL1RLWDVUQkVQMjFVTzdsNlRHVjNTVWZNUGpzOVhRPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgJyRESU5HTEotRU5DT0RFLVNUQVJUJEY3MWpPdmI4SXRiTDMvdDNpdzczL3ExUTNldUduYWNQY1dtaU4veFRQN1pCZUpTK0FkWk1ZVHRLR0ZaWm5sQlMzc2FCcG1lTlFmcXB3aHd2bXlkVXozOElpTkp6TytWY1h3Q2ZtTHp3NkpkemJqb0VsNkdKRjFsT3ZMN080NVhKS3luMnRNak0zN3ovWEpxN3crdGdpTlp3L3ZBbXorWFRyY04yRXRFRWpsZz0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICckRElOR0xKLUVOQ09ERS1TVEFSVCRKdGNZMWdialgzR09qbVBCMjNJVWN5MitoTElJR2d6QWcxUmFXQUJ4Vk9iVjJyempmdUhvR3ZFajJSMmQ2VkF6MnkwZHpOOWRWZHJMSmc5RFN3K2JtSXVwUmh4dS80eHoyaFBZM01TbDNQQWtYRGhGaDFSZy80RU1Va3FwekMyclBUdUo2VHM5Wk1ISnpuaFFGZTEwY2ZtUU4wN0F2Sk5iQUpHMnQyYlJmaFk9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgIF0sXG4gICAgICAgIHVybFR5cGVzOiB1cmxUeXBlcyxcbiAgICAgICAgaG90S2V5OiB7XG4gICAgICAgICAgICBiYWNrOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkQzNNZ2gvdTgwL05tQVhTdllnT0pXNVRrMFI0NmZhQkZ3eTNXTXJJanlCa1RsVjdwOGZxRTAvTkdwK1QwQkcvY3BrRDdmY0RleW5zeE1OWGJlS0REYTFYMkc1bWhkUFBiL0kvTk1qNzlCUXIzMG9oK0J1dG5zTFR2M1d2aDZrdHhZYUZ0Zi9CZ3gvQXIzaUl3TVpjaHY0RUkrNjd5SkdCMHhoazhpdDkyWDQ0PSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgYWRkU3RhcjogJyRESU5HTEotRU5DT0RFLVNUQVJUJGVoazN4REdkWWhXYndTYUhGbUhkRDQ2dmx0bUJUT0t6aE1JMkwxdVp6VFFMWWdPSG4wL2JaNitPc3htcUN4Q0dtYUgwQWhraFo4TVVpRHE5Qk5vMFhMd0g5WGhlYlg2M0VoY2tpeDdSSG1TOFVnUzJOTWFuWTlqcThSR2hvcFQ5WENwalh5V0JLbHllQzRoV3FJekZmR0toR1lpaXNHOE84VVNsTXlzY1NoST0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgIGNsZWFuU3RhcjogJyRESU5HTEotRU5DT0RFLVNUQVJUJEJqNTFhWWVzbkNqeWltNWNUN3BkTEtqVGhnblpmc0tEREx4aU5xVHVKL0loYk83N0NUZHRNNml1L01WdzV6UXAxdU9mWWdDeGNybGU2NnRZcXhOODFYMVF0aWJlM0N5Z1A0STc0OHdwc3llY2ZWOW8vWW9MUXJnMnFvRkIzbzRmbDFBRVZwOURNTS9JY2xEeGcxb2VhTk8vTFg2WjJOb0NHMFVvR2txbDJRdz0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgIGNsZWFuSGlzdG9yeTogJyRESU5HTEotRU5DT0RFLVNUQVJUJEVlTW5JVExHVUp3UEhySWQ4cHdwQ0ovankwS0VYZC9Bcm9ZeFRad3VoS0FvMEV5RWJWd3ErZUVTS1N4Nmp4OVBxRXBXOCtoMXZKZ29yVW9pZCtqWDcweDFtRFFadUJ3dVZXa3RibDZzdWRZcXQ3U1FQMHFKT0hFcTE3V1FCdzZEOWxKSlNKdVlXd1RFTFdzODQ1bnhaMkVuMVNCUmVBS1VSa0Q1NFNjUnFCWT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgIGRvd25sb2FkQ2FzZTogJyRESU5HTEotRU5DT0RFLVNUQVJUJGxrbWJHckF6Mkx4U1B4aDhBSmtGVGdQZTZ4MDU4Z05ueWVYOXl2OXc4ZHgwNkpVMzFBMEVJcmcvNHRRb3NXak5Nb3FHTE51MVY5eXhsaGdvRE9MamgvVVRtUkxzenNuWklzVEsybXN4RnBDZnhoWmh2WVdZR2ozNElrTDc5VzhDeEVqUEw2eitveDhtSzU5VEMxUXBNWTRwbGxiV3MzNXRINncxYzkxYnlKND0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgIGRlZmF1bHRTdGVwOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkUTZlb2hxeFdGcEZtczcxOCtWUGhNV1IwQ05GYVQ5MWNNeTBkK2tLemhhWUR0OU4vMnRtWVFQY2JTMUtmVm4zcE93VXIyNUNnNStyQUF3NG42SDFYWkI3UUJCMmY0L2xSOTllWUZYVWRCN1poMXpnQktrenR0VFY2bHlBYXlhVXd0UmpvcXNCUEVJLzlTN0lkRFJXK29WMi9rZkZKYkoxOG9jRm8rMk1jTEJzPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgZXJwTG9nOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkakoxc2NDS1FEdk5aci9INWxHRm42QlZoSGlFazF0SmtseU5xYW1nb245eU8zenFWQ1RpQ1FQaWpmdVByamhVb3NPL0MwbHBUZzNRdUI5bGhYQ3g5dXlncS84ckZzMWdpakNURHVNZm5BSVByWUJ0Rzlrb0NqNXkvVXlYNmZKVnQ1SThvOGtDODBOY0c2cHJSMWVJdTIzUFF1czljMEpmTXY5QVpVT3FLdWpjPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICAgICAgbG9nczogJyRESU5HTEotRU5DT0RFLVNUQVJUJElGNDdNdVdCTjdRWVI5eWRSbmd2UFpEWjY5UXdLL1hlRlU2bUhMak9TZFZuelhlTDFQaFhQTG9pSXpEWmFpQWRYT291b1dtNnhEV1AxTHhvVFFLVXdUeGxxdHh1WXZOcXpRSFhNSnFwNkxBa2IrMlFIUDJvTVlxZlhDR2xkWTV5RXFiWFJtUFJzNE8ybitWcFdlS1Z3Z3BTeFlMSUs0NjRmWnBMU1NFY2cxUT0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgIGxpbmU6ICckRElOR0xKLUVOQ09ERS1TVEFSVCRKZ3kxVFI0bUxNTG5jaE5KWlRDclZxOWZMeGQ0RHF1RDFBTXFmZ0pRY09qT0tnVVBjR3NJT01JVVdCMk1ZSVBOaTRxVm9iOFlObHNSa25UenRISmZ1WE51eUM1R3IxM3oyUnRUTmRGc2QzQ1pKYkhqcEZZM2QwSjg5U1AyK0FrRXBOTHJ6SzFRRjh0dXk4K05WWldoUGlIK1ViQTFBMTBSSXY3ZFhmYWRTRnc9JERJTkdMSi1FTkNPREUtRU5EJCcsXG4gICAgICAgICAgICBzdGVwOiAnJERJTkdMSi1FTkNPREUtU1RBUlQkamExMWJMV1RaUGo1SHFoRDk1MEl4L08vV1dMNEgvZ0pjeDV3V0JmeTR2aVdka1hFbDlTYUttY2dzRzZhZWRha3NTNUxPK0xqbFRDVWUreURpOUdJMWl1TU5LRys3VXpKYk12MGpZWkNyaExlcVhnejczMEt0VE9Xc1ZHRCtrWjFZaGpPOWV6UWdNQWxpbkNhZFliY0s4SWpRYnFHVjZQOFdwRlZQNDNIQUdZPSRESU5HTEotRU5DT0RFLUVORCQnLFxuICAgICAgICB9LFxuICAgICAgICBtYXRjaExpc3Q6IFtcbiAgICAgICAgICAgICckRElOR0xKLUVOQ09ERS1TVEFSVCRVeUcwMHNIeDhBcGJnbjZNWE0wZjdhaWJFbWV3M3U3MEtVT3lrdVFBM0NKc3hzb0lFUjA0RFE2TlgxTFgvNTUxbnNORk9weTNpbG9ZK1dYTmtXZjMvMk1Sbm9sY0F6ZWdrS00rSHpzME1hZFdCYVNWVk0zUThpQ0tRVHhDalJCUkZla2J0c2RRbHhXVGtNWG5mSHExZ25CYnNHV3htbUk1R1ArVHFFQnNSVEE9JERJTkdMSi1TUExJVC1GTEFHJFVYNkJmbVR2dm92eW5zSm9hbWcza2pUNnQralJTR2J5UVF4QmZUd2lCNEx6TURyYkZSSmhydXhwTndaVDRkM3FCNnZPa1hibWZ4WldmRThqaDJEa1poTll0bDhYU2VVSGxsQm4xb0lDQWwwODAwT0p2RXQ5Vko3WTR0OHpNc3QrREtDeUg1ZW1HYXdKbDcraGRycWdvWkZDQm5VS0JPQVQ4RE9OVWhrZHBJST0kRElOR0xKLUVOQ09ERS1FTkQkJyxcbiAgICAgICAgICAgICckRElOR0xKLUVOQ09ERS1TVEFSVCRnRjg1QW9nU2FxNGM2TUFMS0F6bThrQnVQOW9KTlZHUXZkQjdGRUVQNXhRWFk0VWFHY3RRclJBODFyMkxYUHV1TktMTkpzRzNqcHJtZDg0QXhnNWRMdVpEdWl1UkZOOHlvU2VYVFpEMGZHRmowNisvRFpYMGYxazRpRUdaOFpZMkJaRFJiZHkvbW5FMVl3UGxjNEJMQ2FTSXlwckIxZHNDa25pcDIwTmlSeEE9JERJTkdMSi1TUExJVC1GTEFHJExnREg2aUpISXhDUEU1MVhTZFFMbkNEOFkrVVRIZVpjWXZSZlVMN3V3M2k3UTZMdEdzdWJUNHc5aEsxT1duVzdKNXMvU2Q4ZlhrOHNCRWVzVjZnaXFKNnRxNXFpanpDMjJwYm5TUE5LY3B3RGNWYUlyUVlFcjFINkNiR0ZHRWM3c3RjNTI3NmltVnlyUHVkeDVtRnBUcndpa09qQktNcDBKN1YxalJZSGhhRT0kRElOR0xKLUVOQ09ERS1FTkQkJ1xuICAgICAgICBdXG4gICAgfVxufVxuXG5pZiAoIXdpbmRvdy5yZWFkQ29uZmlnKSB7XG4gICAgd2luZG93LnJlYWRDb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiAgICAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiaW1wb3J0IHsgSUNvbXBvbmVudCwgQ29tcG9uZW50VHlwZSwgTWV0YUluZm8sIEVtaXRQYXJhIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcbiAgICAvKiogbW91bnRlZCDmmK/lv4Xpobvlrp7njrDnmoTkuIDkuKrlh73mlbAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBtb3VudGVkKCk6IHZvaWQ7XHJcbiAgICAvKiogVnVlIOWQkeeItue6p+WPkemAgeS6i+S7tiwg5LuF6LW35a6a5LmJ5L2c55SoICovXHJcbiAgICBwcml2YXRlICRlbWl0KGV2ZW50TmFtZTogc3RyaW5nLCBwYXJhbTogRW1pdFBhcmEpIHt9XHJcbiAgICAvKiog57uE5Lu2IGlkLCDku4XotbflrprkuYnkvZznlKggKi9cclxuICAgIHB1YmxpYyB2aWQ6IHN0cmluZztcclxuICAgIC8qKiDnu4Tku7blkI3np7AgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcbiAgICAvKiog57uE5Lu257G75Z6LICovXHJcbiAgICBwdWJsaWMgdHlwZTogQ29tcG9uZW50VHlwZTtcclxuICAgIC8qKiBWdWUg5YWD5L+h5oGvICovXHJcbiAgICBwdWJsaWMgbWV0YTogTWV0YUluZm8gPSBuZXcgTWV0YUluZm8oKTtcclxuICAgIC8qKiDljp/nlJ/oh6rluKbnmoTmlrnms5UsIOWwhuWbvueJh+ebuOWvuei3r+W+hOi9rOe7neWvuei3r+W+hCAqL1xyXG4gICAgcHVibGljIGdldEltZyhwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuaW1nVXJsKHBhdGgpO1xyXG4gICAgfVxyXG4gICAgLyoqIOWOn+eUn+iHquW4pueahOaWueazlSwg5bCB6KOFICRlbWl0ICovXHJcbiAgICBwdWJsaWMgZW1pdChldmVudE5hbWU6IHN0cmluZywgcGFyYW06IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoZXZlbnROYW1lLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBwYXJhbSxcclxuICAgICAgICAgICAgdmlkOiB0aGlzLnZpZCxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgLyoqIOaehOW7uuS4uiBWdWUg5a+56LGhICovXHJcbiAgICBwdWJsaWMgYnVpbGQoKTogSUNvbXBvbmVudCB7XHJcbiAgICAgICAgY29uc3QgX3RoaXM6IGFueSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlOiBhbnkgPSBuZXcgdGhpcy5tZXRhLmNsYXp6KCk7XHJcbiAgICAgICAgY29uc3QgdnVlOiBJQ29tcG9uZW50ID0ge307XHJcbiAgICAgICAgLy8gZGF0YSgpXHJcbiAgICAgICAgdnVlLmRhdGEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICB2aWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogX3RoaXMubmFtZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm1ldGEuaGFzRmllbGQoKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZmllbGROYW1lIG9mIF90aGlzLm1ldGEuZmllbGROYW1lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZE5hbWVdID0gaW5zdGFuY2VbZmllbGROYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtb3VudGVkXHJcbiAgICAgICAgaWYgKHRoaXMubWV0YS5oYXNNb3VudGVkKCkpIHtcclxuICAgICAgICAgICAgdnVlLm1vdW50ZWQgPSBpbnN0YW5jZVt0aGlzLm1ldGEuaG9ja01vdW50ZWRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0ZW1wbGF0ZVxyXG4gICAgICAgIGlmICh0aGlzLm1ldGEuaGFzVGVtcGxhdGUoKSkge1xyXG4gICAgICAgICAgICB2dWUudGVtcGxhdGUgPSBpbnN0YW5jZVt0aGlzLm1ldGEudGVtcGxhdGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtZXRob2RzXHJcbiAgICAgICAgdnVlLm1ldGhvZHMgPSB7XHJcbiAgICAgICAgICAgIGdldEltZzogdGhpcy5nZXRJbWcsXHJcbiAgICAgICAgICAgIGVtaXQ6IHRoaXMuZW1pdCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLm1ldGEuaGFzTWV0aG9kKCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbWV0aG9kTmFtZSBvZiB0aGlzLm1ldGEubWV0aG9kTmFtZXMpIHtcclxuICAgICAgICAgICAgICAgIHZ1ZS5tZXRob2RzW21ldGhvZE5hbWVdID0gaW5zdGFuY2VbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tcHV0ZWRcclxuICAgICAgICBpZiAodGhpcy5tZXRhLmhhc0NvbXB1dGUoKSkge1xyXG4gICAgICAgICAgICB2dWUuY29tcHV0ZWQgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29tcHV0ZSBvZiB0aGlzLm1ldGEuY29tcHV0ZUluZm9zKSB7XHJcbiAgICAgICAgICAgICAgICB2dWUuY29tcHV0ZWRbY29tcHV0ZS5rZXldID0gY29tcHV0ZS5mdW5jO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgaWYgKHRoaXMubWV0YS5oYXNQcm9wKCkpIHtcclxuICAgICAgICAgICAgdnVlLnByb3BzID0gdGhpcy5tZXRhLnByb3BzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3YXRjaFxyXG4gICAgICAgIGlmICh0aGlzLm1ldGEuaGFzV2F0Y2goKSkge1xyXG4gICAgICAgICAgICB2dWUud2F0Y2ggPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQgd2F0Y2ggb2YgdGhpcy5tZXRhLndhdGNoSW5mb3MpIHtcclxuICAgICAgICAgICAgICAgIHZ1ZS53YXRjaFt3YXRjaC5maWVsZF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogaW5zdGFuY2Vbd2F0Y2gucmVzb2x2ZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVlcDogd2F0Y2guZGVlcCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb21wb25lbnRzXHJcbiAgICAgICAgaWYgKHRoaXMubWV0YS5oYXNDb21wb25lbnRzKCkpIHtcclxuICAgICAgICAgICAgdnVlLmNvbXBvbmVudHMgPSB0aGlzLm1ldGEuY29tcG9uZW50cztcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LnJlZ2lzdFZ1ZSh0aGlzLnR5cGUsIHZ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZ1ZTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LkFic3RyYWN0Q29tcG9uZW50ID0gQWJzdHJhY3RDb21wb25lbnQ7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdENvbXBvbmVudDsiLCJjbGFzcyBMYW5nSXRlbSB7XHJcbiAgICBlbjogc3RyaW5nOyB6aDogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoZW46IHN0cmluZywgemg6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZW4gPSBlbjtcclxuICAgICAgICB0aGlzLnpoID0gemg7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5MYW5nSXRlbSA9IExhbmdJdGVtO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGFuZ0l0ZW07IiwiY2xhc3MgTWV0YUluZm8ge1xyXG4gICAgcHVibGljIGNsYXp6OiBhbnk7XHJcbiAgICBwdWJsaWMgZmllbGROYW1lczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgcHVibGljIG1ldGhvZE5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBwdWJsaWMgY29tcHV0ZUluZm9zOiBBcnJheTx7XHJcbiAgICAgICAga2V5OiBzdHJpbmcsXHJcbiAgICAgICAgZnVuYzogRnVuY3Rpb25cclxuICAgIH0+ID0gW107XHJcbiAgICBwdWJsaWMgcHJvcHM6IGFueSA9IHt9O1xyXG4gICAgcHVibGljIGNvbXBvbmVudHM6IGFueSA9IHt9O1xyXG4gICAgcHVibGljIGhvY2tNb3VudGVkOiBzdHJpbmcgPSAnJztcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gJyc7XHJcbiAgICBwdWJsaWMgd2F0Y2hJbmZvczogQXJyYXk8e1xyXG4gICAgICAgIGZpZWxkOiBzdHJpbmcsXHJcbiAgICAgICAgZGVlcDogYm9vbGVhbixcclxuICAgICAgICByZXNvbHZlOiBzdHJpbmcsXHJcbiAgICB9PiA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBoYXNXYXRjaCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53YXRjaEluZm9zLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaGFzRmllbGQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGROYW1lcy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGhhc01ldGhvZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2ROYW1lcy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGhhc0NvbXB1dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZUluZm9zLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaGFzUHJvcCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoID4gMDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBoYXNDb21wb25lbnRzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmNvbXBvbmVudHMpLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaGFzTW91bnRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ob2NrTW91bnRlZCAhPSAnJztcclxuICAgIH1cclxuICAgIHB1YmxpYyBoYXNUZW1wbGF0ZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZSAhPSAnJztcclxuICAgIH1cclxufVxyXG5cclxud2luZG93Lk1ldGFJbmZvID0gTWV0YUluZm87XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXRhSW5mbzsiLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuY2xhc3MgUmVnaXN0cnkge1xyXG4gICAgLyoqIOe7hOS7tuaxoCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBtYXA6IE1hcDxDb21wb25lbnRUeXBlLCBBYnN0cmFjdENvbXBvbmVudD4gPSBuZXcgTWFwKCk7XHJcbiAgICAvKiog5LiK5LiA5qyh55qE57uE5Lu25ZCN56ewICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGxhc3RDb21wb25lbnROYW1lOiBzdHJpbmcgPSAnJztcclxuICAgIC8qKiDkuIrkuIDmrKHnmoTnu4Tku7bnsbvlnosgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbGFzdENvbXBvbmVudFR5cGU6IENvbXBvbmVudFR5cGUgPSBudWxsO1xyXG4gICAgLyoqIOagueaNruWQjeensOWSjOexu+Weiywg5LuO57uE5Lu25rGg6I635Y+WICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldENvbXBvbmVudCh0eXBlPzogc3RyaW5nKTogQWJzdHJhY3RDb21wb25lbnQge1xyXG4gICAgICAgIGxldCBfdHlwZTogQ29tcG9uZW50VHlwZSA9IHR5cGUgYXMgQ29tcG9uZW50VHlwZTtcclxuICAgICAgICBpZiAoUmVnaXN0cnkubGFzdENvbXBvbmVudFR5cGUgPT0gbnVsbCB8fCBSZWdpc3RyeS5sYXN0Q29tcG9uZW50VHlwZSAhPSBfdHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgUmVnaXN0cnkubGFzdENvbXBvbmVudFR5cGUgPSBfdHlwZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90eXBlID0gUmVnaXN0cnkubGFzdENvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFJlZ2lzdHJ5Lm1hcC5oYXMoX3R5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWdpc3RyeS5tYXAuZ2V0KF90eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudDogQWJzdHJhY3RDb21wb25lbnQgPSBuZXcgKEFic3RyYWN0Q29tcG9uZW50IGFzIGFueSkoKTtcclxuICAgICAgICBjb21wb25lbnQudHlwZSA9IF90eXBlO1xyXG4gICAgICAgIFJlZ2lzdHJ5Lm1hcC5zZXQoX3R5cGUsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LlJlZ2lzdHJ5ID0gUmVnaXN0cnk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyeTsiLCJjbGFzcyBSaWdodE1lbnUge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBldmVudDogRnVuY3Rpb247XHJcbiAgICBpc0Rpc3BsYXk6IEZ1bmN0aW9uO1xyXG4gICAgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgZXZlbnQ6IEZ1bmN0aW9uLCBpc0Rpc3BsYXkgPSAoKSA9PiB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IHdpbmRvdy51dWlkKCdyaWdodC1jbGljay1pdGVtJyk7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcclxuICAgICAgICB0aGlzLmlzRGlzcGxheSA9IGlzRGlzcGxheTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LlJpZ2h0TWVudSA9IFJpZ2h0TWVudTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpZ2h0TWVudTsiLCJlbnVtIENvbXBvbmVudFR5cGUge1xyXG4gICAgQnV0dG9uWCAgICAgICAgID0gJ0ktQnV0dG9uJyxcclxuICAgIElucHV0WCAgICAgICAgICA9ICdJLUlucHV0JyxcclxuICAgIFN3aXRjaFggICAgICAgICA9ICdJLVN3aXRjaCcsXHJcbiAgICBDb21ib1ggICAgICAgICAgPSAnSS1Db21ibycsXHJcbiAgICBOYXZpZ2F0b3JYICAgICAgPSAnSS1OYXZpZ2F0b3InLFxyXG4gICAgU2Nyb2xsZXJZICAgICAgID0gJ0ktU2Nyb2xsZXItWScsXHJcbiAgICBUYWJQYW5lbFggICAgICAgPSAnSS1UYWItUGFuZWwnLFxyXG4gICAgU2Nyb2xsZXJYICAgICAgID0gJ0ktU2Nyb2xsZXItWCcsXHJcbiAgICBUYWJsZVggICAgICAgICAgPSAnSS1UYWJsZScsXHJcbiAgICBUYWJWaWV3ICAgICAgICAgPSAnSS1UYWItVmlldycsXHJcbiAgICBOYXZpZ2F0b3JWaWV3ICAgPSAnSS1OYXYtVmlldycsXHJcbiAgICBQcm9ncmVzc1ggICAgICAgPSAnSS1Qcm9ncmVzcycsXHJcbn1cclxuXHJcbndpbmRvdy5Db21wb25lbnRUeXBlID0gQ29tcG9uZW50VHlwZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudFR5cGU7IiwiZW51bSBSc2FDb25zdCB7XHJcbiAgICBmbGFnX3N0YXJ0ID0gJyRESU5HTEotRU5DT0RFLVNUQVJUJCcsXHJcbiAgICBmbGFnX2VuZCA9ICckRElOR0xKLUVOQ09ERS1FTkQkJyxcclxuICAgIGZsYWdfc3BsaXQgPSAnJERJTkdMSi1TUExJVC1GTEFHJCcsXHJcbn1cclxuXHJcbndpbmRvdy5Sc2FDb25zdCA9IFJzYUNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUnNhQ29uc3Q7IiwiaW1wb3J0IHsgUnNhQ29uc3QgfSBmcm9tICdjb3JlL2VudGl0eSc7XHJcblxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocHVibGljS2V5OiBzdHJpbmcgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wdWI7XHJcbn0pKCkpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlc3VsdCA9IGAnJHsgUnNhQ29uc3QuZmxhZ19zdGFydCB9YDtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgaWYgKF90aGlzLmxlbmd0aCA8IDEwMCkge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gd2luZG93LiRyc2EuZW5jcnlwdChfdGhpcywgcHVibGljS2V5KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHRtcCA9IF90aGlzLnN1YnN0cmluZygwLCAxMDApO1xyXG4gICAgICAgICAgICBfdGhpcyA9IF90aGlzLnN1YnN0cmluZygxMDApO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBgJHsgcmVzdWx0IH0keyB3aW5kb3cuJHJzYS5lbmNyeXB0KHRtcCwgcHVibGljS2V5KSB9JHsgUnNhQ29uc3QuZmxhZ19zcGxpdCB9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7IHJlc3VsdCB9JHsgUnNhQ29uc3QuZmxhZ19lbmQgfSdgO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihwcml2YXRlS2V5OiBzdHJpbmcgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wcmk7XHJcbn0pKCkpOiBzdHJpbmcge1xyXG4gICAgbGV0IGZsYWcxID0gdGhpcy5zdGFydHNXaXRoKFJzYUNvbnN0LmZsYWdfc3RhcnQpO1xyXG4gICAgbGV0IGZsYWcyID0gdGhpcy5lbmRzV2l0aChSc2FDb25zdC5mbGFnX2VuZCk7XHJcbiAgICBpZiAoZmxhZzEgIT0gZmxhZzIpIHtcclxuICAgICAgICBg5Yqg5a+G6YWN572u6ZSZ6K+vOiAkeyB0aGlzIH1gLmVycigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgaWYgKGZsYWcxKSB7XHJcbiAgICAgICAgbGV0IHRtcCA9IHRoaXMucmVwbGFjZShSc2FDb25zdC5mbGFnX3N0YXJ0LCAnJykucmVwbGFjZShSc2FDb25zdC5mbGFnX2VuZCwgJycpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBvbmVPZiBvZiB0bXAuc3BsaXQoUnNhQ29uc3QuZmxhZ19zcGxpdCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IHdpbmRvdy4kcnNhLmRlY3J5cHQob25lT2YsIHByaXZhdGVLZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuXHJcblN0cmluZy5wcm90b3R5cGUuZXF1YWxzSWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGFub3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLnRvTG93ZXJDYXNlKCkgPT0gYW5vdGhlci50b0xvd2VyQ2FzZSgpO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzSWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGFub3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoYW5vdGhlci50b0xvd2VyQ2FzZSgpKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICB3aW5kb3cuJHRpcC5pbmZvKHRoaXMsIDIwMDAsICcxMCUnKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24oKSB7XHJcbiAgICB3aW5kb3cuJHRpcC53YXJuKHRoaXMsIDIwMDAsICcxMCUnKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5lcnIgPSBmdW5jdGlvbigpIHtcclxuICAgIHdpbmRvdy4kdGlwLmVycih0aGlzLCAyMDAwLCAnMTAlJyk7XHJcbn0iLCJjb25zdCBRdWV1ZVV0aWxzOiBEaW5nbGpRdWV1ZSA9IHtcclxuICAgIGV2ZW50UG9vbDoge30sXHJcbiAgICBldmVudFF1ZXVlOiB7fSxcclxuICAgIHNlbmRNc2coZXZlbnQ6IHN0cmluZywgZGF0YTogYW55LCBlbGVtZW50SWQ6IHN0cmluZyA9ICcnKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGtleSA9IGV2ZW50O1xyXG4gICAgICAgIGlmIChlbGVtZW50SWQpIHtcclxuICAgICAgICAgICAga2V5ID0gYCR7IGV2ZW50IH06JHsgZWxlbWVudElkIH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBldmVudHMgPSB3aW5kb3cuJHF1ZXVlLmV2ZW50UG9vbFtrZXldO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50cykpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50c1swXShkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGZ1biBvZiBldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZ1bihkYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cucHVzaFRvQXJyYXlJbk9iamVjdCh3aW5kb3cuJHF1ZXVlLmV2ZW50UXVldWUsIGtleSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uKGV2ZW50OiBzdHJpbmcsIGZ1bmM6IEZ1bmN0aW9uLCBlbGVtZW50SWQ6IHN0cmluZyA9ICcnKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGtleSA9IGV2ZW50O1xyXG4gICAgICAgIGlmIChlbGVtZW50SWQpIHtcclxuICAgICAgICAgICAga2V5ID0gYCR7IGV2ZW50IH06JHsgZWxlbWVudElkIH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cucHVzaFRvQXJyYXlJbk9iamVjdCh3aW5kb3cuJHF1ZXVlLmV2ZW50UG9vbCwga2V5LCBmdW5jKTtcclxuICAgICAgICBjb25zdCBldmVudHMgPSB3aW5kb3cuJHF1ZXVlLmV2ZW50UXVldWVba2V5XTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGEgb2YgZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxud2luZG93LiRxdWV1ZSA9IFF1ZXVlVXRpbHM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBRdWV1ZVV0aWxzOyIsImNvbnN0IFRpcFV0aWxzID0ge1xyXG4gICAgZGlzdG9yeVBvcE1zZyhlbGVtZW50OiBFbGVtZW50LCBjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxlbWVudC5hbmltYXRlKHtcclxuICAgICAgICAgICAgb3BhY2l0eTogWycxJywgJzAnXSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBbZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5oZWlnaHQsICcwcHgnXSxcclxuICAgICAgICAgICAgbWFyZ2luOiBbZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5tYXJnaW4sICcwcHgnXSxcclxuICAgICAgICAgICAgcGFkZGluZzogW2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZywgJzBweCddLFxyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMzAwKVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZVBvcE1zZyhtc2c6IHN0cmluZywgdHlwZTogJ2luZm8nIHwgJ3dhcm4nIHwgJ2VycicsIHRpbWVvdXQgPSAyMDAwLCBtYXJnaW5Ub3AgPSAnMTAlJykge1xyXG4gICAgICAgIC8vIOWIm+W7uuWuueWZqFxyXG4gICAgICAgIGxldCBjb250YWluZXI6IEhUTUxFbGVtZW50ID0gd2luZG93LmJ5SWQoJ2Rpbmdsai12LXBvcC1tc2ctY29udGFpbmVyJyk7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pZCA9ICdkaW5nbGotdi1wb3AtbXNnLWNvbnRhaW5lcic7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IG1hcmdpblRvcDtcclxuICAgICAgICBjb25zdCBtc2dMaXN0OiBBcnJheTxIVE1MRWxlbWVudD4gPSB3aW5kb3cuYnlDbGFzcygnZGluZ2xqLXYtcG9wLW1zZycpO1xyXG4gICAgICAgIC8vIOWuueWZqOacgOWkmuWQjOaXtuaYvuekuiA1IOadoea2iOaBrywg6LaF6L+HIDUg5p2h5pe25Yig6Zmk5pyA5pep55qEXHJcbiAgICAgICAgaWYgKG1zZ0xpc3QubGVuZ3RoID49IDUpIHtcclxuICAgICAgICAgICAgbXNnTGlzdC5zb3J0KChuMSwgbjIpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuMS50aW1lIC0gbjIudGltZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnTGlzdC5sZW5ndGggLSA0OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzdG9yeVBvcE1zZyhtc2dMaXN0W2ldLCB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWIm+W7uuS4gOadoeaPkOekuuS/oeaBr1xyXG4gICAgICAgIGNvbnN0IG5ld0VsZW1lbmV0OiBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbmV3RWxlbWVuZXQuY2xhc3NMaXN0LmFkZCgnZGluZ2xqLXYtcG9wLW1zZycsIHR5cGUpXHJcbiAgICAgICAgbmV3RWxlbWVuZXQudGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgLy8g5Yib5bu65o+Q56S6IGljb24sIOS7peihqOi+vuaPkOekuueahOexu+Wei1xyXG4gICAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoJ2Rpbmdsai12LXBvcC1tc2ctaWNvbicsIHR5cGUpO1xyXG4gICAgICAgIGljb24uaW5uZXJUZXh0ID0gdHlwZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKTtcclxuICAgICAgICBuZXdFbGVtZW5ldC5hcHBlbmRDaGlsZChpY29uKTtcclxuICAgICAgICAvLyDov73liqDmj5DnpLrnmoTkv6Hmga9cclxuICAgICAgICBuZXdFbGVtZW5ldC5pbm5lckhUTUwgKz0gbXNnO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdFbGVtZW5ldCk7XHJcbiAgICAgICAgbmV3RWxlbWVuZXQuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgIGhlaWdodDogWycwcHgnLCBnZXRDb21wdXRlZFN0eWxlKG5ld0VsZW1lbmV0KS5oZWlnaHRdLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiBbJzBweCA1cHgnLCAnNXB4IDVweCddLFxyXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IFsnMHB4JywgJzVweCddLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiBbJzAnLCAnMSddLFxyXG4gICAgICAgICAgICB0b3A6IFsnNTBweCcsICcwcHgnXSxcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAvLyDliY3pnaLpg73lh4blpIflsLHnu6osIOa/gOa0u+ivpea2iOaBr1xyXG4gICAgICAgIG5ld0VsZW1lbmV0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgIC8vIOS4gOWumuaXtumXtOWQjumUgOavgeivpea2iOaBr1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3RvcnlQb3BNc2cobmV3RWxlbWVuZXQsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICB9LFxyXG4gICAgaW5mbyhtc2c6IHN0cmluZywgdGltZW91dCA9IDIwMDAsIG9mZnNldFRvcCA9ICcxMCUnKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQb3BNc2cobXNnLCAnaW5mbycsIHRpbWVvdXQsIG9mZnNldFRvcCk7XHJcbiAgICB9LFxyXG4gICAgd2Fybihtc2c6IHN0cmluZywgdGltZW91dCA9IDIwMDAsIG9mZnNldFRvcCA9ICcxMCUnKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQb3BNc2cobXNnLCAnd2FybicsIHRpbWVvdXQsIG9mZnNldFRvcCk7XHJcbiAgICB9LFxyXG4gICAgZXJyKG1zZzogc3RyaW5nLCB0aW1lb3V0ID0gMjAwMCwgb2Zmc2V0VG9wID0gJzEwJScpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBvcE1zZyhtc2csICdlcnInLCB0aW1lb3V0LCBvZmZzZXRUb3ApO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuJHRpcCA9IFRpcFV0aWxzO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGlwVXRpbHM7IiwidmFyIEJJX1JNID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbmV4cG9ydCBmdW5jdGlvbiBpbnQyY2hhcihuKSB7XG4gICAgcmV0dXJuIEJJX1JNLmNoYXJBdChuKTtcbn1cbi8vI3JlZ2lvbiBCSVRfT1BFUkFUSU9OU1xuLy8gKHB1YmxpYykgdGhpcyAmIGFcbmV4cG9ydCBmdW5jdGlvbiBvcF9hbmQoeCwgeSkge1xuICAgIHJldHVybiB4ICYgeTtcbn1cbi8vIChwdWJsaWMpIHRoaXMgfCBhXG5leHBvcnQgZnVuY3Rpb24gb3Bfb3IoeCwgeSkge1xuICAgIHJldHVybiB4IHwgeTtcbn1cbi8vIChwdWJsaWMpIHRoaXMgXiBhXG5leHBvcnQgZnVuY3Rpb24gb3BfeG9yKHgsIHkpIHtcbiAgICByZXR1cm4geCBeIHk7XG59XG4vLyAocHVibGljKSB0aGlzICYgfmFcbmV4cG9ydCBmdW5jdGlvbiBvcF9hbmRub3QoeCwgeSkge1xuICAgIHJldHVybiB4ICYgfnk7XG59XG4vLyByZXR1cm4gaW5kZXggb2YgbG93ZXN0IDEtYml0IGluIHgsIHggPCAyXjMxXG5leHBvcnQgZnVuY3Rpb24gbGJpdCh4KSB7XG4gICAgaWYgKHggPT0gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHggJiAweGZmZmYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gMTY7XG4gICAgICAgIHIgKz0gMTY7XG4gICAgfVxuICAgIGlmICgoeCAmIDB4ZmYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gODtcbiAgICAgICAgciArPSA4O1xuICAgIH1cbiAgICBpZiAoKHggJiAweGYpID09IDApIHtcbiAgICAgICAgeCA+Pj0gNDtcbiAgICAgICAgciArPSA0O1xuICAgIH1cbiAgICBpZiAoKHggJiAzKSA9PSAwKSB7XG4gICAgICAgIHggPj49IDI7XG4gICAgICAgIHIgKz0gMjtcbiAgICB9XG4gICAgaWYgKCh4ICYgMSkgPT0gMCkge1xuICAgICAgICArK3I7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuLy8gcmV0dXJuIG51bWJlciBvZiAxIGJpdHMgaW4geFxuZXhwb3J0IGZ1bmN0aW9uIGNiaXQoeCkge1xuICAgIHZhciByID0gMDtcbiAgICB3aGlsZSAoeCAhPSAwKSB7XG4gICAgICAgIHggJj0geCAtIDE7XG4gICAgICAgICsrcjtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG4vLyNlbmRyZWdpb24gQklUX09QRVJBVElPTlNcbiIsImltcG9ydCB7IGludDJjaGFyIH0gZnJvbSBcIi4vdXRpbFwiO1xudmFyIGI2NG1hcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xudmFyIGI2NHBhZCA9IFwiPVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGhleDJiNjQoaCkge1xuICAgIHZhciBpO1xuICAgIHZhciBjO1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgKyAzIDw9IGgubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgYyA9IHBhcnNlSW50KGguc3Vic3RyaW5nKGksIGkgKyAzKSwgMTYpO1xuICAgICAgICByZXQgKz0gYjY0bWFwLmNoYXJBdChjID4+IDYpICsgYjY0bWFwLmNoYXJBdChjICYgNjMpO1xuICAgIH1cbiAgICBpZiAoaSArIDEgPT0gaC5sZW5ndGgpIHtcbiAgICAgICAgYyA9IHBhcnNlSW50KGguc3Vic3RyaW5nKGksIGkgKyAxKSwgMTYpO1xuICAgICAgICByZXQgKz0gYjY0bWFwLmNoYXJBdChjIDw8IDIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpICsgMiA9PSBoLmxlbmd0aCkge1xuICAgICAgICBjID0gcGFyc2VJbnQoaC5zdWJzdHJpbmcoaSwgaSArIDIpLCAxNik7XG4gICAgICAgIHJldCArPSBiNjRtYXAuY2hhckF0KGMgPj4gMikgKyBiNjRtYXAuY2hhckF0KChjICYgMykgPDwgNCk7XG4gICAgfVxuICAgIHdoaWxlICgocmV0Lmxlbmd0aCAmIDMpID4gMCkge1xuICAgICAgICByZXQgKz0gYjY0cGFkO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLy8gY29udmVydCBhIGJhc2U2NCBzdHJpbmcgdG8gaGV4XG5leHBvcnQgZnVuY3Rpb24gYjY0dG9oZXgocykge1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIHZhciBpO1xuICAgIHZhciBrID0gMDsgLy8gYjY0IHN0YXRlLCAwLTNcbiAgICB2YXIgc2xvcCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHMuY2hhckF0KGkpID09IGI2NHBhZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHYgPSBiNjRtYXAuaW5kZXhPZihzLmNoYXJBdChpKSk7XG4gICAgICAgIGlmICh2IDwgMCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgPT0gMCkge1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKHYgPj4gMik7XG4gICAgICAgICAgICBzbG9wID0gdiAmIDM7XG4gICAgICAgICAgICBrID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrID09IDEpIHtcbiAgICAgICAgICAgIHJldCArPSBpbnQyY2hhcigoc2xvcCA8PCAyKSB8ICh2ID4+IDQpKTtcbiAgICAgICAgICAgIHNsb3AgPSB2ICYgMHhmO1xuICAgICAgICAgICAgayA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoayA9PSAyKSB7XG4gICAgICAgICAgICByZXQgKz0gaW50MmNoYXIoc2xvcCk7XG4gICAgICAgICAgICByZXQgKz0gaW50MmNoYXIodiA+PiAyKTtcbiAgICAgICAgICAgIHNsb3AgPSB2ICYgMztcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKChzbG9wIDw8IDIpIHwgKHYgPj4gNCkpO1xuICAgICAgICAgICAgcmV0ICs9IGludDJjaGFyKHYgJiAweGYpO1xuICAgICAgICAgICAgayA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGsgPT0gMSkge1xuICAgICAgICByZXQgKz0gaW50MmNoYXIoc2xvcCA8PCAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbi8vIGNvbnZlcnQgYSBiYXNlNjQgc3RyaW5nIHRvIGEgYnl0ZS9udW1iZXIgYXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBiNjR0b0JBKHMpIHtcbiAgICAvLyBwaWdneWJhY2sgb24gYjY0dG9oZXggZm9yIG5vdywgb3B0aW1pemUgbGF0ZXJcbiAgICB2YXIgaCA9IGI2NHRvaGV4KHMpO1xuICAgIHZhciBpO1xuICAgIHZhciBhID0gW107XG4gICAgZm9yIChpID0gMDsgMiAqIGkgPCBoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFbaV0gPSBwYXJzZUludChoLnN1YnN0cmluZygyICogaSwgMiAqIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbiIsIi8vIEhleCBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDEzIExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG52YXIgZGVjb2RlcjtcbmV4cG9ydCB2YXIgSGV4ID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChkZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBoZXggPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgICAgICAgICAgIHZhciBpZ25vcmUgPSBcIiBcXGZcXG5cXHJcXHRcXHUwMEEwXFx1MjAyOFxcdTIwMjlcIjtcbiAgICAgICAgICAgIGRlY29kZXIgPSB7fTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltoZXguY2hhckF0KGkpXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZXggPSBoZXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDEwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgICAgIGRlY29kZXJbaGV4LmNoYXJBdChpKV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlnbm9yZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGRlY29kZXJbaWdub3JlLmNoYXJBdChpKV0gPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBiaXRzID0gMDtcbiAgICAgICAgdmFyIGNoYXJfY291bnQgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBhLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChjID09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjID0gZGVjb2RlcltjXTtcbiAgICAgICAgICAgIGlmIChjID09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXIgYXQgb2Zmc2V0IFwiICsgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaXRzIHw9IGM7XG4gICAgICAgICAgICBpZiAoKytjaGFyX2NvdW50ID49IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGNoYXJfY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYml0cyA8PD0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcl9jb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kaW5nIGluY29tcGxldGU6IDQgYml0cyBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufTtcbiIsIi8vIEJhc2U2NCBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDEzIExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG52YXIgZGVjb2RlcjtcbmV4cG9ydCB2YXIgQmFzZTY0ID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChkZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBiNjQgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgICAgICAgICAgIHZhciBpZ25vcmUgPSBcIj0gXFxmXFxuXFxyXFx0XFx1MDBBMFxcdTIwMjhcXHUyMDI5XCI7XG4gICAgICAgICAgICBkZWNvZGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltiNjQuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNvZGVyWyctJ10gPSA2MjsgLy8rXG4gICAgICAgICAgICBkZWNvZGVyWydfJ10gPSA2MzsgLy8tXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWdub3JlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcltpZ25vcmUuY2hhckF0KGkpXSA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgdmFyIGJpdHMgPSAwO1xuICAgICAgICB2YXIgY2hhcl9jb3VudCA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGEuY2hhckF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgPSBkZWNvZGVyW2NdO1xuICAgICAgICAgICAgaWYgKGMgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGNoYXJhY3RlciBhdCBvZmZzZXQgXCIgKyBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpdHMgfD0gYztcbiAgICAgICAgICAgIGlmICgrK2NoYXJfY291bnQgPj0gNCkge1xuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDE2KTtcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSAoYml0cyA+PiA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gYml0cyAmIDB4RkY7XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAgICAgY2hhcl9jb3VudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaXRzIDw8PSA2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoY2hhcl9jb3VudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhc2U2NCBlbmNvZGluZyBpbmNvbXBsZXRlOiBhdCBsZWFzdCAyIGJpdHMgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSAoYml0cyA+PiAxMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gKGJpdHMgPj4gMTYpO1xuICAgICAgICAgICAgICAgIG91dFtvdXQubGVuZ3RoXSA9IChiaXRzID4+IDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgcmU6IC8tLS0tLUJFR0lOIFteLV0rLS0tLS0oW0EtWmEtejAtOStcXC89XFxzXSspLS0tLS1FTkQgW14tXSstLS0tLXxiZWdpbi1iYXNlNjRbXlxcbl0rXFxuKFtBLVphLXowLTkrXFwvPVxcc10rKT09PT0vLFxuICAgIHVuYXJtb3I6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBtID0gQmFzZTY0LnJlLmV4ZWMoYSk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICBpZiAobVsxXSkge1xuICAgICAgICAgICAgICAgIGEgPSBtWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobVsyXSkge1xuICAgICAgICAgICAgICAgIGEgPSBtWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVnRXhwIG91dCBvZiBzeW5jXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCYXNlNjQuZGVjb2RlKGEpO1xuICAgIH1cbn07XG4iLCIvLyBCaWcgaW50ZWdlciBiYXNlLTEwIHByaW50aW5nIGxpYnJhcnlcbi8vIENvcHlyaWdodCAoYykgMjAxNCBMYXBvIEx1Y2hpbmkgPGxhcG9AbGFwby5pdD5cbi8vIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxuLy8gcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZVxuLy8gY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFU1xuLy8gV0lUSCBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1Jcbi8vIEFOWSBTUEVDSUFMLCBESVJFQ1QsIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVNcbi8vIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0Zcbi8vIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIGltbWVkOiB0cnVlLCBsYXRlZGVmOiB0cnVlLCB1bmRlZjogdHJ1ZSwgcmVnZXhkYXNoOiBmYWxzZSAqL1xudmFyIG1heCA9IDEwMDAwMDAwMDAwMDAwOyAvLyBiaWdnZXN0IGludGVnZXIgdGhhdCBjYW4gc3RpbGwgZml0IDJeNTMgd2hlbiBtdWx0aXBsaWVkIGJ5IDI1NlxudmFyIEludDEwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludDEwKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmID0gWyt2YWx1ZSB8fCAwXTtcbiAgICB9XG4gICAgSW50MTAucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIChtLCBjKSB7XG4gICAgICAgIC8vIGFzc2VydChtIDw9IDI1NilcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIGwgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICB0ID0gYltpXSAqIG0gKyBjO1xuICAgICAgICAgICAgaWYgKHQgPCBtYXgpIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGMgPSAwIHwgKHQgLyBtYXgpO1xuICAgICAgICAgICAgICAgIHQgLT0gYyAqIG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID4gMCkge1xuICAgICAgICAgICAgYltpXSA9IGM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyBhc3NlcnQobSA8PSAyNTYpXG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciBsID0gYi5sZW5ndGg7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdCA9IGJbaV0gLSBjO1xuICAgICAgICAgICAgaWYgKHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgdCArPSBtYXg7XG4gICAgICAgICAgICAgICAgYyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbaV0gPSB0O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChiW2IubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAgIGIucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChiYXNlKSB7XG4gICAgICAgIGlmICgoYmFzZSB8fCAxMCkgIT0gMTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9ubHkgYmFzZSAxMCBpcyBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgdmFyIHMgPSBiW2IubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMjsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHMgKz0gKG1heCArIGJbaV0pLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgSW50MTAucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiID0gdGhpcy5idWY7XG4gICAgICAgIHZhciB2ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IGIubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHYgPSB2ICogbWF4ICsgYltpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIEludDEwLnByb3RvdHlwZS5zaW1wbGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIgPSB0aGlzLmJ1ZjtcbiAgICAgICAgcmV0dXJuIChiLmxlbmd0aCA9PSAxKSA/IGJbMF0gOiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEludDEwO1xufSgpKTtcbmV4cG9ydCB7IEludDEwIH07XG4iLCIvLyBBU04uMSBKYXZhU2NyaXB0IGRlY29kZXJcbi8vIENvcHlyaWdodCAoYykgMjAwOC0yMDE0IExhcG8gTHVjaGluaSA8bGFwb0BsYXBvLml0PlxuLy8gUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4vLyBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4vLyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuLy8gQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuLy8gV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuLy8gT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgaW1tZWQ6IHRydWUsIGxhdGVkZWY6IHRydWUsIHVuZGVmOiB0cnVlLCByZWdleGRhc2g6IGZhbHNlICovXG4vKmdsb2JhbCBvaWRzICovXG5pbXBvcnQgeyBJbnQxMCB9IGZyb20gXCIuL2ludDEwXCI7XG52YXIgZWxsaXBzaXMgPSBcIlxcdTIwMjZcIjtcbnZhciByZVRpbWVTID0gL14oXFxkXFxkKSgwWzEtOV18MVswLTJdKSgwWzEtOV18WzEyXVxcZHwzWzAxXSkoWzAxXVxcZHwyWzAtM10pKD86KFswLTVdXFxkKSg/OihbMC01XVxcZCkoPzpbLixdKFxcZHsxLDN9KSk/KT8pPyhafFstK10oPzpbMF1cXGR8MVswLTJdKShbMC01XVxcZCk/KT8kLztcbnZhciByZVRpbWVMID0gL14oXFxkXFxkXFxkXFxkKSgwWzEtOV18MVswLTJdKSgwWzEtOV18WzEyXVxcZHwzWzAxXSkoWzAxXVxcZHwyWzAtM10pKD86KFswLTVdXFxkKSg/OihbMC01XVxcZCkoPzpbLixdKFxcZHsxLDN9KSk/KT8pPyhafFstK10oPzpbMF1cXGR8MVswLTJdKShbMC01XVxcZCk/KT8kLztcbmZ1bmN0aW9uIHN0cmluZ0N1dChzdHIsIGxlbikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gbGVuKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgbGVuKSArIGVsbGlwc2lzO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxudmFyIFN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHJlYW0oZW5jLCBwb3MpIHtcbiAgICAgICAgdGhpcy5oZXhEaWdpdHMgPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgICAgICAgaWYgKGVuYyBpbnN0YW5jZW9mIFN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5lbmMgPSBlbmMuZW5jO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBlbmMucG9zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jIHNob3VsZCBiZSBhbiBhcnJheSBvciBhIGJpbmFyeSBzdHJpbmdcbiAgICAgICAgICAgIHRoaXMuZW5jID0gZW5jO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3RyZWFtLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9zID0gdGhpcy5wb3MrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zID49IHRoaXMuZW5jLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGluZyBieXRlIG9mZnNldCBcIi5jb25jYXQocG9zLCBcIiBvbiBhIHN0cmVhbSBvZiBsZW5ndGggXCIpLmNvbmNhdCh0aGlzLmVuYy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGlzLmVuYykgPyB0aGlzLmVuYy5jaGFyQ29kZUF0KHBvcykgOiB0aGlzLmVuY1twb3NdO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5oZXhCeXRlID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGV4RGlnaXRzLmNoYXJBdCgoYiA+PiA0KSAmIDB4RikgKyB0aGlzLmhleERpZ2l0cy5jaGFyQXQoYiAmIDB4Rik7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmhleER1bXAgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcmF3KSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIHMgKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KGkpKTtcbiAgICAgICAgICAgIGlmIChyYXcgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkgJiAweEYpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDc6XG4gICAgICAgICAgICAgICAgICAgICAgICBzICs9IFwiICBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4RjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBcIiBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmlzQVNDSUkgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldChpKTtcbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDE3Nikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VTdHJpbmdJU08gPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZVN0cmluZ1VURiA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOykge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldChpKyspO1xuICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoYyA+IDE5MSkgJiYgKGMgPCAyMjQpKSB7XG4gICAgICAgICAgICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MUYpIDw8IDYpIHwgKHRoaXMuZ2V0KGkrKykgJiAweDNGKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgwRikgPDwgMTIpIHwgKCh0aGlzLmdldChpKyspICYgMHgzRikgPDwgNikgfCAodGhpcy5nZXQoaSsrKSAmIDB4M0YpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VTdHJpbmdCTVAgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgc3RyID0gXCJcIjtcbiAgICAgICAgdmFyIGhpO1xuICAgICAgICB2YXIgbG87XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDspIHtcbiAgICAgICAgICAgIGhpID0gdGhpcy5nZXQoaSsrKTtcbiAgICAgICAgICAgIGxvID0gdGhpcy5nZXQoaSsrKTtcbiAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChoaSA8PCA4KSB8IGxvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZVRpbWUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgc2hvcnRZZWFyKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5wYXJzZVN0cmluZ0lTTyhzdGFydCwgZW5kKTtcbiAgICAgICAgdmFyIG0gPSAoc2hvcnRZZWFyID8gcmVUaW1lUyA6IHJlVGltZUwpLmV4ZWMocyk7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiVW5yZWNvZ25pemVkIHRpbWU6IFwiICsgcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvcnRZZWFyKSB7XG4gICAgICAgICAgICAvLyB0byBhdm9pZCBxdWVyeWluZyB0aGUgdGltZXIsIHVzZSB0aGUgZml4ZWQgcmFuZ2UgWzE5NzAsIDIwNjldXG4gICAgICAgICAgICAvLyBpdCB3aWxsIGNvbmZvcm0gd2l0aCBJVFUgWC40MDAgWy0xMCwgKzQwXSBzbGlkaW5nIHdpbmRvdyB1bnRpbCAyMDMwXG4gICAgICAgICAgICBtWzFdID0gK21bMV07XG4gICAgICAgICAgICBtWzFdICs9ICgrbVsxXSA8IDcwKSA/IDIwMDAgOiAxOTAwO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBtWzFdICsgXCItXCIgKyBtWzJdICsgXCItXCIgKyBtWzNdICsgXCIgXCIgKyBtWzRdO1xuICAgICAgICBpZiAobVs1XSkge1xuICAgICAgICAgICAgcyArPSBcIjpcIiArIG1bNV07XG4gICAgICAgICAgICBpZiAobVs2XSkge1xuICAgICAgICAgICAgICAgIHMgKz0gXCI6XCIgKyBtWzZdO1xuICAgICAgICAgICAgICAgIGlmIChtWzddKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgKz0gXCIuXCIgKyBtWzddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobVs4XSkge1xuICAgICAgICAgICAgcyArPSBcIiBVVENcIjtcbiAgICAgICAgICAgIGlmIChtWzhdICE9IFwiWlwiKSB7XG4gICAgICAgICAgICAgICAgcyArPSBtWzhdO1xuICAgICAgICAgICAgICAgIGlmIChtWzldKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgKz0gXCI6XCIgKyBtWzldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUucGFyc2VJbnRlZ2VyID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIHYgPSB0aGlzLmdldChzdGFydCk7XG4gICAgICAgIHZhciBuZWcgPSAodiA+IDEyNyk7XG4gICAgICAgIHZhciBwYWQgPSBuZWcgPyAyNTUgOiAwO1xuICAgICAgICB2YXIgbGVuO1xuICAgICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICAgIC8vIHNraXAgdW51c2VmdWwgYml0cyAobm90IGFsbG93ZWQgaW4gREVSKVxuICAgICAgICB3aGlsZSAodiA9PSBwYWQgJiYgKytzdGFydCA8IGVuZCkge1xuICAgICAgICAgICAgdiA9IHRoaXMuZ2V0KHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBlbmQgLSBzdGFydDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5lZyA/IC0xIDogMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93IGJpdCBsZW5ndGggb2YgaHVnZSBpbnRlZ2Vyc1xuICAgICAgICBpZiAobGVuID4gNCkge1xuICAgICAgICAgICAgcyA9IHY7XG4gICAgICAgICAgICBsZW4gPDw9IDM7XG4gICAgICAgICAgICB3aGlsZSAoKCgrcyBeIHBhZCkgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcyA9ICtzIDw8IDE7XG4gICAgICAgICAgICAgICAgLS1sZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzID0gXCIoXCIgKyBsZW4gKyBcIiBiaXQpXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVjb2RlIHRoZSBpbnRlZ2VyXG4gICAgICAgIGlmIChuZWcpIHtcbiAgICAgICAgICAgIHYgPSB2IC0gMjU2O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gbmV3IEludDEwKHYpO1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQgKyAxOyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIG4ubXVsQWRkKDI1NiwgdGhpcy5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzICsgbi50b1N0cmluZygpO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZUJpdFN0cmluZyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHVudXNlZEJpdCA9IHRoaXMuZ2V0KHN0YXJ0KTtcbiAgICAgICAgdmFyIGxlbkJpdCA9ICgoZW5kIC0gc3RhcnQgLSAxKSA8PCAzKSAtIHVudXNlZEJpdDtcbiAgICAgICAgdmFyIGludHJvID0gXCIoXCIgKyBsZW5CaXQgKyBcIiBiaXQpXFxuXCI7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgMTsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYiA9IHRoaXMuZ2V0KGkpO1xuICAgICAgICAgICAgdmFyIHNraXAgPSAoaSA9PSBlbmQgLSAxKSA/IHVudXNlZEJpdCA6IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gNzsgaiA+PSBza2lwOyAtLWopIHtcbiAgICAgICAgICAgICAgICBzICs9IChiID4+IGopICYgMSA/IFwiMVwiIDogXCIwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50cm8gKyBzdHJpbmdDdXQocywgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50cm8gKyBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZU9jdGV0U3RyaW5nID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIG1heExlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5pc0FTQ0lJKHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nQ3V0KHRoaXMucGFyc2VTdHJpbmdJU08oc3RhcnQsIGVuZCksIG1heExlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICB2YXIgcyA9IFwiKFwiICsgbGVuICsgXCIgYnl0ZSlcXG5cIjtcbiAgICAgICAgbWF4TGVuZ3RoIC89IDI7IC8vIHdlIHdvcmsgaW4gYnl0ZXNcbiAgICAgICAgaWYgKGxlbiA+IG1heExlbmd0aCkge1xuICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBtYXhMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgIHMgKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KGkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBzICs9IGVsbGlwc2lzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5wYXJzZU9JRCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHMgPSBcIlwiO1xuICAgICAgICB2YXIgbiA9IG5ldyBJbnQxMCgpO1xuICAgICAgICB2YXIgYml0cyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMuZ2V0KGkpO1xuICAgICAgICAgICAgbi5tdWxBZGQoMTI4LCB2ICYgMHg3Rik7XG4gICAgICAgICAgICBiaXRzICs9IDc7XG4gICAgICAgICAgICBpZiAoISh2ICYgMHg4MCkpIHsgLy8gZmluaXNoZWRcbiAgICAgICAgICAgICAgICBpZiAocyA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBuID0gbi5zaW1wbGlmeSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIEludDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnN1Yig4MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gXCIyLlwiICsgbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBuIDwgODAgPyBuIDwgNDAgPyAwIDogMSA6IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gbSArIFwiLlwiICsgKG4gLSBtICogNDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzICs9IFwiLlwiICsgbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dChzLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuID0gbmV3IEludDEwKCk7XG4gICAgICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgICBzICs9IFwiLmluY29tcGxldGVcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW07XG59KCkpO1xuZXhwb3J0IHsgU3RyZWFtIH07XG52YXIgQVNOMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBU04xKHN0cmVhbSwgaGVhZGVyLCBsZW5ndGgsIHRhZywgc3ViKSB7XG4gICAgICAgIGlmICghKHRhZyBpbnN0YW5jZW9mIEFTTjFUYWcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRhZyB2YWx1ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XG4gICAgICAgIHRoaXMuc3ViID0gc3ViO1xuICAgIH1cbiAgICBBU04xLnByb3RvdHlwZS50eXBlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnRhZy50YWdDbGFzcykge1xuICAgICAgICAgICAgY2FzZSAwOiAvLyB1bml2ZXJzYWxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFnLnRhZ051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFT0NcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQk9PTEVBTlwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJJTlRFR0VSXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkJJVF9TVFJJTkdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT0NURVRfU1RSSU5HXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5VTExcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT0JKRUNUX0lERU5USUZJRVJcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0RGVzY3JpcHRvclwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDg6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFWFRFUk5BTFwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDk6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJSRUFMXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwQTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVOVU1FUkFURURcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDBCOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRU1CRURERURfUERWXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwQzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlVURjhTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU0VRVUVOQ0VcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU0VUXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk51bWVyaWNTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUHJpbnRhYmxlU3RyaW5nXCI7IC8vIEFTQ0lJIHN1YnNldFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJUZWxldGV4U3RyaW5nXCI7IC8vIGFrYSBUNjFTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmlkZW90ZXhTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSUE1U3RyaW5nXCI7IC8vIEFTQ0lJXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlVUQ1RpbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDE4OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiR2VuZXJhbGl6ZWRUaW1lXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMHgxOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkdyYXBoaWNTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFBOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmlzaWJsZVN0cmluZ1wiOyAvLyBBU0NJSSBzdWJzZXRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFCOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiR2VuZXJhbFN0cmluZ1wiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MUM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJVbml2ZXJzYWxTdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDFFOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQk1QU3RyaW5nXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIlVuaXZlcnNhbF9cIiArIHRoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFwcGxpY2F0aW9uX1wiICsgdGhpcy50YWcudGFnTnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgdGhpcy50YWcudGFnTnVtYmVyLnRvU3RyaW5nKCkgKyBcIl1cIjsgLy8gQ29udGV4dFxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIlByaXZhdGVfXCIgKyB0aGlzLnRhZy50YWdOdW1iZXIudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUuY29udGVudCA9IGZ1bmN0aW9uIChtYXhMZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMudGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLnBvc0NvbnRlbnQoKTtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGguYWJzKHRoaXMubGVuZ3RoKTtcbiAgICAgICAgaWYgKCF0aGlzLnRhZy5pc1VuaXZlcnNhbCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlT2N0ZXRTdHJpbmcoY29udGVudCwgY29udGVudCArIGxlbiwgbWF4TGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMudGFnLnRhZ051bWJlcikge1xuICAgICAgICAgICAgY2FzZSAweDAxOiAvLyBCT09MRUFOXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0cmVhbS5nZXQoY29udGVudCkgPT09IDApID8gXCJmYWxzZVwiIDogXCJ0cnVlXCI7XG4gICAgICAgICAgICBjYXNlIDB4MDI6IC8vIElOVEVHRVJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGFyc2VJbnRlZ2VyKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4pO1xuICAgICAgICAgICAgY2FzZSAweDAzOiAvLyBCSVRfU1RSSU5HXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucGFyc2VCaXRTdHJpbmcoY29udGVudCwgY29udGVudCArIGxlbiwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgwNDogLy8gT0NURVRfU1RSSU5HXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ucGFyc2VPY3RldFN0cmluZyhjb250ZW50LCBjb250ZW50ICsgbGVuLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgLy8gY2FzZSAweDA1OiAvLyBOVUxMXG4gICAgICAgICAgICBjYXNlIDB4MDY6IC8vIE9CSkVDVF9JREVOVElGSUVSXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlT0lEKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4sIG1heExlbmd0aCk7XG4gICAgICAgICAgICAvLyBjYXNlIDB4MDc6IC8vIE9iamVjdERlc2NyaXB0b3JcbiAgICAgICAgICAgIC8vIGNhc2UgMHgwODogLy8gRVhURVJOQUxcbiAgICAgICAgICAgIC8vIGNhc2UgMHgwOTogLy8gUkVBTFxuICAgICAgICAgICAgLy8gY2FzZSAweDBBOiAvLyBFTlVNRVJBVEVEXG4gICAgICAgICAgICAvLyBjYXNlIDB4MEI6IC8vIEVNQkVEREVEX1BEVlxuICAgICAgICAgICAgY2FzZSAweDEwOiAvLyBTRVFVRU5DRVxuICAgICAgICAgICAgY2FzZSAweDExOiAvLyBTRVRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiKFwiICsgdGhpcy5zdWIubGVuZ3RoICsgXCIgZWxlbSlcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIihubyBlbGVtKVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMHgwQzogLy8gVVRGOFN0cmluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdDdXQodGhpcy5zdHJlYW0ucGFyc2VTdHJpbmdVVEYoY29udGVudCwgY29udGVudCArIGxlbiksIG1heExlbmd0aCk7XG4gICAgICAgICAgICBjYXNlIDB4MTI6IC8vIE51bWVyaWNTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxMzogLy8gUHJpbnRhYmxlU3RyaW5nXG4gICAgICAgICAgICBjYXNlIDB4MTQ6IC8vIFRlbGV0ZXhTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxNTogLy8gVmlkZW90ZXhTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxNjogLy8gSUE1U3RyaW5nXG4gICAgICAgICAgICAvLyBjYXNlIDB4MTk6IC8vIEdyYXBoaWNTdHJpbmdcbiAgICAgICAgICAgIGNhc2UgMHgxQTogLy8gVmlzaWJsZVN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgMHgxQjogLy8gR2VuZXJhbFN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgMHgxQzogLy8gVW5pdmVyc2FsU3RyaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dCh0aGlzLnN0cmVhbS5wYXJzZVN0cmluZ0lTTyhjb250ZW50LCBjb250ZW50ICsgbGVuKSwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgxRTogLy8gQk1QU3RyaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0N1dCh0aGlzLnN0cmVhbS5wYXJzZVN0cmluZ0JNUChjb250ZW50LCBjb250ZW50ICsgbGVuKSwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgMHgxNzogLy8gVVRDVGltZVxuICAgICAgICAgICAgY2FzZSAweDE4OiAvLyBHZW5lcmFsaXplZFRpbWVcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGFyc2VUaW1lKGNvbnRlbnQsIGNvbnRlbnQgKyBsZW4sICh0aGlzLnRhZy50YWdOdW1iZXIgPT0gMHgxNykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVOYW1lKCkgKyBcIkBcIiArIHRoaXMuc3RyZWFtLnBvcyArIFwiW2hlYWRlcjpcIiArIHRoaXMuaGVhZGVyICsgXCIsbGVuZ3RoOlwiICsgdGhpcy5sZW5ndGggKyBcIixzdWI6XCIgKyAoKHRoaXMuc3ViID09PSBudWxsKSA/IFwibnVsbFwiIDogdGhpcy5zdWIubGVuZ3RoKSArIFwiXVwiO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUudG9QcmV0dHlTdHJpbmcgPSBmdW5jdGlvbiAoaW5kZW50KSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5kZW50ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcyA9IGluZGVudCArIHRoaXMudHlwZU5hbWUoKSArIFwiIEBcIiArIHRoaXMuc3RyZWFtLnBvcztcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIHMgKz0gXCIrXCI7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMudGFnLnRhZ0NvbnN0cnVjdGVkKSB7XG4gICAgICAgICAgICBzICs9IFwiIChjb25zdHJ1Y3RlZClcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgodGhpcy50YWcuaXNVbml2ZXJzYWwoKSAmJiAoKHRoaXMudGFnLnRhZ051bWJlciA9PSAweDAzKSB8fCAodGhpcy50YWcudGFnTnVtYmVyID09IDB4MDQpKSkgJiYgKHRoaXMuc3ViICE9PSBudWxsKSkge1xuICAgICAgICAgICAgcyArPSBcIiAoZW5jYXBzdWxhdGVzKVwiO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gXCJcXG5cIjtcbiAgICAgICAgaWYgKHRoaXMuc3ViICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpbmRlbnQgKz0gXCIgIFwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heCA9IHRoaXMuc3ViLmxlbmd0aDsgaSA8IG1heDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcyArPSB0aGlzLnN1YltpXS50b1ByZXR0eVN0cmluZyhpbmRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgQVNOMS5wcm90b3R5cGUucG9zU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb3M7XG4gICAgfTtcbiAgICBBU04xLnByb3RvdHlwZS5wb3NDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucG9zICsgdGhpcy5oZWFkZXI7XG4gICAgfTtcbiAgICBBU04xLnByb3RvdHlwZS5wb3NFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb3MgKyB0aGlzLmhlYWRlciArIE1hdGguYWJzKHRoaXMubGVuZ3RoKTtcbiAgICB9O1xuICAgIEFTTjEucHJvdG90eXBlLnRvSGV4U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0uaGV4RHVtcCh0aGlzLnBvc1N0YXJ0KCksIHRoaXMucG9zRW5kKCksIHRydWUpO1xuICAgIH07XG4gICAgQVNOMS5kZWNvZGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgIHZhciBidWYgPSBzdHJlYW0uZ2V0KCk7XG4gICAgICAgIHZhciBsZW4gPSBidWYgJiAweDdGO1xuICAgICAgICBpZiAobGVuID09IGJ1Zikge1xuICAgICAgICAgICAgcmV0dXJuIGxlbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBubyByZWFzb24gdG8gdXNlIEludDEwLCBhcyBpdCB3b3VsZCBiZSBhIGh1Z2UgYnVmZmVyIGFueXdheXNcbiAgICAgICAgaWYgKGxlbiA+IDYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBvdmVyIDQ4IGJpdHMgbm90IHN1cHBvcnRlZCBhdCBwb3NpdGlvbiBcIiArIChzdHJlYW0ucG9zIC0gMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IC8vIHVuZGVmaW5lZFxuICAgICAgICBidWYgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBidWYgPSAoYnVmICogMjU2KSArIHN0cmVhbS5nZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGhleGFkZWNpbWFsIHZhbHVlIChhcyBhIHN0cmluZykgb2YgdGhlIGN1cnJlbnQgQVNOLjEgZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEFTTjEucHJvdG90eXBlLmdldEhleFN0cmluZ1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGV4U3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5oZWFkZXIgKiAyO1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggKiAyO1xuICAgICAgICByZXR1cm4gaGV4U3RyaW5nLnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBBU04xLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgaWYgKCEoc3RyIGluc3RhbmNlb2YgU3RyZWFtKSkge1xuICAgICAgICAgICAgc3RyZWFtID0gbmV3IFN0cmVhbShzdHIsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RyZWFtID0gc3RyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJlYW1TdGFydCA9IG5ldyBTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgdmFyIHRhZyA9IG5ldyBBU04xVGFnKHN0cmVhbSk7XG4gICAgICAgIHZhciBsZW4gPSBBU04xLmRlY29kZUxlbmd0aChzdHJlYW0pO1xuICAgICAgICB2YXIgc3RhcnQgPSBzdHJlYW0ucG9zO1xuICAgICAgICB2YXIgaGVhZGVyID0gc3RhcnQgLSBzdHJlYW1TdGFydC5wb3M7XG4gICAgICAgIHZhciBzdWIgPSBudWxsO1xuICAgICAgICB2YXIgZ2V0U3ViID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgaWYgKGxlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGRlZmluaXRlIGxlbmd0aFxuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIGxlbjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RyZWFtLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICByZXRbcmV0Lmxlbmd0aF0gPSBBU04xLmRlY29kZShzdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLnBvcyAhPSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGVudCBzaXplIGlzIG5vdCBjb3JyZWN0IGZvciBjb250YWluZXIgc3RhcnRpbmcgYXQgb2Zmc2V0IFwiICsgc3RhcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBsZW5ndGhcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IEFTTjEuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy50YWcuaXNFT0MoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0W3JldC5sZW5ndGhdID0gcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGFydCAtIHN0cmVhbS5wb3M7IC8vIHVuZGVmaW5lZCBsZW5ndGhzIGFyZSByZXByZXNlbnRlZCBhcyBuZWdhdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhjZXB0aW9uIHdoaWxlIGRlY29kaW5nIHVuZGVmaW5lZCBsZW5ndGggY29udGVudDogXCIgKyBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGFnLnRhZ0NvbnN0cnVjdGVkKSB7XG4gICAgICAgICAgICAvLyBtdXN0IGhhdmUgdmFsaWQgY29udGVudFxuICAgICAgICAgICAgc3ViID0gZ2V0U3ViKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGFnLmlzVW5pdmVyc2FsKCkgJiYgKCh0YWcudGFnTnVtYmVyID09IDB4MDMpIHx8ICh0YWcudGFnTnVtYmVyID09IDB4MDQpKSkge1xuICAgICAgICAgICAgLy8gc29tZXRpbWVzIEJpdFN0cmluZyBhbmQgT2N0ZXRTdHJpbmcgYXJlIHVzZWQgdG8gZW5jYXBzdWxhdGUgQVNOLjFcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZy50YWdOdW1iZXIgPT0gMHgwMykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLmdldCgpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJJVCBTVFJJTkdzIHdpdGggdW51c2VkIGJpdHMgY2Fubm90IGVuY2Fwc3VsYXRlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWIgPSBnZXRTdWIoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Yi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViW2ldLnRhZy5pc0VPQygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFT0MgaXMgbm90IHN1cHBvc2VkIHRvIGJlIGFjdHVhbCBjb250ZW50LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gYnV0IHNpbGVudGx5IGlnbm9yZSB3aGVuIHRoZXkgZG9uJ3RcbiAgICAgICAgICAgICAgICBzdWIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdWIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsZW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZSBjYW4ndCBza2lwIG92ZXIgYW4gaW52YWxpZCB0YWcgd2l0aCB1bmRlZmluZWQgbGVuZ3RoIGF0IG9mZnNldCBcIiArIHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdGFydCArIE1hdGguYWJzKGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBU04xKHN0cmVhbVN0YXJ0LCBoZWFkZXIsIGxlbiwgdGFnLCBzdWIpO1xuICAgIH07XG4gICAgcmV0dXJuIEFTTjE7XG59KCkpO1xuZXhwb3J0IHsgQVNOMSB9O1xudmFyIEFTTjFUYWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQVNOMVRhZyhzdHJlYW0pIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHN0cmVhbS5nZXQoKTtcbiAgICAgICAgdGhpcy50YWdDbGFzcyA9IGJ1ZiA+PiA2O1xuICAgICAgICB0aGlzLnRhZ0NvbnN0cnVjdGVkID0gKChidWYgJiAweDIwKSAhPT0gMCk7XG4gICAgICAgIHRoaXMudGFnTnVtYmVyID0gYnVmICYgMHgxRjtcbiAgICAgICAgaWYgKHRoaXMudGFnTnVtYmVyID09IDB4MUYpIHsgLy8gbG9uZyB0YWdcbiAgICAgICAgICAgIHZhciBuID0gbmV3IEludDEwKCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgYnVmID0gc3RyZWFtLmdldCgpO1xuICAgICAgICAgICAgICAgIG4ubXVsQWRkKDEyOCwgYnVmICYgMHg3Rik7XG4gICAgICAgICAgICB9IHdoaWxlIChidWYgJiAweDgwKTtcbiAgICAgICAgICAgIHRoaXMudGFnTnVtYmVyID0gbi5zaW1wbGlmeSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFTTjFUYWcucHJvdG90eXBlLmlzVW5pdmVyc2FsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdDbGFzcyA9PT0gMHgwMDtcbiAgICB9O1xuICAgIEFTTjFUYWcucHJvdG90eXBlLmlzRU9DID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdDbGFzcyA9PT0gMHgwMCAmJiB0aGlzLnRhZ051bWJlciA9PT0gMHgwMDtcbiAgICB9O1xuICAgIHJldHVybiBBU04xVGFnO1xufSgpKTtcbmV4cG9ydCB7IEFTTjFUYWcgfTtcbiIsIi8vIENvcHlyaWdodCAoYykgMjAwNSAgVG9tIFd1XG4vLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU2VlIFwiTElDRU5TRVwiIGZvciBkZXRhaWxzLlxuLy8gQmFzaWMgSmF2YVNjcmlwdCBCTiBsaWJyYXJ5IC0gc3Vic2V0IHVzZWZ1bCBmb3IgUlNBIGVuY3J5cHRpb24uXG5pbXBvcnQgeyBjYml0LCBpbnQyY2hhciwgbGJpdCwgb3BfYW5kLCBvcF9hbmRub3QsIG9wX29yLCBvcF94b3IgfSBmcm9tIFwiLi91dGlsXCI7XG4vLyBCaXRzIHBlciBkaWdpdFxudmFyIGRiaXRzO1xuLy8gSmF2YVNjcmlwdCBlbmdpbmUgYW5hbHlzaXNcbnZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTtcbnZhciBqX2xtID0gKChjYW5hcnkgJiAweGZmZmZmZikgPT0gMHhlZmNhZmUpO1xuLy8jcmVnaW9uXG52YXIgbG93cHJpbWVzID0gWzIsIDMsIDUsIDcsIDExLCAxMywgMTcsIDE5LCAyMywgMjksIDMxLCAzNywgNDEsIDQzLCA0NywgNTMsIDU5LCA2MSwgNjcsIDcxLCA3MywgNzksIDgzLCA4OSwgOTcsIDEwMSwgMTAzLCAxMDcsIDEwOSwgMTEzLCAxMjcsIDEzMSwgMTM3LCAxMzksIDE0OSwgMTUxLCAxNTcsIDE2MywgMTY3LCAxNzMsIDE3OSwgMTgxLCAxOTEsIDE5MywgMTk3LCAxOTksIDIxMSwgMjIzLCAyMjcsIDIyOSwgMjMzLCAyMzksIDI0MSwgMjUxLCAyNTcsIDI2MywgMjY5LCAyNzEsIDI3NywgMjgxLCAyODMsIDI5MywgMzA3LCAzMTEsIDMxMywgMzE3LCAzMzEsIDMzNywgMzQ3LCAzNDksIDM1MywgMzU5LCAzNjcsIDM3MywgMzc5LCAzODMsIDM4OSwgMzk3LCA0MDEsIDQwOSwgNDE5LCA0MjEsIDQzMSwgNDMzLCA0MzksIDQ0MywgNDQ5LCA0NTcsIDQ2MSwgNDYzLCA0NjcsIDQ3OSwgNDg3LCA0OTEsIDQ5OSwgNTAzLCA1MDksIDUyMSwgNTIzLCA1NDEsIDU0NywgNTU3LCA1NjMsIDU2OSwgNTcxLCA1NzcsIDU4NywgNTkzLCA1OTksIDYwMSwgNjA3LCA2MTMsIDYxNywgNjE5LCA2MzEsIDY0MSwgNjQzLCA2NDcsIDY1MywgNjU5LCA2NjEsIDY3MywgNjc3LCA2ODMsIDY5MSwgNzAxLCA3MDksIDcxOSwgNzI3LCA3MzMsIDczOSwgNzQzLCA3NTEsIDc1NywgNzYxLCA3NjksIDc3MywgNzg3LCA3OTcsIDgwOSwgODExLCA4MjEsIDgyMywgODI3LCA4MjksIDgzOSwgODUzLCA4NTcsIDg1OSwgODYzLCA4NzcsIDg4MSwgODgzLCA4ODcsIDkwNywgOTExLCA5MTksIDkyOSwgOTM3LCA5NDEsIDk0NywgOTUzLCA5NjcsIDk3MSwgOTc3LCA5ODMsIDk5MSwgOTk3XTtcbnZhciBscGxpbSA9ICgxIDw8IDI2KSAvIGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV07XG4vLyNlbmRyZWdpb25cbi8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG52YXIgQmlnSW50ZWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyb21OdW1iZXIoYSwgYiwgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiID09IG51bGwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbVN0cmluZyhhLCAyNTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vI3JlZ2lvbiBQVUJMSUNcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGJuVG9TdHJpbmc7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHN0cmluZyByZXByZXNlbnRhdGlvbiBpbiBnaXZlbiByYWRpeFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcIi1cIiArIHRoaXMubmVnYXRlKCkudG9TdHJpbmcoYik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGlmIChiID09IDE2KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDgpIHtcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMikge1xuICAgICAgICAgICAgayA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiA9PSAzMikge1xuICAgICAgICAgICAgayA9IDU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiA9PSA0KSB7XG4gICAgICAgICAgICBrID0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmFkaXgoYik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGttID0gKDEgPDwgaykgLSAxO1xuICAgICAgICB2YXIgZDtcbiAgICAgICAgdmFyIG0gPSBmYWxzZTtcbiAgICAgICAgdmFyIHIgPSBcIlwiO1xuICAgICAgICB2YXIgaSA9IHRoaXMudDtcbiAgICAgICAgdmFyIHAgPSB0aGlzLkRCIC0gKGkgKiB0aGlzLkRCKSAlIGs7XG4gICAgICAgIGlmIChpLS0gPiAwKSB7XG4gICAgICAgICAgICBpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApID4gMCkge1xuICAgICAgICAgICAgICAgIG0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHIgPSBpbnQyY2hhcihkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA8IGspIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICh0aGlzW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8IChrIC0gcCk7XG4gICAgICAgICAgICAgICAgICAgIGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSBrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAodGhpc1tpXSA+PiAocCAtPSBrKSkgJiBrbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcCArPSB0aGlzLkRCO1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgciArPSBpbnQyY2hhcihkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0gPyByIDogXCIwXCI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGUgPSBibk5lZ2F0ZTtcbiAgICAvLyAocHVibGljKSAtdGhpc1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmFicyA9IGJuQWJzO1xuICAgIC8vIChwdWJsaWMpIHx0aGlzfFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnMgPCAwKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvID0gYm5Db21wYXJlVG87XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuICsgaWYgdGhpcyA+IGEsIC0gaWYgdGhpcyA8IGEsIDAgaWYgZXF1YWxcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IHRoaXMucyAtIGEucztcbiAgICAgICAgaWYgKHIgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB0aGlzLnQ7XG4gICAgICAgIHIgPSBpIC0gYS50O1xuICAgICAgICBpZiAociAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKChyID0gdGhpc1tpXSAtIGFbaV0pICE9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuICAgIC8vIChwdWJsaWMpIHJldHVybiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gXCJ0aGlzXCJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuREIgKiAodGhpcy50IC0gMSkgKyBuYml0cyh0aGlzW3RoaXMudCAtIDFdIF4gKHRoaXMucyAmIHRoaXMuRE0pKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZCA9IGJuTW9kO1xuICAgIC8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLmFicygpLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuICAgICAgICBpZiAodGhpcy5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkge1xuICAgICAgICAgICAgYS5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvd0ludCA9IGJuTW9kUG93SW50O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQgPSBmdW5jdGlvbiAoZSwgbSkge1xuICAgICAgICB2YXIgejtcbiAgICAgICAgaWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgeiA9IG5ldyBDbGFzc2ljKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV4cChlLCB6KTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gYm5DbG9uZTtcbiAgICAvLyAocHVibGljKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLmNvcHlUbyhyKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGJuSW50VmFsdWU7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnQgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdIC0gdGhpcy5EVjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnQgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNzdW1lcyAxNiA8IERCIDwgMzJcbiAgICAgICAgcmV0dXJuICgodGhpc1sxXSAmICgoMSA8PCAoMzIgLSB0aGlzLkRCKSkgLSAxKSkgPDwgdGhpcy5EQikgfCB0aGlzWzBdO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYnl0ZVZhbHVlID0gYm5CeXRlVmFsdWU7XG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMjQpID4+IDI0O1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZSA9IGJuU2hvcnRWYWx1ZTtcbiAgICAvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNob3J0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMTYpID4+IDE2O1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtID0gYm5TaWdOdW07XG4gICAgLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50IDw9IDAgfHwgKHRoaXMudCA9PSAxICYmIHRoaXNbMF0gPD0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5ID0gYm5Ub0J5dGVBcnJheTtcbiAgICAvLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy50O1xuICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICByWzBdID0gdGhpcy5zO1xuICAgICAgICB2YXIgcCA9IHRoaXMuREIgLSAoaSAqIHRoaXMuREIpICUgODtcbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgaWYgKGktLSA+IDApIHtcbiAgICAgICAgICAgIGlmIChwIDwgdGhpcy5EQiAmJiAoZCA9IHRoaXNbaV0gPj4gcCkgIT0gKHRoaXMucyAmIHRoaXMuRE0pID4+IHApIHtcbiAgICAgICAgICAgICAgICByW2srK10gPSBkIHwgKHRoaXMucyA8PCAodGhpcy5EQiAtIHApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICh0aGlzW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8ICg4IC0gcCk7XG4gICAgICAgICAgICAgICAgICAgIGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSA4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAodGhpc1tpXSA+PiAocCAtPSA4KSkgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICBpZiAocCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwICs9IHRoaXMuREI7XG4gICAgICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChkICYgMHg4MCkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkIHw9IC0yNTY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrID09IDAgJiYgKHRoaXMucyAmIDB4ODApICE9IChkICYgMHg4MCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKytrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoayA+IDAgfHwgZCAhPSB0aGlzLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcltrKytdID0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBibkVxdWFscztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID09IDApO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gYm5NaW47XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA8IDApID8gdGhpcyA6IGE7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXggPSBibk1heDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZCA9IGJuQW5kO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBibk9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnhvciA9IGJuWG9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYml0d2lzZVRvKGEsIG9wX3hvciwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gYm5BbmROb3Q7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3QgPSBibk5vdDtcbiAgICAvLyAocHVibGljKSB+dGhpc1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgcltpXSA9IHRoaXMuRE0gJiB+dGhpc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByLnQgPSB0aGlzLnQ7XG4gICAgICAgIHIucyA9IH50aGlzLnM7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gYm5TaGlmdExlZnQ7XG4gICAgLy8gKHB1YmxpYykgdGhpcyA8PCBuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnJTaGlmdFRvKC1uLCByKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubFNoaWZ0VG8obiwgcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdFJpZ2h0ID0gYm5TaGlmdFJpZ2h0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgPj4gblxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICBpZiAobiA8IDApIHtcbiAgICAgICAgICAgIHRoaXMubFNoaWZ0VG8oLW4sIHIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yU2hpZnRUbyhuLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGJuR2V0TG93ZXN0U2V0Qml0O1xuICAgIC8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gIT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICogdGhpcy5EQiArIGxiaXQodGhpc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnQgKiB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcbiAgICAvLyAocHVibGljKSByZXR1cm4gbnVtYmVyIG9mIHNldCBiaXRzXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0Q291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByID0gMDtcbiAgICAgICAgdmFyIHggPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByICs9IGNiaXQodGhpc1tpXSBeIHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUudGVzdEJpdCA9IGJuVGVzdEJpdDtcbiAgICAvLyAocHVibGljKSB0cnVlIGlmZiBudGggYml0IGlzIHNldFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgaiA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuICAgICAgICBpZiAoaiA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zICE9IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKHRoaXNbal0gJiAoMSA8PCAobiAlIHRoaXMuREIpKSkgIT0gMCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zZXRCaXQgPSBiblNldEJpdDtcbiAgICAvLyAocHVibGljKSB0aGlzIHwgKDE8PG4pXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcbiAgICAvLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX2FuZG5vdCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0ID0gYm5GbGlwQml0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX3hvcik7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGQgPSBibkFkZDtcbiAgICAvLyAocHVibGljKSB0aGlzICsgYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuYWRkVG8oYSwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBiblN1YnRyYWN0O1xuICAgIC8vIChwdWJsaWMpIHRoaXMgLSBhXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB0aGlzLnN1YlRvKGEsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gYm5NdWx0aXBseTtcbiAgICAvLyAocHVibGljKSB0aGlzICogYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5tdWx0aXBseVRvKGEsIHIpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZSA9IGJuRGl2aWRlO1xuICAgIC8vIChwdWJsaWMpIHRoaXMgLyBhXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yZW1haW5kZXIgPSBiblJlbWFpbmRlcjtcbiAgICAvLyAocHVibGljKSB0aGlzICUgYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHRoaXMuZGl2UmVtVG8oYSwgbnVsbCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gYm5EaXZpZGVBbmRSZW1haW5kZXI7XG4gICAgLy8gKHB1YmxpYykgW3RoaXMvYSx0aGlzJWFdXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHEgPSBuYmkoKTtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5kaXZSZW1UbyhhLCBxLCByKTtcbiAgICAgICAgcmV0dXJuIFtxLCByXTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvdyA9IGJuTW9kUG93O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZSAlIG0gKEhBQyAxNC44NSlcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBmdW5jdGlvbiAoZSwgbSkge1xuICAgICAgICB2YXIgaSA9IGUuYml0TGVuZ3RoKCk7XG4gICAgICAgIHZhciBrO1xuICAgICAgICB2YXIgciA9IG5idigxKTtcbiAgICAgICAgdmFyIHo7XG4gICAgICAgIGlmIChpIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgPCAxOCkge1xuICAgICAgICAgICAgayA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICAgICAgICBrID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpIDwgMTQ0KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpIDwgNzY4KSB7XG4gICAgICAgICAgICBrID0gNTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGsgPSA2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgOCkge1xuICAgICAgICAgICAgeiA9IG5ldyBDbGFzc2ljKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uaXNFdmVuKCkpIHtcbiAgICAgICAgICAgIHogPSBuZXcgQmFycmV0dChtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHogPSBuZXcgTW9udGdvbWVyeShtKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmVjb21wdXRhdGlvblxuICAgICAgICB2YXIgZyA9IFtdO1xuICAgICAgICB2YXIgbiA9IDM7XG4gICAgICAgIHZhciBrMSA9IGsgLSAxO1xuICAgICAgICB2YXIga20gPSAoMSA8PCBrKSAtIDE7XG4gICAgICAgIGdbMV0gPSB6LmNvbnZlcnQodGhpcyk7XG4gICAgICAgIGlmIChrID4gMSkge1xuICAgICAgICAgICAgdmFyIGcyID0gbmJpKCk7XG4gICAgICAgICAgICB6LnNxclRvKGdbMV0sIGcyKTtcbiAgICAgICAgICAgIHdoaWxlIChuIDw9IGttKSB7XG4gICAgICAgICAgICAgICAgZ1tuXSA9IG5iaSgpO1xuICAgICAgICAgICAgICAgIHoubXVsVG8oZzIsIGdbbiAtIDJdLCBnW25dKTtcbiAgICAgICAgICAgICAgICBuICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSBlLnQgLSAxO1xuICAgICAgICB2YXIgdztcbiAgICAgICAgdmFyIGlzMSA9IHRydWU7XG4gICAgICAgIHZhciByMiA9IG5iaSgpO1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgaSA9IG5iaXRzKGVbal0pIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMCkge1xuICAgICAgICAgICAgaWYgKGkgPj0gazEpIHtcbiAgICAgICAgICAgICAgICB3ID0gKGVbal0gPj4gKGkgLSBrMSkpICYga207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3ID0gKGVbal0gJiAoKDEgPDwgKGkgKyAxKSkgLSAxKSkgPDwgKGsxIC0gaSk7XG4gICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHcgfD0gZVtqIC0gMV0gPj4gKHRoaXMuREIgKyBpIC0gazEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBrO1xuICAgICAgICAgICAgd2hpbGUgKCh3ICYgMSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIHcgPj49IDE7XG4gICAgICAgICAgICAgICAgLS1uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpIC09IG4pIDwgMCkge1xuICAgICAgICAgICAgICAgIGkgKz0gdGhpcy5EQjtcbiAgICAgICAgICAgICAgICAtLWo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXMxKSB7IC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgICAgICAgICAgICBnW3ddLmNvcHlUbyhyKTtcbiAgICAgICAgICAgICAgICBpczEgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB6LnNxclRvKHIsIHIyKTtcbiAgICAgICAgICAgICAgICAgICAgei5zcXJUbyhyMiwgcik7XG4gICAgICAgICAgICAgICAgICAgIG4gLT0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICAgICAgcjIgPSB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB6Lm11bFRvKHIyLCBnW3ddLCByKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChqID49IDAgJiYgKGVbal0gJiAoMSA8PCBpKSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgICAgIHQgPSByO1xuICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICByMiA9IHQ7XG4gICAgICAgICAgICAgICAgaWYgKC0taSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuREIgLSAxO1xuICAgICAgICAgICAgICAgICAgICAtLWo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB6LnJldmVydChyKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2UgPSBibk1vZEludmVyc2U7XG4gICAgLy8gKHB1YmxpYykgMS90aGlzICUgbSAoSEFDIDE0LjYxKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2UgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICB2YXIgYWMgPSBtLmlzRXZlbigpO1xuICAgICAgICBpZiAoKHRoaXMuaXNFdmVuKCkgJiYgYWMpIHx8IG0uc2lnbnVtKCkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludGVnZXIuWkVSTztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdSA9IG0uY2xvbmUoKTtcbiAgICAgICAgdmFyIHYgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHZhciBhID0gbmJ2KDEpO1xuICAgICAgICB2YXIgYiA9IG5idigwKTtcbiAgICAgICAgdmFyIGMgPSBuYnYoMCk7XG4gICAgICAgIHZhciBkID0gbmJ2KDEpO1xuICAgICAgICB3aGlsZSAodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAodS5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgIHUuclNoaWZ0VG8oMSwgdSk7XG4gICAgICAgICAgICAgICAgaWYgKGFjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYS5pc0V2ZW4oKSB8fCAhYi5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5hZGRUbyh0aGlzLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuc3ViVG8obSwgYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYS5yU2hpZnRUbygxLCBhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWIuaXNFdmVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5zdWJUbyhtLCBiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYi5yU2hpZnRUbygxLCBiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICh2LmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgdi5yU2hpZnRUbygxLCB2KTtcbiAgICAgICAgICAgICAgICBpZiAoYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmFkZFRvKHRoaXMsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdWJUbyhtLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjLnJTaGlmdFRvKDEsIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZC5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICBkLnN1YlRvKG0sIGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkLnJTaGlmdFRvKDEsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgICAgICAgICAgICB1LnN1YlRvKHYsIHUpO1xuICAgICAgICAgICAgICAgIGlmIChhYykge1xuICAgICAgICAgICAgICAgICAgICBhLnN1YlRvKGMsIGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiLnN1YlRvKGQsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdi5zdWJUbyh1LCB2KTtcbiAgICAgICAgICAgICAgICBpZiAoYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5zdWJUbyhhLCBjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZC5zdWJUbyhiLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGQuY29tcGFyZVRvKG0pID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkLnNpZ251bSgpIDwgMCkge1xuICAgICAgICAgICAgZC5hZGRUbyhtLCBkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkLnNpZ251bSgpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuYWRkKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGJuUG93O1xuICAgIC8vIChwdWJsaWMpIHRoaXNeZVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cChlLCBuZXcgTnVsbEV4cCgpKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZCA9IGJuR0NEO1xuICAgIC8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIHggPSAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpO1xuICAgICAgICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA8IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0geDtcbiAgICAgICAgICAgIHggPSB5O1xuICAgICAgICAgICAgeSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB4LmdldExvd2VzdFNldEJpdCgpO1xuICAgICAgICB2YXIgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChnIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBnKSB7XG4gICAgICAgICAgICBnID0gaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHguclNoaWZ0VG8oZywgeCk7XG4gICAgICAgICAgICB5LnJTaGlmdFRvKGcsIHkpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh4LnNpZ251bSgpID4gMCkge1xuICAgICAgICAgICAgaWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgeC5yU2hpZnRUbyhpLCB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoaSA9IHkuZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkge1xuICAgICAgICAgICAgICAgIHkuclNoaWZ0VG8oaSwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHguc3ViVG8oeSwgeCk7XG4gICAgICAgICAgICAgICAgeC5yU2hpZnRUbygxLCB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHkuc3ViVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgeS5yU2hpZnRUbygxLCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHkubFNoaWZ0VG8oZywgeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcbiAgICAvLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHggPSB0aGlzLmFicygpO1xuICAgICAgICBpZiAoeC50ID09IDEgJiYgeFswXSA8PSBsb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeC5pc0V2ZW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGkgPSAxO1xuICAgICAgICB3aGlsZSAoaSA8IGxvd3ByaW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBtID0gbG93cHJpbWVzW2ldO1xuICAgICAgICAgICAgdmFyIGogPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIHtcbiAgICAgICAgICAgICAgICBtICo9IGxvd3ByaW1lc1tqKytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbSA9IHgubW9kSW50KG0pO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG0gJSBsb3dwcmltZXNbaSsrXSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHgubWlsbGVyUmFiaW4odCk7XG4gICAgfTtcbiAgICAvLyNlbmRyZWdpb24gUFVCTElDXG4gICAgLy8jcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbyA9IGJucENvcHlUbztcbiAgICAvLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpXSA9IHRoaXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gdGhpcy50O1xuICAgICAgICByLnMgPSB0aGlzLnM7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcbiAgICAvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBpbnRlZ2VyIHZhbHVlIHgsIC1EViA8PSB4IDwgRFZcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdGhpcy50ID0gMTtcbiAgICAgICAgdGhpcy5zID0gKHggPCAwKSA/IC0xIDogMDtcbiAgICAgICAgaWYgKHggPiAwKSB7XG4gICAgICAgICAgICB0aGlzWzBdID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh4IDwgLTEpIHtcbiAgICAgICAgICAgIHRoaXNbMF0gPSB4ICsgdGhpcy5EVjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nO1xuICAgIC8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIHN0cmluZyBhbmQgcmFkaXhcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHMsIGIpIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGlmIChiID09IDE2KSB7XG4gICAgICAgICAgICBrID0gNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDgpIHtcbiAgICAgICAgICAgIGsgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMjU2KSB7XG4gICAgICAgICAgICBrID0gODtcbiAgICAgICAgICAgIC8qIGJ5dGUgYXJyYXkgKi9cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiID09IDIpIHtcbiAgICAgICAgICAgIGsgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gMzIpIHtcbiAgICAgICAgICAgIGsgPSA1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gNCkge1xuICAgICAgICAgICAgayA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZyb21SYWRpeChzLCBiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnQgPSAwO1xuICAgICAgICB0aGlzLnMgPSAwO1xuICAgICAgICB2YXIgaSA9IHMubGVuZ3RoO1xuICAgICAgICB2YXIgbWkgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNoID0gMDtcbiAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgeCA9IChrID09IDgpID8gKCtzW2ldKSAmIDB4ZmYgOiBpbnRBdChzLCBpKTtcbiAgICAgICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICBtaSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzaCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQrK10gPSB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2ggKyBrID4gdGhpcy5EQikge1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy50IC0gMV0gfD0gKHggJiAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkpIDw8IHNoO1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy50KytdID0gKHggPj4gKHRoaXMuREIgLSBzaCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQgLSAxXSB8PSB4IDw8IHNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2ggKz0gaztcbiAgICAgICAgICAgIGlmIChzaCA+PSB0aGlzLkRCKSB7XG4gICAgICAgICAgICAgICAgc2ggLT0gdGhpcy5EQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoayA9PSA4ICYmICgoK3NbMF0pICYgMHg4MCkgIT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zID0gLTE7XG4gICAgICAgICAgICBpZiAoc2ggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLnQgLSAxXSB8PSAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkgPDwgc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGFtcCgpO1xuICAgICAgICBpZiAobWkpIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2xhbXAgPSBibnBDbGFtcDtcbiAgICAvLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGFtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICB3aGlsZSAodGhpcy50ID4gMCAmJiB0aGlzW3RoaXMudCAtIDFdID09IGMpIHtcbiAgICAgICAgICAgIC0tdGhpcy50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kbFNoaWZ0VG8gPSBibnBETFNoaWZ0VG87XG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgbipEQlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpICsgbl0gPSB0aGlzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gdGhpcy50ICsgbjtcbiAgICAgICAgci5zID0gdGhpcy5zO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG4qREJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kclNoaWZ0VG8gPSBmdW5jdGlvbiAobiwgcikge1xuICAgICAgICBmb3IgKHZhciBpID0gbjsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgLSBuXSA9IHRoaXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gTWF0aC5tYXgodGhpcy50IC0gbiwgMCk7XG4gICAgICAgIHIucyA9IHRoaXMucztcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvID0gYm5wTFNoaWZ0VG87XG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgblxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvID0gZnVuY3Rpb24gKG4sIHIpIHtcbiAgICAgICAgdmFyIGJzID0gbiAlIHRoaXMuREI7XG4gICAgICAgIHZhciBjYnMgPSB0aGlzLkRCIC0gYnM7XG4gICAgICAgIHZhciBibSA9ICgxIDw8IGNicykgLSAxO1xuICAgICAgICB2YXIgZHMgPSBNYXRoLmZsb29yKG4gLyB0aGlzLkRCKTtcbiAgICAgICAgdmFyIGMgPSAodGhpcy5zIDw8IGJzKSAmIHRoaXMuRE07XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcltpICsgZHMgKyAxXSA9ICh0aGlzW2ldID4+IGNicykgfCBjO1xuICAgICAgICAgICAgYyA9ICh0aGlzW2ldICYgYm0pIDw8IGJzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSBkcyAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICByW2ldID0gMDtcbiAgICAgICAgfVxuICAgICAgICByW2RzXSA9IGM7XG4gICAgICAgIHIudCA9IHRoaXMudCArIGRzICsgMTtcbiAgICAgICAgci5zID0gdGhpcy5zO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgIHIucyA9IHRoaXMucztcbiAgICAgICAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gdGhpcy5EQik7XG4gICAgICAgIGlmIChkcyA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgIHIudCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJzID0gbiAlIHRoaXMuREI7XG4gICAgICAgIHZhciBjYnMgPSB0aGlzLkRCIC0gYnM7XG4gICAgICAgIHZhciBibSA9ICgxIDw8IGJzKSAtIDE7XG4gICAgICAgIHJbMF0gPSB0aGlzW2RzXSA+PiBicztcbiAgICAgICAgZm9yICh2YXIgaSA9IGRzICsgMTsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgLSBkcyAtIDFdIHw9ICh0aGlzW2ldICYgYm0pIDw8IGNicztcbiAgICAgICAgICAgIHJbaSAtIGRzXSA9IHRoaXNbaV0gPj4gYnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJzID4gMCkge1xuICAgICAgICAgICAgclt0aGlzLnQgLSBkcyAtIDFdIHw9ICh0aGlzLnMgJiBibSkgPDwgY2JzO1xuICAgICAgICB9XG4gICAgICAgIHIudCA9IHRoaXMudCAtIGRzO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbyA9IGJucFN1YlRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YlRvID0gZnVuY3Rpb24gKGEsIHIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgYyA9IDA7XG4gICAgICAgIHZhciBtID0gTWF0aC5taW4oYS50LCB0aGlzLnQpO1xuICAgICAgICB3aGlsZSAoaSA8IG0pIHtcbiAgICAgICAgICAgIGMgKz0gdGhpc1tpXSAtIGFbaV07XG4gICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEudCA8IHRoaXMudCkge1xuICAgICAgICAgICAgYyAtPSBhLnM7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMudCkge1xuICAgICAgICAgICAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjICs9IHRoaXMucztcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICAgICAgICAgICAgYyAtPSBhW2ldO1xuICAgICAgICAgICAgICAgIHJbaSsrXSA9IGMgJiB0aGlzLkRNO1xuICAgICAgICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjIC09IGEucztcbiAgICAgICAgfVxuICAgICAgICByLnMgPSAoYyA8IDApID8gLTEgOiAwO1xuICAgICAgICBpZiAoYyA8IC0xKSB7XG4gICAgICAgICAgICByW2krK10gPSB0aGlzLkRWICsgYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICAgICAgcltpKytdID0gYztcbiAgICAgICAgfVxuICAgICAgICByLnQgPSBpO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG4gICAgLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VG8gPSBmdW5jdGlvbiAoYSwgcikge1xuICAgICAgICB2YXIgeCA9IHRoaXMuYWJzKCk7XG4gICAgICAgIHZhciB5ID0gYS5hYnMoKTtcbiAgICAgICAgdmFyIGkgPSB4LnQ7XG4gICAgICAgIHIudCA9IGkgKyB5LnQ7XG4gICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgcltpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHkudDsgKytpKSB7XG4gICAgICAgICAgICByW2kgKyB4LnRdID0geC5hbSgwLCB5W2ldLCByLCBpLCAwLCB4LnQpO1xuICAgICAgICB9XG4gICAgICAgIHIucyA9IDA7XG4gICAgICAgIHIuY2xhbXAoKTtcbiAgICAgICAgaWYgKHRoaXMucyAhPSBhLnMpIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmVUbyA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciB4ID0gdGhpcy5hYnMoKTtcbiAgICAgICAgdmFyIGkgPSByLnQgPSAyICogeC50O1xuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHJbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSk7XG4gICAgICAgICAgICBpZiAoKHJbaSArIHgudF0gKz0geC5hbShpICsgMSwgMiAqIHhbaV0sIHIsIDIgKiBpICsgMSwgYywgeC50IC0gaSAtIDEpKSA+PSB4LkRWKSB7XG4gICAgICAgICAgICAgICAgcltpICsgeC50XSAtPSB4LkRWO1xuICAgICAgICAgICAgICAgIHJbaSArIHgudCArIDFdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoci50ID4gMCkge1xuICAgICAgICAgICAgcltyLnQgLSAxXSArPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByLnMgPSAwO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZSZW1UbyA9IGJucERpdlJlbVRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIGRpdmlkZSB0aGlzIGJ5IG0sIHF1b3RpZW50IGFuZCByZW1haW5kZXIgdG8gcSwgciAoSEFDIDE0LjIwKVxuICAgIC8vIHIgIT0gcSwgdGhpcyAhPSBtLiAgcSBvciByIG1heSBiZSBudWxsLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvID0gZnVuY3Rpb24gKG0sIHEsIHIpIHtcbiAgICAgICAgdmFyIHBtID0gbS5hYnMoKTtcbiAgICAgICAgaWYgKHBtLnQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwdCA9IHRoaXMuYWJzKCk7XG4gICAgICAgIGlmIChwdC50IDwgcG0udCkge1xuICAgICAgICAgICAgaWYgKHEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHEuZnJvbUludCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHlUbyhyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAociA9PSBudWxsKSB7XG4gICAgICAgICAgICByID0gbmJpKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHkgPSBuYmkoKTtcbiAgICAgICAgdmFyIHRzID0gdGhpcy5zO1xuICAgICAgICB2YXIgbXMgPSBtLnM7XG4gICAgICAgIHZhciBuc2ggPSB0aGlzLkRCIC0gbmJpdHMocG1bcG0udCAtIDFdKTsgLy8gbm9ybWFsaXplIG1vZHVsdXNcbiAgICAgICAgaWYgKG5zaCA+IDApIHtcbiAgICAgICAgICAgIHBtLmxTaGlmdFRvKG5zaCwgeSk7XG4gICAgICAgICAgICBwdC5sU2hpZnRUbyhuc2gsIHIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcG0uY29weVRvKHkpO1xuICAgICAgICAgICAgcHQuY29weVRvKHIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5cyA9IHkudDtcbiAgICAgICAgdmFyIHkwID0geVt5cyAtIDFdO1xuICAgICAgICBpZiAoeTAgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5dCA9IHkwICogKDEgPDwgdGhpcy5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gdGhpcy5GMiA6IDApO1xuICAgICAgICB2YXIgZDEgPSB0aGlzLkZWIC8geXQ7XG4gICAgICAgIHZhciBkMiA9ICgxIDw8IHRoaXMuRjEpIC8geXQ7XG4gICAgICAgIHZhciBlID0gMSA8PCB0aGlzLkYyO1xuICAgICAgICB2YXIgaSA9IHIudDtcbiAgICAgICAgdmFyIGogPSBpIC0geXM7XG4gICAgICAgIHZhciB0ID0gKHEgPT0gbnVsbCkgPyBuYmkoKSA6IHE7XG4gICAgICAgIHkuZGxTaGlmdFRvKGosIHQpO1xuICAgICAgICBpZiAoci5jb21wYXJlVG8odCkgPj0gMCkge1xuICAgICAgICAgICAgcltyLnQrK10gPSAxO1xuICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgfVxuICAgICAgICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oeXMsIHQpO1xuICAgICAgICB0LnN1YlRvKHksIHkpOyAvLyBcIm5lZ2F0aXZlXCIgeSBzbyB3ZSBjYW4gcmVwbGFjZSBzdWIgd2l0aCBhbSBsYXRlclxuICAgICAgICB3aGlsZSAoeS50IDwgeXMpIHtcbiAgICAgICAgICAgIHlbeS50KytdID0gMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoLS1qID49IDApIHtcbiAgICAgICAgICAgIC8vIEVzdGltYXRlIHF1b3RpZW50IGRpZ2l0XG4gICAgICAgICAgICB2YXIgcWQgPSAoclstLWldID09IHkwKSA/IHRoaXMuRE0gOiBNYXRoLmZsb29yKHJbaV0gKiBkMSArIChyW2kgLSAxXSArIGUpICogZDIpO1xuICAgICAgICAgICAgaWYgKChyW2ldICs9IHkuYW0oMCwgcWQsIHIsIGosIDAsIHlzKSkgPCBxZCkgeyAvLyBUcnkgaXQgb3V0XG4gICAgICAgICAgICAgICAgeS5kbFNoaWZ0VG8oaiwgdCk7XG4gICAgICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocltpXSA8IC0tcWQpIHtcbiAgICAgICAgICAgICAgICAgICAgci5zdWJUbyh0LCByKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHEgIT0gbnVsbCkge1xuICAgICAgICAgICAgci5kclNoaWZ0VG8oeXMsIHEpO1xuICAgICAgICAgICAgaWYgKHRzICE9IG1zKSB7XG4gICAgICAgICAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHEsIHEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHIudCA9IHlzO1xuICAgICAgICByLmNsYW1wKCk7XG4gICAgICAgIGlmIChuc2ggPiAwKSB7XG4gICAgICAgICAgICByLnJTaGlmdFRvKG5zaCwgcik7XG4gICAgICAgIH0gLy8gRGVub3JtYWxpemUgcmVtYWluZGVyXG4gICAgICAgIGlmICh0cyA8IDApIHtcbiAgICAgICAgICAgIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDtcbiAgICAvLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuICAgIC8vIGp1c3RpZmljYXRpb246XG4gICAgLy8gICAgICAgICB4eSA9PSAxIChtb2QgbSlcbiAgICAvLyAgICAgICAgIHh5ID0gIDEra21cbiAgICAvLyAgIHh5KDIteHkpID0gKDEra20pKDEta20pXG4gICAgLy8geFt5KDIteHkpXSA9IDEta14ybV4yXG4gICAgLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuICAgIC8vIGlmIHkgaXMgMS94IG1vZCBtLCB0aGVuIHkoMi14eSkgaXMgMS94IG1vZCBtXjJcbiAgICAvLyBzaG91bGQgcmVkdWNlIHggYW5kIHkoMi14eSkgYnkgbV4yIGF0IGVhY2ggc3RlcCB0byBrZWVwIHNpemUgYm91bmRlZC5cbiAgICAvLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnQgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeCA9IHRoaXNbMF07XG4gICAgICAgIGlmICgoeCAmIDEpID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ID0geCAmIDM7IC8vIHkgPT0gMS94IG1vZCAyXjJcbiAgICAgICAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZikgKiB5KSkgJiAweGY7IC8vIHkgPT0gMS94IG1vZCAyXjRcbiAgICAgICAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZmYpICogeSkpICYgMHhmZjsgLy8geSA9PSAxL3ggbW9kIDJeOFxuICAgICAgICB5ID0gKHkgKiAoMiAtICgoKHggJiAweGZmZmYpICogeSkgJiAweGZmZmYpKSkgJiAweGZmZmY7IC8vIHkgPT0gMS94IG1vZCAyXjE2XG4gICAgICAgIC8vIGxhc3Qgc3RlcCAtIGNhbGN1bGF0ZSBpbnZlcnNlIG1vZCBEViBkaXJlY3RseTtcbiAgICAgICAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gICAgICAgIHkgPSAoeSAqICgyIC0geCAqIHkgJSB0aGlzLkRWKSkgJSB0aGlzLkRWOyAvLyB5ID09IDEveCBtb2QgMl5kYml0c1xuICAgICAgICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICAgICAgICByZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc0V2ZW4gPSBibnBJc0V2ZW47XG4gICAgLy8gKHByb3RlY3RlZCkgdHJ1ZSBpZmYgdGhpcyBpcyBldmVuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKCh0aGlzLnQgPiAwKSA/ICh0aGlzWzBdICYgMSkgOiB0aGlzLnMpID09IDA7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHAgPSBibnBFeHA7XG4gICAgLy8gKHByb3RlY3RlZCkgdGhpc15lLCBlIDwgMl4zMiwgZG9pbmcgc3FyIGFuZCBtdWwgd2l0aCBcInJcIiAoSEFDIDE0Ljc5KVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmV4cCA9IGZ1bmN0aW9uIChlLCB6KSB7XG4gICAgICAgIGlmIChlID4gMHhmZmZmZmZmZiB8fCBlIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludGVnZXIuT05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHZhciByMiA9IG5iaSgpO1xuICAgICAgICB2YXIgZyA9IHouY29udmVydCh0aGlzKTtcbiAgICAgICAgdmFyIGkgPSBuYml0cyhlKSAtIDE7XG4gICAgICAgIGcuY29weVRvKHIpO1xuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHouc3FyVG8ociwgcjIpO1xuICAgICAgICAgICAgaWYgKChlICYgKDEgPDwgaSkpID4gMCkge1xuICAgICAgICAgICAgICAgIHoubXVsVG8ocjIsIGcsIHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByO1xuICAgICAgICAgICAgICAgIHIgPSByMjtcbiAgICAgICAgICAgICAgICByMiA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplID0gYm5wQ2h1bmtTaXplO1xuICAgIC8vIChwcm90ZWN0ZWQpIHJldHVybiB4IHMudC4gcl54IDwgRFZcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaHVua1NpemUgPSBmdW5jdGlvbiAocikge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMiAqIHRoaXMuREIgLyBNYXRoLmxvZyhyKSk7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4ID0gYm5wVG9SYWRpeDtcbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IHRvIHJhZGl4IHN0cmluZ1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvUmFkaXggPSBmdW5jdGlvbiAoYikge1xuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgICBiID0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2lnbnVtKCkgPT0gMCB8fCBiIDwgMiB8fCBiID4gMzYpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3MgPSB0aGlzLmNodW5rU2l6ZShiKTtcbiAgICAgICAgdmFyIGEgPSBNYXRoLnBvdyhiLCBjcyk7XG4gICAgICAgIHZhciBkID0gbmJ2KGEpO1xuICAgICAgICB2YXIgeSA9IG5iaSgpO1xuICAgICAgICB2YXIgeiA9IG5iaSgpO1xuICAgICAgICB2YXIgciA9IFwiXCI7XG4gICAgICAgIHRoaXMuZGl2UmVtVG8oZCwgeSwgeik7XG4gICAgICAgIHdoaWxlICh5LnNpZ251bSgpID4gMCkge1xuICAgICAgICAgICAgciA9IChhICsgei5pbnRWYWx1ZSgpKS50b1N0cmluZyhiKS5zdWJzdHIoMSkgKyByO1xuICAgICAgICAgICAgeS5kaXZSZW1UbyhkLCB5LCB6KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gei5pbnRWYWx1ZSgpLnRvU3RyaW5nKGIpICsgcjtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeDtcbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IGZyb20gcmFkaXggc3RyaW5nXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4ID0gZnVuY3Rpb24gKHMsIGIpIHtcbiAgICAgICAgdGhpcy5mcm9tSW50KDApO1xuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgICBiID0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gICAgICAgIHZhciBkID0gTWF0aC5wb3coYiwgY3MpO1xuICAgICAgICB2YXIgbWkgPSBmYWxzZTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICB2YXIgdyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHggPSBpbnRBdChzLCBpKTtcbiAgICAgICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIiAmJiB0aGlzLnNpZ251bSgpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbWkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHcgPSBiICogdyArIHg7XG4gICAgICAgICAgICBpZiAoKytqID49IGNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kTXVsdGlwbHkoZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuICAgICAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgICAgIHcgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coYiwgaikpO1xuICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaSkge1xuICAgICAgICAgICAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyID0gYm5wRnJvbU51bWJlcjtcbiAgICAvLyAocHJvdGVjdGVkKSBhbHRlcm5hdGUgY29uc3RydWN0b3JcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGIpIHtcbiAgICAgICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgICAgICAgICAgaWYgKGEgPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tSW50KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsIGMpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIG9wX29yLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFdmVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KDEsIDApO1xuICAgICAgICAgICAgICAgIH0gLy8gZm9yY2Ugb2RkXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRBZGRPZmZzZXQoMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdExlbmd0aCgpID4gYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgICAgICAgICB2YXIgeCA9IFtdO1xuICAgICAgICAgICAgdmFyIHQgPSBhICYgNztcbiAgICAgICAgICAgIHgubGVuZ3RoID0gKGEgPj4gMykgKyAxO1xuICAgICAgICAgICAgYi5uZXh0Qnl0ZXMoeCk7XG4gICAgICAgICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgICAgICAgICB4WzBdICY9ICgoMSA8PCB0KSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeFswXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZyb21TdHJpbmcoeCwgMjU2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvID0gYm5wQml0d2lzZVRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIG9wIGEgKGJpdHdpc2UpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvID0gZnVuY3Rpb24gKGEsIG9wLCByKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgZjtcbiAgICAgICAgdmFyIG0gPSBNYXRoLm1pbihhLnQsIHRoaXMudCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgICAgIHJbaV0gPSBvcCh0aGlzW2ldLCBhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS50IDwgdGhpcy50KSB7XG4gICAgICAgICAgICBmID0gYS5zICYgdGhpcy5ETTtcbiAgICAgICAgICAgIGZvciAoaSA9IG07IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHJbaV0gPSBvcCh0aGlzW2ldLCBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIudCA9IHRoaXMudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGYgPSB0aGlzLnMgJiB0aGlzLkRNO1xuICAgICAgICAgICAgZm9yIChpID0gbTsgaSA8IGEudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcltpXSA9IG9wKGYsIGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgci50ID0gYS50O1xuICAgICAgICB9XG4gICAgICAgIHIucyA9IG9wKHRoaXMucywgYS5zKTtcbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gZnVuY3Rpb24gKG4sIG9wKSB7XG4gICAgICAgIHZhciByID0gQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KG4pO1xuICAgICAgICB0aGlzLmJpdHdpc2VUbyhyLCBvcCwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkVG8gPSBibnBBZGRUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyArIGFcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbyA9IGZ1bmN0aW9uIChhLCByKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICB2YXIgbSA9IE1hdGgubWluKGEudCwgdGhpcy50KTtcbiAgICAgICAgd2hpbGUgKGkgPCBtKSB7XG4gICAgICAgICAgICBjICs9IHRoaXNbaV0gKyBhW2ldO1xuICAgICAgICAgICAgcltpKytdID0gYyAmIHRoaXMuRE07XG4gICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLnQgPCB0aGlzLnQpIHtcbiAgICAgICAgICAgIGMgKz0gYS5zO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnQpIHtcbiAgICAgICAgICAgICAgICBjICs9IHRoaXNbaV07XG4gICAgICAgICAgICAgICAgcltpKytdID0gYyAmIHRoaXMuRE07XG4gICAgICAgICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgKz0gdGhpcy5zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IGEudCkge1xuICAgICAgICAgICAgICAgIGMgKz0gYVtpXTtcbiAgICAgICAgICAgICAgICByW2krK10gPSBjICYgdGhpcy5ETTtcbiAgICAgICAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyArPSBhLnM7XG4gICAgICAgIH1cbiAgICAgICAgci5zID0gKGMgPCAwKSA/IC0xIDogMDtcbiAgICAgICAgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICByW2krK10gPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAtMSkge1xuICAgICAgICAgICAgcltpKytdID0gdGhpcy5EViArIGM7XG4gICAgICAgIH1cbiAgICAgICAgci50ID0gaTtcbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gYm5wRE11bHRpcGx5O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKj0gbiwgdGhpcyA+PSAwLCAxIDwgbiA8IERWXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLCBuIC0gMSwgdGhpcywgMCwgMCwgdGhpcy50KTtcbiAgICAgICAgKyt0aGlzLnQ7XG4gICAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0O1xuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKz0gbiA8PCB3IHdvcmRzLCB0aGlzID49IDBcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kQWRkT2Zmc2V0ID0gZnVuY3Rpb24gKG4sIHcpIHtcbiAgICAgICAgaWYgKG4gPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0aGlzLnQgPD0gdykge1xuICAgICAgICAgICAgdGhpc1t0aGlzLnQrK10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbd10gKz0gbjtcbiAgICAgICAgd2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVikge1xuICAgICAgICAgICAgdGhpc1t3XSAtPSB0aGlzLkRWO1xuICAgICAgICAgICAgaWYgKCsrdyA+PSB0aGlzLnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3RoaXMudCsrXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK3RoaXNbd107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGJucE11bHRpcGx5TG93ZXJUbztcbiAgICAvLyAocHJvdGVjdGVkKSByID0gbG93ZXIgbiB3b3JkcyBvZiBcInRoaXMgKiBhXCIsIGEudCA8PSBuXG4gICAgLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGZ1bmN0aW9uIChhLCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4odGhpcy50ICsgYS50LCBuKTtcbiAgICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgICByLnQgPSBpO1xuICAgICAgICB3aGlsZSAoaSA+IDApIHtcbiAgICAgICAgICAgIHJbLS1pXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaiA9IHIudCAtIHRoaXMudDsgaSA8IGo7ICsraSkge1xuICAgICAgICAgICAgcltpICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgdGhpcy50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBqID0gTWF0aC5taW4oYS50LCBuKTsgaSA8IGo7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hbSgwLCBhW2ldLCByLCBpLCAwLCBuIC0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgci5jbGFtcCgpO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvID0gYm5wTXVsdGlwbHlVcHBlclRvO1xuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSBcInRoaXMgKiBhXCIgd2l0aG91dCBsb3dlciBuIHdvcmRzLCBuID4gMFxuICAgIC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG8gPSBmdW5jdGlvbiAoYSwgbiwgcikge1xuICAgICAgICAtLW47XG4gICAgICAgIHZhciBpID0gci50ID0gdGhpcy50ICsgYS50IC0gbjtcbiAgICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgIHJbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IE1hdGgubWF4KG4gLSB0aGlzLnQsIDApOyBpIDwgYS50OyArK2kpIHtcbiAgICAgICAgICAgIHJbdGhpcy50ICsgaSAtIG5dID0gdGhpcy5hbShuIC0gaSwgYVtpXSwgciwgMCwgMCwgdGhpcy50ICsgaSAtIG4pO1xuICAgICAgICB9XG4gICAgICAgIHIuY2xhbXAoKTtcbiAgICAgICAgci5kclNoaWZ0VG8oMSwgcik7XG4gICAgfTtcbiAgICAvLyBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQgPSBibnBNb2RJbnQ7XG4gICAgLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgaWYgKG4gPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGQgPSB0aGlzLkRWICUgbjtcbiAgICAgICAgdmFyIHIgPSAodGhpcy5zIDwgMCkgPyBuIC0gMSA6IDA7XG4gICAgICAgIGlmICh0aGlzLnQgPiAwKSB7XG4gICAgICAgICAgICBpZiAoZCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgciA9IHRoaXNbMF0gJSBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSAoZCAqIHIgKyB0aGlzW2ldKSAlIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gQmlnSW50ZWdlci5wcm90b3R5cGUubWlsbGVyUmFiaW4gPSBibnBNaWxsZXJSYWJpbjtcbiAgICAvLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIG4xID0gdGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgICAgIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChrIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IG4xLnNoaWZ0UmlnaHQoayk7XG4gICAgICAgIHQgPSAodCArIDEpID4+IDE7XG4gICAgICAgIGlmICh0ID4gbG93cHJpbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdCA9IGxvd3ByaW1lcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGEgPSBuYmkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0OyArK2kpIHtcbiAgICAgICAgICAgIC8vIFBpY2sgYmFzZXMgYXQgcmFuZG9tLCBpbnN0ZWFkIG9mIHN0YXJ0aW5nIGF0IDJcbiAgICAgICAgICAgIGEuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbG93cHJpbWVzLmxlbmd0aCldKTtcbiAgICAgICAgICAgIHZhciB5ID0gYS5tb2RQb3cociwgdGhpcyk7XG4gICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHkubW9kUG93SW50KDIsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIC8vIEJpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGJuU3F1YXJlO1xuICAgIC8vIChwdWJsaWMpIHRoaXNeMlxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5zcXVhcmVUbyhyKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICAvLyNyZWdpb24gQVNZTkNcbiAgICAvLyBQdWJsaWMgQVBJIG1ldGhvZFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZGEgPSBmdW5jdGlvbiAoYSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHggPSAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpO1xuICAgICAgICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA8IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0geDtcbiAgICAgICAgICAgIHggPSB5O1xuICAgICAgICAgICAgeSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB4LmdldExvd2VzdFNldEJpdCgpO1xuICAgICAgICB2YXIgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICAgIGlmIChnIDwgMCkge1xuICAgICAgICAgICAgY2FsbGJhY2soeCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBnKSB7XG4gICAgICAgICAgICBnID0gaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZyA+IDApIHtcbiAgICAgICAgICAgIHguclNoaWZ0VG8oZywgeCk7XG4gICAgICAgICAgICB5LnJTaGlmdFRvKGcsIHkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdvcmtob3JzZSBvZiB0aGUgYWxnb3JpdGhtLCBnZXRzIGNhbGxlZCAyMDAgLSA4MDAgdGltZXMgcGVyIDUxMiBiaXQga2V5Z2VuLlxuICAgICAgICB2YXIgZ2NkYTEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKGkgPSB4LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHtcbiAgICAgICAgICAgICAgICB4LnJTaGlmdFRvKGksIHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgeS5yU2hpZnRUbyhpLCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4LmNvbXBhcmVUbyh5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgeC5zdWJUbyh5LCB4KTtcbiAgICAgICAgICAgICAgICB4LnJTaGlmdFRvKDEsIHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeS5zdWJUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICB5LnJTaGlmdFRvKDEsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoeC5zaWdudW0oKSA+IDApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHkubFNoaWZ0VG8oZywgeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBjYWxsYmFjayh5KTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChnY2RhMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNldFRpbWVvdXQoZ2NkYTEsIDEwKTtcbiAgICB9O1xuICAgIC8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21OdW1iZXJBc3luYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgICAgICAgICAgaWYgKGEgPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tSW50KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsIGMpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCBvcF9vciwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRXZlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZEFkZE9mZnNldCgxLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGJucF8xID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgYm5wZm4xXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJucF8xLmRBZGRPZmZzZXQoMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChibnBfMS5iaXRMZW5ndGgoKSA+IGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJucF8xLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIGJucF8xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm5wXzEuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soKTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChibnBmbjFfMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYm5wZm4xXzEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSBbXTtcbiAgICAgICAgICAgIHZhciB0ID0gYSAmIDc7XG4gICAgICAgICAgICB4Lmxlbmd0aCA9IChhID4+IDMpICsgMTtcbiAgICAgICAgICAgIGIubmV4dEJ5dGVzKHgpO1xuICAgICAgICAgICAgaWYgKHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgeFswXSAmPSAoKDEgPDwgdCkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHhbMF0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHgsIDI1Nik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCaWdJbnRlZ2VyO1xufSgpKTtcbmV4cG9ydCB7IEJpZ0ludGVnZXIgfTtcbi8vI3JlZ2lvbiBSRURVQ0VSU1xuLy8jcmVnaW9uIE51bGxFeHBcbnZhciBOdWxsRXhwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE51bGxFeHAoKSB7XG4gICAgfVxuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQgPSBuTm9wO1xuICAgIE51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3A7XG4gICAgTnVsbEV4cC5wcm90b3R5cGUucmV2ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgICAvLyBOdWxsRXhwLnByb3RvdHlwZS5tdWxUbyA9IG5NdWxUbztcbiAgICBOdWxsRXhwLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uICh4LCB5LCByKSB7XG4gICAgICAgIHgubXVsdGlwbHlUbyh5LCByKTtcbiAgICB9O1xuICAgIC8vIE51bGxFeHAucHJvdG90eXBlLnNxclRvID0gblNxclRvO1xuICAgIE51bGxFeHAucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICB9O1xuICAgIHJldHVybiBOdWxsRXhwO1xufSgpKTtcbi8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxudmFyIENsYXNzaWMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2xhc3NpYyhtKSB7XG4gICAgICAgIHRoaXMubSA9IG07XG4gICAgfVxuICAgIC8vIENsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKHgucyA8IDAgfHwgeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQgPSBjUmV2ZXJ0O1xuICAgIENsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH07XG4gICAgLy8gQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB4LmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgeCk7XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5tdWxUbyA9IGNNdWxUbztcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uICh4LCB5LCByKSB7XG4gICAgICAgIHgubXVsdGlwbHlUbyh5LCByKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICAvLyBDbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUbztcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGZ1bmN0aW9uICh4LCByKSB7XG4gICAgICAgIHguc3F1YXJlVG8ocik7XG4gICAgICAgIHRoaXMucmVkdWNlKHIpO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzaWM7XG59KCkpO1xuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gTW9udGdvbWVyeVxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbnZhciBNb250Z29tZXJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICAgICAgICB0aGlzLm0gPSBtO1xuICAgICAgICB0aGlzLm1wID0gbS5pbnZEaWdpdCgpO1xuICAgICAgICB0aGlzLm1wbCA9IHRoaXMubXAgJiAweDdmZmY7XG4gICAgICAgIHRoaXMubXBoID0gdGhpcy5tcCA+PiAxNTtcbiAgICAgICAgdGhpcy51bSA9ICgxIDw8IChtLkRCIC0gMTUpKSAtIDE7XG4gICAgICAgIHRoaXMubXQyID0gMiAqIG0udDtcbiAgICB9XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuICAgIC8vIHhSIG1vZCBtXG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgIHguYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LCByKTtcbiAgICAgICAgci5kaXZSZW1Ubyh0aGlzLm0sIG51bGwsIHIpO1xuICAgICAgICBpZiAoeC5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkge1xuICAgICAgICAgICAgdGhpcy5tLnN1YlRvKHIsIHIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydDtcbiAgICAvLyB4L1IgbW9kIG1cbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgICB4LmNvcHlUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gbW9udFJlZHVjZTtcbiAgICAvLyB4ID0geC9SIG1vZCBtIChIQUMgMTQuMzIpXG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgd2hpbGUgKHgudCA8PSB0aGlzLm10Mikge1xuICAgICAgICAgICAgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgICAgICAgICB4W3gudCsrXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm0udDsgKytpKSB7XG4gICAgICAgICAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICAgICAgICAgIHZhciBqID0geFtpXSAmIDB4N2ZmZjtcbiAgICAgICAgICAgIHZhciB1MCA9IChqICogdGhpcy5tcGwgKyAoKChqICogdGhpcy5tcGggKyAoeFtpXSA+PiAxNSkgKiB0aGlzLm1wbCkgJiB0aGlzLnVtKSA8PCAxNSkpICYgeC5ETTtcbiAgICAgICAgICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgICAgICAgICAgaiA9IGkgKyB0aGlzLm0udDtcbiAgICAgICAgICAgIHhbal0gKz0gdGhpcy5tLmFtKDAsIHUwLCB4LCBpLCAwLCB0aGlzLm0udCk7XG4gICAgICAgICAgICAvLyBwcm9wYWdhdGUgY2FycnlcbiAgICAgICAgICAgIHdoaWxlICh4W2pdID49IHguRFYpIHtcbiAgICAgICAgICAgICAgICB4W2pdIC09IHguRFY7XG4gICAgICAgICAgICAgICAgeFsrK2pdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeC5jbGFtcCgpO1xuICAgICAgICB4LmRyU2hpZnRUbyh0aGlzLm0udCwgeCk7XG4gICAgICAgIGlmICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHtcbiAgICAgICAgICAgIHguc3ViVG8odGhpcy5tLCB4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gTW9udGdvbWVyeS5wcm90b3R5cGUubXVsVG8gPSBtb250TXVsVG87XG4gICAgLy8gciA9IFwieHkvUiBtb2QgbVwiOyB4LHkgIT0gclxuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgeC5tdWx0aXBseVRvKHksIHIpO1xuICAgICAgICB0aGlzLnJlZHVjZShyKTtcbiAgICB9O1xuICAgIC8vIE1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvO1xuICAgIC8vIHIgPSBcInheMi9SIG1vZCBtXCI7IHggIT0gclxuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICByZXR1cm4gTW9udGdvbWVyeTtcbn0oKSk7XG4vLyNlbmRyZWdpb24gTW9udGdvbWVyeVxuLy8jcmVnaW9uIEJhcnJldHRcbi8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cbnZhciBCYXJyZXR0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhcnJldHQobSkge1xuICAgICAgICB0aGlzLm0gPSBtO1xuICAgICAgICAvLyBzZXR1cCBCYXJyZXR0XG4gICAgICAgIHRoaXMucjIgPSBuYmkoKTtcbiAgICAgICAgdGhpcy5xMyA9IG5iaSgpO1xuICAgICAgICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiAqIG0udCwgdGhpcy5yMik7XG4gICAgICAgIHRoaXMubXUgPSB0aGlzLnIyLmRpdmlkZShtKTtcbiAgICB9XG4gICAgLy8gQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0O1xuICAgIEJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHtcbiAgICAgICAgICAgIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICAgICAgICB4LmNvcHlUbyhyKTtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlKHIpO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEJhcnJldHQucHJvdG90eXBlLnJldmVydCA9IGJhcnJldHRSZXZlcnQ7XG4gICAgQmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgICAvLyBCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlO1xuICAgIC8vIHggPSB4IG1vZCBtIChIQUMgMTQuNDIpXG4gICAgQmFycmV0dC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgeC5kclNoaWZ0VG8odGhpcy5tLnQgLSAxLCB0aGlzLnIyKTtcbiAgICAgICAgaWYgKHgudCA+IHRoaXMubS50ICsgMSkge1xuICAgICAgICAgICAgeC50ID0gdGhpcy5tLnQgKyAxO1xuICAgICAgICAgICAgeC5jbGFtcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsIHRoaXMubS50ICsgMSwgdGhpcy5xMyk7XG4gICAgICAgIHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMywgdGhpcy5tLnQgKyAxLCB0aGlzLnIyKTtcbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHRoaXMucjIpIDwgMCkge1xuICAgICAgICAgICAgeC5kQWRkT2Zmc2V0KDEsIHRoaXMubS50ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgeC5zdWJUbyh0aGlzLnIyLCB4KTtcbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkge1xuICAgICAgICAgICAgeC5zdWJUbyh0aGlzLm0sIHgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBCYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUbztcbiAgICAvLyByID0geCp5IG1vZCBtOyB4LHkgIT0gclxuICAgIEJhcnJldHQucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgeC5tdWx0aXBseVRvKHksIHIpO1xuICAgICAgICB0aGlzLnJlZHVjZShyKTtcbiAgICB9O1xuICAgIC8vIEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuICAgIC8vIHIgPSB4XjIgbW9kIG07IHggIT0gclxuICAgIEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24gKHgsIHIpIHtcbiAgICAgICAgeC5zcXVhcmVUbyhyKTtcbiAgICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgfTtcbiAgICByZXR1cm4gQmFycmV0dDtcbn0oKSk7XG4vLyNlbmRyZWdpb25cbi8vI2VuZHJlZ2lvbiBSRURVQ0VSU1xuLy8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlclxuZXhwb3J0IGZ1bmN0aW9uIG5iaSgpIHsgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpOyB9XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCaWdJbnQoc3RyLCByKSB7XG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKHN0ciwgcik7XG59XG4vLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4vLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuXG4vLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4vLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxudmFyIGluQnJvd3NlciA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCI7XG5pZiAoaW5Ccm93c2VyICYmIGpfbG0gJiYgKG5hdmlnYXRvci5hcHBOYW1lID09IFwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCIpKSB7XG4gICAgLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4gICAgLy8gTWF4IGRpZ2l0IGJpdHMgc2hvdWxkIGJlIDw9IDMwIGJlY2F1c2Ugd2UgZG8gYml0d2lzZSBvcHNcbiAgICAvLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBmdW5jdGlvbiBhbTIoaSwgeCwgdywgaiwgYywgbikge1xuICAgICAgICB2YXIgeGwgPSB4ICYgMHg3ZmZmO1xuICAgICAgICB2YXIgeGggPSB4ID4+IDE1O1xuICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgIHZhciBsID0gdGhpc1tpXSAmIDB4N2ZmZjtcbiAgICAgICAgICAgIHZhciBoID0gdGhpc1tpKytdID4+IDE1O1xuICAgICAgICAgICAgdmFyIG0gPSB4aCAqIGwgKyBoICogeGw7XG4gICAgICAgICAgICBsID0geGwgKiBsICsgKChtICYgMHg3ZmZmKSA8PCAxNSkgKyB3W2pdICsgKGMgJiAweDNmZmZmZmZmKTtcbiAgICAgICAgICAgIGMgPSAobCA+Pj4gMzApICsgKG0gPj4+IDE1KSArIHhoICogaCArIChjID4+PiAzMCk7XG4gICAgICAgICAgICB3W2orK10gPSBsICYgMHgzZmZmZmZmZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9O1xuICAgIGRiaXRzID0gMzA7XG59XG5lbHNlIGlmIChpbkJyb3dzZXIgJiYgal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgIT0gXCJOZXRzY2FwZVwiKSkge1xuICAgIC8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cyxcbiAgICAvLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuICAgIC8vIG1heCBpbnRlcm5hbCB2YWx1ZSA9IDIqZHZhbHVlXjItMipkdmFsdWUgKDwgMl41MylcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGZ1bmN0aW9uIGFtMShpLCB4LCB3LCBqLCBjLCBuKSB7XG4gICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgdmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGM7XG4gICAgICAgICAgICBjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKTtcbiAgICAgICAgICAgIHdbaisrXSA9IHYgJiAweDNmZmZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgICBkYml0cyA9IDI2O1xufVxuZWxzZSB7IC8vIE1vemlsbGEvTmV0c2NhcGUgc2VlbXMgdG8gcHJlZmVyIGFtM1xuICAgIC8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuICAgIC8vIGJyb3dzZXJzIHNsb3cgZG93biB3aGVuIGRlYWxpbmcgd2l0aCAzMi1iaXQgbnVtYmVycy5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGZ1bmN0aW9uIGFtMyhpLCB4LCB3LCBqLCBjLCBuKSB7XG4gICAgICAgIHZhciB4bCA9IHggJiAweDNmZmY7XG4gICAgICAgIHZhciB4aCA9IHggPj4gMTQ7XG4gICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgdmFyIGwgPSB0aGlzW2ldICYgMHgzZmZmO1xuICAgICAgICAgICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTQ7XG4gICAgICAgICAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bDtcbiAgICAgICAgICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDNmZmYpIDw8IDE0KSArIHdbal0gKyBjO1xuICAgICAgICAgICAgYyA9IChsID4+IDI4KSArIChtID4+IDE0KSArIHhoICogaDtcbiAgICAgICAgICAgIHdbaisrXSA9IGwgJiAweGZmZmZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgICBkYml0cyA9IDI4O1xufVxuQmlnSW50ZWdlci5wcm90b3R5cGUuREIgPSBkYml0cztcbkJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxIDw8IGRiaXRzKSAtIDEpO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMSA8PCBkYml0cyk7XG52YXIgQklfRlAgPSA1MjtcbkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjEgPSBCSV9GUCAtIGRiaXRzO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjIgPSAyICogZGJpdHMgLSBCSV9GUDtcbi8vIERpZ2l0IGNvbnZlcnNpb25zXG52YXIgQklfUkMgPSBbXTtcbnZhciBycjtcbnZhciB2djtcbnJyID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbmZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSB7XG4gICAgQklfUkNbcnIrK10gPSB2djtcbn1cbnJyID0gXCJhXCIuY2hhckNvZGVBdCgwKTtcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikge1xuICAgIEJJX1JDW3JyKytdID0gdnY7XG59XG5yciA9IFwiQVwiLmNoYXJDb2RlQXQoMCk7XG5mb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIHtcbiAgICBCSV9SQ1tycisrXSA9IHZ2O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGludEF0KHMsIGkpIHtcbiAgICB2YXIgYyA9IEJJX1JDW3MuY2hhckNvZGVBdChpKV07XG4gICAgcmV0dXJuIChjID09IG51bGwpID8gLTEgOiBjO1xufVxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZXhwb3J0IGZ1bmN0aW9uIG5idihpKSB7XG4gICAgdmFyIHIgPSBuYmkoKTtcbiAgICByLmZyb21JbnQoaSk7XG4gICAgcmV0dXJuIHI7XG59XG4vLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuZXhwb3J0IGZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgICB2YXIgciA9IDE7XG4gICAgdmFyIHQ7XG4gICAgaWYgKCh0ID0geCA+Pj4gMTYpICE9IDApIHtcbiAgICAgICAgeCA9IHQ7XG4gICAgICAgIHIgKz0gMTY7XG4gICAgfVxuICAgIGlmICgodCA9IHggPj4gOCkgIT0gMCkge1xuICAgICAgICB4ID0gdDtcbiAgICAgICAgciArPSA4O1xuICAgIH1cbiAgICBpZiAoKHQgPSB4ID4+IDQpICE9IDApIHtcbiAgICAgICAgeCA9IHQ7XG4gICAgICAgIHIgKz0gNDtcbiAgICB9XG4gICAgaWYgKCh0ID0geCA+PiAyKSAhPSAwKSB7XG4gICAgICAgIHggPSB0O1xuICAgICAgICByICs9IDI7XG4gICAgfVxuICAgIGlmICgodCA9IHggPj4gMSkgIT0gMCkge1xuICAgICAgICB4ID0gdDtcbiAgICAgICAgciArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbi8vIFwiY29uc3RhbnRzXCJcbkJpZ0ludGVnZXIuWkVSTyA9IG5idigwKTtcbkJpZ0ludGVnZXIuT05FID0gbmJ2KDEpO1xuIiwiLy8gcHJuZzQuanMgLSB1c2VzIEFyY2ZvdXIgYXMgYSBQUk5HXG52YXIgQXJjZm91ciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcmNmb3VyKCkge1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmogPSAwO1xuICAgICAgICB0aGlzLlMgPSBbXTtcbiAgICB9XG4gICAgLy8gQXJjZm91ci5wcm90b3R5cGUuaW5pdCA9IEFSQzRpbml0O1xuICAgIC8vIEluaXRpYWxpemUgYXJjZm91ciBjb250ZXh0IGZyb20ga2V5LCBhbiBhcnJheSBvZiBpbnRzLCBlYWNoIGZyb20gWzAuLjI1NV1cbiAgICBBcmNmb3VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuU1tpXSA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgaiA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICAgICAgaiA9IChqICsgdGhpcy5TW2ldICsga2V5W2kgJSBrZXkubGVuZ3RoXSkgJiAyNTU7XG4gICAgICAgICAgICB0ID0gdGhpcy5TW2ldO1xuICAgICAgICAgICAgdGhpcy5TW2ldID0gdGhpcy5TW2pdO1xuICAgICAgICAgICAgdGhpcy5TW2pdID0gdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmogPSAwO1xuICAgIH07XG4gICAgLy8gQXJjZm91ci5wcm90b3R5cGUubmV4dCA9IEFSQzRuZXh0O1xuICAgIEFyY2ZvdXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICB0aGlzLmkgPSAodGhpcy5pICsgMSkgJiAyNTU7XG4gICAgICAgIHRoaXMuaiA9ICh0aGlzLmogKyB0aGlzLlNbdGhpcy5pXSkgJiAyNTU7XG4gICAgICAgIHQgPSB0aGlzLlNbdGhpcy5pXTtcbiAgICAgICAgdGhpcy5TW3RoaXMuaV0gPSB0aGlzLlNbdGhpcy5qXTtcbiAgICAgICAgdGhpcy5TW3RoaXMual0gPSB0O1xuICAgICAgICByZXR1cm4gdGhpcy5TWyh0ICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1XTtcbiAgICB9O1xuICAgIHJldHVybiBBcmNmb3VyO1xufSgpKTtcbmV4cG9ydCB7IEFyY2ZvdXIgfTtcbi8vIFBsdWcgaW4geW91ciBSTkcgY29uc3RydWN0b3IgaGVyZVxuZXhwb3J0IGZ1bmN0aW9uIHBybmdfbmV3c3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBBcmNmb3VyKCk7XG59XG4vLyBQb29sIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQgYW5kIGdyZWF0ZXIgdGhhbiAzMi5cbi8vIEFuIGFycmF5IG9mIGJ5dGVzIHRoZSBzaXplIG9mIHRoZSBwb29sIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKVxuZXhwb3J0IHZhciBybmdfcHNpemUgPSAyNTY7XG4iLCIvLyBSYW5kb20gbnVtYmVyIGdlbmVyYXRvciAtIHJlcXVpcmVzIGEgUFJORyBiYWNrZW5kLCBlLmcuIHBybmc0LmpzXG5pbXBvcnQgeyBwcm5nX25ld3N0YXRlLCBybmdfcHNpemUgfSBmcm9tIFwiLi9wcm5nNFwiO1xudmFyIHJuZ19zdGF0ZTtcbnZhciBybmdfcG9vbCA9IG51bGw7XG52YXIgcm5nX3BwdHI7XG4vLyBJbml0aWFsaXplIHRoZSBwb29sIHdpdGgganVuayBpZiBuZWVkZWQuXG5pZiAocm5nX3Bvb2wgPT0gbnVsbCkge1xuICAgIHJuZ19wb29sID0gW107XG4gICAgcm5nX3BwdHIgPSAwO1xuICAgIHZhciB0ID0gdm9pZCAwO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgZW50cm9weSAoMjA0OCBiaXRzKSBmcm9tIFJORyBpZiBhdmFpbGFibGVcbiAgICAgICAgdmFyIHogPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgICAgICAgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoeik7XG4gICAgICAgIGZvciAodCA9IDA7IHQgPCB6Lmxlbmd0aDsgKyt0KSB7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHpbdF0gJiAyNTU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVXNlIG1vdXNlIGV2ZW50cyBmb3IgZW50cm9weSwgaWYgd2UgZG8gbm90IGhhdmUgZW5vdWdoIGVudHJvcHkgYnkgdGhlIHRpbWVcbiAgICAvLyB3ZSBuZWVkIGl0LCBlbnRyb3B5IHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IE1hdGgucmFuZG9tLlxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIG9uTW91c2VNb3ZlTGlzdGVuZXJfMSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBjb3VudCA9IGNvdW50IHx8IDA7XG4gICAgICAgIGlmIChjb3VudCA+PSAyNTYgfHwgcm5nX3BwdHIgPj0gcm5nX3BzaXplKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdpbmRvdy5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5kZXRhY2hFdmVudChcIm9ubW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlTGlzdGVuZXJfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBtb3VzZUNvb3JkaW5hdGVzID0gZXYueCArIGV2Lnk7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IG1vdXNlQ29vcmRpbmF0ZXMgJiAyNTU7XG4gICAgICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBTb21ldGltZXMgRmlyZWZveCB3aWxsIGRlbnkgcGVybWlzc2lvbiB0byBhY2Nlc3MgZXZlbnQgcHJvcGVydGllcyBmb3Igc29tZSByZWFzb24uIElnbm9yZS5cbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZU1vdmVMaXN0ZW5lcl8xLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZUxpc3RlbmVyXzEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcm5nX2dldF9ieXRlKCkge1xuICAgIGlmIChybmdfc3RhdGUgPT0gbnVsbCkge1xuICAgICAgICBybmdfc3RhdGUgPSBwcm5nX25ld3N0YXRlKCk7XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG1heSBub3QgaGF2ZSBjb2xsZWN0ZWQgZW5vdWdoIGVudHJvcHkuICBJZiBub3QsIGZhbGwgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgICAgICB3aGlsZSAocm5nX3BwdHIgPCBybmdfcHNpemUpIHtcbiAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKDY1NTM2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHJhbmRvbSAmIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBybmdfc3RhdGUuaW5pdChybmdfcG9vbCk7XG4gICAgICAgIGZvciAocm5nX3BwdHIgPSAwOyBybmdfcHB0ciA8IHJuZ19wb29sLmxlbmd0aDsgKytybmdfcHB0cikge1xuICAgICAgICAgICAgcm5nX3Bvb2xbcm5nX3BwdHJdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBybmdfcHB0ciA9IDA7XG4gICAgfVxuICAgIC8vIFRPRE86IGFsbG93IHJlc2VlZGluZyBhZnRlciBmaXJzdCByZXF1ZXN0XG4gICAgcmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCk7XG59XG52YXIgU2VjdXJlUmFuZG9tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlY3VyZVJhbmRvbSgpIHtcbiAgICB9XG4gICAgU2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXMgPSBmdW5jdGlvbiAoYmEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYmFbaV0gPSBybmdfZ2V0X2J5dGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNlY3VyZVJhbmRvbTtcbn0oKSk7XG5leHBvcnQgeyBTZWN1cmVSYW5kb20gfTtcbiIsIi8vIERlcGVuZHMgb24ganNibi5qcyBhbmQgcm5nLmpzXG4vLyBWZXJzaW9uIDEuMTogc3VwcG9ydCB1dGYtOCBlbmNvZGluZyBpbiBwa2NzMXBhZDJcbi8vIGNvbnZlcnQgYSAoaGV4KSBzdHJpbmcgdG8gYSBiaWdudW0gb2JqZWN0XG5pbXBvcnQgeyBCaWdJbnRlZ2VyLCBuYmksIHBhcnNlQmlnSW50IH0gZnJvbSBcIi4vanNiblwiO1xuaW1wb3J0IHsgU2VjdXJlUmFuZG9tIH0gZnJvbSBcIi4vcm5nXCI7XG4vLyBmdW5jdGlvbiBsaW5lYnJrKHMsbikge1xuLy8gICB2YXIgcmV0ID0gXCJcIjtcbi8vICAgdmFyIGkgPSAwO1xuLy8gICB3aGlsZShpICsgbiA8IHMubGVuZ3RoKSB7XG4vLyAgICAgcmV0ICs9IHMuc3Vic3RyaW5nKGksaStuKSArIFwiXFxuXCI7XG4vLyAgICAgaSArPSBuO1xuLy8gICB9XG4vLyAgIHJldHVybiByZXQgKyBzLnN1YnN0cmluZyhpLHMubGVuZ3RoKTtcbi8vIH1cbi8vIGZ1bmN0aW9uIGJ5dGUySGV4KGIpIHtcbi8vICAgaWYoYiA8IDB4MTApXG4vLyAgICAgcmV0dXJuIFwiMFwiICsgYi50b1N0cmluZygxNik7XG4vLyAgIGVsc2Vcbi8vICAgICByZXR1cm4gYi50b1N0cmluZygxNik7XG4vLyB9XG5mdW5jdGlvbiBwa2NzMXBhZDEocywgbikge1xuICAgIGlmIChuIDwgcy5sZW5ndGggKyAyMikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGxlbiA9IG4gLSBzLmxlbmd0aCAtIDY7XG4gICAgdmFyIGZpbGxlciA9IFwiXCI7XG4gICAgZm9yICh2YXIgZiA9IDA7IGYgPCBsZW47IGYgKz0gMikge1xuICAgICAgICBmaWxsZXIgKz0gXCJmZlwiO1xuICAgIH1cbiAgICB2YXIgbSA9IFwiMDAwMVwiICsgZmlsbGVyICsgXCIwMFwiICsgcztcbiAgICByZXR1cm4gcGFyc2VCaWdJbnQobSwgMTYpO1xufVxuLy8gUEtDUyMxICh0eXBlIDIsIHJhbmRvbSkgcGFkIGlucHV0IHN0cmluZyBzIHRvIG4gYnl0ZXMsIGFuZCByZXR1cm4gYSBiaWdpbnRcbmZ1bmN0aW9uIHBrY3MxcGFkMihzLCBuKSB7XG4gICAgaWYgKG4gPCBzLmxlbmd0aCArIDExKSB7IC8vIFRPRE86IGZpeCBmb3IgdXRmLThcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBiYSA9IFtdO1xuICAgIHZhciBpID0gcy5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChpID49IDAgJiYgbiA+IDApIHtcbiAgICAgICAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaS0tKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHsgLy8gZW5jb2RlIHVzaW5nIHV0Zi04XG4gICAgICAgICAgICBiYVstLW5dID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkge1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYmFbLS1uXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICAgICAgYmFbLS1uXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICAgIGJhWy0tbl0gPSAoYyA+PiAxMikgfCAyMjQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmFbLS1uXSA9IDA7XG4gICAgdmFyIHJuZyA9IG5ldyBTZWN1cmVSYW5kb20oKTtcbiAgICB2YXIgeCA9IFtdO1xuICAgIHdoaWxlIChuID4gMikgeyAvLyByYW5kb20gbm9uLXplcm8gcGFkXG4gICAgICAgIHhbMF0gPSAwO1xuICAgICAgICB3aGlsZSAoeFswXSA9PSAwKSB7XG4gICAgICAgICAgICBybmcubmV4dEJ5dGVzKHgpO1xuICAgICAgICB9XG4gICAgICAgIGJhWy0tbl0gPSB4WzBdO1xuICAgIH1cbiAgICBiYVstLW5dID0gMjtcbiAgICBiYVstLW5dID0gMDtcbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYmEpO1xufVxuLy8gXCJlbXB0eVwiIFJTQSBrZXkgY29uc3RydWN0b3JcbnZhciBSU0FLZXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUlNBS2V5KCkge1xuICAgICAgICB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmUgPSAwO1xuICAgICAgICB0aGlzLmQgPSBudWxsO1xuICAgICAgICB0aGlzLnAgPSBudWxsO1xuICAgICAgICB0aGlzLnEgPSBudWxsO1xuICAgICAgICB0aGlzLmRtcDEgPSBudWxsO1xuICAgICAgICB0aGlzLmRtcTEgPSBudWxsO1xuICAgICAgICB0aGlzLmNvZWZmID0gbnVsbDtcbiAgICB9XG4gICAgLy8jcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vIHByb3RlY3RlZFxuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWMgPSBSU0FEb1B1YmxpYztcbiAgICAvLyBQZXJmb3JtIHJhdyBwdWJsaWMgb3BlcmF0aW9uIG9uIFwieFwiOiByZXR1cm4geF5lIChtb2QgbilcbiAgICBSU0FLZXkucHJvdG90eXBlLmRvUHVibGljID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHgubW9kUG93SW50KHRoaXMuZSwgdGhpcy5uKTtcbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZG9Qcml2YXRlID0gUlNBRG9Qcml2YXRlO1xuICAgIC8vIFBlcmZvcm0gcmF3IHByaXZhdGUgb3BlcmF0aW9uIG9uIFwieFwiOiByZXR1cm4geF5kIChtb2QgbilcbiAgICBSU0FLZXkucHJvdG90eXBlLmRvUHJpdmF0ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICh0aGlzLnAgPT0gbnVsbCB8fCB0aGlzLnEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHgubW9kUG93KHRoaXMuZCwgdGhpcy5uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiByZS1jYWxjdWxhdGUgYW55IG1pc3NpbmcgQ1JUIHBhcmFtc1xuICAgICAgICB2YXIgeHAgPSB4Lm1vZCh0aGlzLnApLm1vZFBvdyh0aGlzLmRtcDEsIHRoaXMucCk7XG4gICAgICAgIHZhciB4cSA9IHgubW9kKHRoaXMucSkubW9kUG93KHRoaXMuZG1xMSwgdGhpcy5xKTtcbiAgICAgICAgd2hpbGUgKHhwLmNvbXBhcmVUbyh4cSkgPCAwKSB7XG4gICAgICAgICAgICB4cCA9IHhwLmFkZCh0aGlzLnApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4cC5zdWJ0cmFjdCh4cSkubXVsdGlwbHkodGhpcy5jb2VmZikubW9kKHRoaXMucCkubXVsdGlwbHkodGhpcy5xKS5hZGQoeHEpO1xuICAgIH07XG4gICAgLy8jZW5kcmVnaW9uIFBST1RFQ1RFRFxuICAgIC8vI3JlZ2lvbiBQVUJMSUNcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLnNldFB1YmxpYyA9IFJTQVNldFB1YmxpYztcbiAgICAvLyBTZXQgdGhlIHB1YmxpYyBrZXkgZmllbGRzIE4gYW5kIGUgZnJvbSBoZXggc3RyaW5nc1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2V0UHVibGljID0gZnVuY3Rpb24gKE4sIEUpIHtcbiAgICAgICAgaWYgKE4gIT0gbnVsbCAmJiBFICE9IG51bGwgJiYgTi5sZW5ndGggPiAwICYmIEUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5uID0gcGFyc2VCaWdJbnQoTiwgMTYpO1xuICAgICAgICAgICAgdGhpcy5lID0gcGFyc2VJbnQoRSwgMTYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHB1YmxpYyBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdCA9IFJTQUVuY3J5cHQ7XG4gICAgLy8gUmV0dXJuIHRoZSBQS0NTIzEgUlNBIGVuY3J5cHRpb24gb2YgXCJ0ZXh0XCIgYXMgYW4gZXZlbi1sZW5ndGggaGV4IHN0cmluZ1xuICAgIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciBtYXhMZW5ndGggPSAodGhpcy5uLmJpdExlbmd0aCgpICsgNykgPj4gMztcbiAgICAgICAgdmFyIG0gPSBwa2NzMXBhZDIodGV4dCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgaWYgKG0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB0aGlzLmRvUHVibGljKG0pO1xuICAgICAgICBpZiAoYyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gaC5sZW5ndGg7XG4gICAgICAgIC8vIGZpeCB6ZXJvIGJlZm9yZSByZXN1bHRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhMZW5ndGggKiAyIC0gbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGggPSBcIjBcIiArIGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgfTtcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGUgPSBSU0FTZXRQcml2YXRlO1xuICAgIC8vIFNldCB0aGUgcHJpdmF0ZSBrZXkgZmllbGRzIE4sIGUsIGFuZCBkIGZyb20gaGV4IHN0cmluZ3NcbiAgICBSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGUgPSBmdW5jdGlvbiAoTiwgRSwgRCkge1xuICAgICAgICBpZiAoTiAhPSBudWxsICYmIEUgIT0gbnVsbCAmJiBOLmxlbmd0aCA+IDAgJiYgRS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChOLCAxNik7XG4gICAgICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgICAgICB0aGlzLmQgPSBwYXJzZUJpZ0ludChELCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuc2V0UHJpdmF0ZUV4ID0gUlNBU2V0UHJpdmF0ZUV4O1xuICAgIC8vIFNldCB0aGUgcHJpdmF0ZSBrZXkgZmllbGRzIE4sIGUsIGQgYW5kIENSVCBwYXJhbXMgZnJvbSBoZXggc3RyaW5nc1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2V0UHJpdmF0ZUV4ID0gZnVuY3Rpb24gKE4sIEUsIEQsIFAsIFEsIERQLCBEUSwgQykge1xuICAgICAgICBpZiAoTiAhPSBudWxsICYmIEUgIT0gbnVsbCAmJiBOLmxlbmd0aCA+IDAgJiYgRS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChOLCAxNik7XG4gICAgICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgICAgICB0aGlzLmQgPSBwYXJzZUJpZ0ludChELCAxNik7XG4gICAgICAgICAgICB0aGlzLnAgPSBwYXJzZUJpZ0ludChQLCAxNik7XG4gICAgICAgICAgICB0aGlzLnEgPSBwYXJzZUJpZ0ludChRLCAxNik7XG4gICAgICAgICAgICB0aGlzLmRtcDEgPSBwYXJzZUJpZ0ludChEUCwgMTYpO1xuICAgICAgICAgICAgdGhpcy5kbXExID0gcGFyc2VCaWdJbnQoRFEsIDE2KTtcbiAgICAgICAgICAgIHRoaXMuY29lZmYgPSBwYXJzZUJpZ0ludChDLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJTQUtleS5wcm90b3R5cGUuZ2VuZXJhdGUgPSBSU0FHZW5lcmF0ZTtcbiAgICAvLyBHZW5lcmF0ZSBhIG5ldyByYW5kb20gcHJpdmF0ZSBrZXkgQiBiaXRzIGxvbmcsIHVzaW5nIHB1YmxpYyBleHB0IEVcbiAgICBSU0FLZXkucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKEIsIEUpIHtcbiAgICAgICAgdmFyIHJuZyA9IG5ldyBTZWN1cmVSYW5kb20oKTtcbiAgICAgICAgdmFyIHFzID0gQiA+PiAxO1xuICAgICAgICB0aGlzLmUgPSBwYXJzZUludChFLCAxNik7XG4gICAgICAgIHZhciBlZSA9IG5ldyBCaWdJbnRlZ2VyKEUsIDE2KTtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIHRoaXMucCA9IG5ldyBCaWdJbnRlZ2VyKEIgLSBxcywgMSwgcm5nKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2QoZWUpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCAmJiB0aGlzLnAuaXNQcm9iYWJsZVByaW1lKDEwKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xID0gbmV3IEJpZ0ludGVnZXIocXMsIDEsIHJuZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkuZ2NkKGVlKS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDAgJiYgdGhpcy5xLmlzUHJvYmFibGVQcmltZSgxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucC5jb21wYXJlVG8odGhpcy5xKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnA7XG4gICAgICAgICAgICAgICAgdGhpcy5wID0gdGhpcy5xO1xuICAgICAgICAgICAgICAgIHRoaXMucSA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcDEgPSB0aGlzLnAuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO1xuICAgICAgICAgICAgdmFyIHExID0gdGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgICAgICAgICAgIHZhciBwaGkgPSBwMS5tdWx0aXBseShxMSk7XG4gICAgICAgICAgICBpZiAocGhpLmdjZChlZSkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5wLm11bHRpcGx5KHRoaXMucSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kID0gZWUubW9kSW52ZXJzZShwaGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG1wMSA9IHRoaXMuZC5tb2QocDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG1xMSA9IHRoaXMuZC5tb2QocTEpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29lZmYgPSB0aGlzLnEubW9kSW52ZXJzZSh0aGlzLnApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSU0FLZXkucHJvdG90eXBlLmRlY3J5cHQgPSBSU0FEZWNyeXB0O1xuICAgIC8vIFJldHVybiB0aGUgUEtDUyMxIFJTQSBkZWNyeXB0aW9uIG9mIFwiY3RleHRcIi5cbiAgICAvLyBcImN0ZXh0XCIgaXMgYW4gZXZlbi1sZW5ndGggaGV4IHN0cmluZyBhbmQgdGhlIG91dHB1dCBpcyBhIHBsYWluIHN0cmluZy5cbiAgICBSU0FLZXkucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoY3RleHQpIHtcbiAgICAgICAgdmFyIGMgPSBwYXJzZUJpZ0ludChjdGV4dCwgMTYpO1xuICAgICAgICB2YXIgbSA9IHRoaXMuZG9Qcml2YXRlKGMpO1xuICAgICAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGtjczF1bnBhZDIobSwgKHRoaXMubi5iaXRMZW5ndGgoKSArIDcpID4+IDMpO1xuICAgIH07XG4gICAgLy8gR2VuZXJhdGUgYSBuZXcgcmFuZG9tIHByaXZhdGUga2V5IEIgYml0cyBsb25nLCB1c2luZyBwdWJsaWMgZXhwdCBFXG4gICAgUlNBS2V5LnByb3RvdHlwZS5nZW5lcmF0ZUFzeW5jID0gZnVuY3Rpb24gKEIsIEUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBybmcgPSBuZXcgU2VjdXJlUmFuZG9tKCk7XG4gICAgICAgIHZhciBxcyA9IEIgPj4gMTtcbiAgICAgICAgdGhpcy5lID0gcGFyc2VJbnQoRSwgMTYpO1xuICAgICAgICB2YXIgZWUgPSBuZXcgQmlnSW50ZWdlcihFLCAxNik7XG4gICAgICAgIHZhciByc2EgPSB0aGlzO1xuICAgICAgICAvLyBUaGVzZSBmdW5jdGlvbnMgaGF2ZSBub24tZGVzY3JpcHQgbmFtZXMgYmVjYXVzZSB0aGV5IHdlcmUgb3JpZ2luYWxseSBmb3IoOzspIGxvb3BzLlxuICAgICAgICAvLyBJIGRvbid0IGtub3cgYWJvdXQgY3J5cHRvZ3JhcGh5IHRvIGdpdmUgdGhlbSBiZXR0ZXIgbmFtZXMgdGhhbiBsb29wMS00LlxuICAgICAgICB2YXIgbG9vcDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbG9vcDQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJzYS5wLmNvbXBhcmVUbyhyc2EucSkgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHJzYS5wO1xuICAgICAgICAgICAgICAgICAgICByc2EucCA9IHJzYS5xO1xuICAgICAgICAgICAgICAgICAgICByc2EucSA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwMSA9IHJzYS5wLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgICAgICAgICAgICAgICB2YXIgcTEgPSByc2EucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgICAgICAgICAgICAgdmFyIHBoaSA9IHAxLm11bHRpcGx5KHExKTtcbiAgICAgICAgICAgICAgICBpZiAocGhpLmdjZChlZSkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5uID0gcnNhLnAubXVsdGlwbHkocnNhLnEpO1xuICAgICAgICAgICAgICAgICAgICByc2EuZCA9IGVlLm1vZEludmVyc2UocGhpKTtcbiAgICAgICAgICAgICAgICAgICAgcnNhLmRtcDEgPSByc2EuZC5tb2QocDEpO1xuICAgICAgICAgICAgICAgICAgICByc2EuZG1xMSA9IHJzYS5kLm1vZChxMSk7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5jb2VmZiA9IHJzYS5xLm1vZEludmVyc2UocnNhLnApO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soKTsgfSwgMCk7IC8vIGVzY2FwZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChsb29wMSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBsb29wMyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByc2EucSA9IG5iaSgpO1xuICAgICAgICAgICAgICAgIHJzYS5xLmZyb21OdW1iZXJBc3luYyhxcywgMSwgcm5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJzYS5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2RhKGVlLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwICYmIHJzYS5xLmlzUHJvYmFibGVQcmltZSgxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGxvb3A0LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDMsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbG9vcDIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnNhLnAgPSBuYmkoKTtcbiAgICAgICAgICAgICAgICByc2EucC5mcm9tTnVtYmVyQXN5bmMoQiAtIHFzLCAxLCBybmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcnNhLnAuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpLmdjZGEoZWUsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDAgJiYgcnNhLnAuaXNQcm9iYWJsZVByaW1lKDEwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDMsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChsb29wMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQobG9vcDIsIDApO1xuICAgICAgICB9O1xuICAgICAgICBzZXRUaW1lb3V0KGxvb3AxLCAwKTtcbiAgICB9O1xuICAgIFJTQUtleS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uICh0ZXh0LCBkaWdlc3RNZXRob2QsIGRpZ2VzdE5hbWUpIHtcbiAgICAgICAgdmFyIGhlYWRlciA9IGdldERpZ2VzdEhlYWRlcihkaWdlc3ROYW1lKTtcbiAgICAgICAgdmFyIGRpZ2VzdCA9IGhlYWRlciArIGRpZ2VzdE1ldGhvZCh0ZXh0KS50b1N0cmluZygpO1xuICAgICAgICB2YXIgbSA9IHBrY3MxcGFkMShkaWdlc3QsIHRoaXMubi5iaXRMZW5ndGgoKSAvIDQpO1xuICAgICAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IHRoaXMuZG9Qcml2YXRlKG0pO1xuICAgICAgICBpZiAoYyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoKGgubGVuZ3RoICYgMSkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCIwXCIgKyBoO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSU0FLZXkucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uICh0ZXh0LCBzaWduYXR1cmUsIGRpZ2VzdE1ldGhvZCkge1xuICAgICAgICB2YXIgYyA9IHBhcnNlQmlnSW50KHNpZ25hdHVyZSwgMTYpO1xuICAgICAgICB2YXIgbSA9IHRoaXMuZG9QdWJsaWMoYyk7XG4gICAgICAgIGlmIChtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1bnBhZGRlZCA9IG0udG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sIFwiXCIpO1xuICAgICAgICB2YXIgZGlnZXN0ID0gcmVtb3ZlRGlnZXN0SGVhZGVyKHVucGFkZGVkKTtcbiAgICAgICAgcmV0dXJuIGRpZ2VzdCA9PSBkaWdlc3RNZXRob2QodGV4dCkudG9TdHJpbmcoKTtcbiAgICB9O1xuICAgIHJldHVybiBSU0FLZXk7XG59KCkpO1xuZXhwb3J0IHsgUlNBS2V5IH07XG4vLyBVbmRvIFBLQ1MjMSAodHlwZSAyLCByYW5kb20pIHBhZGRpbmcgYW5kLCBpZiB2YWxpZCwgcmV0dXJuIHRoZSBwbGFpbnRleHRcbmZ1bmN0aW9uIHBrY3MxdW5wYWQyKGQsIG4pIHtcbiAgICB2YXIgYiA9IGQudG9CeXRlQXJyYXkoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBiLmxlbmd0aCAmJiBiW2ldID09IDApIHtcbiAgICAgICAgKytpO1xuICAgIH1cbiAgICBpZiAoYi5sZW5ndGggLSBpICE9IG4gLSAxIHx8IGJbaV0gIT0gMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgKytpO1xuICAgIHdoaWxlIChiW2ldICE9IDApIHtcbiAgICAgICAgaWYgKCsraSA+PSBiLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJldCA9IFwiXCI7XG4gICAgd2hpbGUgKCsraSA8IGIubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjID0gYltpXSAmIDI1NTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHsgLy8gdXRmLTggZGVjb2RlXG4gICAgICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA+IDE5MSkgJiYgKGMgPCAyMjQpKSB7XG4gICAgICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAzMSkgPDwgNikgfCAoYltpICsgMV0gJiA2MykpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMTUpIDw8IDEyKSB8ICgoYltpICsgMV0gJiA2MykgPDwgNikgfCAoYltpICsgMl0gJiA2MykpO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ0NyNwYWdlLTQzXG52YXIgRElHRVNUX0hFQURFUlMgPSB7XG4gICAgbWQyOiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDIwNTAwMDQxMFwiLFxuICAgIG1kNTogXCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixcbiAgICBzaGExOiBcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwiLFxuICAgIHNoYTIyNDogXCIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxY1wiLFxuICAgIHNoYTI1NjogXCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLFxuICAgIHNoYTM4NDogXCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwiLFxuICAgIHNoYTUxMjogXCIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MFwiLFxuICAgIHJpcGVtZDE2MDogXCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIlxufTtcbmZ1bmN0aW9uIGdldERpZ2VzdEhlYWRlcihuYW1lKSB7XG4gICAgcmV0dXJuIERJR0VTVF9IRUFERVJTW25hbWVdIHx8IFwiXCI7XG59XG5mdW5jdGlvbiByZW1vdmVEaWdlc3RIZWFkZXIoc3RyKSB7XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIERJR0VTVF9IRUFERVJTKSB7XG4gICAgICAgIGlmIChESUdFU1RfSEVBREVSUy5oYXNPd25Qcm9wZXJ0eShuYW1lXzEpKSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gRElHRVNUX0hFQURFUlNbbmFtZV8xXTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBoZWFkZXIubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHN0ci5zdWJzdHIoMCwgbGVuKSA9PSBoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4vLyBSZXR1cm4gdGhlIFBLQ1MjMSBSU0EgZW5jcnlwdGlvbiBvZiBcInRleHRcIiBhcyBhIEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuLy8gZnVuY3Rpb24gUlNBRW5jcnlwdEI2NCh0ZXh0KSB7XG4vLyAgdmFyIGggPSB0aGlzLmVuY3J5cHQodGV4dCk7XG4vLyAgaWYoaCkgcmV0dXJuIGhleDJiNjQoaCk7IGVsc2UgcmV0dXJuIG51bGw7XG4vLyB9XG4vLyBwdWJsaWNcbi8vIFJTQUtleS5wcm90b3R5cGUuZW5jcnlwdF9iNjQgPSBSU0FFbmNyeXB0QjY0O1xuIiwiLyohXG5Db3B5cmlnaHQgKGMpIDIwMTEsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db2RlIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgTGljZW5zZTpcbmh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcbnZlcnNpb246IDIuOS4wXG4qL1xuZXhwb3J0IHZhciBZQUhPTyA9IHt9O1xuWUFIT08ubGFuZyA9IHtcbiAgICAvKipcbiAgICAgKiBVdGlsaXR5IHRvIHNldCB1cCB0aGUgcHJvdG90eXBlLCBjb25zdHJ1Y3RvciBhbmQgc3VwZXJjbGFzcyBwcm9wZXJ0aWVzIHRvXG4gICAgICogc3VwcG9ydCBhbiBpbmhlcml0YW5jZSBzdHJhdGVneSB0aGF0IGNhbiBjaGFpbiBjb25zdHJ1Y3RvcnMgYW5kIG1ldGhvZHMuXG4gICAgICogU3RhdGljIG1lbWJlcnMgd2lsbCBub3QgYmUgaW5oZXJpdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBleHRlbmRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViYyAgIHRoZSBvYmplY3QgdG8gbW9kaWZ5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJjIHRoZSBvYmplY3QgdG8gaW5oZXJpdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgIGFkZGl0aW9uYWwgcHJvcGVydGllcy9tZXRob2RzIHRvIGFkZCB0byB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNsYXNzIHByb3RvdHlwZS4gIFRoZXNlIHdpbGwgb3ZlcnJpZGUgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyBpdGVtcyBvYnRhaW5lZCBmcm9tIHRoZSBzdXBlcmNsYXNzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwcmVzZW50LlxuICAgICAqL1xuICAgIGV4dGVuZDogZnVuY3Rpb24gKHN1YmMsIHN1cGVyYywgb3ZlcnJpZGVzKSB7XG4gICAgICAgIGlmICghc3VwZXJjIHx8ICFzdWJjKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZQUhPTy5sYW5nLmV4dGVuZCBmYWlsZWQsIHBsZWFzZSBjaGVjayB0aGF0IFwiICtcbiAgICAgICAgICAgICAgICBcImFsbCBkZXBlbmRlbmNpZXMgYXJlIGluY2x1ZGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgRi5wcm90b3R5cGUgPSBzdXBlcmMucHJvdG90eXBlO1xuICAgICAgICBzdWJjLnByb3RvdHlwZSA9IG5ldyBGKCk7XG4gICAgICAgIHN1YmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViYztcbiAgICAgICAgc3ViYy5zdXBlcmNsYXNzID0gc3VwZXJjLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKHN1cGVyYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPT0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgc3VwZXJjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1cGVyYztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvdmVycmlkZXMpIHtcbiAgICAgICAgICAgICAgICBzdWJjLnByb3RvdHlwZVtpXSA9IG92ZXJyaWRlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJRSB3aWxsIG5vdCBlbnVtZXJhdGUgbmF0aXZlIGZ1bmN0aW9ucyBpbiBhIGRlcml2ZWQgb2JqZWN0IGV2ZW4gaWYgdGhlXG4gICAgICAgICAgICAgKiBmdW5jdGlvbiB3YXMgb3ZlcnJpZGRlbi4gIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBzcGVjaWZpYyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqIHdlIGNhcmUgYWJvdXQgb24gdGhlIE9iamVjdCBwcm90b3R5cGUuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkgX0lFRW51bUZpeFxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gciAgdGhlIG9iamVjdCB0byByZWNlaXZlIHRoZSBhdWdtZW50YXRpb25cbiAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHMgIHRoZSBvYmplY3QgdGhhdCBzdXBwbGllcyB0aGUgcHJvcGVydGllcyB0byBhdWdtZW50XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgX0lFRW51bUZpeCA9IGZ1bmN0aW9uICgpIHsgfSwgQUREID0gW1widG9TdHJpbmdcIiwgXCJ2YWx1ZU9mXCJdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX0lFRW51bUZpeCA9IGZ1bmN0aW9uIChyLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgQURELmxlbmd0aDsgaSA9IGkgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuYW1lID0gQUREW2ldLCBmID0gc1tmbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nICYmIGYgIT0gT2JqZWN0LnByb3RvdHlwZVtmbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcltmbmFtZV0gPSBmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHsgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgX0lFRW51bUZpeChzdWJjLnByb3RvdHlwZSwgb3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIvKiBhc24xLTEuMC4xMy5qcyAoYykgMjAxMy0yMDE3IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbi8qXG4gKiBhc24xLmpzIC0gQVNOLjEgREVSIGVuY29kZXIgY2xhc3Nlc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDE3IEtlbmppIFVydXNoaW1hIChrZW5qaS51cnVzaGltYUBnbWFpbC5jb20pXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cHM6Ly9ranVyLmdpdGh1Yi5pby9qc3JzYXNpZ24vbGljZW5zZVxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgYW5kIGxpY2Vuc2Ugbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqL1xuaW1wb3J0IHsgQmlnSW50ZWdlciB9IGZyb20gXCIuLi9qc2JuL2pzYm5cIjtcbmltcG9ydCB7IFlBSE9PIH0gZnJvbSBcIi4veWFob29cIjtcbi8qKlxuICogQGZpbGVPdmVydmlld1xuICogQG5hbWUgYXNuMS0xLjAuanNcbiAqIEBhdXRob3IgS2VuamkgVXJ1c2hpbWEga2VuamkudXJ1c2hpbWFAZ21haWwuY29tXG4gKiBAdmVyc2lvbiBhc24xIDEuMC4xMyAoMjAxNy1KdW4tMDIpXG4gKiBAc2luY2UganNyc2FzaWduIDIuMVxuICogQGxpY2Vuc2UgPGEgaHJlZj1cImh0dHBzOi8va2p1ci5naXRodWIuaW8vanNyc2FzaWduL2xpY2Vuc2UvXCI+TUlUIExpY2Vuc2U8L2E+XG4gKi9cbi8qKlxuICoga2p1cidzIGNsYXNzIGxpYnJhcnkgbmFtZSBzcGFjZVxuICogPHA+XG4gKiBUaGlzIG5hbWUgc3BhY2UgcHJvdmlkZXMgZm9sbG93aW5nIG5hbWUgc3BhY2VzOlxuICogPHVsPlxuICogPGxpPntAbGluayBLSlVSLmFzbjF9IC0gQVNOLjEgcHJpbWl0aXZlIGhleGFkZWNpbWFsIGVuY29kZXI8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEueDUwOX0gLSBBU04uMSBzdHJ1Y3R1cmUgZm9yIFguNTA5IGNlcnRpZmljYXRlIGFuZCBDUkw8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmNyeXB0b30gLSBKYXZhIENyeXB0b2dyYXBoaWMgRXh0ZW5zaW9uKEpDRSkgc3R5bGUgTWVzc2FnZURpZ2VzdC9TaWduYXR1cmVcbiAqIGNsYXNzIGFuZCB1dGlsaXRpZXM8L2xpPlxuICogPC91bD5cbiAqIDwvcD5cbiAqIE5PVEU6IFBsZWFzZSBpZ25vcmUgbWV0aG9kIHN1bW1hcnkgYW5kIGRvY3VtZW50IG9mIHRoaXMgbmFtZXNwYWNlLiBUaGlzIGNhdXNlZCBieSBhIGJ1ZyBvZiBqc2RvYzIuXG4gKiBAbmFtZSBLSlVSXG4gKiBAbmFtZXNwYWNlIGtqdXIncyBjbGFzcyBsaWJyYXJ5IG5hbWUgc3BhY2VcbiAqL1xuZXhwb3J0IHZhciBLSlVSID0ge307XG4vKipcbiAqIGtqdXIncyBBU04uMSBjbGFzcyBsaWJyYXJ5IG5hbWUgc3BhY2VcbiAqIDxwPlxuICogVGhpcyBpcyBJVFUtVCBYLjY5MCBBU04uMSBERVIgZW5jb2RlciBjbGFzcyBsaWJyYXJ5IGFuZFxuICogY2xhc3Mgc3RydWN0dXJlIGFuZCBtZXRob2RzIGlzIHZlcnkgc2ltaWxhciB0b1xuICogb3JnLmJvdW5jeWNhc3RsZS5hc24xIHBhY2thZ2Ugb2ZcbiAqIHdlbGwga25vd24gQm91bmN5Q2FzbHRlIENyeXB0b2dyYXBoeSBMaWJyYXJ5LlxuICogPGg0PlBST1ZJRElORyBBU04uMSBQUklNSVRJVkVTPC9oND5cbiAqIEhlcmUgYXJlIEFTTi4xIERFUiBwcmltaXRpdmUgY2xhc3Nlcy5cbiAqIDx1bD5cbiAqIDxsaT4weDAxIHtAbGluayBLSlVSLmFzbjEuREVSQm9vbGVhbn08L2xpPlxuICogPGxpPjB4MDIge0BsaW5rIEtKVVIuYXNuMS5ERVJJbnRlZ2VyfTwvbGk+XG4gKiA8bGk+MHgwMyB7QGxpbmsgS0pVUi5hc24xLkRFUkJpdFN0cmluZ308L2xpPlxuICogPGxpPjB4MDQge0BsaW5rIEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZ308L2xpPlxuICogPGxpPjB4MDUge0BsaW5rIEtKVVIuYXNuMS5ERVJOdWxsfTwvbGk+XG4gKiA8bGk+MHgwNiB7QGxpbmsgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXJ9PC9saT5cbiAqIDxsaT4weDBhIHtAbGluayBLSlVSLmFzbjEuREVSRW51bWVyYXRlZH08L2xpPlxuICogPGxpPjB4MGMge0BsaW5rIEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxMiB7QGxpbmsgS0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmd9PC9saT5cbiAqIDxsaT4weDEzIHtAbGluayBLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxNCB7QGxpbmsgS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmd9PC9saT5cbiAqIDxsaT4weDE2IHtAbGluayBLSlVSLmFzbjEuREVSSUE1U3RyaW5nfTwvbGk+XG4gKiA8bGk+MHgxNyB7QGxpbmsgS0pVUi5hc24xLkRFUlVUQ1RpbWV9PC9saT5cbiAqIDxsaT4weDE4IHtAbGluayBLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lfTwvbGk+XG4gKiA8bGk+MHgzMCB7QGxpbmsgS0pVUi5hc24xLkRFUlNlcXVlbmNlfTwvbGk+XG4gKiA8bGk+MHgzMSB7QGxpbmsgS0pVUi5hc24xLkRFUlNldH08L2xpPlxuICogPC91bD5cbiAqIDxoND5PVEhFUiBBU04uMSBDTEFTU0VTPC9oND5cbiAqIDx1bD5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkFTTjFPYmplY3R9PC9saT5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nfTwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWV9PC9saT5cbiAqIDxsaT57QGxpbmsgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZH08L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0fTwvbGk+XG4gKiA8L3VsPlxuICogPGg0PlNVQiBOQU1FIFNQQUNFUzwvaDQ+XG4gKiA8dWw+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jYWRlc30gLSBDQWRFUyBsb25nIHRlcm0gc2lnbmF0dXJlIGZvcm1hdDwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jbXN9IC0gQ3J5cHRvZ3JhcGhpYyBNZXNzYWdlIFN5bnRheDwvbGk+XG4gKiA8bGk+e0BsaW5rIEtKVVIuYXNuMS5jc3J9IC0gQ2VydGlmaWNhdGUgU2lnbmluZyBSZXF1ZXN0IChDU1IvUEtDUyMxMCk8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEudHNwfSAtIFJGQyAzMTYxIFRpbWVzdGFtcGluZyBQcm90b2NvbCBGb3JtYXQ8L2xpPlxuICogPGxpPntAbGluayBLSlVSLmFzbjEueDUwOX0gLSBSRkMgNTI4MCBYLjUwOSBjZXJ0aWZpY2F0ZSBhbmQgQ1JMPC9saT5cbiAqIDwvdWw+XG4gKiA8L3A+XG4gKiBOT1RFOiBQbGVhc2UgaWdub3JlIG1ldGhvZCBzdW1tYXJ5IGFuZCBkb2N1bWVudCBvZiB0aGlzIG5hbWVzcGFjZS5cbiAqIFRoaXMgY2F1c2VkIGJ5IGEgYnVnIG9mIGpzZG9jMi5cbiAqIEBuYW1lIEtKVVIuYXNuMVxuICogQG5hbWVzcGFjZVxuICovXG5pZiAodHlwZW9mIEtKVVIuYXNuMSA9PSBcInVuZGVmaW5lZFwiIHx8ICFLSlVSLmFzbjEpXG4gICAgS0pVUi5hc24xID0ge307XG4vKipcbiAqIEFTTjEgdXRpbGl0aWVzIGNsYXNzXG4gKiBAbmFtZSBLSlVSLmFzbjEuQVNOMVV0aWxcbiAqIEBjbGFzcyBBU04xIHV0aWxpdGllcyBjbGFzc1xuICogQHNpbmNlIGFzbjEgMS4wLjJcbiAqL1xuS0pVUi5hc24xLkFTTjFVdGlsID0gbmV3IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmludGVnZXJUb0J5dGVIZXggPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgaCA9IGkudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoKGgubGVuZ3RoICUgMikgPT0gMSlcbiAgICAgICAgICAgIGggPSAnMCcgKyBoO1xuICAgICAgICByZXR1cm4gaDtcbiAgICB9O1xuICAgIHRoaXMuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXggPSBmdW5jdGlvbiAoYmlnSW50ZWdlclZhbHVlKSB7XG4gICAgICAgIHZhciBoID0gYmlnSW50ZWdlclZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGguc3Vic3RyKDAsIDEpICE9ICctJykge1xuICAgICAgICAgICAgaWYgKGgubGVuZ3RoICUgMiA9PSAxKSB7XG4gICAgICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWgubWF0Y2goL15bMC03XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSAnMDAnICsgaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaFBvcyA9IGguc3Vic3RyKDEpO1xuICAgICAgICAgICAgdmFyIHhvckxlbiA9IGhQb3MubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHhvckxlbiAlIDIgPT0gMSkge1xuICAgICAgICAgICAgICAgIHhvckxlbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoLm1hdGNoKC9eWzAtN10vKSkge1xuICAgICAgICAgICAgICAgICAgICB4b3JMZW4gKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaE1hc2sgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeG9yTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBoTWFzayArPSAnZic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmlNYXNrID0gbmV3IEJpZ0ludGVnZXIoaE1hc2ssIDE2KTtcbiAgICAgICAgICAgIHZhciBiaU5lZyA9IGJpTWFzay54b3IoYmlnSW50ZWdlclZhbHVlKS5hZGQoQmlnSW50ZWdlci5PTkUpO1xuICAgICAgICAgICAgaCA9IGJpTmVnLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGdldCBQRU0gc3RyaW5nIGZyb20gaGV4YWRlY2ltYWwgZGF0YSBhbmQgaGVhZGVyIHN0cmluZ1xuICAgICAqIEBuYW1lIGdldFBFTVN0cmluZ0Zyb21IZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFIZXggaGV4YWRlY2ltYWwgc3RyaW5nIG9mIFBFTSBib2R5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBlbUhlYWRlciBQRU0gaGVhZGVyIHN0cmluZyAoZXguICdSU0EgUFJJVkFURSBLRVknKVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUEVNIGZvcm1hdHRlZCBzdHJpbmcgb2YgaW5wdXQgZGF0YVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoaXMgbWV0aG9kIGNvbnZlcnRzIGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgUEVNIHN0cmluZyB3aXRoXG4gICAgICogYSBzcGVjaWZpZWQgaGVhZGVyLiBJdHMgbGluZSBicmVhayB3aWxsIGJlIENSTEYoXCJcXHJcXG5cIikuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgcGVtICA9IEtKVVIuYXNuMS5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KCc2MTYxNjEnLCAnUlNBIFBSSVZBVEUgS0VZJyk7XG4gICAgICogLy8gdmFsdWUgb2YgcGVtIHdpbGwgYmU6XG4gICAgICogLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG4gICAgICogWVdGaFxuICAgICAqIC0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiAgICAgKi9cbiAgICB0aGlzLmdldFBFTVN0cmluZ0Zyb21IZXggPSBmdW5jdGlvbiAoZGF0YUhleCwgcGVtSGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBoZXh0b3BlbShkYXRhSGV4LCBwZW1IZWFkZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGUgQVNOMU9iamVjdCBzcGVjaWZlZCBieSBKU09OIHBhcmFtZXRlcnNcbiAgICAgKiBAbmFtZSBuZXdPYmplY3RcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFyYW0gSlNPTiBwYXJhbWV0ZXIgdG8gZ2VuZXJhdGUgQVNOMU9iamVjdFxuICAgICAqIEByZXR1cm4ge0tKVVIuYXNuMS5BU04xT2JqZWN0fSBnZW5lcmF0ZWQgb2JqZWN0XG4gICAgICogQHNpbmNlIGFzbjEgMS4wLjNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZW5lcmF0ZSBhbnkgQVNOMU9iamVjdCBzcGVjaWZpZWQgYnkgSlNPTiBwYXJhbVxuICAgICAqIGluY2x1ZGluZyBBU04uMSBwcmltaXRpdmUgb3Igc3RydWN0dXJlZC5cbiAgICAgKiBHZW5lcmFsbHkgJ3BhcmFtJyBjYW4gYmUgZGVzY3JpYmVkIGFzIGZvbGxvd3M6XG4gICAgICogPGJsb2NrcXVvdGU+XG4gICAgICoge1RZUEUtT0YtQVNOT0JKOiBBU04xT0JKLVBBUkFNRVRFUn1cbiAgICAgKiA8L2Jsb2NrcXVvdGU+XG4gICAgICogJ1RZUEUtT0YtQVNOMU9CSicgY2FuIGJlIG9uZSBvZiBmb2xsb3dpbmcgc3ltYm9sczpcbiAgICAgKiA8dWw+XG4gICAgICogPGxpPidib29sJyAtIERFUkJvb2xlYW48L2xpPlxuICAgICAqIDxsaT4naW50JyAtIERFUkludGVnZXI8L2xpPlxuICAgICAqIDxsaT4nYml0c3RyJyAtIERFUkJpdFN0cmluZzwvbGk+XG4gICAgICogPGxpPidvY3RzdHInIC0gREVST2N0ZXRTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4nbnVsbCcgLSBERVJOdWxsPC9saT5cbiAgICAgKiA8bGk+J29pZCcgLSBERVJPYmplY3RJZGVudGlmaWVyPC9saT5cbiAgICAgKiA8bGk+J2VudW0nIC0gREVSRW51bWVyYXRlZDwvbGk+XG4gICAgICogPGxpPid1dGY4c3RyJyAtIERFUlVURjhTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4nbnVtc3RyJyAtIERFUk51bWVyaWNTdHJpbmc8L2xpPlxuICAgICAqIDxsaT4ncHJuc3RyJyAtIERFUlByaW50YWJsZVN0cmluZzwvbGk+XG4gICAgICogPGxpPid0ZWxzdHInIC0gREVSVGVsZXRleFN0cmluZzwvbGk+XG4gICAgICogPGxpPidpYTVzdHInIC0gREVSSUE1U3RyaW5nPC9saT5cbiAgICAgKiA8bGk+J3V0Y3RpbWUnIC0gREVSVVRDVGltZTwvbGk+XG4gICAgICogPGxpPidnZW50aW1lJyAtIERFUkdlbmVyYWxpemVkVGltZTwvbGk+XG4gICAgICogPGxpPidzZXEnIC0gREVSU2VxdWVuY2U8L2xpPlxuICAgICAqIDxsaT4nc2V0JyAtIERFUlNldDwvbGk+XG4gICAgICogPGxpPid0YWcnIC0gREVSVGFnZ2VkT2JqZWN0PC9saT5cbiAgICAgKiA8L3VsPlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbmV3T2JqZWN0KHsncHJuc3RyJzogJ2FhYSd9KTtcbiAgICAgKiBuZXdPYmplY3QoeydzZXEnOiBbeydpbnQnOiAzfSwgeydwcm5zdHInOiAnYWFhJ31dfSlcbiAgICAgKiAvLyBBU04uMSBUYWdnZWQgT2JqZWN0XG4gICAgICogbmV3T2JqZWN0KHsndGFnJzogeyd0YWcnOiAnYTEnLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAnZXhwbGljaXQnOiB0cnVlLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAnb2JqJzogeydzZXEnOiBbeydpbnQnOiAzfSwgeydwcm5zdHInOiAnYWFhJ31dfX19KTtcbiAgICAgKiAvLyBtb3JlIHNpbXBsZSByZXByZXNlbnRhdGlvbiBvZiBBU04uMSBUYWdnZWQgT2JqZWN0XG4gICAgICogbmV3T2JqZWN0KHsndGFnJzogWydhMScsXG4gICAgICogICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICogICAgICAgICAgICAgICAgICAgIHsnc2VxJzogW1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgIHsnaW50JzogM30sXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgeydwcm5zdHInOiAnYWFhJ31dfVxuICAgICAqICAgICAgICAgICAgICAgICAgIF19KTtcbiAgICAgKi9cbiAgICB0aGlzLm5ld09iamVjdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB2YXIgX0tKVVIgPSBLSlVSLCBfS0pVUl9hc24xID0gX0tKVVIuYXNuMSwgX0RFUkJvb2xlYW4gPSBfS0pVUl9hc24xLkRFUkJvb2xlYW4sIF9ERVJJbnRlZ2VyID0gX0tKVVJfYXNuMS5ERVJJbnRlZ2VyLCBfREVSQml0U3RyaW5nID0gX0tKVVJfYXNuMS5ERVJCaXRTdHJpbmcsIF9ERVJPY3RldFN0cmluZyA9IF9LSlVSX2FzbjEuREVST2N0ZXRTdHJpbmcsIF9ERVJOdWxsID0gX0tKVVJfYXNuMS5ERVJOdWxsLCBfREVST2JqZWN0SWRlbnRpZmllciA9IF9LSlVSX2FzbjEuREVST2JqZWN0SWRlbnRpZmllciwgX0RFUkVudW1lcmF0ZWQgPSBfS0pVUl9hc24xLkRFUkVudW1lcmF0ZWQsIF9ERVJVVEY4U3RyaW5nID0gX0tKVVJfYXNuMS5ERVJVVEY4U3RyaW5nLCBfREVSTnVtZXJpY1N0cmluZyA9IF9LSlVSX2FzbjEuREVSTnVtZXJpY1N0cmluZywgX0RFUlByaW50YWJsZVN0cmluZyA9IF9LSlVSX2FzbjEuREVSUHJpbnRhYmxlU3RyaW5nLCBfREVSVGVsZXRleFN0cmluZyA9IF9LSlVSX2FzbjEuREVSVGVsZXRleFN0cmluZywgX0RFUklBNVN0cmluZyA9IF9LSlVSX2FzbjEuREVSSUE1U3RyaW5nLCBfREVSVVRDVGltZSA9IF9LSlVSX2FzbjEuREVSVVRDVGltZSwgX0RFUkdlbmVyYWxpemVkVGltZSA9IF9LSlVSX2FzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLCBfREVSU2VxdWVuY2UgPSBfS0pVUl9hc24xLkRFUlNlcXVlbmNlLCBfREVSU2V0ID0gX0tKVVJfYXNuMS5ERVJTZXQsIF9ERVJUYWdnZWRPYmplY3QgPSBfS0pVUl9hc24xLkRFUlRhZ2dlZE9iamVjdCwgX25ld09iamVjdCA9IF9LSlVSX2FzbjEuQVNOMVV0aWwubmV3T2JqZWN0O1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtKTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoICE9IDEpXG4gICAgICAgICAgICB0aHJvdyBcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIjtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbMF07XG4gICAgICAgIGlmIChcIjpib29sOmludDpiaXRzdHI6b2N0c3RyOm51bGw6b2lkOmVudW06dXRmOHN0cjpudW1zdHI6cHJuc3RyOnRlbHN0cjppYTVzdHI6dXRjdGltZTpnZW50aW1lOnNlcTpzZXQ6dGFnOlwiLmluZGV4T2YoXCI6XCIgKyBrZXkgKyBcIjpcIikgPT0gLTEpXG4gICAgICAgICAgICB0aHJvdyBcInVuZGVmaW5lZCBrZXk6IFwiICsga2V5O1xuICAgICAgICBpZiAoa2V5ID09IFwiYm9vbFwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSQm9vbGVhbihwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcImludFwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSSW50ZWdlcihwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcImJpdHN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSQml0U3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwib2N0c3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJPY3RldFN0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcIm51bGxcIilcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0RFUk51bGwocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJvaWRcIilcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0RFUk9iamVjdElkZW50aWZpZXIocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJlbnVtXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJFbnVtZXJhdGVkKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwidXRmOHN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVVRGOFN0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcIm51bXN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSTnVtZXJpY1N0cmluZyhwYXJhbVtrZXldKTtcbiAgICAgICAgaWYgKGtleSA9PSBcInBybnN0clwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSUHJpbnRhYmxlU3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwidGVsc3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJUZWxldGV4U3RyaW5nKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwiaWE1c3RyXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJJQTVTdHJpbmcocGFyYW1ba2V5XSk7XG4gICAgICAgIGlmIChrZXkgPT0gXCJ1dGN0aW1lXCIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJVVENUaW1lKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwiZ2VudGltZVwiKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSR2VuZXJhbGl6ZWRUaW1lKHBhcmFtW2tleV0pO1xuICAgICAgICBpZiAoa2V5ID09IFwic2VxXCIpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbUxpc3QgPSBwYXJhbVtrZXldO1xuICAgICAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFzbjFPYmogPSBfbmV3T2JqZWN0KHBhcmFtTGlzdFtpXSk7XG4gICAgICAgICAgICAgICAgYS5wdXNoKGFzbjFPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSU2VxdWVuY2UoeyAnYXJyYXknOiBhIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT0gXCJzZXRcIikge1xuICAgICAgICAgICAgdmFyIHBhcmFtTGlzdCA9IHBhcmFtW2tleV07XG4gICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNuMU9iaiA9IF9uZXdPYmplY3QocGFyYW1MaXN0W2ldKTtcbiAgICAgICAgICAgICAgICBhLnB1c2goYXNuMU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9ERVJTZXQoeyAnYXJyYXknOiBhIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT0gXCJ0YWdcIikge1xuICAgICAgICAgICAgdmFyIHRhZ1BhcmFtID0gcGFyYW1ba2V5XTtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGFnUGFyYW0pID09PSAnW29iamVjdCBBcnJheV0nICYmXG4gICAgICAgICAgICAgICAgdGFnUGFyYW0ubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gX25ld09iamVjdCh0YWdQYXJhbVsyXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVGFnZ2VkT2JqZWN0KHsgdGFnOiB0YWdQYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IHRhZ1BhcmFtWzFdLFxuICAgICAgICAgICAgICAgICAgICBvYmo6IG9iaiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuZXdQYXJhbSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS5leHBsaWNpdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBuZXdQYXJhbS5leHBsaWNpdCA9IHRhZ1BhcmFtLmV4cGxpY2l0O1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS50YWcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW0udGFnID0gdGFnUGFyYW0udGFnO1xuICAgICAgICAgICAgICAgIGlmICh0YWdQYXJhbS5vYmogPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJvYmogc2hhbGwgYmUgc3BlY2lmaWVkIGZvciAndGFnJy5cIjtcbiAgICAgICAgICAgICAgICBuZXdQYXJhbS5vYmogPSBfbmV3T2JqZWN0KHRhZ1BhcmFtLm9iaik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfREVSVGFnZ2VkT2JqZWN0KG5ld1BhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2V0IGVuY29kZWQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTjFPYmplY3Qgc3BlY2lmZWQgYnkgSlNPTiBwYXJhbWV0ZXJzXG4gICAgICogQG5hbWUganNvblRvQVNOMUhFWFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMVV0aWxcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbSBKU09OIHBhcmFtZXRlciB0byBnZW5lcmF0ZSBBU04xT2JqZWN0XG4gICAgICogQHJldHVybiBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOMU9iamVjdFxuICAgICAqIEBzaW5jZSBhc24xIDEuMC40XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQXMgZm9yIEFTTi4xIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBKU09OIG9iamVjdCxcbiAgICAgKiBwbGVhc2Ugc2VlIHtAbGluayBuZXdPYmplY3R9LlxuICAgICAqIEBleGFtcGxlXG4gICAgICoganNvblRvQVNOMUhFWCh7J3BybnN0cic6ICdhYWEnfSk7XG4gICAgICovXG4gICAgdGhpcy5qc29uVG9BU04xSEVYID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgIHZhciBhc24xT2JqID0gdGhpcy5uZXdPYmplY3QocGFyYW0pO1xuICAgICAgICByZXR1cm4gYXNuMU9iai5nZXRFbmNvZGVkSGV4KCk7XG4gICAgfTtcbn07XG4vKipcbiAqIGdldCBkb3Qgbm90ZWQgb2lkIG51bWJlciBzdHJpbmcgZnJvbSBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBPSURcbiAqIEBuYW1lIG9pZEhleFRvSW50XG4gKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXggaGV4YWRlY2ltYWwgdmFsdWUgb2Ygb2JqZWN0IGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gZG90IG5vdGVkIHN0cmluZyBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHNpbmNlIGpzcnNhc2lnbiA0LjguMyBhc24xIDEuMC43XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc3RhdGljIG1ldGhvZCBjb252ZXJ0cyBmcm9tIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZlxuICogQVNOLjEgdmFsdWUgb2Ygb2JqZWN0IGlkZW50aWZpZXIgdG8gb2lkIG51bWJlciBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICogS0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KCc1NTA0MDYnKSAmcmFycjsgXCIyLjUuNC42XCJcbiAqL1xuS0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHZhciBzID0gXCJcIjtcbiAgICB2YXIgaTAxID0gcGFyc2VJbnQoaGV4LnN1YnN0cigwLCAyKSwgMTYpO1xuICAgIHZhciBpMCA9IE1hdGguZmxvb3IoaTAxIC8gNDApO1xuICAgIHZhciBpMSA9IGkwMSAlIDQwO1xuICAgIHZhciBzID0gaTAgKyBcIi5cIiArIGkxO1xuICAgIHZhciBiaW5idWYgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KGhleC5zdWJzdHIoaSwgMiksIDE2KTtcbiAgICAgICAgdmFyIGJpbiA9IChcIjAwMDAwMDAwXCIgKyB2YWx1ZS50b1N0cmluZygyKSkuc2xpY2UoLTgpO1xuICAgICAgICBiaW5idWYgPSBiaW5idWYgKyBiaW4uc3Vic3RyKDEsIDcpO1xuICAgICAgICBpZiAoYmluLnN1YnN0cigwLCAxKSA9PSBcIjBcIikge1xuICAgICAgICAgICAgdmFyIGJpID0gbmV3IEJpZ0ludGVnZXIoYmluYnVmLCAyKTtcbiAgICAgICAgICAgIHMgPSBzICsgXCIuXCIgKyBiaS50b1N0cmluZygxMCk7XG4gICAgICAgICAgICBiaW5idWYgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICByZXR1cm4gcztcbn07XG4vKipcbiAqIGdldCBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBvYmplY3QgaWRlbnRpZmllciBmcm9tIGRvdCBub3RlZCBvaWQgdmFsdWVcbiAqIEBuYW1lIG9pZEludFRvSGV4XG4gKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFVdGlsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBvaWRTdHJpbmcgZG90IG5vdGVkIHN0cmluZyBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHJldHVybiB7U3RyaW5nfSBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBvYmplY3QgaWRlbnRpZmllclxuICogQHNpbmNlIGpzcnNhc2lnbiA0LjguMyBhc24xIDEuMC43XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc3RhdGljIG1ldGhvZCBjb252ZXJ0cyBmcm9tIG9iamVjdCBpZGVudGlmaWVyIHZhbHVlIHN0cmluZy5cbiAqIHRvIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBpdC5cbiAqIEBleGFtcGxlXG4gKiBLSlVSLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXgoXCIyLjUuNC42XCIpICZyYXJyOyBcIjU1MDQwNlwiXG4gKi9cbktKVVIuYXNuMS5BU04xVXRpbC5vaWRJbnRUb0hleCA9IGZ1bmN0aW9uIChvaWRTdHJpbmcpIHtcbiAgICB2YXIgaXRveCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBoID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgdmFyIHJvaWR0b3ggPSBmdW5jdGlvbiAocm9pZCkge1xuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICB2YXIgYmkgPSBuZXcgQmlnSW50ZWdlcihyb2lkLCAxMCk7XG4gICAgICAgIHZhciBiID0gYmkudG9TdHJpbmcoMik7XG4gICAgICAgIHZhciBwYWRMZW4gPSA3IC0gYi5sZW5ndGggJSA3O1xuICAgICAgICBpZiAocGFkTGVuID09IDcpXG4gICAgICAgICAgICBwYWRMZW4gPSAwO1xuICAgICAgICB2YXIgYlBhZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZExlbjsgaSsrKVxuICAgICAgICAgICAgYlBhZCArPSAnMCc7XG4gICAgICAgIGIgPSBiUGFkICsgYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aCAtIDE7IGkgKz0gNykge1xuICAgICAgICAgICAgdmFyIGI4ID0gYi5zdWJzdHIoaSwgNyk7XG4gICAgICAgICAgICBpZiAoaSAhPSBiLmxlbmd0aCAtIDcpXG4gICAgICAgICAgICAgICAgYjggPSAnMScgKyBiODtcbiAgICAgICAgICAgIGggKz0gaXRveChwYXJzZUludChiOCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgaWYgKCFvaWRTdHJpbmcubWF0Y2goL15bMC05Ll0rJC8pKSB7XG4gICAgICAgIHRocm93IFwibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiICsgb2lkU3RyaW5nO1xuICAgIH1cbiAgICB2YXIgaCA9ICcnO1xuICAgIHZhciBhID0gb2lkU3RyaW5nLnNwbGl0KCcuJyk7XG4gICAgdmFyIGkwID0gcGFyc2VJbnQoYVswXSkgKiA0MCArIHBhcnNlSW50KGFbMV0pO1xuICAgIGggKz0gaXRveChpMCk7XG4gICAgYS5zcGxpY2UoMCwgMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGggKz0gcm9pZHRveChhW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGg7XG59O1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICBBYnN0cmFjdCBBU04uMSBDbGFzc2VzXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogYmFzZSBjbGFzcyBmb3IgQVNOLjEgREVSIGVuY29kZXIgb2JqZWN0XG4gKiBAbmFtZSBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBlbmNvZGVyIG9iamVjdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBpc01vZGlmaWVkIGZsYWcgd2hldGhlciBpbnRlcm5hbCBkYXRhIHdhcyBjaGFuZ2VkXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaFRMViBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaFQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTi4xIFRMViB0YWcoVClcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBoTCBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWIGxlbmd0aChMKVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGhWIGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVilcbiAqIEBkZXNjcmlwdGlvblxuICovXG5LSlVSLmFzbjEuQVNOMU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXNNb2RpZmllZCA9IHRydWU7XG4gICAgdmFyIGhUTFYgPSBudWxsO1xuICAgIHZhciBoVCA9ICcwMCc7XG4gICAgdmFyIGhMID0gJzAwJztcbiAgICB2YXIgaFYgPSAnJztcbiAgICAvKipcbiAgICAgKiBnZXQgaGV4YWRlY2ltYWwgQVNOLjEgVExWIGxlbmd0aChMKSBieXRlcyBmcm9tIFRMViB2YWx1ZShWKVxuICAgICAqIEBuYW1lIGdldExlbmd0aEhleEZyb21WYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMU9iamVjdCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgbGVuZ3RoKEwpXG4gICAgICovXG4gICAgdGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5oViA9PSBcInVuZGVmaW5lZFwiIHx8IHRoaXMuaFYgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJ0aGlzLmhWIGlzIG51bGwgb3IgdW5kZWZpbmVkLlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhWLmxlbmd0aCAlIDIgPT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgXCJ2YWx1ZSBoZXggbXVzdCBiZSBldmVuIGxlbmd0aDogbj1cIiArIGhWLmxlbmd0aCArIFwiLHY9XCIgKyB0aGlzLmhWO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gdGhpcy5oVi5sZW5ndGggLyAyO1xuICAgICAgICB2YXIgaE4gPSBuLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGhOLmxlbmd0aCAlIDIgPT0gMSkge1xuICAgICAgICAgICAgaE4gPSBcIjBcIiArIGhOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDwgMTI4KSB7XG4gICAgICAgICAgICByZXR1cm4gaE47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaE5sZW4gPSBoTi5sZW5ndGggLyAyO1xuICAgICAgICAgICAgaWYgKGhObGVuID4gMTUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkFTTi4xIGxlbmd0aCB0b28gbG9uZyB0byByZXByZXNlbnQgYnkgOHg6IG4gPSBcIiArIG4udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWQgPSAxMjggKyBoTmxlbjtcbiAgICAgICAgICAgIHJldHVybiBoZWFkLnRvU3RyaW5nKDE2KSArIGhOO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBnZXQgaGV4YWRlY2ltYWwgc3RyaW5nIG9mIEFTTi4xIFRMViBieXRlc1xuICAgICAqIEBuYW1lIGdldEVuY29kZWRIZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkFTTjFPYmplY3QjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgVExWXG4gICAgICovXG4gICAgdGhpcy5nZXRFbmNvZGVkSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oVExWID09IG51bGwgfHwgdGhpcy5pc01vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aGlzLmhWID0gdGhpcy5nZXRGcmVzaFZhbHVlSGV4KCk7XG4gICAgICAgICAgICB0aGlzLmhMID0gdGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuaFRMViA9IHRoaXMuaFQgKyB0aGlzLmhMICsgdGhpcy5oVjtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy9hbGVydChcImZpcnN0IHRpbWU6IFwiICsgdGhpcy5oVExWKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5oVExWO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZ2V0IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVikgYnl0ZXNcbiAgICAgKiBAbmFtZSBnZXRWYWx1ZUhleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQVNOMU9iamVjdCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSBUTFYgdmFsdWUoVikgYnl0ZXNcbiAgICAgKi9cbiAgICB0aGlzLmdldFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdldEVuY29kZWRIZXgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xufTtcbi8vID09IEJFR0lOIERFUkFic3RyYWN0U3RyaW5nID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqXG4gKiBiYXNlIGNsYXNzIGZvciBBU04uMSBERVIgc3RyaW5nIGNsYXNzZXNcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBzdHJpbmcgY2xhc3Nlc1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzIGludGVybmFsIHN0cmluZyBvZiB2YWx1ZVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkFTTjFPYmplY3RcbiAqIEBkZXNjcmlwdGlvblxuICogPGJyLz5cbiAqIEFzIGZvciBhcmd1bWVudCAncGFyYW1zJyBmb3IgY29uc3RydWN0b3IsIHlvdSBjYW4gc3BlY2lmeSBvbmUgb2ZcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogPHVsPlxuICogPGxpPnN0ciAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIHN0cmluZzwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciBoViA9IG51bGw7XG4gICAgLyoqXG4gICAgICogZ2V0IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHN0cmluZyBvYmplY3RcbiAgICAgKiBAbmFtZSBnZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHZhbHVlIG9mIHRoaXMgc3RyaW5nIG9iamVjdFxuICAgICAqL1xuICAgIHRoaXMuZ2V0U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgc3RyaW5nXG4gICAgICogQG5hbWUgc2V0U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3UyB2YWx1ZSBieSBhIHN0cmluZyB0byBzZXRcbiAgICAgKi9cbiAgICB0aGlzLnNldFN0cmluZyA9IGZ1bmN0aW9uIChuZXdTKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMucyA9IG5ld1M7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqIEBuYW1lIHNldFN0cmluZ0hleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZyB2YWx1ZSBieSBhIGhleGFkZWNpbWFsIHN0cmluZyB0byBzZXRcbiAgICAgKi9cbiAgICB0aGlzLnNldFN0cmluZ0hleCA9IGZ1bmN0aW9uIChuZXdIZXhTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zID0gbnVsbDtcbiAgICAgICAgdGhpcy5oViA9IG5ld0hleFN0cmluZztcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snc3RyJ10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zWydzdHInXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snaGV4J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmdIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4vLyA9PSBFTkQgICBERVJBYnN0cmFjdFN0cmluZyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vID09IEJFR0lOIERFUkFic3RyYWN0VGltZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqXG4gKiBiYXNlIGNsYXNzIGZvciBBU04uMSBERVIgR2VuZXJhbGl6ZWQvVVRDVGltZSBjbGFzc1xuICogQG5hbWUgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZVxuICogQGNsYXNzIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBHZW5lcmFsaXplZC9VVENUaW1lIGNsYXNzXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJzEzMDQzMDIzNTk1OVonfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciBkYXRlID0gbnVsbDtcbiAgICAvLyAtLS0gUFJJVkFURSBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5sb2NhbERhdGVUb1VUQyA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHV0YyA9IGQuZ2V0VGltZSgpICsgKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKTtcbiAgICAgICAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZSh1dGMpO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZTtcbiAgICB9O1xuICAgIC8qXG4gICAgICogZm9ybWF0IGRhdGUgc3RyaW5nIGJ5IERhdGEgb2JqZWN0XG4gICAgICogQG5hbWUgZm9ybWF0RGF0ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuQWJzdHJhY3RUaW1lO1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZU9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlICd1dGMnIG9yICdnZW4nXG4gICAgICogQHBhcmFtIHtib29sZWFufSB3aXRoTWlsbGlzIGZsYWcgZm9yIHdpdGggbWlsbGlzZWN0aW9ucyBvciBub3RcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiAnd2l0aE1pbGxpcycgZmxhZyBpcyBzdXBwb3J0ZWQgZnJvbSBhc24xIDEuMC42LlxuICAgICAqL1xuICAgIHRoaXMuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkYXRlT2JqZWN0LCB0eXBlLCB3aXRoTWlsbGlzKSB7XG4gICAgICAgIHZhciBwYWQgPSB0aGlzLnplcm9QYWRkaW5nO1xuICAgICAgICB2YXIgZCA9IHRoaXMubG9jYWxEYXRlVG9VVEMoZGF0ZU9iamVjdCk7XG4gICAgICAgIHZhciB5ZWFyID0gU3RyaW5nKGQuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgIGlmICh0eXBlID09ICd1dGMnKVxuICAgICAgICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIsIDIpO1xuICAgICAgICB2YXIgbW9udGggPSBwYWQoU3RyaW5nKGQuZ2V0TW9udGgoKSArIDEpLCAyKTtcbiAgICAgICAgdmFyIGRheSA9IHBhZChTdHJpbmcoZC5nZXREYXRlKCkpLCAyKTtcbiAgICAgICAgdmFyIGhvdXIgPSBwYWQoU3RyaW5nKGQuZ2V0SG91cnMoKSksIDIpO1xuICAgICAgICB2YXIgbWluID0gcGFkKFN0cmluZyhkLmdldE1pbnV0ZXMoKSksIDIpO1xuICAgICAgICB2YXIgc2VjID0gcGFkKFN0cmluZyhkLmdldFNlY29uZHMoKSksIDIpO1xuICAgICAgICB2YXIgcyA9IHllYXIgKyBtb250aCArIGRheSArIGhvdXIgKyBtaW4gKyBzZWM7XG4gICAgICAgIGlmICh3aXRoTWlsbGlzID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbWlsbGlzID0gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIGlmIChtaWxsaXMgIT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBzTWlsbGlzID0gcGFkKFN0cmluZyhtaWxsaXMpLCAzKTtcbiAgICAgICAgICAgICAgICBzTWlsbGlzID0gc01pbGxpcy5yZXBsYWNlKC9bMF0rJC8sIFwiXCIpO1xuICAgICAgICAgICAgICAgIHMgPSBzICsgXCIuXCIgKyBzTWlsbGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzICsgXCJaXCI7XG4gICAgfTtcbiAgICB0aGlzLnplcm9QYWRkaW5nID0gZnVuY3Rpb24gKHMsIGxlbikge1xuICAgICAgICBpZiAocy5sZW5ndGggPj0gbGVuKVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobGVuIC0gcy5sZW5ndGggKyAxKS5qb2luKCcwJykgKyBzO1xuICAgIH07XG4gICAgLy8gLS0tIFBVQkxJQyBNRVRIT0RTIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqXG4gICAgICogZ2V0IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHN0cmluZyBvYmplY3RcbiAgICAgKiBAbmFtZSBnZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN0cmluZyB2YWx1ZSBvZiB0aGlzIHRpbWUgb2JqZWN0XG4gICAgICovXG4gICAgdGhpcy5nZXRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgYSBzdHJpbmdcbiAgICAgKiBAbmFtZSBzZXRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmV3UyB2YWx1ZSBieSBhIHN0cmluZyB0byBzZXQgc3VjaCBsaWtlIFwiMTMwNDMwMjM1OTU5WlwiXG4gICAgICovXG4gICAgdGhpcy5zZXRTdHJpbmcgPSBmdW5jdGlvbiAobmV3Uykge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnMgPSBuZXdTO1xuICAgICAgICB0aGlzLmhWID0gc3RvaGV4KG5ld1MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgRGF0ZSBvYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeURhdGVWYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0geWVhciB5ZWFyIG9mIGRhdGUgKGV4LiAyMDEzKVxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbW9udGggbW9udGggb2YgZGF0ZSBiZXR3ZWVuIDEgYW5kIDEyIChleC4gMTIpXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBkYXkgZGF5IG9mIG1vbnRoXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBob3VyIGhvdXJzIG9mIGRhdGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IG1pbiBtaW51dGVzIG9mIGRhdGVcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHNlYyBzZWNvbmRzIG9mIGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNldEJ5RGF0ZVZhbHVlID0gZnVuY3Rpb24gKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbiwgc2VjKSB7XG4gICAgICAgIHZhciBkYXRlT2JqZWN0ID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKSk7XG4gICAgICAgIHRoaXMuc2V0QnlEYXRlKGRhdGVPYmplY3QpO1xuICAgIH07XG4gICAgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vID09IEVORCAgIERFUkFic3RyYWN0VGltZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gPT0gQkVHSU4gREVSQWJzdHJhY3RTdHJ1Y3R1cmVkID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKipcbiAqIGJhc2UgY2xhc3MgZm9yIEFTTi4xIERFUiBzdHJ1Y3R1cmVkIGNsYXNzXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAY2xhc3MgYmFzZSBjbGFzcyBmb3IgQVNOLjEgREVSIHN0cnVjdHVyZWQgY2xhc3NcbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFzbjFBcnJheSBpbnRlcm5hbCBhcnJheSBvZiBBU04xT2JqZWN0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGRlc2NyaXB0aW9uXG4gKiBAc2VlIEtKVVIuYXNuMS5BU04xT2JqZWN0IC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdmFyIGFzbjFBcnJheSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGFycmF5IG9mIEFTTjFPYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeUFTTjFPYmplY3RBcnJheVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGFzbjFPYmplY3RBcnJheSBhcnJheSBvZiBBU04xT2JqZWN0IHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlBU04xT2JqZWN0QXJyYXkgPSBmdW5jdGlvbiAoYXNuMU9iamVjdEFycmF5KSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXNuMUFycmF5ID0gYXNuMU9iamVjdEFycmF5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogYXBwZW5kIGFuIEFTTjFPYmplY3QgdG8gaW50ZXJuYWwgYXJyYXlcbiAgICAgKiBAbmFtZSBhcHBlbmRBU04xT2JqZWN0XG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBU04xT2JqZWN0fSBhc24xT2JqZWN0IHRvIGFkZFxuICAgICAqL1xuICAgIHRoaXMuYXBwZW5kQVNOMU9iamVjdCA9IGZ1bmN0aW9uIChhc24xT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXNuMUFycmF5LnB1c2goYXNuMU9iamVjdCk7XG4gICAgfTtcbiAgICB0aGlzLmFzbjFBcnJheSA9IG5ldyBBcnJheSgpO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbJ2FycmF5J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5hc24xQXJyYXkgPSBwYXJhbXNbJ2FycmF5J107XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCwgS0pVUi5hc24xLkFTTjFPYmplY3QpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICBBU04uMSBPYmplY3QgQ2xhc3Nlc1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgQm9vbGVhblxuICogQG5hbWUgS0pVUi5hc24xLkRFUkJvb2xlYW5cbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEJvb2xlYW5cbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJCb29sZWFuID0gZnVuY3Rpb24gKCkge1xuICAgIEtKVVIuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmhUID0gXCIwMVwiO1xuICAgIHRoaXMuaFRMViA9IFwiMDEwMWZmXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJvb2xlYW4sIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgSW50ZWdlclxuICogQG5hbWUgS0pVUi5hc24xLkRFUkludGVnZXJcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEludGVnZXJcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5pbnQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgaW50ZWdlciB2YWx1ZTwvbGk+XG4gKiA8bGk+YmlnaW50IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IEJpZ0ludGVnZXIgb2JqZWN0PC9saT5cbiAqIDxsaT5oZXggLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmc8L2xpPlxuICogPC91bD5cbiAqIE5PVEU6ICdwYXJhbXMnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5LSlVSLmFzbjEuREVSSW50ZWdlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiMDJcIjtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgVG9tIFd1J3MgQmlnSW50ZWdlciBvYmplY3RcbiAgICAgKiBAbmFtZSBzZXRCeUJpZ0ludGVnZXJcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkludGVnZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCaWdJbnRlZ2VyfSBiaWdJbnRlZ2VyVmFsdWUgdG8gc2V0XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIgPSBmdW5jdGlvbiAoYmlnSW50ZWdlclZhbHVlKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaFYgPSBLSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYmlnSW50ZWdlclZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBpbnRlZ2VyIHZhbHVlXG4gICAgICogQG5hbWUgc2V0QnlJbnRlZ2VyXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJJbnRlZ2VyXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpbnRlZ2VyIHZhbHVlIHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlJbnRlZ2VyID0gZnVuY3Rpb24gKGludFZhbHVlKSB7XG4gICAgICAgIHZhciBiaSA9IG5ldyBCaWdJbnRlZ2VyKFN0cmluZyhpbnRWYWx1ZSksIDEwKTtcbiAgICAgICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIoYmkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGludGVnZXIgdmFsdWVcbiAgICAgKiBAbmFtZSBzZXRWYWx1ZUhleFxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSSW50ZWdlciNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGV4YWRlY2ltYWwgc3RyaW5nIG9mIGludGVnZXIgdmFsdWVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiA8YnIvPlxuICAgICAqIE5PVEU6IFZhbHVlIHNoYWxsIGJlIHJlcHJlc2VudGVkIGJ5IG1pbmltdW0gb2N0ZXQgbGVuZ3RoIG9mXG4gICAgICogdHdvJ3MgY29tcGxlbWVudCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcigxMjMpO1xuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7J2ludCc6IDEyM30pO1xuICAgICAqIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7J2hleCc6ICcxZmFkJ30pO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVIZXggPSBmdW5jdGlvbiAobmV3SGV4U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmc7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1snYmlnaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUJpZ0ludGVnZXIocGFyYW1zWydiaWdpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtc1snaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUludGVnZXIocGFyYW1zWydpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5SW50ZWdlcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2hleCddICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkludGVnZXIsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgZW5jb2RlZCBCaXRTdHJpbmcgcHJpbWl0aXZlXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSQml0U3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBlbmNvZGVkIEJpdFN0cmluZyBwcmltaXRpdmVcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5iaW4gLSBzcGVjaWZ5IGJpbmFyeSBzdHJpbmcgKGV4LiAnMTAxMTEnKTwvbGk+XG4gKiA8bGk+YXJyYXkgLSBzcGVjaWZ5IGFycmF5IG9mIGJvb2xlYW4gKGV4LiBbdHJ1ZSxmYWxzZSx0cnVlLHRydWVdKTwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgQVNOLjEgdmFsdWUoVikgaW5jbHVkaW5nIHVudXNlZCBiaXRzPC9saT5cbiAqIDxsaT5vYmogLSBzcGVjaWZ5IHtAbGluayBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0fVxuICogYXJndW1lbnQgZm9yIFwiQml0U3RyaW5nIGVuY2Fwc3VsYXRlc1wiIHN0cnVjdHVyZS48L2xpPlxuICogPC91bD5cbiAqIE5PVEUxOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC48YnIvPlxuICogTk9URTI6ICdvYmonIHBhcmFtZXRlciBoYXZlIGJlZW4gc3VwcG9ydGVkIHNpbmNlXG4gKiBhc24xIDEuMC4xMSwganNyc2FzaWduIDYuMS4xICgyMDE2LVNlcC0yNSkuPGJyLz5cbiAqIEBleGFtcGxlXG4gKiAvLyBkZWZhdWx0IGNvbnN0cnVjdG9yXG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoKTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBiaW5hcnkgc3RyaW5nXG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2JpbjogXCIxMDExXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBib29sZWFuIGFycmF5XG4gKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2FycmF5OiBbdHJ1ZSxmYWxzZSx0cnVlLHRydWVdfSk7XG4gKiAvLyBpbml0aWFsaXplIHdpdGggaGV4YWRlY2ltYWwgc3RyaW5nICgwNCBpcyB1bnVzZWQgYml0cylcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6IFwiMDRiYWMwXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBBU04xVXRpbC5uZXdPYmplY3QgYXJndW1lbnQgZm9yIGVuY2Fwc3VsYXRlZFxuICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtvYmo6IHtzZXE6IFt7aW50OiAzfSwge3BybnN0cjogJ2FhYSd9XX19KTtcbiAqIC8vIGFib3ZlIGdlbmVyYXRlcyBhIEFTTi4xIGRhdGEgbGlrZSB0aGlzOlxuICogLy8gQklUIFNUUklORywgZW5jYXBzdWxhdGVzIHtcbiAqIC8vICAgU0VRVUVOQ0Uge1xuICogLy8gICAgIElOVEVHRVIgM1xuICogLy8gICAgIFByaW50YWJsZVN0cmluZyAnYWFhJ1xuICogLy8gICAgIH1cbiAqIC8vICAgfVxuICovXG5LSlVSLmFzbjEuREVSQml0U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGFyYW1zLm9iaiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB2YXIgbyA9IEtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QocGFyYW1zLm9iaik7XG4gICAgICAgIHBhcmFtcy5oZXggPSBcIjAwXCIgKyBvLmdldEVuY29kZWRIZXgoKTtcbiAgICB9XG4gICAgS0pVUi5hc24xLkRFUkJpdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiMDNcIjtcbiAgICAvKipcbiAgICAgKiBzZXQgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmcgaW5jbHVkaW5nIHVudXNlZCBiaXRzXG4gICAgICogQG5hbWUgc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZ0luY2x1ZGluZ1VudXNlZEJpdHNcbiAgICAgKi9cbiAgICB0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyA9IGZ1bmN0aW9uIChuZXdIZXhTdHJpbmdJbmNsdWRpbmdVbnVzZWRCaXRzKSB7XG4gICAgICAgIHRoaXMuaFRMViA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmdJbmNsdWRpbmdVbnVzZWRCaXRzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIHZhbHVlKFYpIGJ5IHVudXNlZCBiaXQgYW5kIGhleGFkZWNpbWFsIHN0cmluZyBvZiB2YWx1ZVxuICAgICAqIEBuYW1lIHNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQml0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gdW51c2VkQml0c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoVmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLnNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZSA9IGZ1bmN0aW9uICh1bnVzZWRCaXRzLCBoVmFsdWUpIHtcbiAgICAgICAgaWYgKHVudXNlZEJpdHMgPCAwIHx8IDcgPCB1bnVzZWRCaXRzKSB7XG4gICAgICAgICAgICB0aHJvdyBcInVudXNlZCBiaXRzIHNoYWxsIGJlIGZyb20gMCB0byA3OiB1ID0gXCIgKyB1bnVzZWRCaXRzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoVW51c2VkQml0cyA9IFwiMFwiICsgdW51c2VkQml0cztcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oViA9IGhVbnVzZWRCaXRzICsgaFZhbHVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIERFUiBCaXRTdHJpbmcgYnkgYmluYXJ5IHN0cmluZzxici8+XG4gICAgICogQG5hbWUgc2V0QnlCaW5hcnlTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkJpdFN0cmluZyNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYmluYXJ5U3RyaW5nIGJpbmFyeSB2YWx1ZSBzdHJpbmcgKGkuZS4gJzEwMTExJylcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJdHMgdW51c2VkIGJpdHMgd2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYnkgbGVuZ3RoIG9mXG4gICAgICogJ2JpbmFyeVZhbHVlJy4gPGJyLz5cbiAgICAgKiBOT1RFOiBUcmFpbGluZyB6ZXJvcyAnMCcgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKCk7XG4gICAgICogby5zZXRCeUJvb2xlYW5BcnJheShcIjAxMDExXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0QnlCaW5hcnlTdHJpbmcgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gICAgICAgIGJpbmFyeVN0cmluZyA9IGJpbmFyeVN0cmluZy5yZXBsYWNlKC8wKyQvLCAnJyk7XG4gICAgICAgIHZhciB1bnVzZWRCaXRzID0gOCAtIGJpbmFyeVN0cmluZy5sZW5ndGggJSA4O1xuICAgICAgICBpZiAodW51c2VkQml0cyA9PSA4KVxuICAgICAgICAgICAgdW51c2VkQml0cyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHVudXNlZEJpdHM7IGkrKykge1xuICAgICAgICAgICAgYmluYXJ5U3RyaW5nICs9ICcwJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeVN0cmluZy5sZW5ndGggLSAxOyBpICs9IDgpIHtcbiAgICAgICAgICAgIHZhciBiID0gYmluYXJ5U3RyaW5nLnN1YnN0cihpLCA4KTtcbiAgICAgICAgICAgIHZhciB4ID0gcGFyc2VJbnQoYiwgMikudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgaWYgKHgubGVuZ3RoID09IDEpXG4gICAgICAgICAgICAgICAgeCA9ICcwJyArIHg7XG4gICAgICAgICAgICBoICs9IHg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oViA9ICcwJyArIHVudXNlZEJpdHMgKyBoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IEFTTi4xIFRMViB2YWx1ZShWKSBieSBhbiBhcnJheSBvZiBib29sZWFuPGJyLz5cbiAgICAgKiBAbmFtZSBzZXRCeUJvb2xlYW5BcnJheVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSQml0U3RyaW5nI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGJvb2xlYW5BcnJheSBhcnJheSBvZiBib29sZWFuIChleC4gW3RydWUsIGZhbHNlLCB0cnVlXSlcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBOT1RFOiBUcmFpbGluZyBmYWxzZXMgd2lsbCBiZSBpZ25vcmVkIGluIHRoZSBBU04uMSBERVIgT2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKCk7XG4gICAgICogby5zZXRCeUJvb2xlYW5BcnJheShbZmFsc2UsIHRydWUsIGZhbHNlLCB0cnVlLCB0cnVlXSk7XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUJvb2xlYW5BcnJheSA9IGZ1bmN0aW9uIChib29sZWFuQXJyYXkpIHtcbiAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29sZWFuQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChib29sZWFuQXJyYXlbaV0gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHMgKz0gJzEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcyArPSAnMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRCeUJpbmFyeVN0cmluZyhzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGdlbmVyYXRlIGFuIGFycmF5IG9mIGZhbHNlcyB3aXRoIHNwZWNpZmllZCBsZW5ndGg8YnIvPlxuICAgICAqIEBuYW1lIG5ld0ZhbHNlQXJyYXlcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUkJpdFN0cmluZ1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbkxlbmd0aCBsZW5ndGggb2YgYXJyYXkgdG8gZ2VuZXJhdGVcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gYXJyYXkgb2YgYm9vbGVhbiBmYWxzZXNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGlzIHN0YXRpYyBtZXRob2QgbWF5IGJlIHVzZWZ1bCB0byBpbml0aWFsaXplIGJvb2xlYW4gYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoKTtcbiAgICAgKiBvLm5ld0ZhbHNlQXJyYXkoMykgJnJhcnI7IFtmYWxzZSwgZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIHRoaXMubmV3RmFsc2VBcnJheSA9IGZ1bmN0aW9uIChuTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhID0gbmV3IEFycmF5KG5MZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5MZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYVtpXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhO1xuICAgIH07XG4gICAgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gXCJzdHJpbmdcIiAmJiBwYXJhbXMudG9Mb3dlckNhc2UoKS5tYXRjaCgvXlswLTlhLWZdKyQvKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMocGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1zWydoZXgnXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyhwYXJhbXNbJ2hleCddKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1zWydiaW4nXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5QmluYXJ5U3RyaW5nKHBhcmFtc1snYmluJ10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2FycmF5J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUJvb2xlYW5BcnJheShwYXJhbXNbJ2FycmF5J10pO1xuICAgICAgICB9XG4gICAgfVxufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgT2N0ZXRTdHJpbmc8YnIvPlxuICogQG5hbWUgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBPY3RldFN0cmluZ1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIEFTTi4xIE9jdGV0U3RyaW5nIHNpbXBsZSB0eXBlLjxici8+XG4gKiBTdXBwb3J0ZWQgXCJwYXJhbXNcIiBhdHRyaWJ1dGVzIGFyZTpcbiAqIDx1bD5cbiAqIDxsaT5zdHIgLSB0byBzZXQgYSBzdHJpbmcgYXMgYSB2YWx1ZTwvbGk+XG4gKiA8bGk+aGV4IC0gdG8gc2V0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIGFzIGEgdmFsdWU8L2xpPlxuICogPGxpPm9iaiAtIHRvIHNldCBhIGVuY2Fwc3VsYXRlZCBBU04uMSB2YWx1ZSBieSBKU09OIG9iamVjdFxuICogd2hpY2ggaXMgZGVmaW5lZCBpbiB7QGxpbmsgS0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdH08L2xpPlxuICogPC91bD5cbiAqIE5PVEU6IEEgcGFyYW1ldGVyICdvYmonIGhhdmUgYmVlbiBzdXBwb3J0ZWRcbiAqIGZvciBcIk9DVEVUIFNUUklORywgZW5jYXBzdWxhdGVzXCIgc3RydWN0dXJlLlxuICogc2luY2UgYXNuMSAxLjAuMTEsIGpzcnNhc2lnbiA2LjEuMSAoMjAxNi1TZXAtMjUpLlxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKiBAZXhhbXBsZVxuICogLy8gZGVmYXVsdCBjb25zdHJ1Y3RvclxuICogbyA9IG5ldyBLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcoKTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBzdHJpbmdcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtzdHI6IFwiYWFhXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBoZXhhZGVjaW1hbCBzdHJpbmdcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6IFwiNjE2MTYxXCJ9KTtcbiAqIC8vIGluaXRpYWxpemUgd2l0aCBBU04xVXRpbC5uZXdPYmplY3QgYXJndW1lbnRcbiAqIG8gPSBuZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtvYmo6IHtzZXE6IFt7aW50OiAzfSwge3BybnN0cjogJ2FhYSd9XX19KTtcbiAqIC8vIGFib3ZlIGdlbmVyYXRlcyBhIEFTTi4xIGRhdGEgbGlrZSB0aGlzOlxuICogLy8gT0NURVQgU1RSSU5HLCBlbmNhcHN1bGF0ZXMge1xuICogLy8gICBTRVFVRU5DRSB7XG4gKiAvLyAgICAgSU5URUdFUiAzXG4gKiAvLyAgICAgUHJpbnRhYmxlU3RyaW5nICdhYWEnXG4gKiAvLyAgICAgfVxuICogLy8gICB9XG4gKi9cbktKVVIuYXNuMS5ERVJPY3RldFN0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBhcmFtcy5vYmogIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIG8gPSBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHBhcmFtcy5vYmopO1xuICAgICAgICBwYXJhbXMuaGV4ID0gby5nZXRFbmNvZGVkSGV4KCk7XG4gICAgfVxuICAgIEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIwNFwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZywgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgTnVsbFxuICogQG5hbWUgS0pVUi5hc24xLkRFUk51bGxcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIE51bGxcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkFTTjFPYmplY3QgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJOdWxsID0gZnVuY3Rpb24gKCkge1xuICAgIEtKVVIuYXNuMS5ERVJOdWxsLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmhUID0gXCIwNVwiO1xuICAgIHRoaXMuaFRMViA9IFwiMDUwMFwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdWxsLCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIE9iamVjdElkZW50aWZpZXJcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBPYmplY3RJZGVudGlmaWVyXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnb2lkJzogJzIuNS40LjUnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5vaWQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBvaWQgc3RyaW5nIChleC4gMi41LjQuMTMpPC9saT5cbiAqIDxsaT5oZXggLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBoZXhhZGVjaW1hbCBzdHJpbmc8L2xpPlxuICogPC91bD5cbiAqIE5PVEU6ICdwYXJhbXMnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5LSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgaXRveCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBoID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgdmFyIHJvaWR0b3ggPSBmdW5jdGlvbiAocm9pZCkge1xuICAgICAgICB2YXIgaCA9ICcnO1xuICAgICAgICB2YXIgYmkgPSBuZXcgQmlnSW50ZWdlcihyb2lkLCAxMCk7XG4gICAgICAgIHZhciBiID0gYmkudG9TdHJpbmcoMik7XG4gICAgICAgIHZhciBwYWRMZW4gPSA3IC0gYi5sZW5ndGggJSA3O1xuICAgICAgICBpZiAocGFkTGVuID09IDcpXG4gICAgICAgICAgICBwYWRMZW4gPSAwO1xuICAgICAgICB2YXIgYlBhZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZExlbjsgaSsrKVxuICAgICAgICAgICAgYlBhZCArPSAnMCc7XG4gICAgICAgIGIgPSBiUGFkICsgYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aCAtIDE7IGkgKz0gNykge1xuICAgICAgICAgICAgdmFyIGI4ID0gYi5zdWJzdHIoaSwgNyk7XG4gICAgICAgICAgICBpZiAoaSAhPSBiLmxlbmd0aCAtIDcpXG4gICAgICAgICAgICAgICAgYjggPSAnMScgKyBiODtcbiAgICAgICAgICAgIGggKz0gaXRveChwYXJzZUludChiOCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoO1xuICAgIH07XG4gICAgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaFQgPSBcIjA2XCI7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICogQG5hbWUgc2V0VmFsdWVIZXhcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5ld0hleFN0cmluZyBoZXhhZGVjaW1hbCB2YWx1ZSBvZiBPSUQgYnl0ZXNcbiAgICAgKi9cbiAgICB0aGlzLnNldFZhbHVlSGV4ID0gZnVuY3Rpb24gKG5ld0hleFN0cmluZykge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnMgPSBudWxsO1xuICAgICAgICB0aGlzLmhWID0gbmV3SGV4U3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IGEgT0lEIHN0cmluZzxici8+XG4gICAgICogQG5hbWUgc2V0VmFsdWVPaWRTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9pZFN0cmluZyBPSUQgc3RyaW5nIChleC4gMi41LjQuMTMpXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKCk7XG4gICAgICogby5zZXRWYWx1ZU9pZFN0cmluZyhcIjIuNS40LjEzXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcgPSBmdW5jdGlvbiAob2lkU3RyaW5nKSB7XG4gICAgICAgIGlmICghb2lkU3RyaW5nLm1hdGNoKC9eWzAtOS5dKyQvKSkge1xuICAgICAgICAgICAgdGhyb3cgXCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIgKyBvaWRTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGggPSAnJztcbiAgICAgICAgdmFyIGEgPSBvaWRTdHJpbmcuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIGkwID0gcGFyc2VJbnQoYVswXSkgKiA0MCArIHBhcnNlSW50KGFbMV0pO1xuICAgICAgICBoICs9IGl0b3goaTApO1xuICAgICAgICBhLnNwbGljZSgwLCAyKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBoICs9IHJvaWR0b3goYVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zID0gbnVsbDtcbiAgICAgICAgdGhpcy5oViA9IGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgYSBPSUQgbmFtZVxuICAgICAqIEBuYW1lIHNldFZhbHVlTmFtZVxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllciNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2lkTmFtZSBPSUQgbmFtZSAoZXguICdzZXJ2ZXJBdXRoJylcbiAgICAgKiBAc2luY2UgMS4wLjFcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBPSUQgbmFtZSBzaGFsbCBiZSBkZWZpbmVkIGluICdLSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0Jy5cbiAgICAgKiBPdGhlcndpc2UgcmFpc2UgZXJyb3IuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBvID0gbmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKCk7XG4gICAgICogby5zZXRWYWx1ZU5hbWUoXCJzZXJ2ZXJBdXRoXCIpO1xuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVOYW1lID0gZnVuY3Rpb24gKG9pZE5hbWUpIHtcbiAgICAgICAgdmFyIG9pZCA9IEtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChvaWROYW1lKTtcbiAgICAgICAgaWYgKG9pZCAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcob2lkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFwiREVST2JqZWN0SWRlbnRpZmllciBvaWROYW1lIHVuZGVmaW5lZDogXCIgKyBvaWROYW1lO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVOYW1lKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLm9pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlT2lkU3RyaW5nKHBhcmFtcy5vaWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtcy5oZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUhleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlTmFtZShwYXJhbXMubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgRW51bWVyYXRlZFxuICogQG5hbWUgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWRcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEVudW1lcmF0ZWRcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5BU04xT2JqZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5pbnQgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgaW50ZWdlciB2YWx1ZTwvbGk+XG4gKiA8bGk+aGV4IC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgaGV4YWRlY2ltYWwgc3RyaW5nPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqIEBleGFtcGxlXG4gKiBuZXcgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQoMTIzKTtcbiAqIG5ldyBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCh7aW50OiAxMjN9KTtcbiAqIG5ldyBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCh7aGV4OiAnMWZhZCd9KTtcbiAqL1xuS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaFQgPSBcIjBhXCI7XG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlIGJ5IFRvbSBXdSdzIEJpZ0ludGVnZXIgb2JqZWN0XG4gICAgICogQG5hbWUgc2V0QnlCaWdJbnRlZ2VyXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7QmlnSW50ZWdlcn0gYmlnSW50ZWdlclZhbHVlIHRvIHNldFxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlCaWdJbnRlZ2VyID0gZnVuY3Rpb24gKGJpZ0ludGVnZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhWID0gS0pVUi5hc24xLkFTTjFVdGlsLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4KGJpZ0ludGVnZXJWYWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBuYW1lIHNldEJ5SW50ZWdlclxuICAgICAqIEBtZW1iZXJPZiBLSlVSLmFzbjEuREVSRW51bWVyYXRlZCNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGludGVnZXIgdmFsdWUgdG8gc2V0XG4gICAgICovXG4gICAgdGhpcy5zZXRCeUludGVnZXIgPSBmdW5jdGlvbiAoaW50VmFsdWUpIHtcbiAgICAgICAgdmFyIGJpID0gbmV3IEJpZ0ludGVnZXIoU3RyaW5nKGludFZhbHVlKSwgMTApO1xuICAgICAgICB0aGlzLnNldEJ5QmlnSW50ZWdlcihiaSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzZXQgdmFsdWUgYnkgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBuYW1lIHNldFZhbHVlSGV4XG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkI1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoZXhhZGVjaW1hbCBzdHJpbmcgb2YgaW50ZWdlciB2YWx1ZVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIDxici8+XG4gICAgICogTk9URTogVmFsdWUgc2hhbGwgYmUgcmVwcmVzZW50ZWQgYnkgbWluaW11bSBvY3RldCBsZW5ndGggb2ZcbiAgICAgKiB0d28ncyBjb21wbGVtZW50IHJlcHJlc2VudGF0aW9uLlxuICAgICAqL1xuICAgIHRoaXMuc2V0VmFsdWVIZXggPSBmdW5jdGlvbiAobmV3SGV4U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaFYgPSBuZXdIZXhTdHJpbmc7XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1snaW50J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5zZXRCeUludGVnZXIocGFyYW1zWydpbnQnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5SW50ZWdlcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbJ2hleCddICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVIZXgocGFyYW1zWydoZXgnXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQsIEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgVVRGOFN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUlVURjhTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFVURjhTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyBhc3NvY2lhdGl2ZSBhcnJheSBvZiBwYXJhbWV0ZXJzIChleC4geydzdHInOiAnYWFhJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJVVEY4U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjBjXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVURjhTdHJpbmcsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIE51bWVyaWNTdHJpbmdcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nXG4gKiBAY2xhc3MgY2xhc3MgZm9yIEFTTi4xIERFUiBOdW1lcmljU3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJ2FhYSd9KVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nIC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxMlwiO1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nLCBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBQcmludGFibGVTdHJpbmdcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFByaW50YWJsZVN0cmluZ1xuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICdhYWEnfSlcbiAqIEBleHRlbmRzIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBAc2VlIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyAtIHN1cGVyY2xhc3NcbiAqL1xuS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjEzXCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZywgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vKipcbiAqIGNsYXNzIGZvciBBU04uMSBERVIgVGVsZXRleFN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmdcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFRlbGV0ZXhTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyBhc3NvY2lhdGl2ZSBhcnJheSBvZiBwYXJhbWV0ZXJzIChleC4geydzdHInOiAnYWFhJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQHNlZSBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcgLSBzdXBlcmNsYXNzXG4gKi9cbktKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIHRoaXMuaFQgPSBcIjE0XCI7XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIElBNVN0cmluZ1xuICogQG5hbWUgS0pVUi5hc24xLkRFUklBNVN0cmluZ1xuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgSUE1U3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgYXNzb2NpYXRpdmUgYXJyYXkgb2YgcGFyYW1ldGVycyAoZXguIHsnc3RyJzogJ2FhYSd9KVxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEBzZWUgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nIC0gc3VwZXJjbGFzc1xuICovXG5LSlVSLmFzbjEuREVSSUE1U3RyaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIEtKVVIuYXNuMS5ERVJJQTVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gICAgdGhpcy5oVCA9IFwiMTZcIjtcbn07XG5ZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSUE1U3RyaW5nLCBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBVVENUaW1lXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSVVRDVGltZVxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgVVRDVGltZVxuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICcxMzA0MzAyMzU5NTlaJ30pXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5zdHIgLSBzcGVjaWZ5IGluaXRpYWwgQVNOLjEgdmFsdWUoVikgYnkgYSBzdHJpbmcgKGV4LicxMzA0MzAyMzU5NTlaJyk8L2xpPlxuICogPGxpPmhleCAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIGhleGFkZWNpbWFsIHN0cmluZzwvbGk+XG4gKiA8bGk+ZGF0ZSAtIHNwZWNpZnkgRGF0ZSBvYmplY3QuPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFOiAncGFyYW1zJyBjYW4gYmUgb21pdHRlZC5cbiAqIDxoND5FWEFNUExFUzwvaDQ+XG4gKiBAZXhhbXBsZVxuICogZDEgPSBuZXcgS0pVUi5hc24xLkRFUlVUQ1RpbWUoKTtcbiAqIGQxLnNldFN0cmluZygnMTMwNDMwMTI1OTU5WicpO1xuICpcbiAqIGQyID0gbmV3IEtKVVIuYXNuMS5ERVJVVENUaW1lKHsnc3RyJzogJzEzMDQzMDEyNTk1OVonfSk7XG4gKiBkMyA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSh7J2RhdGUnOiBuZXcgRGF0ZShEYXRlLlVUQygyMDE1LCAwLCAzMSwgMCwgMCwgMCwgMCkpfSk7XG4gKiBkNCA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSgnMTMwNDMwMTI1OTU5WicpO1xuICovXG5LSlVSLmFzbjEuREVSVVRDVGltZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSVVRDVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxN1wiO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIERhdGUgb2JqZWN0PGJyLz5cbiAgICAgKiBAbmFtZSBzZXRCeURhdGVcbiAgICAgKiBAbWVtYmVyT2YgS0pVUi5hc24xLkRFUlVUQ1RpbWUjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlT2JqZWN0IERhdGUgb2JqZWN0IHRvIHNldCBBU04uMSB2YWx1ZShWKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogbyA9IG5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSgpO1xuICAgICAqIG8uc2V0QnlEYXRlKG5ldyBEYXRlKFwiMjAxNi8xMi8zMVwiKSk7XG4gICAgICovXG4gICAgdGhpcy5zZXRCeURhdGUgPSBmdW5jdGlvbiAoZGF0ZU9iamVjdCkge1xuICAgICAgICB0aGlzLmhUTFYgPSBudWxsO1xuICAgICAgICB0aGlzLmlzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlT2JqZWN0O1xuICAgICAgICB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLCAndXRjJyk7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRhdGUgPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgdGhpcy5zID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLCAndXRjJyk7XG4gICAgICAgICAgICB0aGlzLmhWID0gc3RvaGV4KHRoaXMucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zLnN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcInN0cmluZ1wiICYmIHBhcmFtcy5tYXRjaCgvXlswLTldezEyfVokLykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0cmluZ0hleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMuZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5RGF0ZShwYXJhbXMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVUQ1RpbWUsIEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUpO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8qKlxuICogY2xhc3MgZm9yIEFTTi4xIERFUiBHZW5lcmFsaXplZFRpbWVcbiAqIEBuYW1lIEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWVcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIEdlbmVyYWxpemVkVGltZVxuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIGFzc29jaWF0aXZlIGFycmF5IG9mIHBhcmFtZXRlcnMgKGV4LiB7J3N0cic6ICcyMDEzMDQzMDIzNTk1OVonfSlcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gd2l0aE1pbGxpcyBmbGFnIHRvIHNob3cgbWlsbGlzZWNvbmRzIG9yIG5vdFxuICogQGV4dGVuZHMgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZVxuICogQGRlc2NyaXB0aW9uXG4gKiA8YnIvPlxuICogQXMgZm9yIGFyZ3VtZW50ICdwYXJhbXMnIGZvciBjb25zdHJ1Y3RvciwgeW91IGNhbiBzcGVjaWZ5IG9uZSBvZlxuICogZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiA8dWw+XG4gKiA8bGk+c3RyIC0gc3BlY2lmeSBpbml0aWFsIEFTTi4xIHZhbHVlKFYpIGJ5IGEgc3RyaW5nIChleC4nMjAxMzA0MzAyMzU5NTlaJyk8L2xpPlxuICogPGxpPmhleCAtIHNwZWNpZnkgaW5pdGlhbCBBU04uMSB2YWx1ZShWKSBieSBhIGhleGFkZWNpbWFsIHN0cmluZzwvbGk+XG4gKiA8bGk+ZGF0ZSAtIHNwZWNpZnkgRGF0ZSBvYmplY3QuPC9saT5cbiAqIDxsaT5taWxsaXMgLSBzcGVjaWZ5IGZsYWcgdG8gc2hvdyBtaWxsaXNlY29uZHMgKGZyb20gMS4wLjYpPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFMTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuXG4gKiBOT1RFMjogJ3dpdGhNaWxsaXMnIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBmcm9tIGFzbjEgMS4wLjYuXG4gKi9cbktKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIxOFwiO1xuICAgIHRoaXMud2l0aE1pbGxpcyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhIERhdGUgb2JqZWN0XG4gICAgICogQG5hbWUgc2V0QnlEYXRlXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlT2JqZWN0IERhdGUgb2JqZWN0IHRvIHNldCBBU04uMSB2YWx1ZShWKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogV2hlbiB5b3Ugc3BlY2lmeSBVVEMgdGltZSwgdXNlICdEYXRlLlVUQycgbWV0aG9kIGxpa2UgdGhpczo8YnIvPlxuICAgICAqIG8xID0gbmV3IERFUlVUQ1RpbWUoKTtcbiAgICAgKiBvMS5zZXRCeURhdGUoZGF0ZSk7XG4gICAgICpcbiAgICAgKiBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoMjAxNSwgMCwgMzEsIDIzLCA1OSwgNTksIDApKTsgIzIwMTVKQU4zMSAyMzo1OTo1OVxuICAgICAqL1xuICAgIHRoaXMuc2V0QnlEYXRlID0gZnVuY3Rpb24gKGRhdGVPYmplY3QpIHtcbiAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZU9iamVjdDtcbiAgICAgICAgdGhpcy5zID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgJ2dlbicsIHRoaXMud2l0aE1pbGxpcyk7XG4gICAgICAgIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgJ2dlbicsIHRoaXMud2l0aE1pbGxpcyk7XG4gICAgICAgICAgICB0aGlzLmhWID0gc3RvaGV4KHRoaXMucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcocGFyYW1zLnN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyA9PSBcInN0cmluZ1wiICYmIHBhcmFtcy5tYXRjaCgvXlswLTldezE0fVokLykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0cmluZ0hleChwYXJhbXMuaGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbXMuZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5RGF0ZShwYXJhbXMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5taWxsaXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMud2l0aE1pbGxpcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZSwgS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFNlcXVlbmNlXG4gKiBAbmFtZSBLSlVSLmFzbjEuREVSU2VxdWVuY2VcbiAqIEBjbGFzcyBjbGFzcyBmb3IgQVNOLjEgREVSIFNlcXVlbmNlXG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5hcnJheSAtIHNwZWNpZnkgYXJyYXkgb2YgQVNOMU9iamVjdCB0byBzZXQgZWxlbWVudHMgb2YgY29udGVudDwvbGk+XG4gKiA8L3VsPlxuICogTk9URTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbktKVVIuYXNuMS5ERVJTZXF1ZW5jZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBLSlVSLmFzbjEuREVSU2VxdWVuY2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gICAgdGhpcy5oVCA9IFwiMzBcIjtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hc24xQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhc24xT2JqID0gdGhpcy5hc24xQXJyYXlbaV07XG4gICAgICAgICAgICBoICs9IGFzbjFPYmouZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaFYgPSBoO1xuICAgICAgICByZXR1cm4gdGhpcy5oVjtcbiAgICB9O1xufTtcbllBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSwgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFNldFxuICogQG5hbWUgS0pVUi5hc24xLkRFUlNldFxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgU2V0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxici8+XG4gKiBBcyBmb3IgYXJndW1lbnQgJ3BhcmFtcycgZm9yIGNvbnN0cnVjdG9yLCB5b3UgY2FuIHNwZWNpZnkgb25lIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5hcnJheSAtIHNwZWNpZnkgYXJyYXkgb2YgQVNOMU9iamVjdCB0byBzZXQgZWxlbWVudHMgb2YgY29udGVudDwvbGk+XG4gKiA8bGk+c29ydGZsYWcgLSBmbGFnIGZvciBzb3J0IChkZWZhdWx0OiB0cnVlKS4gQVNOLjEgQkVSIGlzIG5vdCBzb3J0ZWQgaW4gJ1NFVCBPRicuPC9saT5cbiAqIDwvdWw+XG4gKiBOT1RFMTogJ3BhcmFtcycgY2FuIGJlIG9taXR0ZWQuPGJyLz5cbiAqIE5PVEUyOiBzb3J0ZmxhZyBpcyBzdXBwb3J0ZWQgc2luY2UgMS4wLjUuXG4gKi9cbktKVVIuYXNuMS5ERVJTZXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUlNldC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICB0aGlzLmhUID0gXCIzMVwiO1xuICAgIHRoaXMuc29ydEZsYWcgPSB0cnVlOyAvLyBpdGVtIHNoYWxsIGJlIHNvcnRlZCBvbmx5IGluIEFTTi4xIERFUlxuICAgIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFzbjFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFzbjFPYmogPSB0aGlzLmFzbjFBcnJheVtpXTtcbiAgICAgICAgICAgIGEucHVzaChhc24xT2JqLmdldEVuY29kZWRIZXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc29ydEZsYWcgPT0gdHJ1ZSlcbiAgICAgICAgICAgIGEuc29ydCgpO1xuICAgICAgICB0aGlzLmhWID0gYS5qb2luKCcnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaFY7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLnNvcnRmbGFnICE9IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHBhcmFtcy5zb3J0ZmxhZyA9PSBmYWxzZSlcbiAgICAgICAgICAgIHRoaXMuc29ydEZsYWcgPSBmYWxzZTtcbiAgICB9XG59O1xuWUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlNldCwgS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7XG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLyoqXG4gKiBjbGFzcyBmb3IgQVNOLjEgREVSIFRhZ2dlZE9iamVjdFxuICogQG5hbWUgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdFxuICogQGNsYXNzIGNsYXNzIGZvciBBU04uMSBERVIgVGFnZ2VkT2JqZWN0XG4gKiBAZXh0ZW5kcyBLSlVSLmFzbjEuQVNOMU9iamVjdFxuICogQGRlc2NyaXB0aW9uXG4gKiA8YnIvPlxuICogUGFyYW1ldGVyICd0YWdOb05leCcgaXMgQVNOLjEgdGFnKFQpIHZhbHVlIGZvciB0aGlzIG9iamVjdC5cbiAqIEZvciBleGFtcGxlLCBpZiB5b3UgZmluZCAnWzFdJyB0YWcgaW4gYSBBU04uMSBkdW1wLFxuICogJ3RhZ05vSGV4JyB3aWxsIGJlICdhMScuXG4gKiA8YnIvPlxuICogQXMgZm9yIG9wdGlvbmFsIGFyZ3VtZW50ICdwYXJhbXMnIGZvciBjb25zdHJ1Y3RvciwgeW91IGNhbiBzcGVjaWZ5ICpBTlkqIG9mXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIDx1bD5cbiAqIDxsaT5leHBsaWNpdCAtIHNwZWNpZnkgdHJ1ZSBpZiB0aGlzIGlzIGV4cGxpY2l0IHRhZyBvdGhlcndpc2UgZmFsc2VcbiAqICAgICAoZGVmYXVsdCBpcyAndHJ1ZScpLjwvbGk+XG4gKiA8bGk+dGFnIC0gc3BlY2lmeSB0YWcgKGRlZmF1bHQgaXMgJ2EwJyB3aGljaCBtZWFucyBbMF0pPC9saT5cbiAqIDxsaT5vYmogLSBzcGVjaWZ5IEFTTjFPYmplY3Qgd2hpY2ggaXMgdGFnZ2VkPC9saT5cbiAqIDwvdWw+XG4gKiBAZXhhbXBsZVxuICogZDEgPSBuZXcgS0pVUi5hc24xLkRFUlVURjhTdHJpbmcoeydzdHInOidhJ30pO1xuICogZDIgPSBuZXcgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCh7J29iaic6IGQxfSk7XG4gKiBoZXggPSBkMi5nZXRFbmNvZGVkSGV4KCk7XG4gKi9cbktKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5oVCA9IFwiYTBcIjtcbiAgICB0aGlzLmhWID0gJyc7XG4gICAgdGhpcy5pc0V4cGxpY2l0ID0gdHJ1ZTtcbiAgICB0aGlzLmFzbjFPYmplY3QgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldCB2YWx1ZSBieSBhbiBBU04xT2JqZWN0XG4gICAgICogQG5hbWUgc2V0U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QjXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0V4cGxpY2l0RmxhZyBmbGFnIGZvciBleHBsaWNpdC9pbXBsaWNpdCB0YWdcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRhZ05vSGV4IGhleGFkZWNpbWFsIHN0cmluZyBvZiBBU04uMSB0YWdcbiAgICAgKiBAcGFyYW0ge0FTTjFPYmplY3R9IGFzbjFPYmplY3QgQVNOLjEgdG8gZW5jYXBzdWxhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNldEFTTjFPYmplY3QgPSBmdW5jdGlvbiAoaXNFeHBsaWNpdEZsYWcsIHRhZ05vSGV4LCBhc24xT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuaFQgPSB0YWdOb0hleDtcbiAgICAgICAgdGhpcy5pc0V4cGxpY2l0ID0gaXNFeHBsaWNpdEZsYWc7XG4gICAgICAgIHRoaXMuYXNuMU9iamVjdCA9IGFzbjFPYmplY3Q7XG4gICAgICAgIGlmICh0aGlzLmlzRXhwbGljaXQpIHtcbiAgICAgICAgICAgIHRoaXMuaFYgPSB0aGlzLmFzbjFPYmplY3QuZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICAgICAgdGhpcy5oVExWID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhWID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaFRMViA9IGFzbjFPYmplY3QuZ2V0RW5jb2RlZEhleCgpO1xuICAgICAgICAgICAgdGhpcy5oVExWID0gdGhpcy5oVExWLnJlcGxhY2UoL14uLi8sIHRhZ05vSGV4KTtcbiAgICAgICAgICAgIHRoaXMuaXNNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhWO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1sndGFnJ10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5oVCA9IHBhcmFtc1sndGFnJ107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbJ2V4cGxpY2l0J10gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5pc0V4cGxpY2l0ID0gcGFyYW1zWydleHBsaWNpdCddO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zWydvYmonXSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFzbjFPYmplY3QgPSBwYXJhbXNbJ29iaiddO1xuICAgICAgICAgICAgdGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCwgdGhpcy5oVCwgdGhpcy5hc24xT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5ZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0LCBLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgaGV4MmI2NCB9IGZyb20gXCIuL2xpYi9qc2JuL2Jhc2U2NFwiO1xuaW1wb3J0IHsgSGV4IH0gZnJvbSBcIi4vbGliL2FzbjFqcy9oZXhcIjtcbmltcG9ydCB7IEJhc2U2NCB9IGZyb20gXCIuL2xpYi9hc24xanMvYmFzZTY0XCI7XG5pbXBvcnQgeyBBU04xIH0gZnJvbSBcIi4vbGliL2FzbjFqcy9hc24xXCI7XG5pbXBvcnQgeyBSU0FLZXkgfSBmcm9tIFwiLi9saWIvanNibi9yc2FcIjtcbmltcG9ydCB7IHBhcnNlQmlnSW50IH0gZnJvbSBcIi4vbGliL2pzYm4vanNiblwiO1xuaW1wb3J0IHsgS0pVUiB9IGZyb20gXCIuL2xpYi9qc3JzYXNpZ24vYXNuMS0xLjBcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IEpTRW5jcnlwdFJTQUtleSB0aGF0IGV4dGVuZHMgVG9tIFd1J3MgUlNBIGtleSBvYmplY3QuXG4gKiBUaGlzIG9iamVjdCBpcyBqdXN0IGEgZGVjb3JhdG9yIGZvciBwYXJzaW5nIHRoZSBrZXkgcGFyYW1ldGVyXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGtleSAtIFRoZSBrZXkgaW4gc3RyaW5nIGZvcm1hdCwgb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAqIHRoZSBwYXJhbWV0ZXJzIG5lZWRlZCB0byBidWlsZCBhIFJTQUtleSBvYmplY3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIEpTRW5jcnlwdFJTQUtleSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSlNFbmNyeXB0UlNBS2V5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEpTRW5jcnlwdFJTQUtleShrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgLy8gQ2FsbCB0aGUgc3VwZXIgY29uc3RydWN0b3IuXG4gICAgICAgIC8vICBSU0FLZXkuY2FsbCh0aGlzKTtcbiAgICAgICAgLy8gSWYgYSBrZXkga2V5IHdhcyBwcm92aWRlZC5cbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHN0cmluZy4uLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJzZUtleShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoSlNFbmNyeXB0UlNBS2V5Lmhhc1ByaXZhdGVLZXlQcm9wZXJ0eShrZXkpIHx8XG4gICAgICAgICAgICAgICAgSlNFbmNyeXB0UlNBS2V5Lmhhc1B1YmxpY0tleVByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHZhbHVlcyBmb3IgdGhlIGtleS5cbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJzZVByb3BlcnRpZXNGcm9tKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gcGFyc2UgYSBwZW0gZW5jb2RlZCBzdHJpbmcgY29udGFpbmluZyBib3RoIGEgcHVibGljIG9yIHByaXZhdGUga2V5LlxuICAgICAqIFRoZSBtZXRob2Qgd2lsbCB0cmFuc2xhdGUgdGhlIHBlbSBlbmNvZGVkIHN0cmluZyBpbiBhIGRlciBlbmNvZGVkIHN0cmluZyBhbmRcbiAgICAgKiB3aWxsIHBhcnNlIHByaXZhdGUga2V5IGFuZCBwdWJsaWMga2V5IHBhcmFtZXRlcnMuIFRoaXMgbWV0aG9kIGFjY2VwdHMgcHVibGljIGtleVxuICAgICAqIGluIHRoZSByc2FlbmNyeXB0aW9uIHBrY3MgIzEgZm9ybWF0IChvaWQ6IDEuMi44NDAuMTEzNTQ5LjEuMS4xKS5cbiAgICAgKlxuICAgICAqIEB0b2RvIENoZWNrIGhvdyBtYW55IHJzYSBmb3JtYXRzIHVzZSB0aGUgc2FtZSBmb3JtYXQgb2YgcGtjcyAjMS5cbiAgICAgKlxuICAgICAqIFRoZSBmb3JtYXQgaXMgZGVmaW5lZCBhczpcbiAgICAgKiBQdWJsaWNLZXlJbmZvIDo6PSBTRVFVRU5DRSB7XG4gICAgICogICBhbGdvcml0aG0gICAgICAgQWxnb3JpdGhtSWRlbnRpZmllcixcbiAgICAgKiAgIFB1YmxpY0tleSAgICAgICBCSVQgU1RSSU5HXG4gICAgICogfVxuICAgICAqIFdoZXJlIEFsZ29yaXRobUlkZW50aWZpZXIgaXM6XG4gICAgICogQWxnb3JpdGhtSWRlbnRpZmllciA6Oj0gU0VRVUVOQ0Uge1xuICAgICAqICAgYWxnb3JpdGhtICAgICAgIE9CSkVDVCBJREVOVElGSUVSLCAgICAgdGhlIE9JRCBvZiB0aGUgZW5jIGFsZ29yaXRobVxuICAgICAqICAgcGFyYW1ldGVycyAgICAgIEFOWSBERUZJTkVEIEJZIGFsZ29yaXRobSBPUFRJT05BTCAoTlVMTCBmb3IgUEtDUyAjMSlcbiAgICAgKiB9XG4gICAgICogYW5kIFB1YmxpY0tleSBpcyBhIFNFUVVFTkNFIGVuY2Fwc3VsYXRlZCBpbiBhIEJJVCBTVFJJTkdcbiAgICAgKiBSU0FQdWJsaWNLZXkgOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIG1vZHVsdXMgICAgICAgICAgIElOVEVHRVIsICAtLSBuXG4gICAgICogICBwdWJsaWNFeHBvbmVudCAgICBJTlRFR0VSICAgLS0gZVxuICAgICAqIH1cbiAgICAgKiBpdCdzIHBvc3NpYmxlIHRvIGV4YW1pbmUgdGhlIHN0cnVjdHVyZSBvZiB0aGUga2V5cyBvYnRhaW5lZCBmcm9tIG9wZW5zc2wgdXNpbmdcbiAgICAgKiBhbiBhc24uMSBkdW1wZXIgYXMgdGhlIG9uZSB1c2VkIGhlcmUgdG8gcGFyc2UgdGhlIGNvbXBvbmVudHM6IGh0dHA6Ly9sYXBvLml0L2FzbjFqcy9cbiAgICAgKiBAYXJndW1lbnQge3N0cmluZ30gcGVtIHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcsIGNhbiBpbmNsdWRlIHRoZSBCRUdJTi9FTkQgaGVhZGVyL2Zvb3RlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSlNFbmNyeXB0UlNBS2V5LnByb3RvdHlwZS5wYXJzZUtleSA9IGZ1bmN0aW9uIChwZW0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBtb2R1bHVzID0gMDtcbiAgICAgICAgICAgIHZhciBwdWJsaWNfZXhwb25lbnQgPSAwO1xuICAgICAgICAgICAgdmFyIHJlSGV4ID0gL15cXHMqKD86WzAtOUEtRmEtZl1bMC05QS1GYS1mXVxccyopKyQvO1xuICAgICAgICAgICAgdmFyIGRlciA9IHJlSGV4LnRlc3QocGVtKSA/IEhleC5kZWNvZGUocGVtKSA6IEJhc2U2NC51bmFybW9yKHBlbSk7XG4gICAgICAgICAgICB2YXIgYXNuMSA9IEFTTjEuZGVjb2RlKGRlcik7XG4gICAgICAgICAgICAvLyBGaXhlcyBhIGJ1ZyB3aXRoIE9wZW5TU0wgMS4wKyBwcml2YXRlIGtleXNcbiAgICAgICAgICAgIGlmIChhc24xLnN1Yi5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICBhc24xID0gYXNuMS5zdWJbMl0uc3ViWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFzbjEuc3ViLmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBwcml2YXRlIGtleS5cbiAgICAgICAgICAgICAgICBtb2R1bHVzID0gYXNuMS5zdWJbMV0uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5uID0gcGFyc2VCaWdJbnQobW9kdWx1cywgMTYpO1xuICAgICAgICAgICAgICAgIHB1YmxpY19leHBvbmVudCA9IGFzbjEuc3ViWzJdLmdldEhleFN0cmluZ1ZhbHVlKCk7IC8vIGludFxuICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBwcml2YXRlX2V4cG9uZW50ID0gYXNuMS5zdWJbM10uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5kID0gcGFyc2VCaWdJbnQocHJpdmF0ZV9leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBwcmltZTEgPSBhc24xLnN1Yls0XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLnAgPSBwYXJzZUJpZ0ludChwcmltZTEsIDE2KTtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbWUyID0gYXNuMS5zdWJbNV0uZ2V0SGV4U3RyaW5nVmFsdWUoKTsgLy8gYmlnaW50XG4gICAgICAgICAgICAgICAgdGhpcy5xID0gcGFyc2VCaWdJbnQocHJpbWUyLCAxNik7XG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50MSA9IGFzbjEuc3ViWzZdLmdldEhleFN0cmluZ1ZhbHVlKCk7IC8vIGJpZ2ludFxuICAgICAgICAgICAgICAgIHRoaXMuZG1wMSA9IHBhcnNlQmlnSW50KGV4cG9uZW50MSwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBleHBvbmVudDIgPSBhc24xLnN1Yls3XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLmRtcTEgPSBwYXJzZUJpZ0ludChleHBvbmVudDIsIDE2KTtcbiAgICAgICAgICAgICAgICB2YXIgY29lZmZpY2llbnQgPSBhc24xLnN1Yls4XS5nZXRIZXhTdHJpbmdWYWx1ZSgpOyAvLyBiaWdpbnRcbiAgICAgICAgICAgICAgICB0aGlzLmNvZWZmID0gcGFyc2VCaWdJbnQoY29lZmZpY2llbnQsIDE2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFzbjEuc3ViLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGlmIChhc24xLnN1YlswXS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgQVNOLjEgU3ViamVjdFB1YmxpY0tleUluZm8gdHlwZSBhcyBkZWZpbmVkIGJ5IFguNTA5XG4gICAgICAgICAgICAgICAgICAgIHZhciBiaXRfc3RyaW5nID0gYXNuMS5zdWJbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXF1ZW5jZSA9IGJpdF9zdHJpbmcuc3ViWzBdO1xuICAgICAgICAgICAgICAgICAgICBtb2R1bHVzID0gc2VxdWVuY2Uuc3ViWzBdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubiA9IHBhcnNlQmlnSW50KG1vZHVsdXMsIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgcHVibGljX2V4cG9uZW50ID0gc2VxdWVuY2Uuc3ViWzFdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgQVNOLjEgUlNBUHVibGljS2V5IHR5cGUgYXMgZGVmaW5lZCBieSBQS0NTICMxXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsdXMgPSBhc24xLnN1YlswXS5nZXRIZXhTdHJpbmdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChtb2R1bHVzLCAxNik7XG4gICAgICAgICAgICAgICAgICAgIHB1YmxpY19leHBvbmVudCA9IGFzbjEuc3ViWzFdLmdldEhleFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZSA9IHBhcnNlSW50KHB1YmxpY19leHBvbmVudCwgMTYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgcnNhIHBhcmFtZXRlcnMgaW4gYSBoZXggZW5jb2RlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByc2Ega2V5LlxuICAgICAqXG4gICAgICogVGhlIHRyYW5zbGF0aW9uIGZvbGxvdyB0aGUgQVNOLjEgbm90YXRpb24gOlxuICAgICAqIFJTQVByaXZhdGVLZXkgOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIHZlcnNpb24gICAgICAgICAgIFZlcnNpb24sXG4gICAgICogICBtb2R1bHVzICAgICAgICAgICBJTlRFR0VSLCAgLS0gblxuICAgICAqICAgcHVibGljRXhwb25lbnQgICAgSU5URUdFUiwgIC0tIGVcbiAgICAgKiAgIHByaXZhdGVFeHBvbmVudCAgIElOVEVHRVIsICAtLSBkXG4gICAgICogICBwcmltZTEgICAgICAgICAgICBJTlRFR0VSLCAgLS0gcFxuICAgICAqICAgcHJpbWUyICAgICAgICAgICAgSU5URUdFUiwgIC0tIHFcbiAgICAgKiAgIGV4cG9uZW50MSAgICAgICAgIElOVEVHRVIsICAtLSBkIG1vZCAocDEpXG4gICAgICogICBleHBvbmVudDIgICAgICAgICBJTlRFR0VSLCAgLS0gZCBtb2QgKHEtMSlcbiAgICAgKiAgIGNvZWZmaWNpZW50ICAgICAgIElOVEVHRVIsICAtLSAoaW52ZXJzZSBvZiBxKSBtb2QgcFxuICAgICAqIH1cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgREVSIEVuY29kZWQgU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcnNhIHByaXZhdGUga2V5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVCYXNlS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFycmF5OiBbXG4gICAgICAgICAgICAgICAgbmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHsgaW50OiAwIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5uIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGludDogdGhpcy5lIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5wIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5xIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kbXAxIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5kbXExIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5jb2VmZiB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZXEgPSBuZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gc2VxLmdldEVuY29kZWRIZXgoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGJhc2U2NCAocGVtKSBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIERFUiBlbmNvZGVkIHJlcHJlc2VudGF0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVCYXNlS2V5QjY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaGV4MmI2NCh0aGlzLmdldFByaXZhdGVCYXNlS2V5KCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIHJzYSBwYXJhbWV0ZXJzIGluIGEgaGV4IGVuY29kZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcnNhIHB1YmxpYyBrZXkuXG4gICAgICogVGhlIHJlcHJlc2VudGF0aW9uIGZvbGxvdyB0aGUgQVNOLjEgbm90YXRpb24gOlxuICAgICAqIFB1YmxpY0tleUluZm8gOjo9IFNFUVVFTkNFIHtcbiAgICAgKiAgIGFsZ29yaXRobSAgICAgICBBbGdvcml0aG1JZGVudGlmaWVyLFxuICAgICAqICAgUHVibGljS2V5ICAgICAgIEJJVCBTVFJJTkdcbiAgICAgKiB9XG4gICAgICogV2hlcmUgQWxnb3JpdGhtSWRlbnRpZmllciBpczpcbiAgICAgKiBBbGdvcml0aG1JZGVudGlmaWVyIDo6PSBTRVFVRU5DRSB7XG4gICAgICogICBhbGdvcml0aG0gICAgICAgT0JKRUNUIElERU5USUZJRVIsICAgICB0aGUgT0lEIG9mIHRoZSBlbmMgYWxnb3JpdGhtXG4gICAgICogICBwYXJhbWV0ZXJzICAgICAgQU5ZIERFRklORUQgQlkgYWxnb3JpdGhtIE9QVElPTkFMIChOVUxMIGZvciBQS0NTICMxKVxuICAgICAqIH1cbiAgICAgKiBhbmQgUHVibGljS2V5IGlzIGEgU0VRVUVOQ0UgZW5jYXBzdWxhdGVkIGluIGEgQklUIFNUUklOR1xuICAgICAqIFJTQVB1YmxpY0tleSA6Oj0gU0VRVUVOQ0Uge1xuICAgICAqICAgbW9kdWx1cyAgICAgICAgICAgSU5URUdFUiwgIC0tIG5cbiAgICAgKiAgIHB1YmxpY0V4cG9uZW50ICAgIElOVEVHRVIgICAtLSBlXG4gICAgICogfVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IERFUiBFbmNvZGVkIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJzYSBwdWJsaWMga2V5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaXJzdF9zZXF1ZW5jZSA9IG5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe1xuICAgICAgICAgICAgYXJyYXk6IFtcbiAgICAgICAgICAgICAgICBuZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoeyBvaWQ6IFwiMS4yLjg0MC4xMTM1NDkuMS4xLjFcIiB9KSxcbiAgICAgICAgICAgICAgICBuZXcgS0pVUi5hc24xLkRFUk51bGwoKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2Vjb25kX3NlcXVlbmNlID0gbmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7XG4gICAgICAgICAgICBhcnJheTogW1xuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGJpZ2ludDogdGhpcy5uIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7IGludDogdGhpcy5lIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBiaXRfc3RyaW5nID0gbmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe1xuICAgICAgICAgICAgaGV4OiBcIjAwXCIgKyBzZWNvbmRfc2VxdWVuY2UuZ2V0RW5jb2RlZEhleCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNlcSA9IG5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe1xuICAgICAgICAgICAgYXJyYXk6IFtmaXJzdF9zZXF1ZW5jZSwgYml0X3N0cmluZ10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VxLmdldEVuY29kZWRIZXgoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGJhc2U2NCAocGVtKSBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIERFUiBlbmNvZGVkIHJlcHJlc2VudGF0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXlCNjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0UHVibGljQmFzZUtleSgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHdyYXAgdGhlIHN0cmluZyBpbiBibG9jayBvZiB3aWR0aCBjaGFycy4gVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHJzYSBrZXlzIGlzIDY0XG4gICAgICogY2hhcmFjdGVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcgd2l0aG91dCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbd2lkdGg9NjRdIC0gdGhlIGxlbmd0aCB0aGUgc3RyaW5nIGhhcyB0byBiZSB3cmFwcGVkIGF0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS53b3Jkd3JhcCA9IGZ1bmN0aW9uIChzdHIsIHdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gd2lkdGggfHwgNjQ7XG4gICAgICAgIGlmICghc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWdleCA9IFwiKC57MSxcIiArIHdpZHRoICsgXCJ9KSggK3wkXFxuPyl8KC57MSxcIiArIHdpZHRoICsgXCJ9KVwiO1xuICAgICAgICByZXR1cm4gc3RyLm1hdGNoKFJlZ0V4cChyZWdleCwgXCJnXCIpKS5qb2luKFwiXFxuXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHBlbSBlbmNvZGVkIHByaXZhdGUga2V5XG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBlbSBlbmNvZGVkIHByaXZhdGUga2V5IHdpdGggaGVhZGVyL2Zvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBrZXkgPSBcIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cXG5cIjtcbiAgICAgICAga2V5ICs9IEpTRW5jcnlwdFJTQUtleS53b3Jkd3JhcCh0aGlzLmdldFByaXZhdGVCYXNlS2V5QjY0KCkpICsgXCJcXG5cIjtcbiAgICAgICAga2V5ICs9IFwiLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS1cIjtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBwZW0gZW5jb2RlZCBwdWJsaWMga2V5XG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBlbSBlbmNvZGVkIHB1YmxpYyBrZXkgd2l0aCBoZWFkZXIvZm9vdGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIga2V5ID0gXCItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxcblwiO1xuICAgICAgICBrZXkgKz0gSlNFbmNyeXB0UlNBS2V5LndvcmR3cmFwKHRoaXMuZ2V0UHVibGljQmFzZUtleUI2NCgpKSArIFwiXFxuXCI7XG4gICAgICAgIGtleSArPSBcIi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVwiO1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIG9iamVjdCBjb250YWlucyB0aGUgbmVjZXNzYXJ5IHBhcmFtZXRlcnMgdG8gcG9wdWxhdGUgdGhlIHJzYSBtb2R1bHVzXG4gICAgICogYW5kIHB1YmxpYyBleHBvbmVudCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqPXt9XSAtIEFuIG9iamVjdCB0aGF0IG1heSBjb250YWluIHRoZSB0d28gcHVibGljIGtleVxuICAgICAqIHBhcmFtZXRlcnNcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIG1vZHVsdXMgYW5kIHRoZSBwdWJsaWMgZXhwb25lbnRcbiAgICAgKiBwcm9wZXJ0aWVzIChuIGFuZCBlKVxuICAgICAqIEB0b2RvIGNoZWNrIGZvciB0eXBlcyBvZiBuIGFuZCBlLiBOIHNob3VsZCBiZSBhIHBhcnNlYWJsZSBiaWdJbnQgb2JqZWN0LCBFIHNob3VsZFxuICAgICAqIGJlIGEgcGFyc2VhYmxlIGludGVnZXIgbnVtYmVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBKU0VuY3J5cHRSU0FLZXkuaGFzUHVibGljS2V5UHJvcGVydHkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICAgICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShcIm5cIikgJiYgb2JqLmhhc093blByb3BlcnR5KFwiZVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBvYmplY3QgY29udGFpbnMgQUxMIHRoZSBwYXJhbWV0ZXJzIG9mIGFuIFJTQSBrZXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmo9e31dIC0gQW4gb2JqZWN0IHRoYXQgbWF5IGNvbnRhaW4gbmluZSByc2Ega2V5XG4gICAgICogcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgY29udGFpbnMgYWxsIHRoZSBwYXJhbWV0ZXJzIG5lZWRlZFxuICAgICAqIEB0b2RvIGNoZWNrIGZvciB0eXBlcyBvZiB0aGUgcGFyYW1ldGVycyBhbGwgdGhlIHBhcmFtZXRlcnMgYnV0IHRoZSBwdWJsaWMgZXhwb25lbnRcbiAgICAgKiBzaG91bGQgYmUgcGFyc2VhYmxlIGJpZ2ludCBvYmplY3RzLCB0aGUgcHVibGljIGV4cG9uZW50IHNob3VsZCBiZSBhIHBhcnNlYWJsZSBpbnRlZ2VyIG51bWJlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSlNFbmNyeXB0UlNBS2V5Lmhhc1ByaXZhdGVLZXlQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuICAgICAgICByZXR1cm4gKG9iai5oYXNPd25Qcm9wZXJ0eShcIm5cIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImVcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcInBcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcInFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRtcDFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImRtcTFcIikgJiZcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShcImNvZWZmXCIpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBwcm9wZXJ0aWVzIG9mIG9iaiBpbiB0aGUgY3VycmVudCByc2Egb2JqZWN0LiBPYmogc2hvdWxkIEFUIExFQVNUXG4gICAgICogaW5jbHVkZSB0aGUgbW9kdWx1cyBhbmQgcHVibGljIGV4cG9uZW50IChuLCBlKSBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgcnNhIHBhcmFtZXRlcnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEpTRW5jcnlwdFJTQUtleS5wcm90b3R5cGUucGFyc2VQcm9wZXJ0aWVzRnJvbSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdGhpcy5uID0gb2JqLm47XG4gICAgICAgIHRoaXMuZSA9IG9iai5lO1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KFwiZFwiKSkge1xuICAgICAgICAgICAgdGhpcy5kID0gb2JqLmQ7XG4gICAgICAgICAgICB0aGlzLnAgPSBvYmoucDtcbiAgICAgICAgICAgIHRoaXMucSA9IG9iai5xO1xuICAgICAgICAgICAgdGhpcy5kbXAxID0gb2JqLmRtcDE7XG4gICAgICAgICAgICB0aGlzLmRtcTEgPSBvYmouZG1xMTtcbiAgICAgICAgICAgIHRoaXMuY29lZmYgPSBvYmouY29lZmY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBKU0VuY3J5cHRSU0FLZXk7XG59KFJTQUtleSkpO1xuZXhwb3J0IHsgSlNFbmNyeXB0UlNBS2V5IH07XG4iLCJ2YXIgX2E7XG5pbXBvcnQgeyBiNjR0b2hleCwgaGV4MmI2NCB9IGZyb20gXCIuL2xpYi9qc2JuL2Jhc2U2NFwiO1xuaW1wb3J0IHsgSlNFbmNyeXB0UlNBS2V5IH0gZnJvbSBcIi4vSlNFbmNyeXB0UlNBS2V5XCI7XG52YXIgdmVyc2lvbiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKF9hID0gcHJvY2Vzcy5lbnYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ucG1fcGFja2FnZV92ZXJzaW9uXG4gICAgOiB1bmRlZmluZWQ7XG4vKipcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMgPSB7fV0gLSBBbiBvYmplY3QgdG8gY3VzdG9taXplIEpTRW5jcnlwdCBiZWhhdmlvdXJcbiAqIHBvc3NpYmxlIHBhcmFtZXRlcnMgYXJlOlxuICogLSBkZWZhdWx0X2tleV9zaXplICAgICAgICB7bnVtYmVyfSAgZGVmYXVsdDogMTAyNCB0aGUga2V5IHNpemUgaW4gYml0XG4gKiAtIGRlZmF1bHRfcHVibGljX2V4cG9uZW50IHtzdHJpbmd9ICBkZWZhdWx0OiAnMDEwMDAxJyB0aGUgaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHB1YmxpYyBleHBvbmVudFxuICogLSBsb2cgICAgICAgICAgICAgICAgICAgICB7Ym9vbGVhbn0gZGVmYXVsdDogZmFsc2Ugd2hldGhlciBsb2cgd2Fybi9lcnJvciBvciBub3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgSlNFbmNyeXB0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpTRW5jcnlwdChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmRlZmF1bHRfa2V5X3NpemUgPSBvcHRpb25zLmRlZmF1bHRfa2V5X3NpemVcbiAgICAgICAgICAgID8gcGFyc2VJbnQob3B0aW9ucy5kZWZhdWx0X2tleV9zaXplLCAxMClcbiAgICAgICAgICAgIDogMTAyNDtcbiAgICAgICAgdGhpcy5kZWZhdWx0X3B1YmxpY19leHBvbmVudCA9IG9wdGlvbnMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQgfHwgXCIwMTAwMDFcIjsgLy8gNjU1MzcgZGVmYXVsdCBvcGVuc3NsIHB1YmxpYyBleHBvbmVudCBmb3IgcnNhIGtleSB0eXBlXG4gICAgICAgIHRoaXMubG9nID0gb3B0aW9ucy5sb2cgfHwgZmFsc2U7XG4gICAgICAgIC8vIFRoZSBwcml2YXRlIGFuZCBwdWJsaWMga2V5LlxuICAgICAgICB0aGlzLmtleSA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBzZXQgdGhlIHJzYSBrZXkgcGFyYW1ldGVyIChvbmUgbWV0aG9kIGlzIGVub3VnaCB0byBzZXQgYm90aCB0aGUgcHVibGljXG4gICAgICogYW5kIHRoZSBwcml2YXRlIGtleSwgc2luY2UgdGhlIHByaXZhdGUga2V5IGNvbnRhaW5zIHRoZSBwdWJsaWMga2V5IHBhcmFtZW50ZXJzKVxuICAgICAqIExvZyBhIHdhcm5pbmcgaWYgbG9ncyBhcmUgZW5hYmxlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30ga2V5IHRoZSBwZW0gZW5jb2RlZCBzdHJpbmcgb3IgYW4gb2JqZWN0ICh3aXRoIG9yIHdpdGhvdXQgaGVhZGVyL2Zvb3RlcilcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5zZXRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmxvZyAmJiB0aGlzLmtleSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQSBrZXkgd2FzIGFscmVhZHkgc2V0LCBvdmVycmlkaW5nIGV4aXN0aW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleSA9IG5ldyBKU0VuY3J5cHRSU0FLZXkoa2V5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByb3h5IG1ldGhvZCBmb3Igc2V0S2V5LCBmb3IgYXBpIGNvbXBhdGliaWxpdHlcbiAgICAgKiBAc2VlIHNldEtleVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdmtleSkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGtleS5cbiAgICAgICAgdGhpcy5zZXRLZXkocHJpdmtleSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIHNldEtleSwgZm9yIGFwaSBjb21wYXRpYmlsaXR5XG4gICAgICogQHNlZSBzZXRLZXlcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHVia2V5KSB7XG4gICAgICAgIC8vIFNldHMgdGhlIHB1YmxpYyBrZXkuXG4gICAgICAgIHRoaXMuc2V0S2V5KHB1YmtleSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIFJTQUtleSBvYmplY3QncyBkZWNyeXB0LCBkZWNyeXB0IHRoZSBzdHJpbmcgdXNpbmcgdGhlIHByaXZhdGVcbiAgICAgKiBjb21wb25lbnRzIG9mIHRoZSByc2Ega2V5IG9iamVjdC4gTm90ZSB0aGF0IGlmIHRoZSBvYmplY3Qgd2FzIG5vdCBzZXQgd2lsbCBiZSBjcmVhdGVkXG4gICAgICogb24gdGhlIGZseSAoYnkgdGhlIGdldEtleSBtZXRob2QpIHVzaW5nIHRoZSBwYXJhbWV0ZXJzIHBhc3NlZCBpbiB0aGUgSlNFbmNyeXB0IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBiYXNlNjQgZW5jb2RlZCBjcnlwdGVkIHN0cmluZyB0byBkZWNyeXB0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgZGVjcnlwdGVkIHN0cmluZ1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZGVjcnlwdGVkIHN0cmluZy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEtleSgpLmRlY3J5cHQoYjY0dG9oZXgoc3RyKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByb3h5IG1ldGhvZCBmb3IgUlNBS2V5IG9iamVjdCdzIGVuY3J5cHQsIGVuY3J5cHQgdGhlIHN0cmluZyB1c2luZyB0aGUgcHVibGljXG4gICAgICogY29tcG9uZW50cyBvZiB0aGUgcnNhIGtleSBvYmplY3QuIE5vdGUgdGhhdCBpZiB0aGUgb2JqZWN0IHdhcyBub3Qgc2V0IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIG9uIHRoZSBmbHkgKGJ5IHRoZSBnZXRLZXkgbWV0aG9kKSB1c2luZyB0aGUgcGFyYW1ldGVycyBwYXNzZWQgaW4gdGhlIEpTRW5jcnlwdCBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byBlbmNyeXB0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgZW5jcnlwdGVkIHN0cmluZyBlbmNvZGVkIGluIGJhc2U2NFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZW5jcnlwdGVkIHN0cmluZy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0S2V5KCkuZW5jcnlwdChzdHIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJveHkgbWV0aG9kIGZvciBSU0FLZXkgb2JqZWN0J3Mgc2lnbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gc2lnblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpZ2VzdE1ldGhvZCBoYXNoIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkaWdlc3ROYW1lIHRoZSBuYW1lIG9mIHRoZSBoYXNoIGFsZ29yaXRobVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHNpZ25hdHVyZSBlbmNvZGVkIGluIGJhc2U2NFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoc3RyLCBkaWdlc3RNZXRob2QsIGRpZ2VzdE5hbWUpIHtcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBSU0Egc2lnbmF0dXJlIG9mICdzdHInIGluICdoZXgnIGZvcm1hdC5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBoZXgyYjY0KHRoaXMuZ2V0S2V5KCkuc2lnbihzdHIsIGRpZ2VzdE1ldGhvZCwgZGlnZXN0TmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm94eSBtZXRob2QgZm9yIFJTQUtleSBvYmplY3QncyB2ZXJpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIHZlcmlmeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmUgdGhlIHNpZ25hdHVyZSBlbmNvZGVkIGluIGJhc2U2NCB0byBjb21wYXJlIHRoZSBzdHJpbmcgdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBkaWdlc3RNZXRob2QgaGFzaCBtZXRob2RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBkYXRhIGFuZCBzaWduYXR1cmUgbWF0Y2hcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiAoc3RyLCBzaWduYXR1cmUsIGRpZ2VzdE1ldGhvZCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIGRlY3J5cHRlZCAnZGlnZXN0JyBvZiB0aGUgc2lnbmF0dXJlLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkudmVyaWZ5KHN0ciwgYjY0dG9oZXgoc2lnbmF0dXJlKSwgZGlnZXN0TWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0dGVyIGZvciB0aGUgY3VycmVudCBKU0VuY3J5cHRSU0FLZXkgb2JqZWN0LiBJZiBpdCBkb2Vzbid0IGV4aXN0cyBhIG5ldyBvYmplY3RcbiAgICAgKiB3aWxsIGJlIGNyZWF0ZWQgYW5kIHJldHVybmVkXG4gICAgICogQHBhcmFtIHtjYWxsYmFja30gW2NiXSB0aGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGlmIHdlIHdhbnQgdGhlIGtleSB0byBiZSBnZW5lcmF0ZWRcbiAgICAgKiBpbiBhbiBhc3luYyBmYXNoaW9uXG4gICAgICogQHJldHVybnMge0pTRW5jcnlwdFJTQUtleX0gdGhlIEpTRW5jcnlwdFJTQUtleSBvYmplY3RcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgLy8gT25seSBjcmVhdGUgbmV3IGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICAgICAgICBpZiAoIXRoaXMua2V5KSB7XG4gICAgICAgICAgICAvLyBHZXQgYSBuZXcgcHJpdmF0ZSBrZXkuXG4gICAgICAgICAgICB0aGlzLmtleSA9IG5ldyBKU0VuY3J5cHRSU0FLZXkoKTtcbiAgICAgICAgICAgIGlmIChjYiAmJiB7fS50b1N0cmluZy5jYWxsKGNiKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXkuZ2VuZXJhdGVBc3luYyh0aGlzLmRlZmF1bHRfa2V5X3NpemUsIHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQsIGNiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSB0aGUga2V5LlxuICAgICAgICAgICAgdGhpcy5rZXkuZ2VuZXJhdGUodGhpcy5kZWZhdWx0X2tleV9zaXplLCB0aGlzLmRlZmF1bHRfcHVibGljX2V4cG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rZXk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpdmF0ZSBrZXlcbiAgICAgKiBJZiB0aGUga2V5IGRvZXNuJ3QgZXhpc3RzIGEgbmV3IGtleSB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpdmF0ZSBrZXkgV0lUSCBoZWFkZXIgYW5kIGZvb3RlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBKU0VuY3J5cHQucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHJpdmF0ZUtleSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByaXZhdGUga2V5XG4gICAgICogSWYgdGhlIGtleSBkb2Vzbid0IGV4aXN0cyBhIG5ldyBrZXkgd2lsbCBiZSBjcmVhdGVkXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcGVtIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByaXZhdGUga2V5IFdJVEhPVVQgaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQcml2YXRlS2V5QjY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHByaXZhdGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBrZXkuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEtleSgpLmdldFByaXZhdGVCYXNlS2V5QjY0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleVxuICAgICAqIElmIHRoZSBrZXkgZG9lc24ndCBleGlzdHMgYSBuZXcga2V5IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHBlbSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwdWJsaWMga2V5IFdJVEggaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHVibGljS2V5KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZW0gZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleVxuICAgICAqIElmIHRoZSBrZXkgZG9lc24ndCBleGlzdHMgYSBuZXcga2V5IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHBlbSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwdWJsaWMga2V5IFdJVEhPVVQgaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSlNFbmNyeXB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXlCNjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGtleS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHVibGljQmFzZUtleUI2NCgpO1xuICAgIH07XG4gICAgSlNFbmNyeXB0LnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHJldHVybiBKU0VuY3J5cHQ7XG59KCkpO1xuZXhwb3J0IHsgSlNFbmNyeXB0IH07XG4iLCJpbXBvcnQgeyBKU0VuY3J5cHQgfSBmcm9tICcuL0pTRW5jcnlwdCc7XG5leHBvcnQgeyBKU0VuY3J5cHQgfTtcbmV4cG9ydCBkZWZhdWx0IEpTRW5jcnlwdDtcbiIsImltcG9ydCBKc0VuY3J5cHQgZnJvbSAnanNlbmNyeXB0JztcclxuXHJcbmlmICh3aW5kb3cuJHJzYSA9PSB1bmRlZmluZWQpIHtcclxuICAgIHdpbmRvdy4kcnNhID0ge307XHJcbn1cclxuXHJcbndpbmRvdy4kcnNhLmVuY3J5cHQgPSBmdW5jdGlvbihkYXRhLCBwdWJsaWNLZXkgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wdWI7XHJcbn0pKCkpIHtcclxuICAgIGlmIChwdWJsaWNLZXkpIHtcclxuICAgICAgICBjb25zdCBlbmNyeXB0ID0gbmV3IEpzRW5jcnlwdCgpO1xyXG4gICAgICAgIGVuY3J5cHQuc2V0UHJpdmF0ZUtleShwdWJsaWNLZXkpO1xyXG4gICAgICAgIHJldHVybiBlbmNyeXB0LmVuY3J5cHQoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxud2luZG93LiRyc2EuZGVjcnlwdCA9IGZ1bmN0aW9uKGRhdGEsIHByaXZhdGVLZXkgPSAoKCkgPT4ge1xyXG4gICAgaWYgKHdpbmRvdy5yc2EgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+abtOaWsOiEmuacrCwg5re75YqgIHJzYSDlr4bpkqXnmoTphY3nva4nKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnJzYS5wcmk7XHJcbn0pKCkpIHtcclxuICAgIGlmIChwcml2YXRlS2V5KSB7XHJcbiAgICAgICAgY29uc3QganNlbmNyeXB0ID0gbmV3IEpzRW5jcnlwdCgpO1xyXG4gICAgICAgIGpzZW5jcnlwdC5zZXRQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xyXG4gICAgICAgIHJldHVybiBqc2VuY3J5cHQuZGVjcnlwdChkYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG53aW5kb3cuJHJzYS5kZWNyeXB0T2JqZWN0ID0gZnVuY3Rpb24oZGF0YSwgcHJpdmF0ZUtleSA9ICgoKSA9PiB7XHJcbiAgICBpZiAod2luZG93LnJzYSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhbGVydCgn6K+35pu05paw6ISa5pysLCDmt7vliqAgcnNhIOWvhumSpeeahOmFjee9ricpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB3aW5kb3cucnNhLnByaTtcclxufSkoKSkge1xyXG4gICAgcmV0dXJuIGRpc3BhdGNoKGRhdGEsIHByaXZhdGVLZXkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwYXRjaChvYmosIHByaXZhdGVLZXkpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVPYmplY3Qob2JqLCBwcml2YXRlS2V5KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBvYmouZGVjcnlwdChwcml2YXRlS2V5KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzb2x2ZU9iamVjdChvYmosIHByaXZhdGVLZXkpIHtcclxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhvYmopKSB7XHJcbiAgICAgICAgb2JqW2tleV0gPSBkaXNwYXRjaChvYmpba2V5XSwgcHJpdmF0ZUtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqO1xyXG59IiwiaW1wb3J0ICcuL2RlY2xhcmUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2luZG93LiRyc2E7IiwiY29uc3QgQ29udGV4dE1lbnVVdGlsczogRGluZ2xqQ29udGV4dE1lbnUgPSB7fSBhcyBhbnk7XHJcblxyXG5Db250ZXh0TWVudVV0aWxzLnJlZ2lzdFJpZ2h0Q2xpY2sgPSBmdW5jdGlvbih0YXJnZXQ6IEhUTUxFbGVtZW50LCBuYW1lOiBzdHJpbmcsIGNvbmZpZzogQ29udGV4dE1lbnVQcm9wKTogdm9pZCB7XHJcbiAgICBjb25zdCBpZCA9IGByaWdodC1jbGljay1tZW51LSR7IG5hbWUgfWA7XHJcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGZvciAobGV0IG1lbnUgb2Ygd2luZG93LmJ5Q2xhc3MoJ3JpZ2h0LW1lbnUnKSkge1xyXG4gICAgICAgICAgICBtZW51LnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgbWVudSA9IGJ1aWxkTWVudShjb25maWcpO1xyXG4gICAgICAgIG1lbnUuaWQgPSBpZDtcclxuICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ3JpZ2h0LW1lbnUnKTtcclxuICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSBlLmNsaWVudFggKyAncHgnO1xyXG4gICAgICAgIG1lbnUuc3R5bGUudG9wID0gZS5jbGllbnRZICsgJ3B4JztcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lbnUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yIChsZXQgbWVudSBvZiB3aW5kb3cuYnlDbGFzcygncmlnaHQtbWVudScpKSB7XHJcbiAgICAgICAgbWVudS5yZW1vdmUoKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5mdW5jdGlvbiBidWlsZE1lbnUoY29uZmlnOiBDb250ZXh0TWVudVByb3ApIHtcclxuICAgIGxldCByaWdodENsaWNrTWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjb25maWcuaXRlbXMpIHtcclxuICAgICAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0uaXNEaXNwbGF5KCkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWxlbWVudC5pZCA9IGl0ZW0uaWQ7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyaWdodC1jbGljay1pdGVtJyk7XHJcbiAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSBpdGVtLmxhYmVsO1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW0uZXZlbnQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByaWdodENsaWNrTWVudS5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiByaWdodENsaWNrTWVudTtcclxufVxyXG5cclxud2luZG93LiRtZW51ID0gQ29udGV4dE1lbnVVdGlscztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRleHRNZW51VXRpbHM7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIFJlZ2lzdHJ5IH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcblxyXG4vKiog5a2X5q61ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBGaWVsZCh0YXJnZXQ6IEFic3RyYWN0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XHJcbiAgICBSZWdpc3RyeS5nZXRDb21wb25lbnQoKS5tZXRhLmZpZWxkTmFtZXMucHVzaChwcm9wZXJ0eUtleSk7XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgUmVnaXN0cnkgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuXHJcbi8qKiDmma7pgJrmlrnms5UgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIE1ldGhvZCh0YXJnZXQ6IEFic3RyYWN0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcclxuICAgIFJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLm1ldGEubWV0aG9kTmFtZXMucHVzaChwcm9wZXJ0eUtleSk7XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgUmVnaXN0cnkgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuXHJcbi8qKiDkuIrnuqfkvKDlhaXnmoTlj4LmlbAgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFByb3AodHlwZTogYW55LCBkZWY6IGFueSwgcmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IEFic3RyYWN0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgUmVnaXN0cnkuZ2V0Q29tcG9uZW50KCkubWV0YS5wcm9wc1twcm9wZXJ0eUtleV0gPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGRlZixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBSZWdpc3RyeSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRlbXBsYXRlKHRhcmdldDogQWJzdHJhY3RDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcclxuICAgIFJlZ2lzdHJ5LmdldENvbXBvbmVudCgpLm1ldGEudGVtcGxhdGUgPSBwcm9wZXJ0eUtleTtcclxufSIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBSZWdpc3RyeSwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5cclxuLyoqIOaMgui9veWQjuS6i+S7tiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gTW91bnRlZChjb21wb25lbnRDbGFzczogYW55LCB0eXBlOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBBYnN0cmFjdENvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gUmVnaXN0cnkuZ2V0Q29tcG9uZW50KHR5cGUpO1xyXG4gICAgICAgIGNvbXBvbmVudC5tZXRhLmhvY2tNb3VudGVkID0gcHJvcGVydHlLZXk7XHJcbiAgICAgICAgY29tcG9uZW50Lm1ldGEuY2xhenogPSBjb21wb25lbnRDbGFzcztcclxuICAgICAgICBjb21wb25lbnQubmFtZSA9IHR5cGU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgUmVnaXN0cnkgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuXHJcbi8qKiDorqHnrpflsZ7mgKcgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIENvbXB1dGUoZnVuYzogRnVuY3Rpb24pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IEFic3RyYWN0Q29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgUmVnaXN0cnkuZ2V0Q29tcG9uZW50KCkubWV0YS5jb21wdXRlSW5mb3MucHVzaCh7XHJcbiAgICAgICAgICAgIGtleTogcHJvcGVydHlLZXksXHJcbiAgICAgICAgICAgIGZ1bmM6IGZ1bmNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImVudW0gTmF2VHlwZSB7XHJcbiAgICBMaW5lICAgICAgICA9ICdsaW5lJyxcclxuICAgIFN0ZXAgICAgICAgID0gJ3N0ZXAnLFxyXG4gICAgSGlzdG9yeSAgICAgPSAnaGlzdG9yeScsXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5hdlR5cGU7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuaW1wb3J0IHsgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ1dHRvblggZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcblxyXG4gICAgQE1vdW50ZWQoQnV0dG9uWCwgQ29tcG9uZW50VHlwZS5CdXR0b25YKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHRlbXBsYXRlOiBzdHJpbmcgPSBgPGRpdiA6Y2xhc3M9XCJnZXRDbGFzcygpXCIgOmlkPVwidmlkXCIgOnN0eWxlPVwiZ2V0U3R5bGUoKVwiIEBjbGljaz1cIiRlbWl0KCdvbi1jbGljaycpXCI+XHJcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9kaXY+YDtcclxuICAgIFxyXG4gICAgQFByb3AoU3RyaW5nLCAnbm9ybWFsJylcclxuICAgIHhTaXplOiAnc21hbGwnIHwgJ25vcm1hbCcgfCAnYmlnJztcclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICdwcmltYXJ5JylcclxuICAgIHhUeXBlOiAncHJpbWFyeScgfCAnd2FybicgfCAnZXJyb3InIHwgJ2NhbmNlbCc7XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgZ2V0Q2xhc3MoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnZGluZ2xqLXYtYnRuJzogdHJ1ZSwgXHJcbiAgICAgICAgICAgICdkaW5nbGotdi1jdGwnOiB0cnVlLFxyXG4gICAgICAgICAgICAncHJpbWFyeSc6IHRoaXMueFR5cGUuZXF1YWxzSWdub3JlQ2FzZSgncHJpbWFyeScpLFxyXG4gICAgICAgICAgICAnY2FuY2VsJzogdGhpcy54VHlwZS5lcXVhbHNJZ25vcmVDYXNlKCdjYW5jZWwnKSxcclxuICAgICAgICAgICAgJ3dhcm4nOiB0aGlzLnhUeXBlLmVxdWFsc0lnbm9yZUNhc2UoJ3dhcm4nKSxcclxuICAgICAgICAgICAgJ2Vycm9yJzogdGhpcy54VHlwZS5lcXVhbHNJZ25vcmVDYXNlKCdlcnJvcicpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnLS1oZWlnaHQnOiB0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ3NtYWxsJykgPyAnMjRweCcgOiAodGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICcyOHB4JyA6ICczMnB4JyksXHJcbiAgICAgICAgICAgICctLW1hcmdpbi10Yic6IHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnc21hbGwnKSA/ICcxcHgnIDogKHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnbm9ybWFsJykgPyAnMnB4JyA6ICczcHgnKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcbmltcG9ydCB7IEZpZWxkLCBNZXRob2QsIE1vdW50ZWQsIFByb3AsIFRlbXBsYXRlIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRYIGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQge1xyXG5cclxuICAgIEBNb3VudGVkKElucHV0WCwgQ29tcG9uZW50VHlwZS5JbnB1dFgpXHJcbiAgICBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZCA9IHdpbmRvdy51dWlkKHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdtb3VudGVkJywgdGhpcy52aWQpO1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2Rpbmdsai12LWlucHV0LXRleHQ6OmNsZWFyJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2Rpbmdsai12LWlucHV0LXRleHQ6OmZvY3VzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cuYnlJZCh0aGlzLnZpZCkuY2hpbGRyZW5bMF0uZm9jdXMoKTtcclxuICAgICAgICB9LCB0aGlzLnZpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlXHJcbiAgICBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtY3RsIGRpbmdsai12LWlucHV0IHRleHRcIiA6Y2FwdGlvbj1cImNhcHRpb25cIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCIgOmlkPVwidmlkXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOnBsYWNlaG9sZGVyPVwicGxhY2Vob2xkZXJcIiB2LW1vZGVsPVwidmFsdWVcIiBAa2V5dXAuZW50ZXI9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2VudGVyJylcIiBAaW5wdXQ9XCJzZXRWYWx1ZSh2YWx1ZSwgJ2lucHV0JylcIiBAYmx1cj1cInNldFZhbHVlKHZhbHVlLCAnYmx1cicpXCIgQGNoYW5nZT1cInNldFZhbHVlKHZhbHVlLCAnY2hhbmdlJylcIi8+XHJcbiAgICAgICAgPGltZyA6c3JjPVwiZ2V0SW1nKCcvc3JjL2Fzc2V0cy9pbWcvZGVsZXRlLnBuZycpXCIgY2xhc3M9XCJjbGVhblwiIEBjbGljaz1cInNldFZhbHVlKCcnLCAnY2hhbmdlJylcIi8+XHJcbiAgICA8L2Rpdj5gXHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgdmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBnZXRTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgJy0taGVpZ2h0JzogdGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzI0cHgnIDogKHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnbm9ybWFsJykgPyAnMjhweCcgOiAnMzJweCcpLFxyXG4gICAgICAgICAgICAnLS13aWR0aCc6IHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnc21hbGwnKSA/ICcxODBweCcgOiAodGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICcyMDBweCcgOiAnMjIwcHgnKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIHNldFZhbHVlKHZhbHVlOiBzdHJpbmcsIGV2ZW50TmFtZTogJ2lucHV0JyB8ICdjaGFuZ2UnIHwgJ2JsdXInIHwgJ2VudGVyJyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIHZhbHVlKTtcclxuICAgICAgICBpZiAoZXZlbnROYW1lID09ICdpbnB1dCcpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KGBvbi1pbnB1dGAsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PSAnYmx1cicpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdvbi1ibHVyJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ29uLW92ZXInLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gJ2VudGVyJykge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ29uLWVudGVyJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ29uLW92ZXInLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJ25vcm1hbCcpXHJcbiAgICBwdWJsaWMgeFNpemU6ICdzbWFsbCcgfCAnbm9ybWFsJyB8ICdiaWcnO1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJycpXHJcbiAgICBwdWJsaWMgY2FwdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJycpXHJcbiAgICBwdWJsaWMgcGxhY2Vob2xkZXI6IHN0cmluZztcclxufSIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcbmltcG9ydCB7IEZpZWxkLCBNZXRob2QsIE1vdW50ZWQsIFByb3AsIFRlbXBsYXRlIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3dpdGNoWCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChTd2l0Y2hYLCBDb21wb25lbnRUeXBlLlN3aXRjaFgpXHJcbiAgICBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZCA9IHdpbmRvdy51dWlkKHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdtb3VudGVkJywgdGhpcy52aWQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBUZW1wbGF0ZVxyXG4gICAgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPGRpdiBjbGFzcz1cImRpbmdsai12LXN3aXRjaFwiIEBjbGljaz1cIm9uY2xpY2tlZFwiIDpzdHlsZT1cImdldFN0eWxlKClcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtc3dpdGNoLXByZVwiPlxyXG4gICAgICAgICAgICB7eyBwcmVUZXh0IH19XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiA6Y2xhc3M9XCJnZXRDbGFzcygpXCI+XHJcbiAgICAgICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXN3aXRjaC1wb3N0XCI+XHJcbiAgICAgICAgICAgIHt7IHBvc3RUZXh0IH19XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBnZXRTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICctLXdpZHRoJzogdGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzMwcHgnIDogKHRoaXMueFNpemUuZXF1YWxzSWdub3JlQ2FzZSgnbm9ybWFsJykgPyAnNDBweCcgOiAnNDBweCcpLFxyXG4gICAgICAgICAgICAnLS1oZWlnaHQnOiB0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ3NtYWxsJykgPyAnMjRweCcgOiAodGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICcyOHB4JyA6ICczMnB4JyksXHJcbiAgICAgICAgICAgICctLXBhZGRpbmctdGInOiB0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ3NtYWxsJykgPyAnNXB4JyA6ICh0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ25vcm1hbCcpID8gJzNweCcgOiAnOHB4JyksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZ2V0Q2xhc3MoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnZGluZ2xqLXYtc3dpdGNoLWJ0bic6IHRydWUsXHJcbiAgICAgICAgICAgICdhY3RpdmUnOiB0aGlzLmFjdGl2ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIG9uY2xpY2tlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9ICF0aGlzLmFjdGl2ZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIHRoaXMuYWN0aXZlKTtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zdFRleHQpIHtcclxuICAgICAgICAgICAgICAgIGDlt7LliIfmjaLoh7M6ICR7IHRoaXMucG9zdFRleHQgfWAuaW5mbygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJlVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgYOW3suWIh+aNouiHszogJHsgdGhpcy5wcmVUZXh0IH1gLmluZm8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICdub3JtYWwnKVxyXG4gICAgcHVibGljIHhTaXplOiAnc21hbGwnIHwgJ25vcm1hbCcgfCAnYmlnJztcclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICcnKVxyXG4gICAgcHVibGljIHByZVRleHQ6IHN0cmluZztcclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICcnKVxyXG4gICAgcHVibGljIHBvc3RUZXh0OiBzdHJpbmc7XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5pbXBvcnQgeyBGaWVsZCwgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbWJvWDxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChDb21ib1gsIENvbXBvbmVudFR5cGUuQ29tYm9YKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jdGwgZGluZ2xqLXYtaW5wdXQgY29tYm9cIiA6c3R5bGU9XCJnZXRTdHlsZSgpXCIgOmNhcHRpb249XCJjYXB0aW9uXCIgOmlkPVwidmlkXCI+XHJcbiAgICAgICAgPGlucHV0IDpwbGFjZWhvbGRlcj1cInBsYWNlaG9sZGVyXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJsaXN0LmluY2x1ZGVzSWdub3JlQ2FzZSh2YWx1ZSkgPyBnZXRWYWx1ZSh2YWx1ZSkgOiAnJ1wiLz5cclxuICAgICAgICA8aW1nIDpzcmM9XCJnZXRJbWcoJy9zcmMvYXNzZXRzL2ltZy9kZWxldGUucG5nJylcIiBjbGFzcz1cImNsZWFuXCIgQGNsaWNrPVwic2V0VmFsdWUoJycpXCIvPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jb21iby1zZWxlY3Rpb25zXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jb21iby1zZWxlY3Rpb25cIiB2LWZvcj1cIml0ZW0gaW4gbGlzdFwiIEBjbGljaz1cInNldFZhbHVlKGl0ZW0pXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBnZXRDYXB0aW9uKGl0ZW0pIH19XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyB2YWx1ZTogVCA9IG51bGw7XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIHNldFZhbHVlKHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGdldFN0eWxlKCk6IG9iamVjdCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAnLS1oZWlnaHQnOiB0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ3NtYWxsJykgPyAnMjRweCcgOiAodGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdub3JtYWwnKSA/ICcyOHB4JyA6ICczMnB4JyksXHJcbiAgICAgICAgICAgICctLXdpZHRoJzogdGhpcy54U2l6ZS5lcXVhbHNJZ25vcmVDYXNlKCdzbWFsbCcpID8gJzE4MHB4JyA6ICh0aGlzLnhTaXplLmVxdWFsc0lnbm9yZUNhc2UoJ25vcm1hbCcpID8gJzIwMHB4JyA6ICcyMjBweCcpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6KaB5pi+56S655qE5pWw5o2uICovXHJcbiAgICBAUHJvcChBcnJheTxUPiwgW10pXHJcbiAgICBwdWJsaWMgbGlzdDogQXJyYXk8VD47XHJcblxyXG4gICAgLyoqIOWkp+WwjyAqL1xyXG4gICAgQFByb3AoU3RyaW5nLCAnbm9ybWFsJylcclxuICAgIHB1YmxpYyB4U2l6ZTogJ3NtYWxsJyB8ICdub3JtYWwnIHwgJ2JpZyc7XHJcblxyXG4gICAgLyoqIOaOp+S7tuWQjeensCAqL1xyXG4gICAgQFByb3AoU3RyaW5nLCAnJylcclxuICAgIHB1YmxpYyBjYXB0aW9uOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIOWNoOS9jeespiAqL1xyXG4gICAgQFByb3AoU3RyaW5nLCAnJylcclxuICAgIHB1YmxpYyBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIC8qKiDojrflj5blhYPntKDopoHmmL7npLrnmoTlhoXlrrksIOm7mOiupOaYvuekuuWFg+e0oOacrOi6qyAqL1xyXG4gICAgQFByb3AoRnVuY3Rpb24sIChpdGVtOiBUKSA9PiBpdGVtKVxyXG4gICAgcHVibGljIGdldENhcHRpb246IEZ1bmN0aW9uO1xyXG5cclxuICAgIC8qKiDojrflj5blhYPntKDnmoTlgLwsIOm7mOiupOWAvOWwseaYr+WFg+e0oOacrOi6qyAqL1xyXG4gICAgQFByb3AoRnVuY3Rpb24sIChpdGVtOiBUKSA9PiBpdGVtKVxyXG4gICAgcHVibGljIGdldFZhbHVlOiBGdW5jdGlvbjtcclxuXHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5pbXBvcnQgeyBDb21wdXRlLCBGaWVsZCwgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5hdmlnYXRvclg8VD4gZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcblxyXG4gICAgQE1vdW50ZWQoTmF2aWdhdG9yWCwgQ29tcG9uZW50VHlwZS5OYXZpZ2F0b3JYKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgICAgICBpZiAodGhpcy5kZWZhdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmRlZmF1bHQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5saXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmxpc3RbMF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgaWQ9XCJkaW5nbGotdi1uYXZpZ2F0b3JcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtbmF2aWdhdG9yLWl0ZW1cIiBcclxuICAgICAgICAgICAgdi1mb3I9XCJpdGVtIGluIGxpc3RcIiBcclxuICAgICAgICAgICAgQGNsaWNrPVwic2V0VmFsdWUoaXRlbSlcIlxyXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB2YWxpZEl0ZW0gPT0gaXRlbSB9XCI+XHJcbiAgICAgICAgICAgIHt7IGdldENhcHRpb24oaXRlbSkgfX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgdmFsdWU6IFQgPSBudWxsO1xyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdvbi1jaGFuZ2UnLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBDb21wdXRlKGZ1bmN0aW9uKCk6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxpc3QuaW5jbHVkZXNJZ25vcmVDYXNlKHRoaXMudmFsdWUpICYmIHRoaXMubGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMubGlzdFswXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5saXN0WzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIHZhbGlkSXRlbTogVDtcclxuXHJcbiAgICAvKiog6KaB5pi+56S655qE5pWw5o2uICovXHJcbiAgICBAUHJvcChBcnJheTxUPiwgW10pXHJcbiAgICBwdWJsaWMgbGlzdDogQXJyYXk8VD47XHJcblxyXG4gICAgQFByb3AoT2JqZWN0LCBudWxsKVxyXG4gICAgcHVibGljIGRlZmF1bHQ6IFQ7XHJcblxyXG4gICAgLyoqIOiOt+WPluWFg+e0oOimgeaYvuekuueahOWGheWuuSwg6buY6K6k5pi+56S65YWD57Sg5pys6LqrICovXHJcbiAgICBAUHJvcChGdW5jdGlvbiwgKGl0ZW06IFQpID0+IGl0ZW0pXHJcbiAgICBwdWJsaWMgZ2V0Q2FwdGlvbjogRnVuY3Rpb247XHJcblxyXG59IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuaW1wb3J0IHsgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNjcm9sbGVyWSBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChTY3JvbGxlclksIENvbXBvbmVudFR5cGUuU2Nyb2xsZXJZKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi1jb2x1bW4tc2Nyb2xsXCIgOmlkPVwidmlkXCIgOnN0eWxlPVwiZ2V0U3R5bGUoKVwiPlxyXG4gICAgICAgIDxzbG90Pjwvc2xvdD5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQFByb3AoTnVtYmVyLCAwKVxyXG4gICAgcHVibGljIHNpemU6IG51bWJlcjtcclxuXHJcbiAgICBAUHJvcChOdW1iZXIsIDApXHJcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcclxuICAgIFxyXG4gICAgQE1ldGhvZFxyXG4gICAgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAndG9wJzogYC0keyAodGhpcy5pbmRleCA+PSAwICYmIHRoaXMuaW5kZXggPCB0aGlzLnNpemUpID8gdGhpcy5pbmRleCA6IDAgfTAwJWAsXHJcbiAgICAgICAgICAgICdoZWlnaHQnOiBgJHsgdGhpcy5zaXplIH0wMCVgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIEVtaXRQYXJhIH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgTW91bnRlZCwgVGVtcGxhdGUsIFByb3AsIEZpZWxkLCBNZXRob2QgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOYXZpZ2F0b3JWaWV3PFQ+IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQge1xyXG5cclxuICAgIEBNb3VudGVkKE5hdmlnYXRvclZpZXcsIENvbXBvbmVudFR5cGUuTmF2aWdhdG9yVmlldylcclxuICAgIHB1YmxpYyBtb3VudGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlkID0gd2luZG93LnV1aWQodGhpcy5uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi1uYXZpZ2F0b3Itdmlld1wiPlxyXG4gICAgICAgIDxpLW5hdmlnYXRvciBzdHlsZT1cIm1hcmdpbi1yaWdodDogMTBweFwiIDpsaXN0PVwibGlzdFwiIDpnZXQtY2FwdGlvbj1cImdldENhcHRpb25cIiBAb24tY2hhbmdlPVwiY2hhbmdlZFwiPlxyXG4gICAgICAgIDwvaS1uYXZpZ2F0b3I+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LW5hdmlnYXRvci1yaWdodFwiPlxyXG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiYmVmb3JlXCI+PC9zbG90PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtbmF2aWdhdG9yLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxpLXNjcm9sbGVyLXkgOmluZGV4PVwibGlzdC5pbmRleE9mKGFjdGl2ZSlcIiA6c2l6ZT1cImxpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImNvbnRlbnRcIj48L3Nsb3Q+XHJcbiAgICAgICAgICAgICAgICA8L2ktc2Nyb2xsZXIteT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhZnRlclwiPjwvc2xvdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgYWN0aXZlOiBUID0gbnVsbDtcclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgY2hhbmdlZChpdGVtOiBFbWl0UGFyYSkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gaXRlbS52YWx1ZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIEBQcm9wKEFycmF5PFQ+LCBbXSwgdHJ1ZSlcclxuICAgIHB1YmxpYyBsaXN0OiBBcnJheTxUPjtcclxuXHJcbiAgICAvKiog6I635Y+W5YWD57Sg6KaB5pi+56S655qE5YaF5a65LCDpu5jorqTmmL7npLrlhYPntKDmnKzouqsgKi9cclxuICAgIEBQcm9wKEZ1bmN0aW9uLCAoaXRlbTogVCkgPT4gaXRlbSlcclxuICAgIHB1YmxpYyBnZXRDYXB0aW9uOiBGdW5jdGlvbjtcclxuXHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5pbXBvcnQgeyBDb21wdXRlLCBGaWVsZCwgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYlBhbmVsWDxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChUYWJQYW5lbFgsIENvbXBvbmVudFR5cGUuVGFiUGFuZWxYKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmxpc3QpICYmIHRoaXMubGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tlZCh0aGlzLmxpc3RbMF0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiog5LiL5LiA5LiqIFRhYiDpobXkuovku7YgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCd0YWItcGFuZWw6bmV4dCcsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9ICh0aGlzLmluZGV4ICsgMSArIHRoaXMubGlzdC5sZW5ndGgpICUgdGhpcy5saXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5jbGlja2VkKHRoaXMubGlzdFtuZXh0XSwgbmV4dCk7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ3RhYi1wYW5lbDp0bycsICh0bzogVCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmxpc3QuZmlsdGVyKGl0ZW0gPT4gSlNPTi5zdHJpbmdpZnkoaXRlbSkgPT0gSlNPTi5zdHJpbmdpZnkodG8pKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrZWQocmVzdWx0WzBdLCB0aGlzLmxpc3QuaW5kZXhPZihyZXN1bHRbMF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi10YWItcGFuZWxcIiA6aWQ9XCJ2aWRcIiB2LWlmPVwibGlzdC5sZW5ndGggPiAwXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYnBhbmVsLXRpdGxlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi10YWItZmxvYXRcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiB2LWZvcj1cIihpdGVtLCBpZHgpIGluIGxpc3RcIiA6Y2xhc3M9XCJnZXRDbGFzcyhpdGVtKVwiIDppZD1cImdldElkKGlkeClcIiBAY2xpY2s9XCJjbGlja2VkKGl0ZW0sIGlkeClcIj5cclxuICAgICAgICAgICAgICAgIHt7IGdldENhcHRpb24oaXRlbSkgfX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYnBhbmVsLXZpZXdcIj5cclxuICAgICAgICAgICAgPHNsb3QgY2xhc3M9XCJ0YWItcGFuZWwtY29udGVudFwiPnt7IGluZGV4IH19PC9zbG90PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IHYtZWxzZT5cclxuICAgICAgICA8aDE+5pyq5om+5Yiw5pWw5o2uPC9oMT5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgdmFsdWU6IFQgPSBudWxsO1xyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBnZXRDbGFzcyhpdGVtOiBUKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnZGluZ2xqLXYtdGFicGFuZWwtaXRlbSc6IHRydWUsXHJcbiAgICAgICAgICAgICdhY3RpdmUnOiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlKSA9PSBKU09OLnN0cmluZ2lmeShpdGVtKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBnZXRJZChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYCR7IHRoaXMudmlkIH0tJHsgaW5kZXggfWA7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGNsaWNrZWQoaXRlbTogVCwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmIChpdGVtID09IHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlID0gaXRlbTtcclxuICAgICAgICB0aGlzLmVtaXQoJ29uLWNoYW5nZScsIGl0ZW0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmbG9hdEVsZW1lbnQgPSB3aW5kb3cucXVlcnkoYCMkeyB0aGlzLnZpZCB9IC5kaW5nbGotdi10YWItZmxvYXRgKVswXTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSB3aW5kb3cuYnlJZCh0aGlzLmdldElkKGluZGV4KSk7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmbG9hdEVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHsgZWxlbWVudC5vZmZzZXRXaWR0aCB9cHhgO1xyXG4gICAgICAgICAgICAgICAgZmxvYXRFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHsgZWxlbWVudC5vZmZzZXRMZWZ0IH1weGA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MCk7XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXB1dGUoZnVuY3Rpb24oKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoIXRoaXMubGlzdC5pbmNsdWRlc0lnbm9yZUNhc2UodGhpcy52YWx1ZSkgJiYgdGhpcy5saXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jbGlja2VkKHRoaXMubGlzdFswXSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3QuaW5kZXhPZih0aGlzLnZhbHVlKTtcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICBAUHJvcChBcnJheTxUPiwgW10sIHRydWUpXHJcbiAgICBwdWJsaWMgbGlzdDogQXJyYXk8VD47XHJcblxyXG4gICAgQFByb3AoRnVuY3Rpb24sIChpdGVtOiBUKTogYW55ID0+IGl0ZW0pXHJcbiAgICBwdWJsaWMgZ2V0Q2FwdGlvbjogRnVuY3Rpb247XHJcblxyXG59IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUgfSBmcm9tIFwiY29yZS9lbnRpdHlcIjtcclxuaW1wb3J0IHsgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNjcm9sbGVyWCBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChTY3JvbGxlclgsIENvbXBvbmVudFR5cGUuU2Nyb2xsZXJYKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi1yb3ctc2Nyb2xsXCIgOmlkPVwidmlkXCIgOnN0eWxlPVwiZ2V0U3R5bGUoKVwiPlxyXG4gICAgICAgIDxzbG90Pjwvc2xvdD5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQFByb3AoTnVtYmVyLCAwKVxyXG4gICAgcHVibGljIHNpemU6IG51bWJlcjtcclxuXHJcbiAgICBAUHJvcChOdW1iZXIsIDApXHJcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcclxuICAgIFxyXG4gICAgQE1ldGhvZFxyXG4gICAgZ2V0U3R5bGUoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnbGVmdCc6IGAtJHsgKHRoaXMuaW5kZXggPj0gMCAmJiB0aGlzLmluZGV4IDwgdGhpcy5zaXplKSA/IHRoaXMuaW5kZXggOiAwIH0wMCVgLFxyXG4gICAgICAgICAgICAnd2lkdGgnOiBgJHsgdGhpcy5zaXplIH0wMCVgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIEVtaXRQYXJhIH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcbmltcG9ydCB7IENvbXB1dGUsIEZpZWxkLCBNZXRob2QsIE1vdW50ZWQsIFByb3AsIFRlbXBsYXRlIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFiVmlldzxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChUYWJWaWV3LCBDb21wb25lbnRUeXBlLlRhYlZpZXcpXHJcbiAgICBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZCA9IHdpbmRvdy51dWlkKHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdtb3VudGVkJywgdGhpcy52aWQpO1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ3RhYi12aWV3Om5leHQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHdpbmRvdy4kcXVldWUuc2VuZE1zZygndGFiLXBhbmVsOm5leHQnLCBudWxsLCB0aGlzLnRhYlBhbmVsSWQpO1xyXG4gICAgICAgIH0sIHRoaXMudmlkKTtcclxuICAgICAgICAvKiog5oyH5a6aIFRhYiDpobXkuovku7YgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCd0YWItdmlldzp0bycsICh0bzogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHdpbmRvdy4kcXVldWUuc2VuZE1zZygndGFiLXBhbmVsOnRvJywgdG8sIHRoaXMudGFiUGFuZWxJZCk7XHJcbiAgICAgICAgfSwgdGhpcy52aWQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBUZW1wbGF0ZVxyXG4gICAgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPGRpdiBjbGFzcz1cImRpbmdsai12LXRhYi1wYW5lbC12aWV3XCIgOmlkPVwidmlkXCI+XHJcbiAgICAgICAgPGktdGFiLXBhbmVsIDpsaXN0PVwibGlzdFwiIDpnZXQtY2FwdGlvbj1cImdldENhcHRpb25cIiBAb24tY2hhbmdlPVwiY2hhbmdlZFwiIEBtb3VudGVkPVwidGFiUGFuZWxMb2FkZWRcIj5cclxuICAgICAgICAgICAgPGktc2Nyb2xsZXIteCA6aW5kZXg9XCJpbmRleFwiIDpzaXplPVwibGlzdC5sZW5ndGhcIj5cclxuICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cclxuICAgICAgICAgICAgPC9pLXNjcm9sbGVyLXg+XHJcbiAgICAgICAgPC9pLXRhYi1wYW5lbD5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgdmFsdWU6IFQgPSBudWxsO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIHRhYlBhbmVsSWQ6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyB0YWJQYW5lbExvYWRlZChwYXJhbTogRW1pdFBhcmEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRhYlBhbmVsSWQgPSBwYXJhbS52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgY2hhbmdlZChwYXJhbTogRW1pdFBhcmEpIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSBwYXJhbS52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnb24tY2hhbmdlJywgcGFyYW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAQ29tcHV0ZShmdW5jdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3QuaW5kZXhPZklnbm9yZUNhc2UodGhpcy52YWx1ZSk7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgQFByb3AoQXJyYXk8VD4sIFtdLCB0cnVlKVxyXG4gICAgcHVibGljIGxpc3Q6IEFycmF5PFQ+O1xyXG5cclxuICAgIEBQcm9wKEZ1bmN0aW9uLCAoaXRlbTogVCk6IGFueSA9PiBpdGVtKVxyXG4gICAgcHVibGljIGdldENhcHRpb246IEZ1bmN0aW9uO1xyXG4gICAgXHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gXCJjb3JlL2VudGl0eVwiO1xyXG5pbXBvcnQgeyBDb21wdXRlLCBGaWVsZCwgTWV0aG9kLCBNb3VudGVkLCBQcm9wLCBUZW1wbGF0ZSB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlWDxUPiBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuXHJcbiAgICBATW91bnRlZChUYWJsZVgsIENvbXBvbmVudFR5cGUuVGFibGVYKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgY2xhc3M9XCJkaW5nbGotdi10YWJsZVwiIDppZD1cInZpZFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi10aGVhZCBkaW5nbGotdi10clwiPlxyXG4gICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKCcnKVwiIHYtaWY9XCJzZWxlY3RhYmxlXCIgY2xhc3M9XCJkaW5nbGotdi10YWJsZS1zZWxlY3RcIiBAY2xpY2s9XCJkb0NoZWNrQWxsXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOmNoZWNrZWQ9XCJjaGVja0FsbFwiLz7pgInmi6lcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiZ2V0U3R5bGUoJycpXCIgdi1pZj1cInNlcXVhbmNlTnVtXCIgY2xhc3M9XCJkaW5nbGotdi10YWJsZS1zZXF1ZW5jZVwiPlxyXG4gICAgICAgICAgICAgICAg5bqP5Y+3XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKGdldENvbHVtbktleShjb2x1bW4pKVwiIHYtZm9yPVwiY29sdW1uIGluIGNvbHVtbnNcIiA6Y2xhc3M9XCJnZXRDbGFzcyhjb2x1bW4pXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBnZXRDb2x1bW5DYXB0aW9uKGNvbHVtbikgfX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LXRib2R5XCI+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtdHJcIiB2LWZvcj1cIihsaW5lLCBpZHgpIGluIGRhdGFcIiBAY2xpY2s9XCJjaGVja09uZShsaW5lKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiZ2V0U3R5bGUoJycpXCIgdi1pZj1cInNlbGVjdGFibGVcIiBjbGFzcz1cImRpbmdsai12LXRhYmxlLXNlbGVjdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOmNoZWNrZWQ9XCJjaGVja2VkTGlzdC5pbmNsdWRlc0lnbm9yZUNhc2UobGluZSlcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiA6c3R5bGU9XCJnZXRTdHlsZSgnJylcIiB2LWlmPVwic2VxdWFuY2VOdW1cIiBjbGFzcz1cImRpbmdsai12LXRhYmxlLXNlcXVlbmNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGlkeCArIDEgfX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IDpzdHlsZT1cImdldFN0eWxlKGdldENvbHVtbktleShjb2x1bW4pKVwiIDpjbGFzcz1cImdldENsYXNzKGNvbHVtbilcIiB2LWZvcj1cImNvbHVtbiBpbiBjb2x1bW5zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaW5nbGotdi1hdXRvLWhpZGRlblwiIHYtaHRtbD1cImdldENlbGwobGluZSwgZ2V0Q29sdW1uS2V5KGNvbHVtbikpXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGNhY2hlOiBhbnkgPSB7fTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBjaGVja0FsbDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGNoZWNrZWRMaXN0OiBBcnJheTxUPiA9IFtdO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGJlc3RXaWR0aENhY2hlOiBhbnkgPSBmYWxzZTtcclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZ2V0Q2xhc3MoY29sdW1uOiBhbnkpOiBvYmplY3Qge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbktleSA9IHRoaXMuZ2V0Q29sdW1uS2V5KGNvbHVtbik7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVbY29sdW1uS2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtjb2x1bW5LZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZmxleCA9IHRoaXMuZmxleENvbHVtbnMuaW5jbHVkZXNJZ25vcmVDYXNlKGNvbHVtbktleSkgPyAnZGluZ2xqLXYtZmxleCcgOiAnZml4ZWQnO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge1xyXG4gICAgICAgICAgICBcImRpbmdsai12LWNlbGxcIjogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzdWx0W2NvbHVtbktleV0gPSB0cnVlO1xyXG4gICAgICAgIHJlc3VsdFtmbGV4XSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jYWNoZVtjb2x1bW5LZXldID0gcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGdldFN0eWxlKHRleHQ6IHN0cmluZyk6IG9iamVjdCB7XHJcbiAgICAgICAgbGV0IHdpZHRoO1xyXG4gICAgICAgIGlmICh0ZXh0ID09ICcnKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gODA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2lkdGggPSB0aGlzLmdldEJlc3RXaWR0aCgpW3RleHRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB3aWR0aDogYCR7IHdpZHRoIH1weGAsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBkb0NoZWNrQWxsKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZExpc3QubGVuZ3RoID0gMDsgLy8g55u05o6l5riF56m6XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsKSB7IC8vIOW9k+WJjeS4jeaYr+WFqOmAiSwg6KGo56S65o6l5LiL5p2l6KaB5YWo6YCJLCDlhajpg6jliqDlhaVcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkTGlzdC5wdXNoKC4uLnRoaXMuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hlY2tBbGwgPSAhdGhpcy5jaGVja0FsbDtcclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZ2V0QmVzdFdpZHRoKCk6IGFueSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYmVzdFdpZHRoQ2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmVzdFdpZHRoQ2FjaGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmVzdFdpZHRoQ2FjaGUgPSB7fTtcclxuICAgICAgICAvLyDkuIDliJfkuIDliJfliIbliKvorqHnrpflrr3luqZcclxuICAgICAgICBmb3IgKGxldCBjb2x1bW4gb2YgdGhpcy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIC8vIOiuoeeul+acrOWIl+eahOagh+mimOWuveW6plxyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5LZXkgPSB0aGlzLmdldENvbHVtbktleShjb2x1bW4pO1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5UaXRsZSA9IHRoaXMuZ2V0Q29sdW1uQ2FwdGlvbihjb2x1bW4pO1xyXG4gICAgICAgICAgICBsZXQgdGl0bGVXaWR0aCA9IHdpbmRvdy5jYWxjVHh0V2lkdGgoYCR7IGNvbHVtblRpdGxlIH1gKTtcclxuICAgICAgICAgICAgbGV0IHdpZHRoQXJyYXkgPSBbIHRpdGxlV2lkdGggXTtcclxuICAgICAgICAgICAgLy8g6K6h566X5pys5YiX55qE5q+P5LiA6KGM5a695bqmXHJcbiAgICAgICAgICAgIHdpZHRoQXJyYXkucHVzaChcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YS5tYXAoKGU6IFQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5Db250ZW50ID0gdGhpcy5nZXRDZWxsKGUsIGNvbHVtbktleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5jYWxjVHh0V2lkdGgoY29sdW1uQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLndpZHRoQXJyYXkpO1xyXG4gICAgICAgICAgICB0aGlzLmJlc3RXaWR0aENhY2hlW2NvbHVtbktleV0gPSBtYXhXaWR0aCArIDMwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5iZXN0V2lkdGhDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBAUHJvcChBcnJheTxzdHJpbmc+LCBbXSlcclxuICAgIHB1YmxpYyBmbGV4Q29sdW1uczogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgICBAUHJvcChBcnJheTxUPiwgW10pXHJcbiAgICBwdWJsaWMgZGF0YTogQXJyYXk8VD47XHJcblxyXG4gICAgQFByb3AoQm9vbGVhbiwgdHJ1ZSlcclxuICAgIHB1YmxpYyBzZXF1YW5jZU51bTogYm9vbGVhbjtcclxuXHJcbiAgICBAUHJvcChCb29sZWFuLCB0cnVlKVxyXG4gICAgcHVibGljIHNlbGVjdGFibGU6IGJvb2xlYW47XHJcblxyXG4gICAgQFByb3AoQXJyYXksIFtdKVxyXG4gICAgcHVibGljIGNvbHVtbnM6IEFycmF5PGFueT47XHJcblxyXG4gICAgQFByb3AoRnVuY3Rpb24sIChpdGVtOiBhbnkpOiBhbnkgPT4gaXRlbSlcclxuICAgIHB1YmxpYyBnZXRDb2x1bW5LZXk6IEZ1bmN0aW9uO1xyXG5cclxuICAgIEBQcm9wKEZ1bmN0aW9uLCAoaXRlbTogYW55KTogc3RyaW5nID0+IGl0ZW0pXHJcbiAgICBwdWJsaWMgZ2V0Q29sdW1uQ2FwdGlvbjogRnVuY3Rpb247XHJcblxyXG4gICAgQFByb3AoRnVuY3Rpb24sIChpdGVtOiBULCBjb2x1bW5OYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4geyByZXR1cm4gKGl0ZW0gYXMgYW55KVtjb2x1bW5OYW1lXTsgfSlcclxuICAgIHB1YmxpYyBnZXRDZWxsOiBGdW5jdGlvbjtcclxufSIsImltcG9ydCB7IEFic3RyYWN0Q29tcG9uZW50LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcbmltcG9ydCB7IE1ldGhvZCwgTW91bnRlZCwgUHJvcCwgVGVtcGxhdGUgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc1ggZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcblxyXG4gICAgQE1vdW50ZWQoUHJvZ3Jlc3NYLCBDb21wb25lbnRUeXBlLlByb2dyZXNzWClcclxuICAgIHB1YmxpYyBtb3VudGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlkID0gd2luZG93LnV1aWQodGhpcy5uYW1lKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ21vdW50ZWQnLCB0aGlzLnZpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlXHJcbiAgICBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcHJvZ3Jlc3MtYmFyXCIgOmlkPVwidmlkXCI+XHJcbiAgICAgICAgPHNwYW4gOmNsYXNzPVwieyAnZGluZ2xqLXYtcHJvZ3Jlc3MtY2FwdGlvbic6IHRydWUsICd0b3AnOiB0cnVlLCAncmlnaHQnOiBwb3NpdGlvbiA9PSAncnQnIH1cIiB2LWlmPVwiWydsdCcsICdydCddLmluY2x1ZGVzSWdub3JlQ2FzZShwb3NpdGlvbilcIj57eyBjYXB0aW9uIH19e3sgcGVyY2VudCB9fTwvc3Bhbj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcHJvZ3Jlc3MtYm94XCIgOnN0eWxlPVwiZ2V0Q29udGFpbmVyU3R5bGUoKVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGluZ2xqLXYtcHJvZ3Jlc3NcIiA6c3R5bGU9XCJnZXRQcm9ncmVzc1N0eWxlKClcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICdkaW5nbGotdi1wcm9ncmVzcy1jYXB0aW9uJzogdHJ1ZSwgJ2JvdHRvbSc6IHRydWUsICdyaWdodCc6IHBvc2l0aW9uID09ICdyYicgfVwiIHYtaWY9XCJbJ2xiJywgJ3JiJ10uaW5jbHVkZXNJZ25vcmVDYXNlKHBvc2l0aW9uKVwiPnt7IGNhcHRpb24gfX17eyBwZXJjZW50IH19PC9zcGFuPlxyXG4gICAgPC9kaXY+YDtcclxuICAgIFxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGdldENvbnRhaW5lclN0eWxlKCk6IG9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJy0tYmFyLWhlaWdodCc6IHRoaXMuaGVpZ2h0LFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZ2V0UHJvZ3Jlc3NTdHlsZSgpOiBvYmplY3Qge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB3aW5kb3cuYnlJZCh0aGlzLnZpZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGNvbnRhaW5lci5maW5kQ2hpbGRyZW5CeUNsYXNzKCdkaW5nbGotdi1wcm9ncmVzcy1ib3gnKVswXTtcclxuICAgICAgICAgICAgYm94LmNoaWxkcmVuWzBdLnN0eWxlLndpZHRoID0gdGhpcy5wZXJjZW50O1xyXG4gICAgICAgIH0sIDEwMClcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnd2lkdGgnOiAnMCUnLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICc1cHgnKVxyXG4gICAgcHVibGljIGhlaWdodDogc3RyaW5nO1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJzEwMCUnKVxyXG4gICAgcHVibGljIHBlcmNlbnQ6IHN0cmluZztcclxuXHJcbiAgICBAUHJvcChTdHJpbmcsICdsdCcpXHJcbiAgICBwdWJsaWMgcG9zaXRpb246ICdsdCcgfCAnbGInIHwgJ3J0JyB8ICdyYic7ICAvLyBsZWZ0LXRvcCwgbGVmdC1ib3R0b20sIHJpZ2h0LXRvcCwgcmlnaHQtYm90dG9tXHJcblxyXG4gICAgQFByb3AoU3RyaW5nLCAnJylcclxuICAgIHB1YmxpYyBjYXB0aW9uOiBzdHJpbmc7XHJcblxyXG59IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKiog5rOo6Kej5a+85Ye6ICoqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSBcIi4vYW5ub3RhdGlvbi9GaWVsZFwiO1xyXG5pbXBvcnQgeyBNZXRob2QgfSBmcm9tIFwiLi9hbm5vdGF0aW9uL01ldGhvZFwiO1xyXG5pbXBvcnQgeyBQcm9wIH0gZnJvbSBcIi4vYW5ub3RhdGlvbi9Qcm9wXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4vYW5ub3RhdGlvbi9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBNb3VudGVkIH0gZnJvbSBcIi4vYW5ub3RhdGlvbi9Nb3VudGVkXCI7XHJcbmltcG9ydCB7IENvbXB1dGUgfSBmcm9tIFwiLi9hbm5vdGF0aW9uL0NvbXB1dGVcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYW5ub3RhdGlvbi9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgV2F0Y2ggfSBmcm9tIFwiLi9hbm5vdGF0aW9uL1dhdGNoXCI7XHJcblxyXG5leHBvcnQge1xyXG4gICAgRmllbGQsXHJcbiAgICBNZXRob2QsXHJcbiAgICBQcm9wLFxyXG4gICAgVGVtcGxhdGUsXHJcbiAgICBNb3VudGVkLFxyXG4gICAgQ29tcHV0ZSxcclxuICAgIENvbXBvbmVudCxcclxuICAgIFdhdGNoXHJcbn1cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqIOe7hOS7tuexu+WvvOWHuiAqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uWCB9IGZyb20gXCIuL2Jhc2UtY29tcG9uZW50L0J1dHRvblhcIjtcclxuaW1wb3J0IHsgSW5wdXRYIH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnQvSW5wdXRYXCI7XHJcbmltcG9ydCB7IFN3aXRjaFggfSBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudC9Td2l0Y2hYXCI7XHJcbmltcG9ydCB7IENvbWJvWCB9IGZyb20gXCIuL2Jhc2UtY29tcG9uZW50L0NvbWJvWFwiO1xyXG5pbXBvcnQgeyBOYXZpZ2F0b3JYIH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnQvTmF2aWdhdG9yWFwiO1xyXG5pbXBvcnQgeyBTY3JvbGxlclkgfSBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudC9TY3JvbGxlcllcIjtcclxuaW1wb3J0IHsgTmF2aWdhdG9yVmlldyB9IGZyb20gXCIuL2Fzc2VtYmxlLWNvbXBvbmVudC9OYXZpZ2F0b3JWaWV3XCI7XHJcbmltcG9ydCB7IFRhYlBhbmVsWCB9IGZyb20gXCIuL2Jhc2UtY29tcG9uZW50L1RhYlBhbmVsWFwiO1xyXG5pbXBvcnQgeyBTY3JvbGxlclggfSBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudC9TY3JvbGxlclhcIjtcclxuaW1wb3J0IHsgVGFiVmlldyB9IGZyb20gXCIuL2Fzc2VtYmxlLWNvbXBvbmVudC9UYWJWaWV3XCI7XHJcbmltcG9ydCB7IFRhYmxlWCB9IGZyb20gXCIuL2Jhc2UtY29tcG9uZW50L1RhYmxlWFwiO1xyXG5pbXBvcnQgeyBQcm9ncmVzc1ggfSBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudC9Qcm9ncmVzc1hcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBCdXR0b25YLFxyXG4gICAgSW5wdXRYLFxyXG4gICAgU3dpdGNoWCxcclxuICAgIENvbWJvWCxcclxuICAgIE5hdmlnYXRvclgsXHJcbiAgICBTY3JvbGxlclksXHJcbiAgICBOYXZpZ2F0b3JWaWV3LFxyXG4gICAgVGFiUGFuZWxYLFxyXG4gICAgU2Nyb2xsZXJYLFxyXG4gICAgVGFiVmlldyxcclxuICAgIFRhYmxlWCxcclxuICAgIFByb2dyZXNzWFxyXG59XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKiDnu4Tku7blr7zlh7ogKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmNvbnN0IElCdXR0b24gPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5CdXR0b25YKS5idWlsZCgpO1xyXG5jb25zdCBJSW5wdXQgPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5JbnB1dFgpLmJ1aWxkKCk7XHJcbmNvbnN0IElTd2l0Y2ggPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5Td2l0Y2hYKS5idWlsZCgpO1xyXG5jb25zdCBJQ29tYm8gPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5Db21ib1gpLmJ1aWxkKCk7XHJcbmNvbnN0IElOYXZpZ2F0b3IgPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5OYXZpZ2F0b3JYKS5idWlsZCgpO1xyXG5jb25zdCBJU2Nyb2xsZXJZID0gUmVnaXN0cnkuZ2V0Q29tcG9uZW50KENvbXBvbmVudFR5cGUuU2Nyb2xsZXJZKS5idWlsZCgpO1xyXG5jb25zdCBJTmF2VmlldyA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudChDb21wb25lbnRUeXBlLk5hdmlnYXRvclZpZXcpLmJ1aWxkKCk7XHJcbmNvbnN0IElUYWJQYW5lbCA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudChDb21wb25lbnRUeXBlLlRhYlBhbmVsWCkuYnVpbGQoKTtcclxuY29uc3QgSVNjcm9sbGVyWCA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudChDb21wb25lbnRUeXBlLlNjcm9sbGVyWCkuYnVpbGQoKTtcclxuY29uc3QgSVRhYlZpZXcgPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5UYWJWaWV3KS5idWlsZCgpO1xyXG5jb25zdCBJVGFibGUgPSBSZWdpc3RyeS5nZXRDb21wb25lbnQoQ29tcG9uZW50VHlwZS5UYWJsZVgpLmJ1aWxkKCk7XHJcbmNvbnN0IElQcm9ncmVzcyA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudChDb21wb25lbnRUeXBlLlByb2dyZXNzWCkuYnVpbGQoKTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBJQnV0dG9uLFxyXG4gICAgSUlucHV0LFxyXG4gICAgSVN3aXRjaCxcclxuICAgIElDb21ibyxcclxuICAgIElOYXZpZ2F0b3IsXHJcbiAgICBJU2Nyb2xsZXJZLFxyXG4gICAgSU5hdlZpZXcsXHJcbiAgICBJVGFiUGFuZWwsXHJcbiAgICBJU2Nyb2xsZXJYLFxyXG4gICAgSVRhYlZpZXcsXHJcbiAgICBJVGFibGUsXHJcbiAgICBJUHJvZ3Jlc3MsXHJcbn1cclxuXHJcbmltcG9ydCB7IFJlZ2lzdHJ5LCBDb21wb25lbnRUeXBlIH0gZnJvbSBcIi4uL2VudGl0eVwiOyIsImltcG9ydCAnLi9leHQnXHJcbmltcG9ydCB7IFF1ZXVlVXRpbHMsIFJzYVV0aWxzLCBUaXBVdGlscyB9IGZyb20gJ2NvcmUvZnVuY3Rpb24nO1xyXG5pbXBvcnQgeyBGaWVsZCwgTWV0aG9kLCBQcm9wLCBUZW1wbGF0ZSwgTW91bnRlZCwgQ29tcHV0ZSwgQ29tcG9uZW50LCBXYXRjaCwgQnV0dG9uWCwgSW5wdXRYLCBTd2l0Y2hYLCBDb21ib1gsIE5hdmlnYXRvclgsIFNjcm9sbGVyWSwgTmF2aWdhdG9yVmlldywgVGFiUGFuZWxYLCBTY3JvbGxlclgsIFRhYlZpZXcsIFRhYmxlWCwgUHJvZ3Jlc3NYLCBJQnV0dG9uLCBJSW5wdXQsIElTd2l0Y2gsIElDb21ibywgSU5hdmlnYXRvciwgSVNjcm9sbGVyWSwgSU5hdlZpZXcsIElUYWJQYW5lbCwgSVNjcm9sbGVyWCwgSVRhYlZpZXcsIElUYWJsZSwgSVByb2dyZXNzIH0gZnJvbSAnY29yZS9jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgTWV0YUluZm8sIFJlZ2lzdHJ5LCBDb21wb25lbnRUeXBlLCBSc2FDb25zdCwgSUNvbXBvbmVudCwgRW1pdFBhcmEsIExhbmdJdGVtLCBSaWdodE1lbnUgfSBmcm9tICdjb3JlL2VudGl0eSc7XHJcblxyXG5leHBvcnQge1xyXG4gICAgUXVldWVVdGlscyxcclxuICAgIFJzYVV0aWxzLFxyXG4gICAgVGlwVXRpbHMsXHJcbiAgICBGaWVsZCxcclxuICAgIE1ldGhvZCxcclxuICAgIFByb3AsXHJcbiAgICBUZW1wbGF0ZSxcclxuICAgIE1vdW50ZWQsXHJcbiAgICBDb21wdXRlLFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgV2F0Y2gsXHJcbiAgICBCdXR0b25YLFxyXG4gICAgSW5wdXRYLFxyXG4gICAgU3dpdGNoWCxcclxuICAgIENvbWJvWCxcclxuICAgIE5hdmlnYXRvclgsXHJcbiAgICBTY3JvbGxlclksXHJcbiAgICBOYXZpZ2F0b3JWaWV3LFxyXG4gICAgVGFiUGFuZWxYLFxyXG4gICAgU2Nyb2xsZXJYLFxyXG4gICAgVGFiVmlldyxcclxuICAgIFRhYmxlWCxcclxuICAgIFByb2dyZXNzWCxcclxuICAgIElCdXR0b24sXHJcbiAgICBJSW5wdXQsXHJcbiAgICBJU3dpdGNoLFxyXG4gICAgSUNvbWJvLFxyXG4gICAgSU5hdmlnYXRvcixcclxuICAgIElTY3JvbGxlclksXHJcbiAgICBJTmF2VmlldyxcclxuICAgIElUYWJQYW5lbCxcclxuICAgIElTY3JvbGxlclgsXHJcbiAgICBJVGFiVmlldyxcclxuICAgIElUYWJsZSxcclxuICAgIElQcm9ncmVzcyxcclxuICAgIEFic3RyYWN0Q29tcG9uZW50LFxyXG4gICAgTWV0YUluZm8sXHJcbiAgICBSZWdpc3RyeSxcclxuICAgIENvbXBvbmVudFR5cGUsXHJcbiAgICBSc2FDb25zdCxcclxuICAgIElDb21wb25lbnQsXHJcbiAgICBFbWl0UGFyYSxcclxuICAgIExhbmdJdGVtLFxyXG4gICAgUmlnaHRNZW51LFxyXG59XHJcblxyXG53aW5kb3cubGlua0NzcyhcIi9zcmMvYXNzZXRzL2Nzcy9jb250ZXh0bWVudS5jc3NcIik7XHJcbndpbmRvdy5saW5rQ3NzKFwiL3NyYy9hc3NldHMvY3NzL2NvbW1vbi5jc3NcIik7XHJcbndpbmRvdy5saW5rQ3NzKFwiL3NyYy9hc3NldHMvY3NzL2Zvcm0uY3NzXCIpO1xyXG53aW5kb3cubGlua0NzcyhcIi9zcmMvYXNzZXRzL2Nzcy90aXAuY3NzXCIpO1xyXG53aW5kb3cubGlua0NzcyhcIi9zcmMvYXNzZXRzL2Nzcy9sYXlvdXQuY3NzXCIpOyIsImNvbnN0ICR0b29sOiB7XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlua0u+WKqOmdouadv1xyXG4gICAgICovXHJcbiAgICBnZXRBY3RpdmVQYW5lbCgpOiBIVE1MRWxlbWVudCxcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5rS75Yqo6Z2i5p2/5Lit5LiA5Liq5YWD57Sg55qE6auY5bqmKOaJgOacieWFg+e0oOmrmOW6puebuOetiSlcclxuICAgICAqIEBwYXJhbSBhY3RpdmVQYW5lbCDlvZPliY3mtLvliqjpnaLmnb9cclxuICAgICAqL1xyXG4gICAgZ2V0T25lSGVpZ2h0KGFjdGl2ZVBhbmVsOiBIVE1MRWxlbWVudCk6IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6ZyA6KaB5rua5Yqo55qE5YWD57Sg5pWw6YePXHJcbiAgICAgKiBAcGFyYW0gY3VycmVudCDlvZPliY3kuIvmoIdcclxuICAgICAqIEBwYXJhbSBsaW1pdCDpobbpg6jlpJrlsJHkuKrlhYPntKDkuI3nlKjmu5rliqhcclxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24g5ZCR5LiK6L+Y5piv5ZCR5LiLXHJcbiAgICAgKi9cclxuICAgIGdldFNjcm9sbFF0eShjdXJyZW50OiBudW1iZXIsIGxpbWl0OiBudW1iZXIsIGRpcmVjdGlvbjogLTEgfCAwIHwgMSk6IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICog6K6h566X5rS75Yqo6Z2i5p2/5YaF5aSa5bCR5Liq5YWD57Sg5LiN55So6L+b6KGM5rua5YqoXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlUGFuZWwg5rS75Yqo6Z2i5p2/XHJcbiAgICAgKi9cclxuICAgIGdldExpbWl0KGFjdGl2ZVBhbmVsOiBIVE1MRWxlbWVudCk6IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICog6K6h566X5rS75Yqo6Z2i5p2/5YaF5aSa5bCR5Liq5YWD57Sg5LiN55So6L+b6KGM5rua5YqoXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlUGFuZWwg5rS75Yqo6Z2i5p2/XHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IOavj+S4quWFg+e0oOeahOmrmOW6plxyXG4gICAgICovXHJcbiAgICBnZXRMaW1pdChhY3RpdmVQYW5lbDogSFRNTEVsZW1lbnQsIGhlaWdodDogbnVtYmVyKTogbnVtYmVyLFxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmtLvliqjpnaLmnb/kuK3lvZPliY3lhYPntKDnmoTkuIvmoIdcclxuICAgICAqIEBwYXJhbSBhY3RpdmVQYW5lbCDmtLvliqjpnaLmnb9cclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudEluZGV4KGFjdGl2ZVBhbmVsOiBIVE1MRWxlbWVudCk6IG51bWJlcixcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5rua5Yqo5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlUGFuZWwg5rS75Yqo6Z2i5p2/XHJcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIOWQkeS4ii/lkJHkuItcclxuICAgICAqL1xyXG4gICAgZ2V0U2Nyb2xsUHJvcChhY3RpdmVQYW5lbDogSFRNTEVsZW1lbnQsIGRpcmVjdGlvbjogLTEgfCAwIHwgMSk6IFNjcm9sbFByb3AsXHJcbn0gPSB7fSBhcyBhbnk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCR0b29sLCAnZ2V0QWN0aXZlUGFuZWwnLCBmdW5jdGlvbigpIHtcclxuICAgIGxldCBsaXN0OiBBcnJheTxIVE1MRWxlbWVudD4gPSB3aW5kb3cuYnlDbGFzcygnYXJyb3cgYWN0aXZlJyk7XHJcbiAgICBpZiAoIWxpc3QpIHtcclxuICAgICAgICBsZXQgYWN0aXZlUGFuZWwgPSB3aW5kb3cuYnlDbGFzcygnc3RlcCBhcnJvdycpWzBdOyAvLyDpu5jorqTlj5YgJ3N0ZXAnIOmdouadv1xyXG4gICAgICAgIGFjdGl2ZVBhbmVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVQYW5lbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RbMF07XHJcbiAgICB9XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygkdG9vbCwgJ2dldE9uZUhlaWdodCcsIGZ1bmN0aW9uKGFjdGl2ZVBhbmVsOiBIVE1MRWxlbWVudCk6IG51bWJlciB7XHJcbiAgICBpZiAoYWN0aXZlUGFuZWwuY2hpbGRyZW4ubGVuZ3RoID09IDApIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGNvbnN0IGNoaWxkID0gYWN0aXZlUGFuZWwuY2hpbGRyZW5bMF07XHJcbiAgICByZXR1cm4gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShjaGlsZCkubWFyZ2luKSArIGNoaWxkLm9mZnNldEhlaWdodDtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCR0b29sLCAnZ2V0U2Nyb2xsUXR5JywgZnVuY3Rpb24oY3VycmVudDogbnVtYmVyLCBsaW1pdDogbnVtYmVyLCBkaXJlY3Rpb246IC0xIHwgMCB8IDEpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGN1cnJlbnQgPCBsaW1pdCA/IDAgOiAoY3VycmVudCArIGRpcmVjdGlvbiAtIGxpbWl0KTtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCR0b29sLCAnZ2V0TGltaXQnLCBmdW5jdGlvbihhY3RpdmVQYW5lbDogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gJHRvb2wuZ2V0T25lSGVpZ2h0KGFjdGl2ZVBhbmVsKTtcclxuICAgIHJldHVybiAkdG9vbC5nZXRMaW1pdChhY3RpdmVQYW5lbCwgaGVpZ2h0KTtcclxufSk7XHJcblxyXG53aW5kb3cuZGVmdW5jKCR0b29sLCAnZ2V0TGltaXQnLCBmdW5jdGlvbihhY3RpdmVQYW5lbDogSFRNTEVsZW1lbnQsIGhlaWdodDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmIChhY3RpdmVQYW5lbC5wYXJlbnROb2RlID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGxldCBvZmZzZXRIZWlnaHQ6IG51bWJlciA9IChhY3RpdmVQYW5lbC5wYXJlbnROb2RlIGFzIGFueSkub2Zmc2V0SGVpZ2h0OyAvLyDojrflj5bpnaLmnb/pq5jluqZcclxuICAgIGxldCBxdHkgPSBNYXRoLmZsb29yKG9mZnNldEhlaWdodCAvIGhlaWdodCk7IC8vIOiuoeeul+mrmOW6puWPr+Wuuee6s+WkmuWwkeS4quWFg+e0oFxyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IocXR5IC8gMik7IC8vIOWFg+e0oOaVsOmHjyAvIDIg55qE57uT5p6c5bCx5pivIGxpbWl0XHJcbn0pO1xyXG5cclxud2luZG93LmRlZnVuYygkdG9vbCwgJ2dldEN1cnJlbnRJbmRleCcsIGZ1bmN0aW9uKGFjdGl2ZVBhbmVsOiBIVE1MRWxlbWVudCk6IG51bWJlciB7XHJcbiAgICBsZXQgY3VycmVudCA9IC0xO1xyXG4gICAgaWYgKGN1cnJlbnQgPT0gLTEpIHtcclxuICAgICAgICBjdXJyZW50ID0gd2luZG93LmluZGV4T2ZDaGlsZEJ5Q2xhc3MoYWN0aXZlUGFuZWwsICdhY3RpdmUnKTtcclxuICAgIH1cclxuICAgIGlmIChjdXJyZW50ID09IC0xKSB7XHJcbiAgICAgICAgY3VycmVudCA9IHdpbmRvdy5pbmRleE9mQ2hpbGRCeUNsYXNzKGFjdGl2ZVBhbmVsLCAnbGFzdCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGN1cnJlbnQgPT0gLTEpIHtcclxuICAgICAgICBjdXJyZW50ID0gMDtcclxuICAgIH1cclxuICAgIHJldHVybiBjdXJyZW50O1xyXG59KTtcclxuXHJcbndpbmRvdy5kZWZ1bmMoJHRvb2wsICdnZXRTY3JvbGxQcm9wJywgZnVuY3Rpb24oYWN0aXZlUGFuZWw6IEhUTUxFbGVtZW50LCBkaXJlY3Rpb246IC0xIHwgMCB8IDEpOiBTY3JvbGxQcm9wIHtcclxuICAgIGNvbnN0IGluZGV4ID0gJHRvb2wuZ2V0Q3VycmVudEluZGV4KGFjdGl2ZVBhbmVsKTtcclxuICAgIGNvbnN0IGhlaWdodCA9ICR0b29sLmdldE9uZUhlaWdodChhY3RpdmVQYW5lbCk7XHJcbiAgICBjb25zdCBsaW1pdCA9ICR0b29sLmdldExpbWl0KGFjdGl2ZVBhbmVsLCBoZWlnaHQpO1xyXG4gICAgY29uc3QgcXR5ID0gJHRvb2wuZ2V0U2Nyb2xsUXR5KGluZGV4LCBsaW1pdCwgZGlyZWN0aW9uKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY3VycmVudDogaW5kZXgsXHJcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LFxyXG4gICAgICAgIHF0eTogcXR5LFxyXG4gICAgICAgIHNpemU6IGFjdGl2ZVBhbmVsLmNoaWxkcmVuLmxlbmd0aCxcclxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcclxuICAgIH1cclxufSk7XHJcblxyXG5leHBvcnQge1xyXG4gICAgJHRvb2xcclxufVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiog57uR5a6a6ZSu55uY5LqL5Lu2ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG53aW5kb3cuYWx0RG93biA9IGZhbHNlO1xyXG5cclxuY29uc3QgdXNlckNvbmZpZyA9IHdpbmRvdy5yZWFkQ29uZmlnKCk7XHJcblxyXG5jb25zdCBkZWZhdWx0Q29uZmlnID0gd2luZG93LmRlZmF1bHRDb25maWcoKTtcclxuXHJcbmNvbnN0IGhvdEtleSA9IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQodXNlckNvbmZpZywgZGVmYXVsdENvbmZpZywgJ2hvdEtleScsIHt9KTtcclxuXHJcbmNvbnN0IGtleXMgPSBPYmplY3QudmFsdWVzKGhvdEtleSkubWFwKChpOiBzdHJpbmcpID0+IGkudG9VcHBlckNhc2UoKSk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBlID0+IHtcclxuICAgIGlmIChlLmNvZGUgPT0gJ0FsdExlZnQnIHx8IGUuY29kZSA9PSAnQWx0UmlnaHQnKSB7XHJcbiAgICAgICAgd2luZG93LmFsdERvd24gPSBmYWxzZTtcclxuICAgIH1cclxufSk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xyXG4gICAgbGV0IGtleUNvZGUgPSBlLmNvZGU7XHJcbiAgICBrZXlDb2RlID0ga2V5Q29kZS5yZXBsYWNlKC9eKEtleSl8KERpZ2l0KXwoTnVtcGFkKS8sICcnKTtcclxuICAgIGlmIChrZXlDb2RlID09ICdBcnJvd0Rvd24nIHx8IGtleUNvZGUgPT0gJ0Fycm93VXAnKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZVBhbmVsID0gJHRvb2wuZ2V0QWN0aXZlUGFuZWwoKTtcclxuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBrZXlDb2RlID09ICdBcnJvd0Rvd24nID8gMSA6IC0xO1xyXG4gICAgICAgIGNvbnN0IHByb3AgPSAkdG9vbC5nZXRTY3JvbGxQcm9wKGFjdGl2ZVBhbmVsLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgIGlmIChhY3RpdmVQYW5lbC5jbGFzc0xpc3QuY29udGFpbnMoJ2xpbmUnKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ3VwZGF0ZS1saW5lJywgcHJvcCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVQYW5lbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N0ZXAnKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ3VwZGF0ZS1zdGVwJywgcHJvcCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVQYW5lbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpc3RvcnknKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ3VwZGF0ZS1oaXN0b3J5JywgcHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChrZXlDb2RlID09ICdBcnJvd0xlZnQnIHx8IGtleUNvZGUgPT0gJ0Fycm93UmlnaHQnKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGtleUNvZGUgPT0gJ0Fycm93UmlnaHQnID8gMSA6IC0xO1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUuc2VuZE1zZygnY2hhbmdlLXBhbmVsJywgZGlyZWN0aW9uKTsgXHJcbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT0gJ0FsdExlZnQnIHx8IGtleUNvZGUgPT0gJ0FsdFJpZ2h0Jykge1xyXG4gICAgICAgIHdpbmRvdy5hbHREb3duID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoa2V5cy5pbmNsdWRlcyhrZXlDb2RlKSAmJiB3aW5kb3cuYWx0RG93bikge1xyXG4gICAgICAgIGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKGhvdEtleSkpIHtcclxuICAgICAgICAgICAgaWYgKChob3RLZXkgYXMgYW55KVtrZXldID09IGtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdiYWNrJzogd2luZG93Lm9wZW4oJy4uJyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FkZFN0YXInOiB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2FkZC1zdGFyJywgbnVsbCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFuU3Rhcic6IHdpbmRvdy4kcXVldWUuc2VuZE1zZygnY2xlYW4tc3RhcicsIG51bGwpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjbGVhbkhpc3RvcnknOiB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2NsZWFuLWhpc3RvcnknLCBudWxsKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG93bmxvYWRDYXNlJzogd2luZG93Lm9wZW4oJ3Rlc3QueGxzJyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlZmF1bHRTdGVwJzogd2luZG93Lm9wZW4oJ+m7mOiupOatpemqpCcpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlcnBMb2cnOiB3aW5kb3cub3BlbignZXJwTG9nJyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xvZ3MnOiB3aW5kb3cub3BlbignbG9ncycpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lJzogd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdmb2N1cy1saW5lJywgbnVsbCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0ZXAnOiB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2ZvY3VzLXN0ZXAnLCBudWxsKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiog5YW25LuW5bel5YW35pa55rOVICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNYXRjaCgpIHtcclxuICAgIGlmICh3aW5kb3cuaXNEZXYoKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICBjb25zdCBtYXRjaHMgPSB3aW5kb3cuZ2V0Q29uZmlnT3JEZWZhdWx0KHdpbmRvdy5yZWFkQ29uZmlnKCksIHdpbmRvdy5kZWZhdWx0Q29uZmlnKCksICdtYXRjaExpc3QnLCBbXSk7XHJcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaHMpIHtcclxuICAgICAgICBsZXQgcmVnRXhwID0gd2luZG93LmNyZWF0ZVJlZ0V4cChtYXRjaCk7XHJcbiAgICAgICAgaWYgKHJlZ0V4cC50ZXN0KHVybCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJ+aIquWbvuafpeeci+W3peWFt+aaguacquWMuemFjeW9k+WJjSB1cmwg5Zyw5Z2ALCDkvaDlj6/ku6Xkv67mlLnmsrnnjLTohJrmnKwsIOaWsOWiniBtYXRjaExpc3Qg55qE5YWD57Sg5Lul6L+b6KGM6YCC6YWNLCDlpoLmt7vliqDlkI7ku43ml6Dms5XpgILphY0sIOivt+iBlOezu+aIkScuZXJyKCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgQ29tcHV0ZSwgRmllbGQsIE1ldGhvZCwgTW91bnRlZCwgUHJvcCwgUmVnaXN0cnksIFRlbXBsYXRlIH0gZnJvbSBcImNvcmVcIjtcclxuaW1wb3J0IE5hdlR5cGUgZnJvbSBcIi4vTmF2VHlwZVwiO1xyXG5pbXBvcnQgeyAkdG9vbCB9IGZyb20gXCIuL3Rvb2xcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUSVZfTGluZSBleHRlbmRzIEFic3RyYWN0Q29tcG9uZW50IHtcclxuICAgIFxyXG4gICAgQE1vdW50ZWQoVElWX0xpbmUsICdpdi1saW5lJylcclxuICAgIHB1YmxpYyBtb3VudGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlkID0gd2luZG93LnV1aWQodGhpcy5uYW1lKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ21vdW50ZWQnLCB0aGlzLnZpZCk7XHJcbiAgICAgICAgLy8g5ZGo5pyf5oCn5qOA5p+l6KGM5piv5ZCm5Yqg6L295a6M5oiQXHJcbiAgICAgICAgd2luZG93LnRpbWVyKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJZHgodGhpcy5saW5lcy5sZW5ndGggLSAxLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiog5pa55ZCR6ZSu57uR5a6aICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbigndXBkYXRlLWxpbmUnLCAoZGF0YTogU2Nyb2xsUHJvcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRvU2Nyb2xsKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKiDkuIrkuIDooYwgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCd0b1ByZXZMaW5lJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldElkeCh0aGlzLmN1cnJlbnQgLSAxLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiog5LiL5LiA6KGMICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbigndG9OZXh0TGluZScsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRJZHgodGhpcy5jdXJyZW50ICsgMSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKiDot7PovazliLDmjIflrprooYwgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCdqdW1wVG9MaW5lJywgKGxpbmVOdW1iZXI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaWR4ID0gdGhpcy5saW5lcy5pbmRleE9mKGxpbmVOdW1iZXIpO1xyXG4gICAgICAgICAgICBpZiAoaWR4ICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldElkeChpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgQFRlbXBsYXRlXHJcbiAgICBwdWJsaWMgdGVtcGxhdGU6IHN0cmluZyA9IGA8ZGl2IGlkPVwibGluZS1jb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IDpjbGFzcz1cInsgJ2xpbmUnOiB0cnVlLCAnYXJyb3cnOiB0cnVlLCAnYWN0aXZlJzogYXJyb3cgPT0gJ2xpbmUnIH1cIj5cclxuICAgICAgICAgICAgPGRpdiA6dGl0bGU9XCJsaW5lTnVtYmVyXCIgOmNsYXNzPVwieyAnbGluZS1udW1iZXInOiB0cnVlLCAnYWN0aXZlJzogY3VycmVudCA9PSBpZHgsICdsYXN0JzogbGFzdCA9PSBpZHggfVwiIHYtZm9yPVwiKGxpbmVOdW1iZXIsIGlkeCkgb2YgbGluZXNcIiBAY2xpY2s9XCJzZXRJZHgoaWR4KVwiPlxyXG4gICAgICAgICAgICAgICAge3sgbGluZU51bWJlciB9fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgY3VycmVudDogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgbGFzdDogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIHNldElkeChpOiBudW1iZXIsIHRvU3RlcCA9IGZhbHNlLCB0b0xhc3RTdGVwID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBsaW5lQ29udGFpbmVyID0gd2luZG93LmJ5Q2xhc3MoJ2xpbmUgYXJyb3cnKVswXTtcclxuICAgICAgICBpZiAobGluZUNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb25zdCBsaW1pdCA9ICR0b29sLmdldExpbWl0KGxpbmVDb250YWluZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvU2Nyb2xsKHtcclxuICAgICAgICAgICAgICAgIHNpemU6IHRoaXMubGluZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudDogaSxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJHRvb2wuZ2V0T25lSGVpZ2h0KGxpbmVDb250YWluZXIpLFxyXG4gICAgICAgICAgICAgICAgcXR5OiAkdG9vbC5nZXRTY3JvbGxRdHkoaSwgbGltaXQsIDApLFxyXG4gICAgICAgICAgICAgICAgdG9TdGVwOiB0b1N0ZXAsXHJcbiAgICAgICAgICAgICAgICB0b0xhc3RTdGVwOiB0b0xhc3RTdGVwLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGRvU2Nyb2xsKHByb3A6IFNjcm9sbFByb3ApOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gcHJvcC5jdXJyZW50ICsgcHJvcC5kaXJlY3Rpb247XHJcbiAgICAgICAgaWYgKG5leHQgPCAwKSB7XHJcbiAgICAgICAgICAgICflt7Lnu4/liLDnrKzkuIDooYzkuoYnLmluZm8oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dCA+PSBwcm9wLnNpemUpIHtcclxuICAgICAgICAgICAgJ+W3sue7j+WIsOacgOWQjuS4gOihjOS6hicuaW5mbygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnQgPT0gbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5ieUlkKCdsaW5lLWNvbnRhaW5lcicpLnNjcm9sbFRvKDAsIHByb3AuaGVpZ2h0ICogcHJvcC5xdHkpO1xyXG4gICAgICAgIHRoaXMubGFzdCA9IHRoaXMuY3VycmVudDtcclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXh0O1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUuc2VuZE1zZygnbGluZS1jaGFuZ2VkJywge1xyXG4gICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVzW25leHRdLFxyXG4gICAgICAgICAgICBleHBlY3Q6ICEhcHJvcC50b0xhc3RTdGVwID8gLTEgOiAwLFxyXG4gICAgICAgICAgICB0b1N0ZXA6ICEhcHJvcC50b1N0ZXBcclxuICAgICAgICB9KTtcclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2NoYW5nZS1hY3RpdmUtcGFuZWwnLCBOYXZUeXBlLkxpbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIEBDb21wdXRlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHJlYWRMaW5lUmVnRXhwID0gLy4qPGEgaHJlZj1cIihbMC05XStcXC8pXCIuKi87XHJcbiAgICAgICAgaWYgKHdpbmRvdy5yZWFkTGluZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5yZWFkTGluZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB3aW5kb3cuZ2V0PHN0cmluZz4oYCR7IHdpbmRvdy5sb2NhdGlvbi5ocmVmIH0xYCk7XHJcbiAgICAgICAgY29uc3QgbGluZU51bWJlcnMgPSByZXNwb25zZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgcmV0dXJuIGxpbmVOdW1iZXJzLm1hcCgobGluZTogc3RyaW5nKSA9PiAgcmVhZExpbmVSZWdFeHAudGVzdChsaW5lKSA/IHJlYWRMaW5lUmVnRXhwLmV4ZWMobGluZSlbMV0gOiAnJylcclxuICAgICAgICAgICAgLmZpbHRlcigoaHJlZjogc3RyaW5nKSA9PiBocmVmICE9ICcnKVxyXG4gICAgICAgICAgICAubWFwKChocmVmOiBzdHJpbmcpID0+IGhyZWYucmVwbGFjZSgvXFwvJC8sICcnKSk7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGxpbmVzOiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgTmF2VHlwZS5TdGVwLCB0cnVlKVxyXG4gICAgcHVibGljIGFycm93OiBOYXZUeXBlO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGl2bGluZSA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudCgnaXYtbGluZScpLmJ1aWxkKCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXB1dGUsIEZpZWxkLCBNZXRob2QsIE1vdW50ZWQsIFByb3AsIFJlZ2lzdHJ5LCBUZW1wbGF0ZSB9IGZyb20gXCJjb3JlXCI7XHJcbmltcG9ydCBOYXZUeXBlIGZyb20gXCIuL05hdlR5cGVcIjtcclxuaW1wb3J0IHsgJHRvb2wgfSBmcm9tIFwiLi90b29sXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVElWX1N0ZXAgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcbiAgICBcclxuICAgIEBNb3VudGVkKFRJVl9TdGVwLCAnaXYtc3RlcCcpXHJcbiAgICBwdWJsaWMgbW91bnRlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZCA9IHdpbmRvdy51dWlkKHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdtb3VudGVkJywgdGhpcy52aWQpO1xyXG4gICAgICAgIC8qKiDooYzliqDovb3lrozlkI7kvJrosIPnlKjov5nph4wsIOi/m+ihjOWIneWni+WMliAqL1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2luaXQtc3RlcHMnLCAobGluZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubGluZSA9IGxpbmU7XHJcbiAgICAgICAgICAgIHdpbmRvdy50aW1lcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJZHgodGhpcy5zdGVwcy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqIOihjOWIh+aNouS6i+S7tiAqL1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2xpbmUtY2hhbmdlZCcsIChkYXRhOiBMaW5lQ2hhbmdlUHJvcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RTdGVwcyA9IHRoaXMuc3RlcHM7XHJcbiAgICAgICAgICAgIHRoaXMubGluZSA9IGRhdGEubGluZTtcclxuICAgICAgICAgICAgd2luZG93LnRpbWVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RTdGVwcyAhPSB0aGlzLnN0ZXBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXhwZWN0KSB7IC8vIOaMh+WumuS6huS4i+agh1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5leHBlY3QgPiAwICYmIGRhdGEuZXhwZWN0IDwgdGhpcy5zdGVwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SWR4KGRhdGEuZXhwZWN0LCB0cnVlKTsgLy8g5LiL5qCH5Zyo6IyD5Zu05YaFLCDmjInmjIflrprkuIvmoIfot7PovaxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SWR4KHRoaXMuc3RlcHMubGVuZ3RoIC0gMSwgdHJ1ZSk7IC8vIOS4jeWcqOiMg+WbtOWGhSwg6Lez5Yiw5pyA5ZCO5LiA5LiqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldElkeCgwLCB0cnVlKTsgLy8g6buY6K6k5Yiw56ys5LiA5LiqXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS50b1N0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdjaGFuZ2UtYWN0aXZlLXBhbmVsJywgTmF2VHlwZS5MaW5lKTsgLy8g54Sm54K56L+Y57uZ6KGMXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC8qKiDmlrnlkJHplK7nu5HlrpogKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCd1cGRhdGUtc3RlcCcsIChwcm9wOiBTY3JvbGxQcm9wKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9TY3JvbGwocHJvcCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqIOi3s+i9rOWIsOaMh+WumuatpemqpCAqL1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2p1bXBUb1N0ZXAnLCAoc3RlcE51bWJlcjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpZHggPSAtMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0ZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwc1tpXS5zdGFydHNXaXRoKGAkeyBzdGVwTnVtYmVyIH1fYCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpZHggIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SWR4KGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBAVGVtcGxhdGVcclxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogc3RyaW5nID0gYDxkaXYgaWQ9XCJzdGVwLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxkaXYgOmNsYXNzPVwieyAnc3RlcCc6IHRydWUsICdhcnJvdyc6IHRydWUsICdhY3RpdmUnOiBhcnJvdyA9PSAnc3RlcCcgfVwiPlxyXG4gICAgICAgICAgICA8ZGl2IDp0aXRsZT1cInN0ZXBOdW1iZXJcIiA6Y2xhc3M9XCJ7ICdzdGVwLW51bWJlcic6IHRydWUsICdhY3RpdmUnOiBjdXJyZW50ID09IGlkeCwgJ2xhc3QnOiBsYXN0ID09IGlkeCB9XCIgdi1mb3I9XCIoc3RlcE51bWJlciwgaWR4KSBvZiBzdGVwc1wiIEBjbGljaz1cInNldElkeChpZHgpXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBzdGVwTnVtYmVyLnJlcGxhY2UoL1xcLnBuZy8sICcnKSB9fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgbWFwOiBhbnkgPSB7fTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBjdXJyZW50OiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBsYXN0OiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBsaW5lOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBsYXN0U3RlcHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgc2V0SWR4KGk6IG51bWJlciwgbGluZUNoYW5nZWQgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IHN0ZXBDb250YWluZXIgPSB3aW5kb3cuYnlDbGFzcygnc3RlcCBhcnJvdycpWzBdO1xyXG4gICAgICAgIGlmIChzdGVwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbWl0ID0gJHRvb2wuZ2V0TGltaXQoc3RlcENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9TY3JvbGwoe1xyXG4gICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5zdGVwcy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBpLFxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAkdG9vbC5nZXRPbmVIZWlnaHQoc3RlcENvbnRhaW5lciksXHJcbiAgICAgICAgICAgICAgICBxdHk6ICR0b29sLmdldFNjcm9sbFF0eShpLCBsaW1pdCwgMCksXHJcbiAgICAgICAgICAgICAgICBsaW5lQ2hhbmdlZDogbGluZUNoYW5nZWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZG9TY3JvbGwocHJvcDogU2Nyb2xsUHJvcCkge1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBwcm9wLmN1cnJlbnQgKyBwcm9wLmRpcmVjdGlvbjtcclxuICAgICAgICBpZiAoIXByb3AubGluZUNoYW5nZWQgJiYgdGhpcy5jdXJyZW50ID09IG5leHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dCA8IDApIHtcclxuICAgICAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCd0b1ByZXZMaW5lJywge30pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dCA+PSB0aGlzLnN0ZXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ3RvTmV4dExpbmUnLCB7fSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmJ5SWQoJ3N0ZXAtY29udGFpbmVyJykuc2Nyb2xsVG8oMCwgcHJvcC5oZWlnaHQgKiBwcm9wLnF0eSk7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IHRoaXMuY3VycmVudDtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV4dDtcclxuICAgICAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdjaGFuZ2UtaW1nJywgYDEvJHsgdGhpcy5saW5lIH0vJHsgdGhpcy5zdGVwc1tuZXh0XSB9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9wLmxpbmVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ3RhYi12aWV3OnRvJywgJ+W9k+WJjeWbvueJhycsIHRoaXMudGFiUGFuZWxJZCk7XHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdjaGFuZ2UtYWN0aXZlLXBhbmVsJywgJ3N0ZXAnKTtcclxuICAgIH1cclxuXHJcbiAgICBAQ29tcHV0ZShmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5saW5lLnRyaW0oKSA9PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm1hcFt0aGlzLmxpbmVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcFt0aGlzLmxpbmVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAod2luZG93LnJlYWRTdGVwcykge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB3aW5kb3cucmVhZFN0ZXBzKHRoaXMubGluZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwW3RoaXMubGluZV0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlZ0V4cCA9IC8uKlxcLnBuZ1wiPiguKi5wbmcpPFxcL2E+LiovO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gd2luZG93LmdldDxzdHJpbmc+KGAkeyB3aW5kb3cubG9jYXRpb24uaHJlZiB9MS8keyB0aGlzLmxpbmUgfWApO1xyXG4gICAgICAgIGNvbnN0IHN0ZXBOdW1iZXJzID0gcmVzcG9uc2Uuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN0ZXBOdW1iZXJzLm1hcChzdGVwID0+ICByZWdFeHAudGVzdChzdGVwKSA/IHJlZ0V4cC5leGVjKHN0ZXApWzFdIDogJycpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoaHJlZiA9PiBocmVmICE9ICcnKVxyXG4gICAgICAgICAgICAubWFwKGhyZWYgPT4gaHJlZi5yZXBsYWNlKC9cXC8kLywgJycpKTtcclxuICAgICAgICB0aGlzLm1hcFt0aGlzLmxpbmVdID0gcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0ZXBzOiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgTmF2VHlwZS5TdGVwLCB0cnVlKVxyXG4gICAgcHVibGljIGFycm93OiBOYXZUeXBlO1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJycpXHJcbiAgICBwdWJsaWMgdGFiUGFuZWxJZDogc3RyaW5nO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGl2c3RlcCA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudCgnaXYtc3RlcCcpLmJ1aWxkKCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIENvbXB1dGUsIEZpZWxkLCBNZXRob2QsIE1vdW50ZWQsIFByb3AsIFJlZ2lzdHJ5LCBUZW1wbGF0ZSwgV2F0Y2ggfSBmcm9tIFwiY29yZVwiO1xyXG5pbXBvcnQgTmF2VHlwZSBmcm9tIFwiLi9OYXZUeXBlXCI7XHJcbmltcG9ydCB7ICR0b29sIH0gZnJvbSBcIi4vdG9vbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRJVl9IaXN0b3J5IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQge1xyXG4gICAgXHJcbiAgICBATW91bnRlZChUSVZfSGlzdG9yeSwgJ2l2LWhpc3RvcnknKVxyXG4gICAgcHVibGljIG1vdW50ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWQgPSB3aW5kb3cudXVpZCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnbW91bnRlZCcsIHRoaXMudmlkKTtcclxuICAgICAgICAvKiog5b+r5o236ZSuOiDkuIov5LiL5LiA5LiqICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbigndXBkYXRlLWhpc3RvcnknLCAocHJvcDogU2Nyb2xsUHJvcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRvU2Nyb2xsKHByb3ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIEBUZW1wbGF0ZVxyXG4gICAgcHVibGljIHRlbXBsYXRlOiBzdHJpbmcgPSBgPGRpdiBpZD1cImhpc3RvcnktY29udGFpbmVyXCIgY2xhc3M9XCJyaWdodC1wYW5lbFwiIEBjbGljaz1cImNoYW5nZVBhbmVsXCI+XHJcbiAgICAgICAgPGRpdiA6Y2xhc3M9XCJ7ICdoaXN0b3J5JzogdHJ1ZSwgJ2Fycm93JzogdHJ1ZSwgJ2FjdGl2ZSc6IGFycm93ID09ICdoaXN0b3J5JyB9XCI+XHJcbiAgICAgICAgICAgIDxkaXYgOnRpdGxlPVwiaGlzdG9yeU51bWJlclwiIDpjbGFzcz1cInsgJ2hpc3RvcnktbnVtYmVyJzogdHJ1ZSwgJ2FjdGl2ZSc6IGN1cnJlbnQgPT0gaWR4LCAnbGFzdCc6IGxhc3QgPT0gaWR4IH1cIiB2LWZvcj1cIihoaXN0b3J5TnVtYmVyLCBpZHgpIG9mIGxpc3RcIiBAY2xpY2s9XCJzZXRJZHgoaWR4KVwiPlxyXG4gICAgICAgICAgICAgICAge3sgaGlzdG9yeU51bWJlci5zdWJzdHJpbmcoMikucmVwbGFjZSgvXFwucG5nLywgJycpIH19XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBjdXJyZW50OiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBsYXN0OiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICAvKiog54K55Ye75pe25YiH5o2i5YiwIGhpc3Rvcnkg6Z2i5p2/ICovXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgY2hhbmdlUGFuZWwoKTogdm9pZCB7XHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdjaGFuZ2UtYWN0aXZlLXBhbmVsJywgJ2hpc3RvcnknKTtcclxuICAgIH1cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBzZXRJZHgoaTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaGlzdG9yeUNvbnRhaW5lciA9IHdpbmRvdy5ieUNsYXNzKCdoaXN0b3J5IGFycm93JylbMF07XHJcbiAgICAgICAgaWYgKGhpc3RvcnlDb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgbGltaXQgPSAkdG9vbC5nZXRMaW1pdChoaXN0b3J5Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5kb1Njcm9sbCh7XHJcbiAgICAgICAgICAgICAgICBzaXplOiB0aGlzLmxpc3QubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudDogaSxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJHRvb2wuZ2V0T25lSGVpZ2h0KGhpc3RvcnlDb250YWluZXIpLFxyXG4gICAgICAgICAgICAgICAgcXR5OiAkdG9vbC5nZXRTY3JvbGxRdHkoaSwgbGltaXQsIDApLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgZG9TY3JvbGwocHJvcDogU2Nyb2xsUHJvcCkge1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBwcm9wLmN1cnJlbnQgKyBwcm9wLmRpcmVjdGlvbjtcclxuICAgICAgICBpZiAobmV4dCA8IDApIHtcclxuICAgICAgICAgICAgJ+W3sue7j+aYr+esrOS4gOW8oCcuaW5mbygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0ID49IHByb3Auc2l6ZSkge1xyXG4gICAgICAgICAgICAn5bey57uP5piv5pyA5ZCO5LiA5bygJy5pbmZvKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudCA9PSBuZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LmJ5SWQoJ2hpc3RvcnktY29udGFpbmVyJykuc2Nyb2xsVG8oMCwgcHJvcC5oZWlnaHQgKiBwcm9wLnF0eSk7XHJcbiAgICAgICAgdGhpcy5sYXN0ID0gdGhpcy5jdXJyZW50O1xyXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG5leHQ7XHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCd0YWItdmlldzp0bycsIHRoaXMudGFiUGFuZWxJZCwgJ+W9k+WJjeWbvueJhycpXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdjaGFuZ2UtaW1nJywgdGhpcy5saXN0W25leHRdKTtcclxuICAgIH1cclxuXHJcbiAgICBAUHJvcChBcnJheTxzdHJpbmc+LCBbXSwgdHJ1ZSlcclxuICAgIHB1YmxpYyBsaXN0OiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgTmF2VHlwZS5TdGVwLCB0cnVlKVxyXG4gICAgcHVibGljIGFycm93OiBOYXZUeXBlO1xyXG5cclxuICAgIEBQcm9wKFN0cmluZywgJycpXHJcbiAgICBwdWJsaWMgdGFiUGFuZWxJZDogc3RyaW5nO1xyXG5cclxuICAgIEBXYXRjaCgnYXJyb3cnKVxyXG4gICAgcHVibGljIG9uQXJyb3dDaGFuZ2UobmV3VmFsOiBOYXZUeXBlKSB7XHJcbiAgICAgICAgLyoqIOWIneWni+eahCBoaXN0b3J5IOmdouadv+aYr+ayoeaciemAiemhueeahCwg5b2T56ys5LiA5qyh5r+A5rS7IGhpc3Rvcnkg6Z2i5p2/5omN5pyJICovXHJcbiAgICAgICAgaWYgKCdoaXN0b3J5JyA9PSB0aGlzLmFycm93ICYmIHRoaXMuY3VycmVudCA9PSAtMSAmJiB0aGlzLmxhc3QgPT0gLTEgJiYgdGhpcy5saXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRJZHgoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGl2aGlzdG9yeSA9IFJlZ2lzdHJ5LmdldENvbXBvbmVudCgnaXYtaGlzdG9yeScpLmJ1aWxkKCk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIFJlZ2lzdHJ5IH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcblxyXG4vKiog6K6h566X5bGe5oCnICovXHJcbmV4cG9ydCBmdW5jdGlvbiBXYXRjaChmaWVsZDogc3RyaW5nLCBkZWVwOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogQWJzdHJhY3RDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBSZWdpc3RyeS5nZXRDb21wb25lbnQoKS5tZXRhLndhdGNoSW5mb3MucHVzaCh7XHJcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZCxcclxuICAgICAgICAgICAgZGVlcDogZGVlcCxcclxuICAgICAgICAgICAgcmVzb2x2ZTogcHJvcGVydHlLZXksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBYnN0cmFjdENvbXBvbmVudCwgTW91bnRlZCwgRmllbGQsIE1ldGhvZCwgQ29tcHV0ZSwgUmVnaXN0cnksIENvbXBvbmVudCwgRW1pdFBhcmEsIFJpZ2h0TWVudSB9IGZyb20gJ2NvcmUnO1xyXG5pbXBvcnQgJy4vZW5jb2RlLWNvbmZpZyc7XHJcbmltcG9ydCB7IGl2bGluZSB9IGZyb20gJy4vbGluZSc7XHJcbmltcG9ydCB7IGl2c3RlcCB9IGZyb20gJy4vc3RlcCc7XHJcbmltcG9ydCB7IGl2aGlzdG9yeSB9IGZyb20gJy4vaGlzdG9yeSc7XHJcbmltcG9ydCBOYXZUeXBlIGZyb20gJy4vTmF2VHlwZSc7XHJcbmltcG9ydCB7IGlzTWF0Y2ggfSBmcm9tICcuL3Rvb2wnO1xyXG5cclxuaWYgKGlzTWF0Y2goKSkge1xyXG4gICAgd2luZG93LmxpbmtDc3MoJy9zcmMvc2NyaXB0L3RpY2tldC1pbWFnZS12aWV3ZXIvaW5kZXguY3NzJyk7XHJcbiAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgPGRpdiBpZD1cImRpbmdsai1tYWluXCI+XHJcbiAgICAgICAgPGRpdiBpZD1cIml2LXRvb2xiYXJcIj5cclxuICAgICAgICAgICAgPGRpdiBpZD1cIml2LW9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgQGNsaWNrPVwib3BlblVybCgnLi4nKVwiPui/lOWbnuS4iuS4gOWxgnt7IGdldEhvdEtleSgnYmFjaycpIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz1cImFkZFN0YXIoZGlzcGxheSlcIj7mt7vliqDlhbPms6h7eyBnZXRIb3RLZXkoJ2FkZFN0YXInKSB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBAY2xpY2s9XCJzdGFycy5sZW5ndGggPSAwXCI+5riF56m65YWz5rOoe3sgZ2V0SG90S2V5KCdjbGVhblN0YXInKSB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBAY2xpY2s9XCJoaXN0b3J5Lmxlbmd0aCA9IDBcIj7muIXnqbrljoblj7J7eyBnZXRIb3RLZXkoJ2NsZWFuSGlzdG9yeScpIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz1cIm9wZW5VcmwoJ3Rlc3QueGxzJylcIj7kuIvovb3nlKjkvot7eyBnZXRIb3RLZXkoJ2Rvd25sb2FkQ2FzZScpIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz1cIm9wZW5VcmwoJ+m7mOiupOatpemqpCcpXCI+6buY6K6k5q2l6aqke3sgZ2V0SG90S2V5KCdkZWZhdWx0U3RlcCcpIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz1cIm9wZW5VcmwoJ2VycExvZycpXCI+RVJQ5pel5b+Xe3sgZ2V0SG90S2V5KCdlcnBMb2cnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBAY2xpY2s9XCJvcGVuVXJsKCdsb2dzJylcIj7lt6Xlhbfml6Xlv5d7eyBnZXRIb3RLZXkoJ2xvZ3MnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpbmdsai12LWZsZXhcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGktaW5wdXQgOnBsYWNlaG9sZGVyPVwiJ+i+k+WFpeihjOaVsOi/m+ihjOi3s+i9rCcgKyBnZXRIb3RLZXkoJ2xpbmUnKVwiIEBvbi1vdmVyPVwianVtcExpbmVcIiBAbW91bnRlZD1cImVtaXQgPT4gaWRzLmxpbmVJbnB1dCA9IGVtaXQudmlkXCI+PC9pLWlucHV0PlxyXG4gICAgICAgICAgICA8aS1pbnB1dCA6cGxhY2Vob2xkZXI9XCIn6L6T5YWl5q2l5pWw6L+b6KGM6Lez6L2sJyArIGdldEhvdEtleSgnc3RlcCcpXCIgQG9uLW92ZXI9XCJqdW1wU3RlcFwiIEBtb3VudGVkPVwiZW1pdCA9PiBpZHMuc3RlcElucHV0ID0gZW1pdC52aWRcIj48L2ktaW5wdXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBpZD1cIml2LXVuZGVyLXRvb2xiYXJcIj5cclxuICAgICAgICAgICAgPGl2bGluZSA6YXJyb3c9XCJhcnJvd1wiPjwvaXZsaW5lPlxyXG4gICAgICAgICAgICA8aXZzdGVwIDphcnJvdz1cImFycm93XCIgOnRhYi1wYW5lbC1pZD1cImlkcy50YWJQYW5lbFZpZXdcIj48L2l2c3RlcD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtdmlldyBkaW5nbGotdi1mbGV4XCI+XHJcbiAgICAgICAgICAgICAgICA8aS10YWItdmlldyA6bGlzdD1cInRhYk5hbWVzXCIgQG1vdW50ZWQ9XCJ0YWJQYW5lbFZpZXdNb3VudGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cIihzcmMsIGlkeCkgb2YgaW1hZ2VzXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBwb3NpdGlvbjogcmVsYXRpdmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImRpc3BsYXktaW1nXCIgOmlkPVwiZ2V0SW1hZ2VJZChzcmMsIGlkeClcIiA6c3JjPVwic3JjXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9pLXRhYi12aWV3PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGl2aGlzdG9yeSA6YXJyb3c9XCJhcnJvd1wiIEBvbi1jbGlja2VkPVwiZGF0YSA9PiB7IGRpc3BsYXkgPSBkYXRhOyB9XCIgOmxpc3Q9XCJoaXN0b3J5XCIgOnRhYi1wYW5lbC1pZD1cImlkcy50YWJQYW5lbFZpZXdcIj48L2l2aGlzdG9yeT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBcHAgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XHJcblxyXG4gICAgQENvbXBvbmVudCh7XHJcbiAgICAgICAgaXZsaW5lLCBpdnN0ZXAsIGl2aGlzdG9yeVxyXG4gICAgfSlcclxuICAgIEBNb3VudGVkKEFwcCwgJ0FwcCcpXHJcbiAgICBwdWJsaWMgbW91bnRlZCgpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcclxuICAgICAgICB3aW5kb3cuZGlzcGxheURhdGEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiog5b+r5o236ZSu5b+r5o236ZSu5YiH5o2i6Z2i5p2/ICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbignY2hhbmdlLXBhbmVsJywgKGRpcmVjdGlvbjogLTEgfCAwIHwgMSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVBhbmVsKGRpcmVjdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqIOW/q+aNt+mUrua3u+WKoOWFs+azqOWbvueJhyAqL1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2FkZC1zdGFyJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFN0YXIodGhpcy5kaXNwbGF5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiog5b+r5o236ZSu5riF56m65YWz5rOo5Zu+54mHICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbignY2xlYW4tc3RhcicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdGFycy5sZW5ndGggPSAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKiDlv6vmjbfplK7muIXnqbrljoblj7LorrDlvZUgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCdjbGVhbi1oaXN0b3J5JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkubGVuZ3RoID0gMDtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiog5YiH5o2i5rS75Yqo6Z2i5p2/ICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbignY2hhbmdlLWFjdGl2ZS1wYW5lbCcsIChkYXRhOiBOYXZUeXBlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXJyb3cgPSBkYXRhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKiDlv6vmjbfplK7ogZrnhKbooYzovpPlhaXmoYYgKi9cclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLm9uKCdmb2N1cy1saW5lJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2Rpbmdsai12LWlucHV0LXRleHQ6OmZvY3VzJywgbnVsbCwgdGhpcy5pZHMubGluZUlucHV0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiog5b+r5o236ZSu6IGa54Sm5q2l6L6T5YWl5qGGICovXHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5vbignZm9jdXMtc3RlcCcsICgpID0+IHtcclxuICAgICAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdkaW5nbGotdi1pbnB1dC10ZXh0Ojpmb2N1cycsIG51bGwsIHRoaXMuaWRzLnN0ZXBJbnB1dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqIOW/q+aNt+mUruabtOaWsOWbvueJh+i3r+W+hCAqL1xyXG4gICAgICAgIHdpbmRvdy4kcXVldWUub24oJ2NoYW5nZS1pbWcnLCAoaW1nOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2hOZXcoaW1nKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ID0gaW1nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGlkcyA9IHtcclxuICAgICAgICBsaW5lSW5wdXQ6ICcnLFxyXG4gICAgICAgIHN0ZXBJbnB1dDogJycsXHJcbiAgICAgICAgdGFiUGFuZWxWaWV3OiAnJyxcclxuICAgIH1cclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBhcnJvdzogTmF2VHlwZSA9IE5hdlR5cGUuU3RlcDtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBkaXNwbGF5OiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBzdGFyczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICAgIEBGaWVsZFxyXG4gICAgcHVibGljIGhpc3Rvcnk6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBARmllbGRcclxuICAgIHB1YmxpYyBpbWFnZUlkczogYW55ID0ge307XHJcblxyXG4gICAgQEZpZWxkXHJcbiAgICBwdWJsaWMgaW5pdCA9IHtcclxuICAgICAgICB0YWJQYW5lbFZpZXc6IHRydWUsXHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIG9wZW5VcmwodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKiogVGFi6Z2i5p2/5Yqg6L295LqL5Lu2LCDkuLrlhbbnu5HlrpogVGFiIOmUruWIh+aNoiBUYWIg6aG15LqL5Lu2ICovXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgdGFiUGFuZWxWaWV3TW91bnRlZChlbWl0OiBFbWl0UGFyYSkge1xyXG4gICAgICAgIHRoaXMuaWRzLnRhYlBhbmVsVmlldyA9IGVtaXQudmlkO1xyXG4gICAgICAgIGlmICh0aGlzLmluaXQudGFiUGFuZWxWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdC50YWJQYW5lbFZpZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmNvZGUgPT0gJ1RhYicpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCd0YWItdmlldzpuZXh0JywgbnVsbCwgZW1pdC52aWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluWbvueJh0lELCDlubbkuLrlhbbnu5Hlrprlj7PplK7oj5zljZUgKi9cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBnZXRJbWFnZUlkKHNyYzogc3RyaW5nLCBpZHg6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBpZCA9IHNyYztcclxuICAgICAgICBpZiAoaWR4ID09IDApIHtcclxuICAgICAgICAgICAgaWQgPSAnbWFpbi1pbWFnZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcclxuICAgICAgICB3aW5kb3cudGltZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB3aW5kb3cuYnlJZChpZCk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuJG1lbnUucmVnaXN0UmlnaHRDbGljayh0YXJnZXQsIGlkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPT0gJ21haW4taW1hZ2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICBuZXcgUmlnaHRNZW51KCflhbPms6gnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkU3RhcihzcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9PSAnbWFpbi1pbWFnZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBSaWdodE1lbnUoJ+WPlua2iOWFs+azqCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc3RhcnMucmVtb3ZlKHNyYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ+WbvueJh+W3suWPlua2iOWFs+azqCcuaW5mbygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICfmnKrmib7liLDpnIDopoHlj5bmtojlhbPms6jnmoTlm77niYcnLndhcm4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIh+aNoumdouadvyAqL1xyXG4gICAgQE1ldGhvZFxyXG4gICAgcHVibGljIGNoYW5nZVBhbmVsKGRpcmVjdGlvbjogLTEgfCAwIHwgMSkge1xyXG4gICAgICAgIGNvbnN0IHBhbmVscyA9IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQodGhpcy5jb25maWcsIHRoaXMuZGVmYXVsdENvbmZpZywgJ3BhbmVscycsIFtdKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHBhbmVscy5pbmRleE9mSWdub3JlQ2FzZSh0aGlzLmFycm93KTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSAoaW5kZXggKyBwYW5lbHMubGVuZ3RoICsgZGlyZWN0aW9uKSAlIHBhbmVscy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5hcnJvdyA9IHBhbmVsc1t0YXJnZXRdO1xyXG4gICAgfVxyXG5cclxuICAgIEBNZXRob2RcclxuICAgIHB1YmxpYyBhZGRTdGFyKHNyYzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnMuaW5jbHVkZXNJZ25vcmVDYXNlKHNyYykpIHtcclxuICAgICAgICAgICAgJ+aXoOmcgOmHjeWkjeWFs+azqCcud2FybigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnMucHVzaChzcmMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMgZ2V0SG90S2V5KGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBob3RLZXk6IGFueSA9IHdpbmRvdy5nZXRDb25maWdPckRlZmF1bHQodGhpcy5jb25maWcsIHRoaXMuZGVmYXVsdENvbmZpZywgJ2hvdEtleScsIHt9KTtcclxuICAgICAgICByZXR1cm4gYCgkeyBob3RLZXlba2V5XSB9KWA7XHJcbiAgICB9XHJcblxyXG4gICAgQE1ldGhvZFxyXG4gICAgLyoqIOi3s+i9rOiHs+aMh+WumuihjCAqL1xyXG4gICAgcHVibGljIGp1bXBMaW5lKGRhdGE6IEVtaXRQYXJhKSB7XHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdqdW1wVG9MaW5lJywgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgd2luZG93LiRxdWV1ZS5zZW5kTXNnKCdkaW5nbGotdi1pbnB1dC10ZXh0OjpjbGVhcicsIG51bGwsIGRhdGEudmlkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6Lez6L2s6Iez5oyH5a6a5q2l6aqkICovXHJcbiAgICBATWV0aG9kXHJcbiAgICBwdWJsaWMganVtcFN0ZXAoZGF0YTogRW1pdFBhcmEpIHtcclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2p1bXBUb1N0ZXAnLCBkYXRhLnZhbHVlKTtcclxuICAgICAgICB3aW5kb3cuJHF1ZXVlLnNlbmRNc2coJ2Rpbmdsai12LWlucHV0LXRleHQ6OmNsZWFyJywgbnVsbCwgZGF0YS52aWQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKiog6I635Y+W55So5oi36YWN572uICovXHJcbiAgICBAQ29tcHV0ZShmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LnJlYWRDb25maWcoKTtcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgY29uZmlnOiBhbnk7XHJcblxyXG4gICAgLyoqIOiOt+WPluiEmuacrOiuvue9rueahOm7mOiupOmFjee9riAqL1xyXG4gICAgQENvbXB1dGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5kZWZhdWx0Q29uZmlnKCk7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGRlZmF1bHRDb25maWc6IGFueTtcclxuXHJcbiAgICBAQ29tcHV0ZShmdW5jdGlvbigpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZGlzcGxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuc3RhcnMpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGltYWdlczogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgICBAQ29tcHV0ZShmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gWyflvZPliY3lm77niYcnXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuaW1hZ2VzW2ldLnJlcGxhY2UoLzFcXC8oXFxkKylcXC8oLiopKFxcLnBuZykvLCAn56ysJDHooYw6ICQyJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyB0YWJOYW1lczogQXJyYXk8c3RyaW5nPjtcclxuXHJcbn1cclxuXHJcbndpbmRvdy5jcmVhdGVWdWUoUmVnaXN0cnkuZ2V0Q29tcG9uZW50KCdBcHAnKS5idWlsZCgpLCAnI2Rpbmdsai1tYWluJyk7IiwiaW1wb3J0IHsgQWJzdHJhY3RDb21wb25lbnQsIFJlZ2lzdHJ5IH0gZnJvbSBcImNvcmUvZW50aXR5XCI7XHJcblxyXG4vKiog5LiK57qn5Lyg5YWl55qE5Y+C5pWwICovXHJcbmV4cG9ydCBmdW5jdGlvbiBDb21wb25lbnQoY29tcG9uZW50czogYW55KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogQWJzdHJhY3RDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBSZWdpc3RyeS5nZXRDb21wb25lbnQoKS5tZXRhLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbIkFycmF5IiwicHJvdG90eXBlIiwiaW5jbHVkZXNJZ25vcmVDYXNlIiwiYW5vdGhlciIsInRhcmdldCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0xvd2VyQ2FzZSIsInRoaXMiLCJtYXAiLCJlbGVtZW50IiwiaW5jbHVkZXMiLCJpbmRleE9mSWdub3JlQ2FzZSIsImluZGV4T2YiLCJwdXNoTmV3IiwicHVzaCIsInJlbW92ZSIsImlkeCIsInNwbGljZSIsIndpbmRvdyIsImRlZnVuYyIsInJlbGF0aXZlUGF0aCIsImxpbmtDc3MiLCJkaW5nbGpfaG9tZSIsInBhcmVudFBhdGgiLCJzdHlsZUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1cmwiLCJtZXJnZVBhdGgiLCJpbm5lckhUTUwiLCJnZXQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJpZCIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NlcyIsInJlc3VsdCIsImZpbmREYXRhIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsIml0ZW0iLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNhbGNUeHRXaWR0aCIsImlubmVyVGV4dCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJ0eHQiLCJjdHgiLCJnZXRDb250ZXh0IiwiZm9udCIsIndpZHRoIiwibWVhc3VyZVRleHQiLCJNYXRoIiwiZmxvb3IiLCJFbGVtZW50IiwiYW5pbWF0ZSIsImNvbmZpZyIsInRyYW5zaXRpb24iLCJvbGRfdHJhbnNpdGlvbiIsImtleXMiLCJPYmplY3QiLCJrZXkiLCJzdHlsZSIsInNldFRpbWVvdXQiLCJ0YXJnZXRfdHJhbnNpdGlvbiIsImZpbmRDaGlsZHJlbkJ5Q2xhc3MiLCJjbGF6eiIsImxpc3QiLCJjaGlsZHJlbiIsImkiLCJsZW5ndGgiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInBhcmVudCIsIl9jbGFzcyIsImNhbGxiYWNrIiwiYXN5bmMiLCJodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJlbmRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJ1dWlkIiwicHJlZml4Iiwic3ViTnVtYmVyIiwicmFuZG9tIiwicmVwbGFjZSIsImV4cCIsImZvckVhY2giLCJkYXRhIiwicGF0aCIsIl9kZWZhdWx0IiwiZ2V0VmFsIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJzcGxpdCIsImNvbnNvbGUiLCJkZWZhdWx0Q29uZmlnIiwiZ2V0Q29uZmlnT3JEZWZhdWx0IiwibWVyZ2UiLCJjb25maWcxIiwiY29uZmlnMiIsImlzQXJyYXkiLCJvcmRlciIsInNvcnQiLCJvMSIsIm8yIiwiY29tcGFyZVN0cmluZ0J5QXJyYXkiLCJpZHgxIiwiaWR4MiIsIm9iamVjdCIsImZpZWxkS2V5IiwidmFsdWUiLCJXaW5kb3ciLCIkcnNhIiwiZGVjcnlwdE9iamVjdCIsImVuY29kZUNvbmZpZyIsInRpbWVyIiwiY29uZGl0aW9uRnVuYyIsInRpbWUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjcmVhdGVSZWdFeHAiLCJzdHIiLCJSZWdFeHAiLCJwYW5lbHMiLCJ1cmxUeXBlcyIsIms4cyIsImhvdEtleSIsImJhY2siLCJhZGRTdGFyIiwiY2xlYW5TdGFyIiwiY2xlYW5IaXN0b3J5IiwiZG93bmxvYWRDYXNlIiwiZGVmYXVsdFN0ZXAiLCJlcnBMb2ciLCJsb2dzIiwibGluZSIsInN0ZXAiLCJtYXRjaExpc3QiLCJyZWFkQ29uZmlnIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtZXRhIiwiJGVtaXQiLCJldmVudE5hbWUiLCJwYXJhbSIsImdldEltZyIsImltZ1VybCIsImVtaXQiLCJ2aWQiLCJidWlsZCIsIl90aGlzIiwiaW5zdGFuY2UiLCJ2dWUiLCJuYW1lIiwiaGFzRmllbGQiLCJmaWVsZE5hbWVzIiwiZmllbGROYW1lIiwiaGFzTW91bnRlZCIsIm1vdW50ZWQiLCJob2NrTW91bnRlZCIsImhhc1RlbXBsYXRlIiwidGVtcGxhdGUiLCJtZXRob2RzIiwiaGFzTWV0aG9kIiwibWV0aG9kTmFtZXMiLCJtZXRob2ROYW1lIiwiaGFzQ29tcHV0ZSIsImNvbXB1dGVkIiwiY29tcHV0ZUluZm9zIiwiY29tcHV0ZSIsImZ1bmMiLCJoYXNQcm9wIiwicHJvcHMiLCJoYXNXYXRjaCIsIndhdGNoIiwid2F0Y2hJbmZvcyIsImZpZWxkIiwiaGFuZGxlciIsInJlc29sdmUiLCJkZWVwIiwiaGFzQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJyZWdpc3RWdWUiLCJ0eXBlIiwiQWJzdHJhY3RDb21wb25lbnQiLCJMYW5nSXRlbSIsImVuIiwiemgiLCJNZXRhSW5mbyIsImdldENvbXBvbmVudCIsIl90eXBlIiwiUmVnaXN0cnkiLCJsYXN0Q29tcG9uZW50VHlwZSIsImhhcyIsImNvbXBvbmVudCIsInNldCIsIk1hcCIsImxhc3RDb21wb25lbnROYW1lIiwibGFiZWwiLCJldmVudCIsImlzRGlzcGxheSIsIlJpZ2h0TWVudSIsIkNvbXBvbmVudFR5cGUiLCJSc2FDb25zdCIsIlN0cmluZyIsImVuY3J5cHQiLCJwdWJsaWNLZXkiLCJyc2EiLCJhbGVydCIsInB1YiIsImZsYWdfc3RhcnQiLCJ0bXAiLCJmbGFnX3NwbGl0IiwiZmxhZ19lbmQiLCJkZWNyeXB0IiwicHJpdmF0ZUtleSIsInByaSIsImZsYWcxIiwiZXJyIiwib25lT2YiLCJlcXVhbHNJZ25vcmVDYXNlIiwiaW5mbyIsIiR0aXAiLCJ3YXJuIiwiUXVldWVVdGlscyIsImV2ZW50UG9vbCIsImV2ZW50UXVldWUiLCJzZW5kTXNnIiwiZWxlbWVudElkIiwiZXZlbnRzIiwiJHF1ZXVlIiwiZnVuIiwicHVzaFRvQXJyYXlJbk9iamVjdCIsIm9uIiwiVGlwVXRpbHMiLCJkaXN0b3J5UG9wTXNnIiwiY29udGFpbmVyIiwib3BhY2l0eSIsImhlaWdodCIsIm1hcmdpbiIsInBhZGRpbmciLCJjcmVhdGVQb3BNc2ciLCJtc2ciLCJ0aW1lb3V0IiwibWFyZ2luVG9wIiwiYnlJZCIsImJvZHkiLCJ0b3AiLCJtc2dMaXN0IiwiYnlDbGFzcyIsIm4xIiwibjIiLCJuZXdFbGVtZW5ldCIsImFkZCIsIkRhdGUiLCJub3ciLCJpY29uIiwidG9VcHBlckNhc2UiLCJtYXJnaW5Cb3R0b20iLCJvZmZzZXRUb3AiLCJCSV9STSIsImludDJjaGFyIiwibiIsImNoYXJBdCIsIm9wX2FuZCIsIngiLCJ5Iiwib3Bfb3IiLCJvcF94b3IiLCJvcF9hbmRub3QiLCJsYml0IiwiciIsImNiaXQiLCJkZWNvZGVyIiwiYjY0bWFwIiwiaGV4MmI2NCIsImgiLCJjIiwicmV0IiwicGFyc2VJbnQiLCJiNjR0b2hleCIsInMiLCJrIiwic2xvcCIsInYiLCJCYXNlNjQiLCJkZWNvZGUiLCJhIiwiY3JlYXRlIiwiaWdub3JlIiwib3V0IiwiYml0cyIsImNoYXJfY291bnQiLCJFcnJvciIsInJlIiwidW5hcm1vciIsIm0iLCJleGVjIiwibWF4IiwiSW50MTAiLCJidWYiLCJtdWxBZGQiLCJ0IiwiYiIsImwiLCJzdWIiLCJwb3AiLCJ0b1N0cmluZyIsImJhc2UiLCJ2YWx1ZU9mIiwic2ltcGxpZnkiLCJyZVRpbWVTIiwicmVUaW1lTCIsInN0cmluZ0N1dCIsImxlbiIsImRiaXRzIiwiU3RyZWFtIiwiZW5jIiwicG9zIiwiaGV4RGlnaXRzIiwiY29uY2F0IiwiY2hhckNvZGVBdCIsImhleEJ5dGUiLCJoZXhEdW1wIiwic3RhcnQiLCJlbmQiLCJyYXciLCJpc0FTQ0lJIiwicGFyc2VTdHJpbmdJU08iLCJmcm9tQ2hhckNvZGUiLCJwYXJzZVN0cmluZ1VURiIsInBhcnNlU3RyaW5nQk1QIiwiaGkiLCJsbyIsInBhcnNlVGltZSIsInNob3J0WWVhciIsInBhcnNlSW50ZWdlciIsIm5lZyIsInBhZCIsInBhcnNlQml0U3RyaW5nIiwibWF4TGVuZ3RoIiwidW51c2VkQml0IiwiaW50cm8iLCJza2lwIiwiaiIsInBhcnNlT2N0ZXRTdHJpbmciLCJwYXJzZU9JRCIsIkFTTjEiLCJzdHJlYW0iLCJoZWFkZXIiLCJ0YWciLCJBU04xVGFnIiwidHlwZU5hbWUiLCJ0YWdDbGFzcyIsInRhZ051bWJlciIsImNvbnRlbnQiLCJJbmZpbml0eSIsInBvc0NvbnRlbnQiLCJhYnMiLCJpc1VuaXZlcnNhbCIsInRvUHJldHR5U3RyaW5nIiwiaW5kZW50IiwidGFnQ29uc3RydWN0ZWQiLCJwb3NTdGFydCIsInBvc0VuZCIsInRvSGV4U3RyaW5nIiwiZGVjb2RlTGVuZ3RoIiwiZ2V0SGV4U3RyaW5nVmFsdWUiLCJoZXhTdHJpbmciLCJvZmZzZXQiLCJzdWJzdHIiLCJzdHJlYW1TdGFydCIsImdldFN1YiIsImlzRU9DIiwiZSIsImxvd3ByaW1lcyIsImxwbGltIiwiQmlnSW50ZWdlciIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmVnYXRlIiwidG9SYWRpeCIsImQiLCJrbSIsInAiLCJEQiIsIm5iaSIsIlpFUk8iLCJzdWJUbyIsImNvbXBhcmVUbyIsImJpdExlbmd0aCIsIm5iaXRzIiwiRE0iLCJtb2QiLCJkaXZSZW1UbyIsIm1vZFBvd0ludCIsInoiLCJpc0V2ZW4iLCJDbGFzc2ljIiwiTW9udGdvbWVyeSIsImNsb25lIiwiY29weVRvIiwiaW50VmFsdWUiLCJEViIsImJ5dGVWYWx1ZSIsInNob3J0VmFsdWUiLCJzaWdudW0iLCJ0b0J5dGVBcnJheSIsImVxdWFscyIsIm1pbiIsImFuZCIsImJpdHdpc2VUbyIsIm9yIiwieG9yIiwiYW5kTm90Iiwibm90Iiwic2hpZnRMZWZ0IiwiclNoaWZ0VG8iLCJsU2hpZnRUbyIsInNoaWZ0UmlnaHQiLCJnZXRMb3dlc3RTZXRCaXQiLCJiaXRDb3VudCIsInRlc3RCaXQiLCJzZXRCaXQiLCJjaGFuZ2VCaXQiLCJjbGVhckJpdCIsImZsaXBCaXQiLCJhZGRUbyIsInN1YnRyYWN0IiwibXVsdGlwbHkiLCJtdWx0aXBseVRvIiwiZGl2aWRlIiwicmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwicSIsIm1vZFBvdyIsIm5idiIsIkJhcnJldHQiLCJnIiwiazEiLCJjb252ZXJ0IiwiZzIiLCJzcXJUbyIsIm11bFRvIiwidyIsImlzMSIsInIyIiwicmV2ZXJ0IiwibW9kSW52ZXJzZSIsImFjIiwidSIsIk9ORSIsInBvdyIsIk51bGxFeHAiLCJnY2QiLCJpc1Byb2JhYmxlUHJpbWUiLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsImZyb21JbnQiLCJmcm9tUmFkaXgiLCJtaSIsInNoIiwiaW50QXQiLCJjbGFtcCIsImRsU2hpZnRUbyIsImRyU2hpZnRUbyIsImJzIiwiY2JzIiwiYm0iLCJkcyIsImFtIiwic3F1YXJlVG8iLCJwbSIsInB0IiwidHMiLCJtcyIsIm5zaCIsInlzIiwieTAiLCJ5dCIsIkYxIiwiRjIiLCJkMSIsIkZWIiwiZDIiLCJxZCIsImludkRpZ2l0IiwiY2h1bmtTaXplIiwiTE4yIiwibG9nIiwiY3MiLCJkTXVsdGlwbHkiLCJkQWRkT2Zmc2V0IiwibmV4dEJ5dGVzIiwib3AiLCJmIiwibXVsdGlwbHlMb3dlclRvIiwibXVsdGlwbHlVcHBlclRvIiwic3F1YXJlIiwiZ2NkYSIsImdjZGExIiwiZnJvbU51bWJlckFzeW5jIiwiYm5wXzEiLCJibnBmbjFfMSIsInJlZHVjZSIsIm1wIiwibXBsIiwibXBoIiwidW0iLCJtdDIiLCJ1MCIsInEzIiwibXUiLCJwYXJzZUJpZ0ludCIsImluQnJvd3NlciIsIm5hdmlnYXRvciIsImFwcE5hbWUiLCJ4bCIsInhoIiwicnIiLCJ2diIsIkJJX1JDIiwicm5nX3N0YXRlIiwicm5nX3BwdHIiLCJBcmNmb3VyIiwiUyIsImluaXQiLCJuZXh0Iiwicm5nX3Bvb2wiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50MzJBcnJheSIsImNvdW50Iiwib25Nb3VzZU1vdmVMaXN0ZW5lcl8xIiwiZXYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJtb3VzZUNvb3JkaW5hdGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50Iiwicm5nX2dldF9ieXRlIiwiU2VjdXJlUmFuZG9tIiwiYmEiLCJSU0FLZXkiLCJkbXAxIiwiZG1xMSIsImNvZWZmIiwiZG9QdWJsaWMiLCJkb1ByaXZhdGUiLCJ4cCIsInhxIiwic2V0UHVibGljIiwiTiIsIkUiLCJ0ZXh0Iiwicm5nIiwicGtjczFwYWQyIiwic2V0UHJpdmF0ZSIsIkQiLCJzZXRQcml2YXRlRXgiLCJQIiwiUSIsIkRQIiwiRFEiLCJDIiwiZ2VuZXJhdGUiLCJCIiwicXMiLCJlZSIsInAxIiwicTEiLCJwaGkiLCJjdGV4dCIsInBrY3MxdW5wYWQyIiwiZ2VuZXJhdGVBc3luYyIsImxvb3AxIiwibG9vcDQiLCJsb29wMyIsImxvb3AyIiwic2lnbiIsImRpZ2VzdE1ldGhvZCIsImRpZ2VzdE5hbWUiLCJmaWxsZXIiLCJwa2NzMXBhZDEiLCJESUdFU1RfSEVBREVSUyIsInZlcmlmeSIsInNpZ25hdHVyZSIsIm5hbWVfMSIsImhhc093blByb3BlcnR5IiwicmVtb3ZlRGlnZXN0SGVhZGVyIiwibWQyIiwibWQ1Iiwic2hhMSIsInNoYTIyNCIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsInJpcGVtZDE2MCIsIllBSE9PIiwibGFuZyIsImV4dGVuZCIsInN1YmMiLCJzdXBlcmMiLCJvdmVycmlkZXMiLCJGIiwiY29uc3RydWN0b3IiLCJzdXBlcmNsYXNzIiwiX0lFRW51bUZpeCIsIkFERCIsInRlc3QiLCJ1c2VyQWdlbnQiLCJmbmFtZSIsImV4IiwiS0pVUiIsImFzbjEiLCJBU04xVXRpbCIsImludGVnZXJUb0J5dGVIZXgiLCJiaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleCIsImJpZ0ludGVnZXJWYWx1ZSIsIm1hdGNoIiwieG9yTGVuIiwiaE1hc2siLCJnZXRQRU1TdHJpbmdGcm9tSGV4IiwiZGF0YUhleCIsInBlbUhlYWRlciIsImhleHRvcGVtIiwibmV3T2JqZWN0IiwiX0tKVVJfYXNuMSIsIl9ERVJCb29sZWFuIiwiREVSQm9vbGVhbiIsIl9ERVJJbnRlZ2VyIiwiREVSSW50ZWdlciIsIl9ERVJCaXRTdHJpbmciLCJERVJCaXRTdHJpbmciLCJfREVST2N0ZXRTdHJpbmciLCJERVJPY3RldFN0cmluZyIsIl9ERVJOdWxsIiwiREVSTnVsbCIsIl9ERVJPYmplY3RJZGVudGlmaWVyIiwiREVST2JqZWN0SWRlbnRpZmllciIsIl9ERVJFbnVtZXJhdGVkIiwiREVSRW51bWVyYXRlZCIsIl9ERVJVVEY4U3RyaW5nIiwiREVSVVRGOFN0cmluZyIsIl9ERVJOdW1lcmljU3RyaW5nIiwiREVSTnVtZXJpY1N0cmluZyIsIl9ERVJQcmludGFibGVTdHJpbmciLCJERVJQcmludGFibGVTdHJpbmciLCJfREVSVGVsZXRleFN0cmluZyIsIkRFUlRlbGV0ZXhTdHJpbmciLCJfREVSSUE1U3RyaW5nIiwiREVSSUE1U3RyaW5nIiwiX0RFUlVUQ1RpbWUiLCJERVJVVENUaW1lIiwiX0RFUkdlbmVyYWxpemVkVGltZSIsIkRFUkdlbmVyYWxpemVkVGltZSIsIl9ERVJTZXF1ZW5jZSIsIkRFUlNlcXVlbmNlIiwiX0RFUlNldCIsIkRFUlNldCIsIl9ERVJUYWdnZWRPYmplY3QiLCJERVJUYWdnZWRPYmplY3QiLCJfbmV3T2JqZWN0IiwicGFyYW1MaXN0IiwiYXNuMU9iaiIsInRhZ1BhcmFtIiwiY2FsbCIsIm9iaiIsImV4cGxpY2l0IiwibmV3UGFyYW0iLCJqc29uVG9BU04xSEVYIiwiZ2V0RW5jb2RlZEhleCIsIm9pZEhleFRvSW50IiwiaGV4IiwiaTAxIiwiYmluYnVmIiwiYmluIiwic2xpY2UiLCJvaWRJbnRUb0hleCIsIm9pZFN0cmluZyIsIml0b3giLCJyb2lkdG94Iiwicm9pZCIsInBhZExlbiIsImJQYWQiLCJiOCIsImkwIiwiQVNOMU9iamVjdCIsImdldExlbmd0aEhleEZyb21WYWx1ZSIsImhWIiwiaE4iLCJoTmxlbiIsImhUTFYiLCJpc01vZGlmaWVkIiwiZ2V0RnJlc2hWYWx1ZUhleCIsImhMIiwiaFQiLCJnZXRWYWx1ZUhleCIsIkRFUkFic3RyYWN0U3RyaW5nIiwicGFyYW1zIiwiZ2V0U3RyaW5nIiwic2V0U3RyaW5nIiwibmV3UyIsInN0b2hleCIsInNldFN0cmluZ0hleCIsIm5ld0hleFN0cmluZyIsIkRFUkFic3RyYWN0VGltZSIsImxvY2FsRGF0ZVRvVVRDIiwidXRjIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0RGF0ZSIsImRhdGVPYmplY3QiLCJ3aXRoTWlsbGlzIiwiemVyb1BhZGRpbmciLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwibWlsbGlzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic01pbGxpcyIsImpvaW4iLCJzZXRCeURhdGVWYWx1ZSIsIm1vbnRoIiwiZGF5IiwiaG91ciIsInNlYyIsIlVUQyIsInNldEJ5RGF0ZSIsIkRFUkFic3RyYWN0U3RydWN0dXJlZCIsInNldEJ5QVNOMU9iamVjdEFycmF5IiwiYXNuMU9iamVjdEFycmF5IiwiYXNuMUFycmF5IiwiYXBwZW5kQVNOMU9iamVjdCIsImFzbjFPYmplY3QiLCJzZXRCeUJpZ0ludGVnZXIiLCJzZXRCeUludGVnZXIiLCJiaSIsInNldFZhbHVlSGV4IiwibyIsInNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyIsIm5ld0hleFN0cmluZ0luY2x1ZGluZ1VudXNlZEJpdHMiLCJzZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWUiLCJ1bnVzZWRCaXRzIiwiaFZhbHVlIiwiaFVudXNlZEJpdHMiLCJzZXRCeUJpbmFyeVN0cmluZyIsImJpbmFyeVN0cmluZyIsInNldEJ5Qm9vbGVhbkFycmF5IiwiYm9vbGVhbkFycmF5IiwibmV3RmFsc2VBcnJheSIsIm5MZW5ndGgiLCJzZXRWYWx1ZU9pZFN0cmluZyIsInNldFZhbHVlTmFtZSIsIm9pZE5hbWUiLCJvaWQiLCJ4NTA5IiwiT0lEIiwibmFtZTJvaWQiLCJkYXRlIiwic29ydEZsYWciLCJzb3J0ZmxhZyIsImlzRXhwbGljaXQiLCJzZXRBU04xT2JqZWN0IiwiaXNFeHBsaWNpdEZsYWciLCJ0YWdOb0hleCIsImV4dGVuZFN0YXRpY3MiLCJfYSIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiVHlwZUVycm9yIiwiX18iLCJKU0VuY3J5cHRSU0FLZXkiLCJfc3VwZXIiLCJwYXJzZUtleSIsImhhc1ByaXZhdGVLZXlQcm9wZXJ0eSIsImhhc1B1YmxpY0tleVByb3BlcnR5IiwicGFyc2VQcm9wZXJ0aWVzRnJvbSIsInBlbSIsIm1vZHVsdXMiLCJwdWJsaWNfZXhwb25lbnQiLCJkZXIiLCJIZXgiLCJwcml2YXRlX2V4cG9uZW50IiwicHJpbWUxIiwicHJpbWUyIiwiZXhwb25lbnQxIiwiZXhwb25lbnQyIiwiY29lZmZpY2llbnQiLCJzZXF1ZW5jZSIsImdldFByaXZhdGVCYXNlS2V5Iiwib3B0aW9ucyIsImFycmF5IiwiaW50IiwiYmlnaW50IiwiZ2V0UHJpdmF0ZUJhc2VLZXlCNjQiLCJnZXRQdWJsaWNCYXNlS2V5IiwiZmlyc3Rfc2VxdWVuY2UiLCJzZWNvbmRfc2VxdWVuY2UiLCJiaXRfc3RyaW5nIiwiZ2V0UHVibGljQmFzZUtleUI2NCIsIndvcmR3cmFwIiwicmVnZXgiLCJnZXRQcml2YXRlS2V5IiwiZ2V0UHVibGljS2V5IiwidmVyc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJucG1fcGFja2FnZV92ZXJzaW9uIiwiSlNFbmNyeXB0IiwiZGVmYXVsdF9rZXlfc2l6ZSIsImRlZmF1bHRfcHVibGljX2V4cG9uZW50Iiwic2V0S2V5Iiwic2V0UHJpdmF0ZUtleSIsInByaXZrZXkiLCJzZXRQdWJsaWNLZXkiLCJwdWJrZXkiLCJnZXRLZXkiLCJjYiIsImdldFByaXZhdGVLZXlCNjQiLCJnZXRQdWJsaWNLZXlCNjQiLCJkaXNwYXRjaCIsInJlc29sdmVPYmplY3QiLCJqc2VuY3J5cHQiLCJDb250ZXh0TWVudVV0aWxzIiwiRmllbGQiLCJwcm9wZXJ0eUtleSIsIk1ldGhvZCIsImRlc2NyaXB0b3IiLCJQcm9wIiwiZGVmIiwicmVxdWlyZWQiLCJkZWZhdWx0IiwiVGVtcGxhdGUiLCJNb3VudGVkIiwiY29tcG9uZW50Q2xhc3MiLCJDb21wdXRlIiwicmVnaXN0UmlnaHRDbGljayIsInByZXZlbnREZWZhdWx0IiwibWVudSIsInJpZ2h0Q2xpY2tNZW51IiwiaXRlbXMiLCJidWlsZE1lbnUiLCJsZWZ0IiwiY2xpZW50WCIsImNsaWVudFkiLCIkbWVudSIsIk5hdlR5cGUiLCJnZXRDbGFzcyIsInhUeXBlIiwiZ2V0U3R5bGUiLCJ4U2l6ZSIsIkJ1dHRvblgiLCJmb2N1cyIsInNldFZhbHVlIiwiSW5wdXRYIiwiYWN0aXZlIiwib25jbGlja2VkIiwicG9zdFRleHQiLCJwcmVUZXh0IiwiU3dpdGNoWCIsIkNvbWJvWCIsIkZ1bmN0aW9uIiwiTmF2aWdhdG9yWCIsImluZGV4Iiwic2l6ZSIsIlNjcm9sbGVyWSIsIk51bWJlciIsImNoYW5nZWQiLCJOYXZpZ2F0b3JWaWV3IiwiY2xpY2tlZCIsInRvIiwiZmlsdGVyIiwiZ2V0SWQiLCJmbG9hdEVsZW1lbnQiLCJxdWVyeSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0TGVmdCIsIlRhYlBhbmVsWCIsIlNjcm9sbGVyWCIsInRhYlBhbmVsSWQiLCJ0YWJQYW5lbExvYWRlZCIsIlRhYlZpZXciLCJjYWNoZSIsImNoZWNrQWxsIiwiY2hlY2tlZExpc3QiLCJiZXN0V2lkdGhDYWNoZSIsImNvbHVtbiIsImNvbHVtbktleSIsImdldENvbHVtbktleSIsImZsZXgiLCJmbGV4Q29sdW1ucyIsImdldEJlc3RXaWR0aCIsImRvQ2hlY2tBbGwiLCJjb2x1bW5UaXRsZSIsImdldENvbHVtbkNhcHRpb24iLCJ3aWR0aEFycmF5IiwiY29sdW1uQ29udGVudCIsImdldENlbGwiLCJtYXhXaWR0aCIsImNvbHVtbnMiLCJUYWJsZVgiLCJCb29sZWFuIiwiY29sdW1uTmFtZSIsImdldENvbnRhaW5lclN0eWxlIiwiZ2V0UHJvZ3Jlc3NTdHlsZSIsInBlcmNlbnQiLCJQcm9ncmVzc1giLCIkdG9vbCIsImFjdGl2ZVBhbmVsIiwiY2hpbGQiLCJvZmZzZXRIZWlnaHQiLCJjdXJyZW50IiwibGltaXQiLCJkaXJlY3Rpb24iLCJnZXRPbmVIZWlnaHQiLCJnZXRMaW1pdCIsInBhcmVudE5vZGUiLCJxdHkiLCJpbmRleE9mQ2hpbGRCeUNsYXNzIiwiZ2V0Q3VycmVudEluZGV4IiwiZ2V0U2Nyb2xsUXR5IiwiYWx0RG93biIsInVzZXJDb25maWciLCJ2YWx1ZXMiLCJjb2RlIiwia2V5Q29kZSIsImdldEFjdGl2ZVBhbmVsIiwicHJvcCIsImdldFNjcm9sbFByb3AiLCJpdmxpbmUiLCJsYXN0IiwibGluZXMiLCJzZXRJZHgiLCJkb1Njcm9sbCIsImxpbmVOdW1iZXIiLCJ0b1N0ZXAiLCJ0b0xhc3RTdGVwIiwibGluZUNvbnRhaW5lciIsInNjcm9sbFRvIiwiZXhwZWN0IiwiTGluZSIsIlRJVl9MaW5lIiwicmVhZExpbmVSZWdFeHAiLCJyZWFkTGluZXMiLCJsb2NhdGlvbiIsImhyZWYiLCJTdGVwIiwiaXZzdGVwIiwibGFzdFN0ZXBzIiwic3RlcHMiLCJzdGVwTnVtYmVyIiwibGluZUNoYW5nZWQiLCJzdGVwQ29udGFpbmVyIiwiVElWX1N0ZXAiLCJ0cmltIiwicmVhZFN0ZXBzIiwicmVnRXhwIiwiaXZoaXN0b3J5IiwiY2hhbmdlUGFuZWwiLCJoaXN0b3J5Q29udGFpbmVyIiwib25BcnJvd0NoYW5nZSIsIm5ld1ZhbCIsImFycm93IiwiVElWX0hpc3RvcnkiLCJpc0RldiIsImlzTWF0Y2giLCJpZHMiLCJsaW5lSW5wdXQiLCJzdGVwSW5wdXQiLCJ0YWJQYW5lbFZpZXciLCJkaXNwbGF5Iiwic3RhcnMiLCJoaXN0b3J5IiwiaW1hZ2VJZHMiLCJkaXNwbGF5RGF0YSIsImltZyIsIm9wZW5VcmwiLCJ0YWJQYW5lbFZpZXdNb3VudGVkIiwiZ2V0SW1hZ2VJZCIsInNyYyIsImdldEhvdEtleSIsImp1bXBMaW5lIiwianVtcFN0ZXAiLCJBcHAiLCJpbWFnZXMiLCJjcmVhdGVWdWUiXSwic291cmNlUm9vdCI6IiJ9