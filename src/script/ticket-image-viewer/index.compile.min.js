/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={384:()=>{Array.prototype.includesIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).indexOf(e)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){var e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)}},144:()=>{window.defunc("linkCss",(function(t){window.linkCss(window.dinglj_home.decrypt(),t)})),window.defunc("linkCss",(function(t,e){var n=document.createElement("style"),i=window.mergePath(t,e);n.innerHTML=window.get(i),document.head.appendChild(n)}))},374:()=>{window.defunc("byId",(function(t){return document.getElementById(t)})),window.defunc("byClass",(function(t){var e=[],n=document.getElementsByClassName(t);return n&&e.push.apply(e,n),e})),window.defunc("query",(function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e})),window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,i){var o=document.createElement("canvas").getContext("2d");o.font="".concat(e," ").concat(n," ").concat(i);var r=o.measureText(t).width;return Math.floor(r)})),Element.prototype.animate=function(t,e){for(var n=this,i=getComputedStyle(this).transition,o=Object.keys(t),r=0,s=o;r<s.length;r++){var a=s[r];this.style[a]=t[a][0]}setTimeout((function(){var r=e/1e3+"s";n.style.transition=r;for(var s=0,a=o;s<a.length;s++){var u=a[s];n.style[u]=t[u][1]}setTimeout((function(){n.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){for(var e=[],n=this.children,i=0;i<n.length;i++)n[i].classList.contains(t)&&e.push(n[i]);return e},window.defunc("indexOfChildByClass",(function(t,e){for(var n=t.children,i=0;i<n.length;i++)if(n[i].classList.contains(e))return i;return-1}))},343:()=>{window.defunc("get",(function(t){return window.get(t,{callback:null,async:!1})})),window.defunc("get",(function(t,e){var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText}))},963:()=>{window.defunc("imgUrl",(function(t){return window.mergePath(window.dinglj_home.decrypt(),t)})),window.defunc("mergePath",(function(t){return window.mergePath(window.dinglj_home.decrypt(),t)})),window.defunc("mergePath",(function(t,e){return t.endsWith("/")||t.endsWith("\\")||(t+="/"),(e.startsWith("/")||e.startsWith("\\"))&&(e=e.substring(1)),"".concat(t).concat(e)}))},726:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var i="";"string"==typeof e?i=t[e]:"function"==typeof e&&(i=e(t)),n[i]?n[i].push(t):n[i]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,i){if(null==t||null==t)return n;for(var o=t,r=0,s=e.split(".");r<s.length;r++)if(!(o=o[s[r]]))return i&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return o})),window.defunc("getConfigOrDefault",(function(t,e,n,i){return window.getConfigOrDefault(t,e,n,i,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,i,o){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,l=Object.keys(r);u<l.length;u++)a[p=l[u]]=r[p]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&o&&a.push.apply(a,s);else if("object"==typeof s&&o)for(var c=0,h=Object.keys(s);c<h.length;c++){var p;null==a[p=h[c]]&&(a[p]=s[p])}}return"NOT_FOUND"==a&&(a=i,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var i=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),o=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return i==o?e<n?-1:e>n?1:0:i-o}return e<n?-1:e>n?1:0})),window.defunc("pushToArrayInObject",(function(t,e,n){return Array.isArray(t[e])?t[e].push(n):t[e]=[n],t})),Window.prototype.defaultConfig=function(){return window.$rsa.decryptObject(window.encodeConfig())},Window.prototype.timer=function(t,e){void 0===e&&(e=30),e=e<30?30:e;var n=setInterval((function(){t()&&clearInterval(n)}),e)},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))}},818:()=>{window.dinglj_home="$DINGLJ-ENCODE-START$J3ZcEuh+w4Yppy/etXbd/XQYA8NPmEH68+1JV+M4/42ZO3IbDeQYJKvdxQvrkaQSsZAzwG48HlQGkVmVtcKr4VlBgc/KPA4AXzHZrLK64B5MapJ3pt//wBY8+4Casltk6ncRwQuOS7Rx9b2mindXkKq+YBd6Q4Z10LVi1+tO8Ic=$DINGLJ-ENCODE-END$",window.encodeConfig=function(){return{panels:["$DINGLJ-ENCODE-START$jT2//s5QdgObf4aNLljjwbGLq/Cjh9+em7dOn2HFAsSJOSxfEmcT6zNCpOhUaZqgO0Xg8+ubnk13Z4a6sGr+gnseCwLFxWeb6ZF7CxxKu4SxTJBYLLILLBtRI/k+8jVOmQC/FGa1J/jfluUvug+dVmlkbc+xgYIUXi9KKACbQis=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$KkSVmUTgFU56gMVoSV+1/Tmy3coXKsLBDkr+1HbzKFh3vGFU6XnO9xPqNW0u0r2HtuQjG935iIxzpsJS+kO3/iFVLk37OPkJDRUpQ7DEgsySz85h3tP53KzJ8uDeBoxWGX6FgKuB4bR4pt7du0XAq2Yz1d/3Y5UAsXIdhP7HvMU=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$Z3eyWqCjOCp9/jNhjWaU/vdN6LBcfOPZiBnCYI2pJDQm3lyY+eCYT0onFbfcRcCH0bj6ID0fQYM2flKRZzM7pn0KL+Ed3cWhjulLPJTMWsYUOSD4bgm39snMlgQdgePWz4a9NUN0R0qXSIa2nJS201bqRM2zG+l9Cgr06XFST/Y=$DINGLJ-ENCODE-END$"],urlTypes:{k8s:0},hotKey:{back:"$DINGLJ-ENCODE-START$ckainWVea/4NP7dJc44RECExToDUgtQsPVvz2Fqv1XDGfRQyRlhGu73VQd2HYA59amg/FpkNb3iS0+yekl6N6HW/tJAG1VTzlYJwWK8KilXe2IwOqFHfMjJklmCceS56HNXPRJ0CMK/mNIpe9PKU+9yJ5vM7PcdIIEkXN0GZF+E=$DINGLJ-ENCODE-END$",addStar:"$DINGLJ-ENCODE-START$VPBACDAG4wxNAOY9TXhni5t8uArEWwJLiShga0pclFy9Wy4/L6bCIpgZ20Af3KsNmcAqwJfJVMJRW3+iKqNIxKvqMiuL7Ihe4Ma7SI5vWmOSYUdZqyauYnStck0jN1cuHsxHcKeRifGp6tb+EdhbHr5awHwImcvVtrwZ22QI8Oo=$DINGLJ-ENCODE-END$",cleanStar:"$DINGLJ-ENCODE-START$Z5t73zvQLAW3yp943j3eaiaF/zktgCVDlwopn2eye0wSH3WlcyO+KIjm4eAfbCZn1GliTvmhdWDpNxhxBpLagD+6CG0SdAf2f2SJuvZXF64bOW3KnMu1aDlQJCVscRRM1n4cxzcpoP7AmVaxsvr5IYkHAS3YbETfWo5uuEiC9k8=$DINGLJ-ENCODE-END$",cleanHistory:"$DINGLJ-ENCODE-START$DoVgw66phGADgiSAwvr9sO1F3Fu2b/sxiT/5ZCgSUDFIgFBZKo73ODf1UdnWlVCi7mCBlsjO4MDyPdSoSLnRxENl8VPLnQ242+pYrjNEgBfjUqEoijXK0F7mrzd840RDLJvlqXKo5zC4JfDn5hhdGG2LYsufpPAkr+wNDukznPo=$DINGLJ-ENCODE-END$",downloadCase:"$DINGLJ-ENCODE-START$drHwJT4TB2qZqVf05iBptqRQnOltY9n1TZH0bz8nCXuRYRkob9FKeIvqFHcB40xkjdA8TQOuTumSCjz+O5NvlybhHF+VIXHyCg3PE6cB2VucfBRwfJdipBu5TjkcOWkXKE20B9Po/CEUlTkUAm8aGxKUQk6B+P+ZOw+VP2XBmXI=$DINGLJ-ENCODE-END$",defaultStep:"$DINGLJ-ENCODE-START$Cq/Hc9esfmeA62PWSTyir3zYdcnnemRabX2F828sGDXHS2TJUDdj/r84iU2vIXhwGriUpUTDGSy32owoqynBx1T3eG4oOKe7y4npYNpKo6rkGr311vHrXTYfVNlxVwVBTT0TtgF0lXkj1qraICC5XlFZDM/yWZHHrEPBr0uQPp8=$DINGLJ-ENCODE-END$",erpLog:"$DINGLJ-ENCODE-START$glmLeGVq5TUXUrQIeX4leFIvULKLNhAHhqh6U2l3ebRIhdPHP3CD2zby+Dpy90m4vetTyK9wqQV0INalolLywnLsQlUs33/uyRaIFDoW1ImzVbfzu8nYy/5o3vnfkPJE/oxXFSTluF407gwToK696KRweEPzZrEHv1kDLj+vISU=$DINGLJ-ENCODE-END$",logs:"$DINGLJ-ENCODE-START$iPrUhTeSkDs+YhHDrea3xt6sMhXbKOsfRA7VlfVzmnRTo2tz3iho0g4BOxGmNQk3vsVag1Cb0tydrJBVs/6VG00E2KKO0N2ArI6hgjF1AiYYiU2da7HtgycXVzRUXfQF+y28Rgtap14DkMg9Qu99bjnKxCbEX0Kj7JW7Q6Lwgac=$DINGLJ-ENCODE-END$",line:"$DINGLJ-ENCODE-START$lhr66JHS31QzqnIZx88CHB81kEbFiEbZZXNmR9bRK6LSUd25D+1p0qZmQAOPe6Cunm6w429+KbNX9GkMtaXCKuluIUed+1xUoqBEzJwQIdCp9Yj09u8KoXiUSb0Tm6OycLWT/L4+jaIcwc7we0gTcqZBG3MhG8qvVHW9lJE0Lhk=$DINGLJ-ENCODE-END$",step:"$DINGLJ-ENCODE-START$GSgKiEqpBRlwhXGpcm/iY6GHhIUaqg28ITrvrjen/MZr52U2sOQ5ffC+1sikLaMYdy8AgVEOaaYjLmoaR2ekeaH9zsXypnEjrgR6HCutgPRavPqJuNa6I8RsnMfKUtauj6Rp6FNj3mYfSoAhAVeZIoyxzn0WPPmPLmzz9MBlAq0=$DINGLJ-ENCODE-END$"},matchList:["$DINGLJ-ENCODE-START$Wg4wgNQSF2L/ImIu4m/3ggFp/iRMD5DnV9Goa02AuSfC5zfCOY3EA+0taD3JzcaUV9K/Ji3j5X8BKEyGdKH1asvRtgItUHMLHY3skuMvRGahU+I4yuRB0mH6PGrFpJYTt1FVGTL3uv6MmCPn4jTeD+VU3pOrL+SaaDGm4m04UO0=$DINGLJ-SPLIT-FLAG$KhKRT81VS9HLF6RfsJSwnRN7paJ7pDsyJso7zWBijhBefi9nVQiwgIe6yLGIpRZhCiJz5pY8H41x4N7/ZhbBx9jjoZoVVatwPhOUYRq9ZRLG6IaN334FkjtEuAm6Ep3PoNZfM+8SJYqQFyChWXuHu8FCR0uhsOSaN01yYtBOx7U=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$lY0Or9+kbmix+QRWqMkLjYcUvTwuhIp3kVGC7p5oRy7pyWJKzkyC1xty5sceB3MdMxmClsymlt2VpBcZUObtBo8wYvfHmQNoy7oWRLLRavhe10sw7JGG2XSdzrd8prwdijJxBPb5dBHo8do051JuKgV31ZNEKjKrW77sKioqiTU=$DINGLJ-SPLIT-FLAG$btAQ+KQ6hsVDMKLwQg9A3VzLbhXRgUUGmU4IcPIjTEu3PLJz5GEZ9oqkTL8n+IUBcnQZZy3k6855OZWnDrjAwE/32dAvE/ZOfkqMiaRMAYpqOXU48LS4FI2EPavM5TiX6kYl/njCbFS1HlalWl961qNj4PBDSITXSdWVKtLNbeE=$DINGLJ-ENCODE-END$"]}},window.readConfig||(window.readConfig=function(){return{}})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{"use strict";n(818),n(726),n(384),n(144),n(374),n(343),n(963);var t=function(){function t(){this.meta=new o}return t.prototype.$emit=function(t,e){},t.prototype.getImg=function(t){return window.imgUrl(t)},t.prototype.emit=function(t,e){this.$emit(t,{value:e,vid:this.vid})},t.prototype.build=function(){var t=this,e=new this.meta.clazz,n={data:function(){var n={vid:"",name:t.name};if(t.meta.hasField())for(var i=0,o=t.meta.fieldNames;i<o.length;i++){var r=o[i];n[r]=e[r]}return n}};if(this.meta.hasMounted()&&(n.mounted=e[this.meta.hockMounted]),this.meta.hasTemplate()&&(n.template=e[this.meta.template]),n.methods={getImg:this.getImg,emit:this.emit},this.meta.hasMethod())for(var i=0,o=this.meta.methodNames;i<o.length;i++){var r=o[i];n.methods[r]=e[r]}if(this.meta.hasCompute()){n.computed={};for(var s=0,a=this.meta.computeInfos;s<a.length;s++){var u=a[s];n.computed[u.key]=u.func}}if(this.meta.hasProp()&&(n.props=this.meta.props),this.meta.hasWatch()){n.watch={};for(var l=0,c=this.meta.watchInfos;l<c.length;l++){var h=c[l];n.watch[h.field]={handler:e[h.resolve],deep:h.deep}}}return this.meta.hasComponents()&&(n.components=this.meta.components),window.registVue(this.type,n),n},t}();window.AbstractComponent=t;const e=t;window.LangItem=function(t,e){this.en=t,this.zh=e};var i=function(){function t(){this.fieldNames=[],this.methodNames=[],this.computeInfos=[],this.props={},this.components={},this.hockMounted="",this.template="",this.watchInfos=[]}return t.prototype.hasWatch=function(){return this.watchInfos.length>0},t.prototype.hasField=function(){return this.fieldNames.length>0},t.prototype.hasMethod=function(){return this.methodNames.length>0},t.prototype.hasCompute=function(){return this.computeInfos.length>0},t.prototype.hasProp=function(){return Object.keys(this.props).length>0},t.prototype.hasComponents=function(){return Object.keys(this.components).length>0},t.prototype.hasMounted=function(){return""!=this.hockMounted},t.prototype.hasTemplate=function(){return""!=this.template},t}();window.MetaInfo=i;const o=i;var r=function(){function t(){}return t.getComponent=function(n){var i=n;if(null!=t.lastComponentType&&t.lastComponentType==i||(n?t.lastComponentType=i:i=t.lastComponentType),t.map.has(i))return t.map.get(i);var o=new e;return o.type=i,t.map.set(i,o),o},t.map=new Map,t.lastComponentName="",t.lastComponentType=null,t}();window.Registry=r;const s=r;var a=function(t,e,n){void 0===n&&(n=function(){return!0}),this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=n};window.RightMenu=a;const u=a;var l;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress"}(l||(l={})),window.ComponentType=l;const c=l;var h;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(h||(h={})),window.RsaConst=h;const p=h;String.prototype.encrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub);for(var e="'".concat(p.flag_start),n=this;;){if(n.length<100){e+=window.$rsa.encrypt(n,t);break}var i=n.substring(0,100);n=n.substring(100),e="".concat(e).concat(window.$rsa.encrypt(i,t)).concat(p.flag_split)}return"".concat(e).concat(p.flag_end,"'")},String.prototype.decrypt=function(t){void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri);var e=this.startsWith(p.flag_start);if(e!=this.endsWith(p.flag_end))return this;if(e){for(var n="",i=0,o=this.replace(p.flag_start,"").replace(p.flag_end,"").split(p.flag_split);i<o.length;i++){var r=o[i];n+=window.$rsa.decrypt(r,t)}return n}return this},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(){window.$tip.info(this,2e3,"10%")},String.prototype.warn=function(){window.$tip.warn(this,2e3,"10%")},String.prototype.err=function(){window.$tip.err(this,2e3,"10%")};var d={eventPool:{},eventQueue:{},sendMsg:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n));var o=window.$queue.eventPool[i];if(Array.isArray(o)){if(1==o.length)return o[0](e);for(var r=[],s=0,a=o;s<a.length;s++){var u=a[s];r.push(u(e))}}else window.pushToArrayInObject(window.$queue.eventQueue,i,e)},on:function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n)),window.pushToArrayInObject(window.$queue.eventPool,i,e);var o=window.$queue.eventQueue[i];if(Array.isArray(i))for(var r=0,s=o;r<s.length;r++)e(s[r])}};window.$queue=d;var f={distoryPopMsg:function(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))},createPopMsg:function(t,e,n,i){var o=this;void 0===n&&(n=2e3),void 0===i&&(i="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=i;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)this.distoryPopMsg(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",e),u.time=Date.now();var l=document.createElement("div");l.classList.add("dinglj-v-pop-msg-icon",e),l.innerText=e.substring(0,1).toUpperCase(),u.appendChild(l),u.innerHTML+=t,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){o.distoryPopMsg(u,r)}),n)},info:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"info",e,n)},warn:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"warn",e,n)},err:function(t,e,n){void 0===e&&(e=2e3),void 0===n&&(n="10%"),this.createPopMsg(t,"err",e,n)}};window.$tip=f;var g="0123456789abcdefghijklmnopqrstuvwxyz";function v(t){return g.charAt(t)}function y(t,e){return t&e}function m(t,e){return t|e}function w(t,e){return t^e}function b(t,e){return t&~e}function S(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function T(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var x,E="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function O(t){var e,n,i="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),i+=E.charAt(n>>6)+E.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),i+=E.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),i+=E.charAt(n>>2)+E.charAt((3&n)<<4));(3&i.length)>0;)i+="=";return i}function D(t){var e,n="",i=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=E.indexOf(t.charAt(e));r<0||(0==i?(n+=v(r>>2),o=3&r,i=1):1==i?(n+=v(o<<2|r>>4),o=15&r,i=2):2==i?(n+=v(o),n+=v(r>>2),o=3&r,i=3):(n+=v(o<<2|r>>4),n+=v(15&r),i=0))}return 1==i&&(n+=v(o<<2)),n}var C,I={decode:function(t){var e;if(void 0===C){for(C=Object.create(null),e=0;e<64;++e)C["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(C["-"]=62,C._=63,e=0;e<9;++e)C["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],i=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=C[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);i|=r,++o>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,o=0):i<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=I.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return I.decode(t)}},N=1e13,j=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,i,o=this.buf,r=o.length;for(n=0;n<r;++n)(i=o[n]*t+e)<N?e=0:i-=(e=0|i/N)*N,o[n]=i;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,i=this.buf,o=i.length;for(e=0;e<o;++e)(n=i[e]-t)<0?(n+=N,t=1):t=0,i[e]=n;for(;0===i[i.length-1];)i.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),i=e.length-2;i>=0;--i)n+=(N+e[i]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*N+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),R=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,A=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function P(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var L,V=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var i="",o=t;o<e;++o)if(i+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:i+="  ";break;case 15:i+="\n";break;default:i+=" "}return i},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var i=this.get(n);if(i<32||i>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",i=t;i<e;++i)n+=String.fromCharCode(this.get(i));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",i=t;i<e;){var o=this.get(i++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(i++)):String.fromCharCode((15&o)<<12|(63&this.get(i++))<<6|63&this.get(i++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,i,o="",r=t;r<e;)n=this.get(r++),i=this.get(r++),o+=String.fromCharCode(n<<8|i);return o},t.prototype.parseTime=function(t,e,n){var i=this.parseStringISO(t,e),o=(n?R:A).exec(i);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),i=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(i+=":"+o[5],o[6]&&(i+=":"+o[6],o[7]&&(i+="."+o[7]))),o[8]&&(i+=" UTC","Z"!=o[8]&&(i+=o[8],o[9]&&(i+=":"+o[9]))),i):"Unrecognized time: "+i},t.prototype.parseInteger=function(t,e){for(var n,i=this.get(t),o=i>127,r=o?255:0,s="";i==r&&++t<e;)i=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(s=i,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}o&&(i-=256);for(var a=new j(i),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var i=this.get(t),o="("+((e-t-1<<3)-i)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?i:0,l=7;l>=u;--l)r+=a>>l&1?"1":"0";if(r.length>n)return o+P(r,n)}return o+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return P(this.parseStringISO(t,e),n);var i=e-t,o="("+i+" byte)\n";i>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return i>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var i="",o=new j,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===i)if((o=o.simplify())instanceof j)o.sub(80),i="2."+o.toString();else{var u=o<80?o<40?0:1:2;i=u+"."+(o-40*u)}else i+="."+o.toString();if(i.length>n)return P(i,n);o=new j,r=0}}return r>0&&(i+=".incomplete"),i},t}(),B=function(){function t(t,e,n,i,o){if(!(i instanceof q))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=i,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return P(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return P(this.stream.parseStringISO(e,e+n),t);case 30:return P(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,i=this.sub.length;n<i;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var i=0;i<n;++i)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof V?e:new V(e,0);var i=new V(n),o=new q(n),r=t.decodeLength(n),s=n.pos,a=s-i.pos,u=null,l=function(){var e=[];if(null!==r){for(var i=s+r;n.pos<i;)e[e.length]=t.decode(n);if(n.pos!=i)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)u=l();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=l();for(var c=0;c<u.length;++c)if(u[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(i,a,r,o,u)},t}(),q=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new j;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),k=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],_=(1<<26)/k[k.length-1],M=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,i=(1<<e)-1,o=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,r=v(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&i,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(r+=v(n));return o?r:"0"},t.prototype.negate=function(){var e=F();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+Q(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=F();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new H(e):new K(e),this.exp(t,n)},t.prototype.clone=function(){var t=F();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,i=this.DB-t*this.DB%8,o=0;if(t-- >0)for(i<this.DB&&(n=this[t]>>i)!=(this.s&this.DM)>>i&&(e[o++]=n|this.s<<this.DB-i);t>=0;)i<8?(n=(this[t]&(1<<i)-1)<<8-i,n|=this[--t]>>(i+=this.DB-8)):(n=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=F();return this.bitwiseTo(t,y,e),e},t.prototype.or=function(t){var e=F();return this.bitwiseTo(t,m,e),e},t.prototype.xor=function(t){var e=F();return this.bitwiseTo(t,w,e),e},t.prototype.andNot=function(t){var e=F();return this.bitwiseTo(t,b,e),e},t.prototype.not=function(){for(var t=F(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=F();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=F();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+S(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=T(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,m)},t.prototype.clearBit=function(t){return this.changeBit(t,b)},t.prototype.flipBit=function(t){return this.changeBit(t,w)},t.prototype.add=function(t){var e=F();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=F();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=F();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=F();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=F();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=F(),n=F();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,i,o=t.bitLength(),r=Y(1);if(o<=0)return r;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new H(e):e.isEven()?new U(e):new K(e);var s=[],a=3,u=n-1,l=(1<<n)-1;if(s[1]=i.convert(this),n>1){var c=F();for(i.sqrTo(s[1],c);a<=l;)s[a]=F(),i.mulTo(c,s[a-2],s[a]),a+=2}var h,p,d=t.t-1,f=!0,g=F();for(o=Q(t[d])-1;d>=0;){for(o>=u?h=t[d]>>o-u&l:(h=(t[d]&(1<<o+1)-1)<<u-o,d>0&&(h|=t[d-1]>>this.DB+o-u)),a=n;0==(1&h);)h>>=1,--a;if((o-=a)<0&&(o+=this.DB,--d),f)s[h].copyTo(r),f=!1;else{for(;a>1;)i.sqrTo(r,g),i.sqrTo(g,r),a-=2;a>0?i.sqrTo(r,g):(p=r,r=g,g=p),i.mulTo(g,s[h],r)}for(;d>=0&&0==(t[d]&1<<o);)i.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--d)}return i.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),r=Y(1),s=Y(0),a=Y(0),u=Y(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(o)>=0?(i.subTo(o,i),n&&r.subTo(a,r),s.subTo(u,s)):(o.subTo(i,o),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=o.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new $)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var i=e;e=n,n=i}var o=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=k[k.length-1]){for(e=0;e<k.length;++e)if(n[0]==k[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<k.length;){for(var i=k[e],o=e+1;o<k.length&&i<_;)i*=k[o++];for(i=n.modInt(i);e<o;)if(i%k[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var i;if(16==n)i=4;else if(8==n)i=3;else if(256==n)i=8;else if(2==n)i=1;else if(32==n)i=5;else{if(4!=n)return void this.fromRadix(e,n);i=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==i?255&+e[o]:Z(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,i=this.DB-n,o=(1<<i)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>i|s,s=(this[a]&o)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var i=t%this.DB,o=this.DB-i,r=(1<<i)-1;e[0]=this[n]>>i;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<o,e[s-n]=this[s]>>i;i>0&&(e[this.t-n-1]|=(this.s&r)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]-t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i-=t[n],e[n++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[n++]=this.DV+i:i>0&&(e[n++]=i),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var i=this.abs(),o=e.abs(),r=i.t;for(n.t=r+o.t;--r>=0;)n[r]=0;for(r=0;r<o.t;++r)n[r+i.t]=i.am(0,o[r],n,r,0,i.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var i=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,i,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,i){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=n&&n.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=F());var s=F(),a=this.s,u=e.s,l=this.DB-Q(o[o.t-1]);l>0?(o.lShiftTo(l,s),r.lShiftTo(l,i)):(o.copyTo(s),r.copyTo(i));var c=s.t,h=s[c-1];if(0!=h){var p=h*(1<<this.F1)+(c>1?s[c-2]>>this.F2:0),d=this.FV/p,f=(1<<this.F1)/p,g=1<<this.F2,v=i.t,y=v-c,m=null==n?F():n;for(s.dlShiftTo(y,m),i.compareTo(m)>=0&&(i[i.t++]=1,i.subTo(m,i)),t.ONE.dlShiftTo(c,m),m.subTo(s,s);s.t<c;)s[s.t++]=0;for(;--y>=0;){var w=i[--v]==h?this.DM:Math.floor(i[v]*d+(i[v-1]+g)*f);if((i[v]+=s.am(0,w,i,y,0,c))<w)for(s.dlShiftTo(y,m),i.subTo(m,i);i[v]<--w;)i.subTo(m,i)}null!=n&&(i.drShiftTo(c,n),a!=u&&t.ZERO.subTo(n,n)),i.t=c,i.clamp(),l>0&&i.rShiftTo(l,i),a<0&&t.ZERO.subTo(i,i)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var i=F(),o=F(),r=n.convert(this),s=Q(e)-1;for(r.copyTo(i);--s>=0;)if(n.sqrTo(i,o),(e&1<<s)>0)n.mulTo(o,r,i);else{var a=i;i=o,o=a}return n.revert(i)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=Y(n),o=F(),r=F(),s="";for(this.divRemTo(i,o,r);o.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var i=this.chunkSize(n),o=Math.pow(n,i),r=!1,s=0,a=0,u=0;u<e.length;++u){var l=Z(e,u);l<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+l,++s>=i&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,i){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),n.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var i,o,r=Math.min(t.t,this.t);for(i=0;i<r;++i)n[i]=e(this[i],t[i]);if(t.t<this.t){for(o=t.s&this.DM,i=r;i<this.t;++i)n[i]=e(this[i],o);n.t=this.t}else{for(o=this.s&this.DM,i=r;i<t.t;++i)n[i]=e(o,t[i]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,n,i),i},t.prototype.addTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]+t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i+=t[n],e[n++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[n++]=i:i<-1&&(e[n++]=this.DV+i),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(var o=n.t-this.t;i<o;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(o=Math.min(t.t,e);i<o;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var i=n.t=this.t+t.t-e;for(n.s=0;--i>=0;)n[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)n[this.t+i-e]=this.am(e-i,t[i],n,0,0,this.t+i-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var i=this.t-1;i>=0;--i)n=(e*n+this[i])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),i=n.getLowestSetBit();if(i<=0)return!1;var o=n.shiftRight(i);(e=e+1>>1)>k.length&&(e=k.length);for(var r=F(),s=0;s<e;++s){r.fromInt(k[Math.floor(Math.random()*k.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<i&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=F();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(n.compareTo(i)<0){var o=n;n=i,i=o}var r=n.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),i.rShiftTo(s,i));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),n.compareTo(i)>=0?(n.subTo(i,n),n.rShiftTo(1,n)):(i.subTo(n,i),i.rShiftTo(1,i)),n.signum()>0?setTimeout(a,0):(s>0&&i.lShiftTo(s,i),setTimeout((function(){e(i)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,i,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),$=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),H=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),K=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=F();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(M.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=F();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],i=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),U=function(){function t(t){this.m=t,this.r2=F(),this.q3=F(),M.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=F();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function F(){return new M(null)}function z(t,e){return new M(t,e)}var G="undefined"!=typeof navigator;G&&"Microsoft Internet Explorer"==navigator.appName?(M.prototype.am=function(t,e,n,i,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],l=this[t++]>>15,c=a*u+l*s;o=((u=s*u+((32767&c)<<15)+n[i]+(1073741823&o))>>>30)+(c>>>15)+a*l+(o>>>30),n[i++]=1073741823&u}return o},L=30):G&&"Netscape"!=navigator.appName?(M.prototype.am=function(t,e,n,i,o,r){for(;--r>=0;){var s=e*this[t++]+n[i]+o;o=Math.floor(s/67108864),n[i++]=67108863&s}return o},L=26):(M.prototype.am=function(t,e,n,i,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],l=this[t++]>>14,c=a*u+l*s;o=((u=s*u+((16383&c)<<14)+n[i]+o)>>28)+(c>>14)+a*l,n[i++]=268435455&u}return o},L=28),M.prototype.DB=L,M.prototype.DM=(1<<L)-1,M.prototype.DV=1<<L,M.prototype.FV=Math.pow(2,52),M.prototype.F1=52-L,M.prototype.F2=2*L-52;var J,X,W=[];for(J="0".charCodeAt(0),X=0;X<=9;++X)W[J++]=X;for(J="a".charCodeAt(0),X=10;X<36;++X)W[J++]=X;for(J="A".charCodeAt(0),X=10;X<36;++X)W[J++]=X;function Z(t,e){var n=W[t.charCodeAt(e)];return null==n?-1:n}function Y(t){var e=F();return e.fromInt(t),e}function Q(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}M.ZERO=Y(0),M.ONE=Y(1);var tt,et,nt=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,i;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,i=this.S[e],this.S[e]=this.S[n],this.S[n]=i;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),it=null;if(null==it){it=[],et=0;var ot=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var rt=new Uint32Array(256);for(window.crypto.getRandomValues(rt),ot=0;ot<rt.length;++ot)it[et++]=255&rt[ot]}var st=0,at=function(t){if((st=st||0)>=256||et>=256)window.removeEventListener?window.removeEventListener("mousemove",at,!1):window.detachEvent&&window.detachEvent("onmousemove",at);else try{var e=t.x+t.y;it[et++]=255&e,st+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",at,!1):window.attachEvent&&window.attachEvent("onmousemove",at))}function ut(){if(null==tt){for(tt=new nt;et<256;){var t=Math.floor(65536*Math.random());it[et++]=255&t}for(tt.init(it),et=0;et<it.length;++et)it[et]=0;et=0}return tt.next()}var lt=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=ut()},t}(),ct=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=t.length-1;i>=0&&e>0;){var o=t.charCodeAt(i--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var r=new lt,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new M(n)}(t,e);if(null==n)return null;var i=this.doPublic(n);if(null==i)return null;for(var o=i.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16),this.d=z(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,i,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=z(t,16),this.e=parseInt(e,16),this.d=z(n,16),this.p=z(i,16),this.q=z(o,16),this.dmp1=z(r,16),this.dmq1=z(s,16),this.coeff=z(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new lt,i=t>>1;this.e=parseInt(e,16);for(var o=new M(e,16);;){for(;this.p=new M(t-i,1,n),0!=this.p.subtract(M.ONE).gcd(o).compareTo(M.ONE)||!this.p.isProbablePrime(10););for(;this.q=new M(i,1,n),0!=this.q.subtract(M.ONE).gcd(o).compareTo(M.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(M.ONE),a=this.q.subtract(M.ONE),u=s.multiply(a);if(0==u.gcd(o).compareTo(M.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=z(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),i=0;i<n.length&&0==n[i];)++i;if(n.length-i!=e-1||2!=n[i])return null;for(++i;0!=n[i];)if(++i>=n.length)return null;for(var o="";++i<n.length;){var r=255&n[i];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&n[i+1]),++i):(o+=String.fromCharCode((15&r)<<12|(63&n[i+1])<<6|63&n[i+2]),i+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var i=new lt,o=t>>1;this.e=parseInt(e,16);var r=new M(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(M.ONE),i=s.q.subtract(M.ONE),o=e.multiply(i);0==o.gcd(r).compareTo(M.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(i),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=F(),s.q.fromNumberAsync(o,1,i,(function(){s.q.subtract(M.ONE).gcda(r,(function(t){0==t.compareTo(M.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},l=function(){s.p=F(),s.p.fromNumberAsync(t-o,1,i,(function(){s.p.subtract(M.ONE).gcda(r,(function(t){0==t.compareTo(M.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(l,0)}))}))};setTimeout(l,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var i=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,i="",o=0;o<n;o+=2)i+="ff";return z("0001"+i+"00"+t,16)}((ht[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==i)return null;var o=this.doPrivate(i);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var i=z(e,16),o=this.doPublic(i);return null==o?null:function(t){for(var e in ht)if(ht.hasOwnProperty(e)){var n=ht[e],i=n.length;if(t.substr(0,i)==n)return t.substr(i)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),ht={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},pt={};pt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var i=function(){};if(i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var n=s[o],i=e[n];"function"==typeof i&&i!=Object.prototype[n]&&(t[n]=i)}})}catch(t){}r(t.prototype,n)}}};var dt={};void 0!==dt.asn1&&dt.asn1||(dt.asn1={}),dt.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var i="",o=0;o<n;o++)i+="f";e=new M(i,16).xor(t).add(M.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=dt.asn1,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,l=e.DERUTF8String,c=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,v=e.DERSequence,y=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var S=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+S+":"))throw"undefined key: "+S;if("bool"==S)return new n(t[S]);if("int"==S)return new i(t[S]);if("bitstr"==S)return new o(t[S]);if("octstr"==S)return new r(t[S]);if("null"==S)return new s(t[S]);if("oid"==S)return new a(t[S]);if("enum"==S)return new u(t[S]);if("utf8str"==S)return new l(t[S]);if("numstr"==S)return new c(t[S]);if("prnstr"==S)return new h(t[S]);if("telstr"==S)return new p(t[S]);if("ia5str"==S)return new d(t[S]);if("utctime"==S)return new f(t[S]);if("gentime"==S)return new g(t[S]);if("seq"==S){for(var T=t[S],x=[],E=0;E<T.length;E++){var O=w(T[E]);x.push(O)}return new v({array:x})}if("set"==S){for(T=t[S],x=[],E=0;E<T.length;E++)O=w(T[E]),x.push(O);return new y({array:x})}if("tag"==S){var D=t[S];if("[object Array]"===Object.prototype.toString.call(D)&&3==D.length){var C=w(D[2]);return new m({tag:D[0],explicit:D[1],obj:C})}var I={};if(void 0!==D.explicit&&(I.explicit=D.explicit),void 0!==D.tag&&(I.tag=D.tag),void 0===D.obj)throw"obj shall be specified for 'tag'.";return I.obj=w(D.obj),new m(I)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},dt.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),i=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);i+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new M(i,2).toString(10),i="")}return e},dt.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new M(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);return i},dt.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},dt.asn1.DERAbstractString=function(t){dt.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},pt.lang.extend(dt.asn1.DERAbstractString,dt.asn1.ASN1Object),dt.asn1.DERAbstractTime=function(t){dt.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var i=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+i(String(o.getMonth()+1),2)+i(String(o.getDate()),2)+i(String(o.getHours()),2)+i(String(o.getMinutes()),2)+i(String(o.getSeconds()),2);if(!0===n){var a=o.getMilliseconds();if(0!=a){var u=i(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,i,o,r){var s=new Date(Date.UTC(t,e-1,n,i,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},pt.lang.extend(dt.asn1.DERAbstractTime,dt.asn1.ASN1Object),dt.asn1.DERAbstractStructured=function(t){dt.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},pt.lang.extend(dt.asn1.DERAbstractStructured,dt.asn1.ASN1Object),dt.asn1.DERBoolean=function(){dt.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},pt.lang.extend(dt.asn1.DERBoolean,dt.asn1.ASN1Object),dt.asn1.DERInteger=function(t){dt.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=dt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new M(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(dt.asn1.DERInteger,dt.asn1.ASN1Object),dt.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=dt.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}dt.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var i="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),i+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+i},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},pt.lang.extend(dt.asn1.DERBitString,dt.asn1.ASN1Object),dt.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=dt.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}dt.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},pt.lang.extend(dt.asn1.DEROctetString,dt.asn1.DERAbstractString),dt.asn1.DERNull=function(){dt.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},pt.lang.extend(dt.asn1.DERNull,dt.asn1.ASN1Object),dt.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new M(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};dt.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=i},this.setValueName=function(t){var e=dt.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},pt.lang.extend(dt.asn1.DERObjectIdentifier,dt.asn1.ASN1Object),dt.asn1.DEREnumerated=function(t){dt.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=dt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new M(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},pt.lang.extend(dt.asn1.DEREnumerated,dt.asn1.ASN1Object),dt.asn1.DERUTF8String=function(t){dt.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},pt.lang.extend(dt.asn1.DERUTF8String,dt.asn1.DERAbstractString),dt.asn1.DERNumericString=function(t){dt.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},pt.lang.extend(dt.asn1.DERNumericString,dt.asn1.DERAbstractString),dt.asn1.DERPrintableString=function(t){dt.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},pt.lang.extend(dt.asn1.DERPrintableString,dt.asn1.DERAbstractString),dt.asn1.DERTeletexString=function(t){dt.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},pt.lang.extend(dt.asn1.DERTeletexString,dt.asn1.DERAbstractString),dt.asn1.DERIA5String=function(t){dt.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},pt.lang.extend(dt.asn1.DERIA5String,dt.asn1.DERAbstractString),dt.asn1.DERUTCTime=function(t){dt.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},pt.lang.extend(dt.asn1.DERUTCTime,dt.asn1.DERAbstractTime),dt.asn1.DERGeneralizedTime=function(t){dt.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},pt.lang.extend(dt.asn1.DERGeneralizedTime,dt.asn1.DERAbstractTime),dt.asn1.DERSequence=function(t){dt.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},pt.lang.extend(dt.asn1.DERSequence,dt.asn1.DERAbstractStructured),dt.asn1.DERSet=function(t){dt.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},pt.lang.extend(dt.asn1.DERSet,dt.asn1.DERAbstractStructured),dt.asn1.DERTaggedObject=function(t){dt.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},pt.lang.extend(dt.asn1.DERTaggedObject,dt.asn1.ASN1Object);var ft,gt,vt=(ft=function(t,e){return ft=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},ft(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}ft(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),yt=function(t){function e(n){var i=t.call(this)||this;return n&&("string"==typeof n?i.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&i.parsePropertiesFrom(n)),i}return vt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,i=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===x){var n="0123456789ABCDEF";for(x={},e=0;e<16;++e)x[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)x[n.charAt(e)]=e;for(e=0;e<8;++e)x[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=x[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(i[i.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return i}(t):I.unarmor(t),o=B.decode(i);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=z(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=o.sub[3].getHexStringValue();this.d=z(r,16);var s=o.sub[4].getHexStringValue();this.p=z(s,16);var a=o.sub[5].getHexStringValue();this.q=z(a,16);var u=o.sub[6].getHexStringValue();this.dmp1=z(u,16);var l=o.sub[7].getHexStringValue();this.dmq1=z(l,16);var c=o.sub[8].getHexStringValue();this.coeff=z(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var h=o.sub[1].sub[0];e=h.sub[0].getHexStringValue(),this.n=z(e,16),n=h.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=z(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new dt.asn1.DERInteger({int:0}),new dt.asn1.DERInteger({bigint:this.n}),new dt.asn1.DERInteger({int:this.e}),new dt.asn1.DERInteger({bigint:this.d}),new dt.asn1.DERInteger({bigint:this.p}),new dt.asn1.DERInteger({bigint:this.q}),new dt.asn1.DERInteger({bigint:this.dmp1}),new dt.asn1.DERInteger({bigint:this.dmq1}),new dt.asn1.DERInteger({bigint:this.coeff})]};return new dt.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return O(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new dt.asn1.DERSequence({array:[new dt.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new dt.asn1.DERNull]}),e=new dt.asn1.DERSequence({array:[new dt.asn1.DERInteger({bigint:this.n}),new dt.asn1.DERInteger({int:this.e})]}),n=new dt.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new dt.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return O(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(ct),mt="undefined"!=typeof process?null===(gt=process.env)||void 0===gt?void 0:gt.npm_package_version:void 0;const wt=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new yt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(D(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return O(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return O(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,D(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new yt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=mt,t}();function bt(t,e){return"object"==typeof t?function(t,e){for(let n of Object.keys(t))t[n]=bt(t[n],e);return t}(t,e):"string"==typeof t?t.decrypt(e):void 0}null==window.$rsa&&(window.$rsa={}),window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const n=new wt;return n.setPrivateKey(e),n.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const n=new wt;return n.setPrivateKey(e),n.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return bt(t,e)},window.$rsa;var St={};function Tt(t,e){s.getComponent().meta.fieldNames.push(e)}function xt(t,e,n){s.getComponent().meta.methodNames.push(e)}function Et(t,e,n){return void 0===n&&(n=!1),function(i,o){s.getComponent().meta.props[o]={type:t,default:e,required:n}}}function Ot(t,e){s.getComponent().meta.template=e}function Dt(t,e){return function(n,i,o){var r=s.getComponent(e);r.meta.hockMounted=i,r.meta.clazz=t,r.name=e}}function Ct(t){return function(e,n){s.getComponent().meta.computeInfos.push({key:n,func:t})}}St.registRightClick=function(t,e,n){var i="right-click-menu-".concat(e);t.addEventListener("contextmenu",(function(t){for(var e=0,o=window.byClass("right-menu");e<o.length;e++)o[e].remove();t.preventDefault();var r=function(t){for(var e=document.createElement("div"),n=function(t){if(!t||!t.isDisplay())return"continue";var n=document.createElement("div");n.id=t.id,n.classList.add("right-click-item"),n.innerText=t.label,n.addEventListener("click",(function(){t.event()})),e.appendChild(n)},i=0,o=t.items;i<o.length;i++)n(o[i]);return e}(n);r.id=i,r.classList.add("right-menu"),r.style.left=t.clientX+"px",r.style.top=t.clientY+"px",document.body.appendChild(r)}))},document.addEventListener("click",(function(){for(var t=0,e=window.byClass("right-menu");t<e.length;t++)e[t].remove()})),window.$menu=St;var It,Nt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Rt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$emit(\'on-click\')">\n        <slot></slot>\n    </div>',e}Nt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:this.xType.equalsIgnoreCase("primary"),cancel:this.xType.equalsIgnoreCase("cancel"),warn:this.xType.equalsIgnoreCase("warn"),error:this.xType.equalsIgnoreCase("error")}},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.xSize.equalsIgnoreCase("small")?"1px":this.xSize.equalsIgnoreCase("normal")?"2px":"3px"}},jt([Dt(e,c.ButtonX)],e.prototype,"mounted",null),jt([Ot],e.prototype,"template",void 0),jt([Et(String,"normal")],e.prototype,"xSize",void 0),jt([Et(String,"primary")],e.prototype,"xType",void 0),jt([xt],e.prototype,"getClass",null),jt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),At=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Pt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',e.value="",e}Rt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("dinglj-v-input-text::clear",(function(){t.value=""}),this.vid),window.$queue.on("dinglj-v-input-text::focus",(function(){window.byId(t.vid).children[0].focus()}),this.vid)},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},e.prototype.setValue=function(t,e){this.value=t,this.emit("on-change",t),"input"==e&&this.emit("on-input",t),"blur"==e&&(this.emit("on-blur",t),this.emit("on-over",t)),"enter"==e&&(this.emit("on-enter",t),this.emit("on-over",t))},At([Dt(e,c.InputX)],e.prototype,"mounted",null),At([Ot],e.prototype,"template",void 0),At([Tt],e.prototype,"value",void 0),At([xt],e.prototype,"getStyle",null),At([xt],e.prototype,"setValue",null),At([Et(String,"normal")],e.prototype,"xSize",void 0),At([Et(String,"")],e.prototype,"caption",void 0),At([Et(String,"")],e.prototype,"placeholder",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Lt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Vt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',e.active=!1,e}Pt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},e.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},e.prototype.onclicked=function(){this.active=!this.active,this.emit("on-change",this.active),this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info()},Lt([Dt(e,c.SwitchX)],e.prototype,"mounted",null),Lt([Ot],e.prototype,"template",void 0),Lt([Tt],e.prototype,"active",void 0),Lt([xt],e.prototype,"getStyle",null),Lt([xt],e.prototype,"getClass",null),Lt([xt],e.prototype,"onclicked",null),Lt([Et(String,"normal")],e.prototype,"xSize",void 0),Lt([Et(String,"")],e.prototype,"preText",void 0),Lt([Et(String,"")],e.prototype,"postText",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Bt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},qt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="caption" :id="vid">\n        <input :placeholder="placeholder" type="text" :value="list.includesIgnoreCase(value) ? getValue(value) : \'\'"/>\n        <img :src="getImg(\'/src/assets/img/delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in list" @click="setValue(item)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n    </div>',e.value=null,e}Vt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},e.prototype.getStyle=function(){return{"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--width":this.xSize.equalsIgnoreCase("small")?"180px":this.xSize.equalsIgnoreCase("normal")?"200px":"220px"}},Bt([Dt(e,c.ComboX)],e.prototype,"mounted",null),Bt([Ot],e.prototype,"template",void 0),Bt([Tt],e.prototype,"value",void 0),Bt([xt],e.prototype,"setValue",null),Bt([xt],e.prototype,"getStyle",null),Bt([Et(Array,[])],e.prototype,"list",void 0),Bt([Et(String,"normal")],e.prototype,"xSize",void 0),Bt([Et(String,"")],e.prototype,"caption",void 0),Bt([Et(String,"")],e.prototype,"placeholder",void 0),Bt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0),Bt([Et(Function,(function(t){return t}))],e.prototype,"getValue",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),kt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},_t=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',e.value=null,e}qt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid),null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.emit("on-change",t))},kt([Dt(e,c.NavigatorX)],e.prototype,"mounted",null),kt([Ot],e.prototype,"template",void 0),kt([Tt],e.prototype,"value",void 0),kt([xt],e.prototype,"setValue",null),kt([Ct((function(){return null!=this.value?!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.setValue(this.list[0]):this.list.length>0&&this.setValue(this.list[0]),this.value}))],e.prototype,"validItem",void 0),kt([Et(Array,[])],e.prototype,"list",void 0),kt([Et(Object,null)],e.prototype,"default",void 0),kt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Mt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},$t=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}_t(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},Mt([Dt(e,c.ScrollerY)],e.prototype,"mounted",null),Mt([Ot],e.prototype,"template",void 0),Mt([Et(Number,0)],e.prototype,"size",void 0),Mt([Et(Number,0)],e.prototype,"index",void 0),Mt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ht=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Kt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :list="list" :get-caption="getCaption" @on-change="changed">\n        </i-navigator>\n        <div class="dinglj-v-navigator-right">\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :index="list.indexOf(active)" :size="list.length">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            <slot name="after"></slot>\n        </div>\n    </div>',e.active=null,e}$t(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name)},e.prototype.changed=function(t){this.active=t.value,this.emit("on-change",t)},Ht([Dt(e,c.NavigatorView)],e.prototype,"mounted",null),Ht([Ot],e.prototype,"template",void 0),Ht([Tt],e.prototype,"active",void 0),Ht([xt],e.prototype,"changed",null),Ht([Et(Array,[],!0)],e.prototype,"list",void 0),Ht([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Ut=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Ft=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getCaption(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',e.value=null,e}Kt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),window.$queue.on("tab-panel:next",(function(){var e=(t.index+1+t.list.length)%t.list.length;t.clicked(t.list[e],e)}),this.vid),window.$queue.on("tab-panel:to",(function(e){var n=t.list.filter((function(t){return JSON.stringify(t)==JSON.stringify(e)}));n.length>0&&t.clicked(n[0],t.list.indexOf(n[0]))}),this.vid)},e.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},e.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},e.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.emit("on-change",t),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],i=window.byId(n.getId(e));i&&(t.style.width="".concat(i.offsetWidth,"px"),t.style.left="".concat(i.offsetLeft,"px"))}),50))},Ut([Dt(e,c.TabPanelX)],e.prototype,"mounted",null),Ut([Ot],e.prototype,"template",void 0),Ut([Tt],e.prototype,"value",void 0),Ut([xt],e.prototype,"getClass",null),Ut([xt],e.prototype,"getId",null),Ut([xt],e.prototype,"clicked",null),Ut([Ct((function(){return!this.list.includesIgnoreCase(this.value)&&this.list.length>0&&this.clicked(this.list[0],0),this.list.indexOf(this.value)}))],e.prototype,"index",void 0),Ut([Et(Array,[],!0)],e.prototype,"list",void 0),Ut([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),zt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Gt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}Ft(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},zt([Dt(e,c.ScrollerX)],e.prototype,"mounted",null),zt([Ot],e.prototype,"template",void 0),zt([Et(Number,0)],e.prototype,"size",void 0),zt([Et(Number,0)],e.prototype,"index",void 0),zt([xt],e.prototype,"getStyle",null)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Xt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :list="list" :get-caption="getCaption" @on-change="changed" @mounted="tabPanelLoaded">\n            <i-scroller-x :index="index" :size="list.length">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',e.value=null,e.tabPanelId="",e}Gt(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("tab-view:next",(function(){window.$queue.sendMsg("tab-panel:next",null,t.tabPanelId)}),this.vid),window.$queue.on("tab-view:to",(function(e){window.$queue.sendMsg("tab-panel:to",e,t.tabPanelId)}),this.vid)},e.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},e.prototype.changed=function(t){this.value!=t.value&&(this.value=t.value,this.emit("on-change",t))},Jt([Dt(e,c.TabView)],e.prototype,"mounted",null),Jt([Ot],e.prototype,"template",void 0),Jt([Tt],e.prototype,"value",void 0),Jt([Tt],e.prototype,"tabPanelId",void 0),Jt([xt],e.prototype,"tabPanelLoaded",null),Jt([xt],e.prototype,"changed",null),Jt([Ct((function(){return this.list.indexOfIgnoreCase(this.value)}))],e.prototype,"index",void 0),Jt([Et(Array,[],!0)],e.prototype,"list",void 0),Jt([Et(Function,(function(t){return t}))],e.prototype,"getCaption",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Wt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},Zt=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-table" :id="vid">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" v-for="column in columns" :class="getClass(column)">\n                {{ getColumnCaption(column) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tbody">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in data" @click="checkOne(line)">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequanceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>',e.cache={},e.checkAll=!1,e.checkedList=[],e.bestWidthCache=!1,e}Xt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",i={"dinglj-v-cell":!0};return i[e]=!0,i[n]=!0,this.cache[e]=i,i},e.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},e.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.data),this.checkAll=!this.checkAll},e.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var i=n.getColumnKey(e),o=n.getColumnCaption(e),r=[window.calcTxtWidth("".concat(o))];r.push.apply(r,n.data.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[i]=s+30},n=this,i=0,o=this.columns;i<o.length;i++)e(o[i]);return this.bestWidthCache},Wt([Dt(e,c.TableX)],e.prototype,"mounted",null),Wt([Ot],e.prototype,"template",void 0),Wt([Tt],e.prototype,"cache",void 0),Wt([Tt],e.prototype,"checkAll",void 0),Wt([Tt],e.prototype,"checkedList",void 0),Wt([Tt],e.prototype,"bestWidthCache",void 0),Wt([xt],e.prototype,"getClass",null),Wt([xt],e.prototype,"getStyle",null),Wt([xt],e.prototype,"doCheckAll",null),Wt([xt],e.prototype,"getBestWidth",null),Wt([Et(Array,[])],e.prototype,"flexColumns",void 0),Wt([Et(Array,[])],e.prototype,"data",void 0),Wt([Et(Boolean,!0)],e.prototype,"sequanceNum",void 0),Wt([Et(Boolean,!0)],e.prototype,"selectable",void 0),Wt([Et(Array,[])],e.prototype,"columns",void 0),Wt([Et(Function,(function(t){return t}))],e.prototype,"getColumnKey",void 0),Wt([Et(Function,(function(t){return t}))],e.prototype,"getColumnCaption",void 0),Wt([Et(Function,(function(t,e){return t[e]}))],e.prototype,"getCell",void 0)}(e),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),Yt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'rt' }\" v-if=\"['lt', 'rt'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'rb' }\" v-if=\"['lb', 'rb'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",e}Zt(e,t),e.prototype.mounted=function(){this.vid=window.uuid(this.name),this.emit("mounted",this.vid)},e.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},e.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},Yt([Dt(e,c.ProgressX)],e.prototype,"mounted",null),Yt([Ot],e.prototype,"template",void 0),Yt([xt],e.prototype,"getContainerStyle",null),Yt([xt],e.prototype,"getProgressStyle",null),Yt([Et(String,"5px")],e.prototype,"height",void 0),Yt([Et(String,"100%")],e.prototype,"percent",void 0),Yt([Et(String,"lt")],e.prototype,"position",void 0),Yt([Et(String,"")],e.prototype,"caption",void 0)})(e),s.getComponent(c.ButtonX).build(),s.getComponent(c.InputX).build(),s.getComponent(c.SwitchX).build(),s.getComponent(c.ComboX).build(),s.getComponent(c.NavigatorX).build(),s.getComponent(c.ScrollerY).build(),s.getComponent(c.NavigatorView).build(),s.getComponent(c.TabPanelX).build(),s.getComponent(c.ScrollerX).build(),s.getComponent(c.TabView).build(),s.getComponent(c.TableX).build(),s.getComponent(c.ProgressX).build(),window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),function(t){t.Line="line",t.Step="step",t.History="history"}(It||(It={}));const Qt=It;var te={};window.defunc(te,"getActivePanel",(function(){var t=window.byClass("arrow active");if(t)return t[0];var e=window.byClass("step arrow")[0];return e.classList.add("active"),e})),window.defunc(te,"getOneHeight",(function(t){if(0==t.children.length)return 0;var e=t.children[0];return parseInt(getComputedStyle(e).margin)+e.offsetHeight})),window.defunc(te,"getScrollQty",(function(t,e,n){return t<e?0:t+n-e})),window.defunc(te,"getLimit",(function(t){var e=te.getOneHeight(t);return te.getLimit(t,e)})),window.defunc(te,"getLimit",(function(t,e){if(null==t.parentNode)return 0;var n=t.parentNode.offsetHeight,i=Math.floor(n/e);return Math.floor(i/2)})),window.defunc(te,"getCurrentIndex",(function(t){var e=-1;return-1==e&&(e=window.indexOfChildByClass(t,"active")),-1==e&&(e=window.indexOfChildByClass(t,"last")),-1==e&&(e=0),e})),window.defunc(te,"getScrollProp",(function(t,e){var n=te.getCurrentIndex(t),i=te.getOneHeight(t),o=te.getLimit(t,i);return{current:n,height:i,limit:o,qty:te.getScrollQty(n,o,e),size:t.children.length,direction:e}})),window.altDown=!1;var ee=window.readConfig(),ne=window.defaultConfig(),ie=window.getConfigOrDefault(ee,ne,"hotKey",{}),oe=Object.values(ie).map((function(t){return t.toUpperCase()}));window.addEventListener("keyup",(function(t){"AltLeft"!=t.code&&"AltRight"!=t.code||(window.altDown=!1)})),window.addEventListener("keydown",(function(t){var e=t.code;if("ArrowDown"==(e=e.replace(/^(Key)|(Digit)|(Numpad)/,""))||"ArrowUp"==e){t.preventDefault();var n=te.getActivePanel(),i="ArrowDown"==e?1:-1,o=te.getScrollProp(n,i);n.classList.contains("line")?window.$queue.sendMsg("update-line",o):n.classList.contains("step")?window.$queue.sendMsg("update-step",o):n.classList.contains("history")&&window.$queue.sendMsg("update-history",o)}else if("ArrowLeft"==e||"ArrowRight"==e)t.preventDefault(),i="ArrowRight"==e?1:-1,window.$queue.sendMsg("change-panel",i);else if("AltLeft"==e||"AltRight"==e)window.altDown=!0;else if(oe.includes(e)&&window.altDown)for(var r=0,s=Object.keys(ie);r<s.length;r++){var a=s[r];if(ie[a]==e)switch(a){case"back":window.open("..");break;case"addStar":window.$queue.sendMsg("add-star",null);break;case"cleanStar":window.$queue.sendMsg("clean-star",null);break;case"cleanHistory":window.$queue.sendMsg("clean-history",null);break;case"downloadCase":window.open("test.xls");break;case"defaultStep":window.open("默认步骤");break;case"erpLog":window.open("erpLog");break;case"logs":window.open("logs");break;case"line":window.$queue.sendMsg("focus-line",null);break;case"step":window.$queue.sendMsg("focus-step",null)}}}));var re=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),se=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ae=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"line-container\">\n        <div :class=\"{ 'line': true, 'arrow': true, 'active': arrow == 'line' }\">\n            <div :title=\"lineNumber\" :class=\"{ 'line-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(lineNumber, idx) of lines\" @click=\"setIdx(idx)\">\n                {{ lineNumber }}\n            </div>\n        </div>\n    </div>",e.current=-1,e.last=-1,e}re(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.timer((function(){return t.lines.length>0&&(t.setIdx(t.lines.length-1,!0,!0),!0)})),window.$queue.on("update-line",(function(e){t.doScroll(e)})),window.$queue.on("toPrevLine",(function(){t.setIdx(t.current-1,!0,!0)})),window.$queue.on("toNextLine",(function(){t.setIdx(t.current+1,!0,!1)})),window.$queue.on("jumpToLine",(function(e){var n=t.lines.indexOf(e);-1!=n&&t.setIdx(n)}))},e.prototype.setIdx=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var i=window.byClass("line arrow")[0];if(i){var o=te.getLimit(i);this.doScroll({size:this.lines.length,current:t,direction:0,height:te.getOneHeight(i),qty:te.getScrollQty(t,o,0),toStep:e,toLastStep:n})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;e<0?"已经到第一行了".info():e>=t.size?"已经到最后一行了".info():this.current!=e&&(window.byId("line-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("line-changed",{line:this.lines[e],expect:t.toLastStep?-1:0,toStep:!!t.toStep}),window.$queue.sendMsg("change-active-panel",Qt.Line))},se([Dt(e,"iv-line")],e.prototype,"mounted",null),se([Ot],e.prototype,"template",void 0),se([Tt],e.prototype,"current",void 0),se([Tt],e.prototype,"last",void 0),se([xt],e.prototype,"setIdx",null),se([xt],e.prototype,"doScroll",null),se([Ct((function(){var t=/.*<a href="([0-9]+\/)".*/;return window.readLines?window.readLines():window.get("".concat(window.location.href,"1")).split("\n").map((function(e){return t.test(e)?t.exec(e)[1]:""})).filter((function(t){return""!=t})).map((function(t){return t.replace(/\/$/,"")}))}))],e.prototype,"lines",void 0),se([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0)}(e),s.getComponent("iv-line").build()),ue=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),le=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},ce=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"step-container\">\n        <div :class=\"{ 'step': true, 'arrow': true, 'active': arrow == 'step' }\">\n            <div :title=\"stepNumber\" :class=\"{ 'step-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(stepNumber, idx) of steps\" @click=\"setIdx(idx)\">\n                {{ stepNumber.replace(/.png/, '') }}\n            </div>\n        </div>\n    </div>",e.map={},e.current=-1,e.last=-1,e.line="",e.lastSteps=[],e}ue(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("init-steps",(function(e){t.line=e,window.timer((function(){return t.steps.length>0&&(t.setIdx(t.steps.length-1),!0)}))})),window.$queue.on("line-changed",(function(e){t.lastSteps=t.steps,t.line=e.line,window.timer((function(){return t.lastSteps!=t.steps&&(e.expect?e.expect>0&&e.expect<t.steps.length?t.setIdx(e.expect,!0):t.setIdx(t.steps.length-1,!0):t.setIdx(0,!0),e.toStep||window.$queue.sendMsg("change-active-panel",Qt.Line),!0)}))})),window.$queue.on("update-step",(function(e){t.doScroll(e)})),window.$queue.on("jumpToStep",(function(e){for(var n=-1,i=0;i<t.steps.length;i++)if(t.steps[i].startsWith("".concat(e,"_"))){n=i;break}-1!=n&&t.setIdx(n)}))},e.prototype.setIdx=function(t,e){void 0===e&&(e=!1);var n=window.byClass("step arrow")[0];if(n){var i=te.getLimit(n);this.doScroll({size:this.steps.length,current:t,direction:0,height:te.getOneHeight(n),qty:te.getScrollQty(t,i,0),lineChanged:e})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;(t.lineChanged||this.current!=e)&&(e<0?window.$queue.sendMsg("toPrevLine",{}):e>=this.steps.length?window.$queue.sendMsg("toNextLine",{}):(window.byId("step-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("change-img","1/".concat(this.line,"/").concat(this.steps[e]))),t.lineChanged&&(this.last=-1),window.$queue.sendMsg("tab-view:to","当前图片",this.tabPanelId),window.$queue.sendMsg("change-active-panel","step"))},le([Dt(e,"iv-step")],e.prototype,"mounted",null),le([Ot],e.prototype,"template",void 0),le([Tt],e.prototype,"map",void 0),le([Tt],e.prototype,"current",void 0),le([Tt],e.prototype,"last",void 0),le([Tt],e.prototype,"line",void 0),le([Tt],e.prototype,"lastSteps",void 0),le([xt],e.prototype,"setIdx",null),le([xt],e.prototype,"doScroll",null),le([Ct((function(){if(""==this.line.trim())return[];if(this.map[this.line])return this.map[this.line];if(window.readSteps){var t=window.readSteps(this.line);return this.map[this.line]=t,t}var e=/.*\.png">(.*.png)<\/a>.*/,n=window.get("".concat(window.location.href,"1/").concat(this.line)).split("\n").map((function(t){return e.test(t)?e.exec(t)[1]:""})).filter((function(t){return""!=t})).map((function(t){return t.replace(/\/$/,"")}));return this.map[this.line]=n,n}))],e.prototype,"steps",void 0),le([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0),le([Et(String,"")],e.prototype,"tabPanelId",void 0)}(e),s.getComponent("iv-step").build()),he=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),pe=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},de=(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div id=\"history-container\" class=\"right-panel\" @click=\"changePanel\">\n        <div :class=\"{ 'history': true, 'arrow': true, 'active': arrow == 'history' }\">\n            <div :title=\"historyNumber\" :class=\"{ 'history-number': true, 'active': current == idx, 'last': last == idx }\" v-for=\"(historyNumber, idx) of list\" @click=\"setIdx(idx)\">\n                {{ historyNumber.substring(2).replace(/.png/, '') }}\n            </div>\n        </div>\n    </div>",e.current=-1,e.last=-1,e}var n;he(e,t),e.prototype.mounted=function(){var t=this;this.vid=window.uuid(this.name),this.emit("mounted",this.vid),window.$queue.on("update-history",(function(e){t.doScroll(e)}))},e.prototype.changePanel=function(){window.$queue.sendMsg("change-active-panel","history")},e.prototype.setIdx=function(t){var e=window.byClass("history arrow")[0];if(e){var n=te.getLimit(e);this.doScroll({size:this.list.length,current:t,direction:0,height:te.getOneHeight(e),qty:te.getScrollQty(t,n,0)})}},e.prototype.doScroll=function(t){var e=t.current+t.direction;e<0?"已经是第一张".info():e>=t.size?"已经是最后一张".info():this.current!=e&&(window.byId("history-container").scrollTo(0,t.height*t.qty),this.last=this.current,this.current=e,window.$queue.sendMsg("tab-view:to",this.tabPanelId,"当前图片"),window.$queue.sendMsg("change-img",this.list[e]))},e.prototype.onArrowChange=function(t){"history"==this.arrow&&-1==this.current&&-1==this.last&&this.list.length>0&&this.setIdx(0)},pe([Dt(e,"iv-history")],e.prototype,"mounted",null),pe([Ot],e.prototype,"template",void 0),pe([Tt],e.prototype,"current",void 0),pe([Tt],e.prototype,"last",void 0),pe([xt],e.prototype,"changePanel",null),pe([xt],e.prototype,"setIdx",null),pe([xt],e.prototype,"doScroll",null),pe([Et(Array,[],!0)],e.prototype,"list",void 0),pe([Et(String,Qt.Step,!0)],e.prototype,"arrow",void 0),pe([Et(String,"")],e.prototype,"tabPanelId",void 0),pe([("arrow",void 0===n&&(n=!0),function(t,e){s.getComponent().meta.watchInfos.push({field:"arrow",deep:n,resolve:e})})],e.prototype,"onArrowChange",null)}(e),s.getComponent("iv-history").build()),fe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ge=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};(function(){if(window.isDev())return!0;for(var t=window.location.href,e=0,n=window.getConfigOrDefault(window.readConfig(),window.defaultConfig(),"matchList",[]);e<n.length;e++){var i=n[e];if(window.createRegExp(i).test(t))return!0}return"截图查看工具暂未匹配当前 url 地址, 你可以修改油猴脚本, 新增 matchList 的元素以进行适配, 如添加后仍无法适配, 请联系我".err(),!1})()&&(window.linkCss("/src/script/ticket-image-viewer/index.css"),window.document.body.innerHTML='<div id="dinglj-main">\n        <div id="iv-toolbar">\n            <div id="iv-options">\n                <div @click="openUrl(\'..\')">返回上一层{{ getHotKey(\'back\') }}</div>\n                <div @click="addStar(display)">添加关注{{ getHotKey(\'addStar\') }}</div>\n                <div @click="stars.length = 0">清空关注{{ getHotKey(\'cleanStar\') }}</div>\n                <div @click="history.length = 0">清空历史{{ getHotKey(\'cleanHistory\') }}</div>\n                <div @click="openUrl(\'test.xls\')">下载用例{{ getHotKey(\'downloadCase\') }}</div>\n                <div @click="openUrl(\'默认步骤\')">默认步骤{{ getHotKey(\'defaultStep\') }}</div>\n                <div @click="openUrl(\'erpLog\')">ERP日志{{ getHotKey(\'erpLog\') }}</div>\n                <div @click="openUrl(\'logs\')">工具日志{{ getHotKey(\'logs\') }}</div>\n            </div>\n            <div class="dinglj-v-flex"></div>\n            <i-input :placeholder="\'输入行数进行跳转\' + getHotKey(\'line\')" @on-over="jumpLine" @mounted="emit => ids.lineInput = emit.vid"></i-input>\n            <i-input :placeholder="\'输入步数进行跳转\' + getHotKey(\'step\')" @on-over="jumpStep" @mounted="emit => ids.stepInput = emit.vid"></i-input>\n        </div>\n        <div id="iv-under-toolbar">\n            <ivline :arrow="arrow"></ivline>\n            <ivstep :arrow="arrow" :tab-panel-id="ids.tabPanelView"></ivstep>\n            <div class="content-view dinglj-v-flex">\n                <i-tab-view :list="tabNames" @mounted="tabPanelViewMounted">\n                    <div v-for="(src, idx) of images" style="width: 100%; height: 100%; position: relative">\n                        <img class="display-img" :id="getImageId(src, idx)" :src="src"/>\n                    </div>\n                </i-tab-view>\n            </div>\n            <ivhistory :arrow="arrow" @on-clicked="data => { display = data; }" :list="history" :tab-panel-id="ids.tabPanelView"></ivhistory>\n        </div>\n    </div>'),function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.ids={lineInput:"",stepInput:"",tabPanelView:""},e.arrow=Qt.Step,e.display="",e.stars=[],e.history=[],e.imageIds={},e.init={tabPanelView:!0},e}var n;fe(e,t),e.prototype.mounted=function(){var t=this,e=this;window.displayData=function(){return e},window.$queue.on("change-panel",(function(e){t.changePanel(e)})),window.$queue.on("add-star",(function(){t.addStar(t.display)})),window.$queue.on("clean-star",(function(){t.stars.length=0})),window.$queue.on("clean-history",(function(){t.history.length=0})),window.$queue.on("change-active-panel",(function(e){t.arrow=e})),window.$queue.on("focus-line",(function(){window.$queue.sendMsg("dinglj-v-input-text::focus",null,t.ids.lineInput)})),window.$queue.on("focus-step",(function(){window.$queue.sendMsg("dinglj-v-input-text::focus",null,t.ids.stepInput)})),window.$queue.on("change-img",(function(e){t.history.pushNew(e),t.display=e}))},e.prototype.openUrl=function(t){window.open(t)},e.prototype.tabPanelViewMounted=function(t){this.ids.tabPanelView=t.vid,this.init.tabPanelView&&(this.init.tabPanelView=!1,window.addEventListener("keydown",(function(e){"Tab"==e.code&&(e.preventDefault(),window.$queue.sendMsg("tab-view:next",null,t.vid))})))},e.prototype.getImageId=function(t,e){var n=t;0==e&&(n="main-image");var i=this;return window.timer((function(){var e=window.byId(n);return null!=e&&(window.$menu.registRightClick(e,n,{items:["main-image"==n?new u("关注",(function(){i.addStar(t)})):void 0,"main-image"==n?void 0:new u("取消关注",(function(){i.stars.remove(t)?"图片已取消关注".info():"未找到需要取消关注的图片".warn()}))]}),!0)})),n},e.prototype.changePanel=function(t){var e=window.getConfigOrDefault(this.config,this.defaultConfig,"panels",[]),n=(e.indexOfIgnoreCase(this.arrow)+e.length+t)%e.length;this.arrow=e[n]},e.prototype.addStar=function(t){this.stars.includesIgnoreCase(t)?"无需重复关注".warn():this.stars.push(t)},e.prototype.getHotKey=function(t){var e=window.getConfigOrDefault(this.config,this.defaultConfig,"hotKey",{});return"(".concat(e[t],")")},e.prototype.jumpLine=function(t){window.$queue.sendMsg("jumpToLine",t.value),window.$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)},e.prototype.jumpStep=function(t){window.$queue.sendMsg("jumpToStep",t.value),window.$queue.sendMsg("dinglj-v-input-text::clear",null,t.vid)},ge([(n={ivline:ae,ivstep:ce,ivhistory:de},function(t,e){s.getComponent().meta.components=n}),Dt(e,"App")],e.prototype,"mounted",null),ge([Tt],e.prototype,"ids",void 0),ge([Tt],e.prototype,"arrow",void 0),ge([Tt],e.prototype,"display",void 0),ge([Tt],e.prototype,"stars",void 0),ge([Tt],e.prototype,"history",void 0),ge([Tt],e.prototype,"imageIds",void 0),ge([Tt],e.prototype,"init",void 0),ge([xt],e.prototype,"openUrl",null),ge([xt],e.prototype,"tabPanelViewMounted",null),ge([xt],e.prototype,"getImageId",null),ge([xt],e.prototype,"changePanel",null),ge([xt],e.prototype,"addStar",null),ge([xt],e.prototype,"getHotKey",null),ge([xt],e.prototype,"jumpLine",null),ge([xt],e.prototype,"jumpStep",null),ge([Ct((function(){return window.readConfig()}))],e.prototype,"config",void 0),ge([Ct((function(){return window.defaultConfig()}))],e.prototype,"defaultConfig",void 0),ge([Ct((function(){var t=[];return this.display&&t.push(this.display),t.push.apply(t,this.stars),t}))],e.prototype,"images",void 0),ge([Ct((function(){for(var t=["当前图片"],e=1;e<this.images.length;e++)t.push(this.images[e].replace(/1\/(\d+)\/(.*)(\.png)/,"第$1行: $2"));return t}))],e.prototype,"tabNames",void 0)}(e),window.createVue(s.getComponent("App").build(),"#dinglj-main")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,