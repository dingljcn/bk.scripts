/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={384:()=>{Array.prototype.includesIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).includes(e)},Array.prototype.indexOfIgnoreCase=function(t){var e;return e="object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t,this.map((function(t){return"object"==typeof t?JSON.stringify(t).toLowerCase():"string"==typeof t?t.toLowerCase():t})).indexOf(e)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){var e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExist=function(t,e){for(var n=[],i=0;i<this.length;i++){var o=this[i];$get(o,t)==e&&n.push(o)}return n}},836:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t){return void 0===t&&(t="yyyy-MM-dd HH:mm:ss"),t.replace(/yyyy/,"".concat(this.getFullYear())).replace(/yy/,"".concat(this.getFullYear()%100)).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:"0".concat(this.getMonth()+1)).replace(/dd/,this.getDate()>9?this.getDate():"0".concat(this.getDate())).replace(/HH/,this.getHours()>9?this.getHours():"0".concat(this.getHours())).replace(/mm/,this.getMinutes()>9?this.getMinutes():"0".concat(this.getMinutes())).replace(/ss/,this.getSeconds()>9?this.getSeconds():"0".concat(this.getSeconds()))}},374:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e){void 0===e&&(e=window.document);var n=[],i=e.getElementsByClassName(t);return i&&n.push.apply(n,i),n},Window.prototype.query=function(t){var e=[],n=document.querySelectorAll(t);return n&&e.push.apply(e,n),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){var e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"400","12px","微软雅黑")})),window.defunc(window,"calcTxtWidth",(function(t,e,n,i){var o=document.createElement("canvas").getContext("2d");o.font="".concat(e," ").concat(n," ").concat(i);var r=o.measureText(t).width;return Math.floor(r)})),Element.prototype.animate=function(t,e){for(var n=this,i=getComputedStyle(this).transition,o=Object.keys(t),r=0,s=o;r<s.length;r++){var a=s[r];this.style[a]=t[a][0]}setTimeout((function(){var r=e/1e3+"s";n.style.transition=r;for(var s=0,a=o;s<a.length;s++){var u=a[s];n.style[u]=t[u][1]}setTimeout((function(){n.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){for(var e=[],n=this.children,i=0;i<n.length;i++)n[i].classList.contains(t)&&e.push(n[i]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Window.prototype.indexOfChildByClass=function(t,e){for(var n=t.children,i=0;i<n.length;i++)if(n[i].classList.contains(e))return i;return-1}},726:()=>{window.defunc("uuid",(function(){return window.uuid("",10)})),window.defunc("uuid",(function(t){return window.uuid(t,10)})),window.defunc("uuid",(function(t,e){var n=(""+1e7*Math.random()).replace(".","").substring(0,e);return"".concat(t,"-").concat(n)})),window.defunc("groupBy",(function(t,e){var n={};return t.forEach((function(t){var i="";"string"==typeof e?i=t[e]:"function"==typeof e&&(i=e(t)),n[i]?n[i].push(t):n[i]=[t]})),n})),window.defunc("getVal",(function(t,e,n){return window.getVal(t,e,n,!1)})),window.defunc("getVal",(function(t,e,n,i){if(null==t||null==t)return n;for(var o=t,r=0,s=e.split(".");r<s.length;r++)if(!(o=o[s[r]]))return i&&console.error("".concat(e,": 配置不存在, 请检查脚本")),n;return o})),window.defunc("getConfigOrDefault",(function(t,e,n,i){return window.getConfigOrDefault(t,e,n,i,!0)})),window.defunc("getConfigOrDefault",(function(t,e,n,i,o){var r=window.getVal(t,n,"NOT_FOUND"),s=window.getVal(e,n,"NOT_FOUND"),a="NOT_FOUND";if("NOT_FOUND"!=r)if(Array.isArray(r))(a=[]).push.apply(a,r);else{if("object"!=typeof r)return r;a={};for(var u=0,c=Object.keys(r);u<c.length;u++)a[h=c[u]]=r[h]}if("NOT_FOUND"!=s){if("NOT_FOUND"==a)return s;if(Array.isArray(r))Array.isArray(s)&&o&&a.push.apply(a,s);else if("object"==typeof s&&o)for(var l=0,p=Object.keys(s);l<p.length;l++){var h;null==a[h=p[l]]&&(a[h]=s[h])}}return"NOT_FOUND"==a&&(a=i,console.error("".concat(n,": 配置不存在, 请检查脚本"))),a})),window.defunc("compareStringByArray",(function(t,e){e.sort((function(e,n){return window.compareStringByArray(t,e,n)}))})),window.defunc("compareStringByArray",(function(t,e,n){if(t&&t.length>0){var i=-1==t.indexOfIgnoreCase(e)?9999:t.indexOfIgnoreCase(e),o=-1==t.indexOfIgnoreCase(n)?9999:t.indexOfIgnoreCase(n);return i==o?e<n?-1:e>n?1:0:i-o}return e<n?-1:e>n?1:0})),Window.prototype.pushToArrayInObject=function(t,e,n,i){if(void 0===i&&(i=!1),Array.isArray(t[e])){var o=t[e];i&&o.includes(n)||o.push(n)}else t[e]=[n];return t},Window.prototype.unshiftToArrayInObject=function(t,e,n){return Array.isArray(t[e])?t[e].unshift(n):t[e]=[n],t},Window.prototype.defaultConfig=function(){return $rsa.decryptObject(window.encodeConfig())},Window.prototype.timer=function(t,e){var n=30,i=null;e&&("number"==typeof e?n=e:i=e),n=n<30?30:n;var o=setInterval((function(){t(i)&&clearInterval(o)}),n)},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){var e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);var n=document.createRange();n.selectNodeContents(e);var i=window.getSelection();i.addRange(n),document.execCommand("Copy",!1,null),i.removeAllRanges(),"已复制: ".concat(t).info(),e.remove()}},506:()=>{function t(t){for(var e=new ArrayBuffer(t.length),n=new Uint8Array(e),i=0;i!=t.length;i++)n[i]=255&t.charCodeAt(i);return e}window.$excel={},window.$excel.export=function(e,n){window.isEnableExcel||window.enableExcel();var i=function(e,n){var i={SheetNames:[n=n||"sheet1"],Sheets:{}};$set(i.Sheets,n,e);var o=window.XLSX.write(i,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(o)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(n));!function(t,e){var n=t;"object"==typeof n&&n instanceof Blob&&(n=URL.createObjectURL(n));var i=document.createElement("a");i.href=n,i.download=e||"",i.click()}(i,e)}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n));var o=$queue.eventPool[i];if(Array.isArray(o)){if(1==o.length)return o[0](e);for(var r=[],s=0,a=o;s<a.length;s++){var u=a[s];r.push(u(e))}}else window.pushToArrayInObject($queue.eventQueue,i,e)},$queue.on=function(t,e,n){void 0===n&&(n="");var i=t;n&&(i="".concat(t,":").concat(n)),window.pushToArrayInObject($queue.eventPool,i,e);var o=$queue.eventQueue[i];if(Array.isArray(i))for(var r=0,s=o;r<s.length;r++)e(s[r])}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((function(){t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,n,i,o){void 0===i&&(i=2e3),void 0===o&&(o="10%");var r=window.byId("dinglj-v-pop-msg-container");r||((r=document.createElement("div")).id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;var s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort((function(t,e){return t.time-e.time}));for(var a=0;a<s.length-4;a++)t(s[a],void 0)}var u=document.createElement("div");u.classList.add("dinglj-v-pop-msg",n),u.time=Date.now();var c=document.createElement("div");c.classList.add("dinglj-v-pop-msg-icon",n),c.innerText=n.substring(0,1).toUpperCase(),u.appendChild(c),u.innerHTML+=e,r.appendChild(u),u.animate({height:["0px",getComputedStyle(u).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),u.classList.add("active"),setTimeout((function(){t(u,r)}),i)}window.$tip={},$tip.info=function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"info",n,i)},$tip.warn=function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"warn",n,i)},$tip.err=function(t,n,i){void 0===n&&(n=2e3),void 0===i&&(i="10%"),e(t,"err",n,i)}}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{"use strict";window.dinglj_home||(window.dinglj_home="$DINGLJ-ENCODE-START$BPkZyuNNyFIr6MTFTocoSxY7Nk2evl9PbbqI4Ro3ImSS86O22OSYPxMZSn9hjfryB5mRWzSCLx8YVcJ5Ujk20kpoXvZSEN9xfXY2QE0Wz5oNoZZ0V2qzo89B4eiCG2XOGAiNDnRiF97njHHrLKbLgqKn3bgDLbbUHE0t5wD+nXo=$DINGLJ-ENCODE-END$"),window.readData||(window.readData=function(){return""}),window.encodeConfig=function(){return{url:{ticket:"$DINGLJ-ENCODE-START$au9ejj5OQK3ZtpK5SfLnxpMC/G0M/g1/SB2txoZtRe+9HW7vaSbzYOUAlX/Z5iy/MehanxkyW3kONif9eazqCkzRKrtVNe8D3EbCO5Giop7ZsJAzP8dA9mooSsOeYngJiSHm/QDubhVLe5GOttyFgwTP5BnqVVMHD3sl/BTqOsY=$DINGLJ-ENCODE-END$"},strategy:{groupBy:[window.GroupStrategy((function(t,e){return t.get("$DINGLJ-ENCODE-START$fdrRwiyGDRnnI0D2+kSNpee+4aLSJcc6VJX+YsFwspn4WfvCvjqOF3ooaqSED2/9NqPLVB2dNbnrIMbk/TRMz8tGfoDqICQlYuCracV9CivU6mz6S/MvKkoPS3v9+J2UeVvqTZFYHg17/Xjjfql+8eEy/Buh53EjZcFMtzr+EOg=$DINGLJ-ENCODE-END$".decrypt())=="$DINGLJ-ENCODE-START$MaIFgs8JiOTFpjY+EXAoiS3QEg4z8jL0mTPnwNo+xX6K+4d/fSGJOsQOoglkFAQ7T8J/L0Rut+ka9Zac0VoXJwUqXNBbuNldKbcPTAyCTRQveuGrMTZ7Ewq4MApVMBl7ws/sA4qPBEeRz3PrCOQ4FrXtEX+4+SgiSNMWnP5sYCA=$DINGLJ-ENCODE-END$".decrypt()?"$DINGLJ-ENCODE-START$JDvZ3ydyDKWxq/gVUWbp3q/Q8GgVd7SEPc5zXAIqcQpWAGmGlGen9FpZf8lVbTSa9lj26O/YdUsLERRdQeTyfVn3aTvuMF8cMbsp+XJaHvHHivGj/T1Y7qaEkDrPkAsXdWvctUk4BimsYFPLOj6StcU8d0YkxS2ijEjpWPDjEos=$DINGLJ-ENCODE-END$".decrypt():""}))],tabBy:[window.TabPageStrategy(/.*/,"$DINGLJ-ENCODE-START$Qt30Ky2yJWqdmU/NYrr09W407aOg4PTmQ6wXxHXbiQ7jKGcQ6a4bqGIN4F89GxdXeb6qRg+OnUkPyfiadeYiALjAQfwNz5w9Q8tq/83bwEWb9HqajwzAgHRWlM3t7ee1N4JhMVexEQM62/NGw6cJocK8ygIZ9TvJD1qievIeYPA=$DINGLJ-ENCODE-END$".decrypt(),"$DINGLJ-ENCODE-START$jwkgKvsJvBuSPcG5eKUPXX9YY5xi+7j2ZsI/kbEE2jHOx9rNlEP3EVrqvRTHsm6HuzI2kc5E8ClXEB1JG38KKGdtjnzDo3im5NjfHRE2kDaNP5S0Vs/0ZtPlvTbwy/66CGzrJWt+ZqdVoI00a5yfK6KedAlsFZuClqg8ZbSI9XI=$DINGLJ-ENCODE-END$".decrypt(),"$DINGLJ-ENCODE-START$TXd106kiktSw3rSnrkYTJcPfk7vAvsdu7FyJJi7tkpnuOywSxpqyZg3UgRdsXMK8OeR/tzKG+J3aImlR6yPILLR4mjSIdlYxF9WgTPuIRW2rw7HQNjFe8q/o9au8hbc73CAz3UQQ3Zn6Qg4lvbVz16/ZHRnzJHcEbJFPmCqpzLs=$DINGLJ-ENCODE-END$".decrypt()),window.TabPageStrategy(new RegExp("$DINGLJ-ENCODE-START$ebOLBtGk6ms3sCFqcEBKAKhdRql4kHSw26QbrSv1DXcBQcfElAp8+cvsLL8sxkPTvpSAv3bmx0vxW1MRjjRhXpLeJnpgITKJW+uFT9fZSQSTuPgQtPtLCf6hVkZdHPhJY55Abvyw8b6Jhnkx3Ol/JNz/gBHgfc4yYYlfFFHLRE4=$DINGLJ-ENCODE-END$".decrypt()),(function(t,e){return"$DINGLJ-ENCODE-START$WqhVyo0cOyqM0a1YZQJXqHZX2w0AqCFljyAKlo34SCBCnMY4NfSWw6fzMjSZvhAd6jKyznBcAO7jFUGhOgea6UsdJimGVYvTbihVdCqEfCYlQnBmsv0dfCyxIaYI3+mrnOKF8HW1y4YUfXtRoMD6IBNQQ6X6z8q00huF7fpNhLM=$DINGLJ-ENCODE-END$".decrypt()}),!0)],colFilter:[window.ColFilter(new RegExp("$DINGLJ-ENCODE-START$ipdcJCOKKQDVddHr77SryKqsk59Q0dwh8lWSK7ig3jM2Lojt19xauPqlOf8e+2XEKqOPR1rkxUsUncMZjFmLluiVQmPKCvQ3JdTMmf6QzqRy9I71ad9FwfywsLipr9XZDP5cDXT43nxKydUVWLKu6WvxRm5jHcWK73Tiq1ELTyw=$DINGLJ-ENCODE-END$".decrypt()),/.*/,"$DINGLJ-ENCODE-START$ZzgngTgZ+kogHFsL6mK/ifUfexqKhtxUjSk4zrRxNTdOJEgOky3Sj9n40gV7MtJSUjthwx/ZV/XN4Q87jo3y4pMHWvJfqQySnLwTPTJ1YUE+IsXosAgnVSmCbNbuXbYmxOc0xfbOUtLmMm6tSenYPC5R0VkqgJ4VTGS/lOLHJ5g=$DINGLJ-ENCODE-END$".decrypt()),window.ColFilter(/.*/,/.*/,(function(t,e,n,i){return 0==n.filter((function(t){return""!=t.get(i).trim()})).length}))],order:{group:{component:["$DINGLJ-ENCODE-START$CfRFSGXaopgJi1I91cE5bEyVaQ5IXFU8ggpwFKmwEYjT2KsdIDHU0UCvkP2j3s0mjsUzQIeIGZibELw/jpNsi/6VCGCC7AoTfkCHLdKYqj9MWDP6DP4jq2AHlawXG7a6F6/6Yk33s8bgWNvuxpRvqzQnY8zfqSPHbCdjkH6eLNk=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$CL+deGa2m29+1VtaVA/hgHKi+YFj8+KYB5AUDtP1zeNmhkSmnBuo23GZmGldA3XuR0GZ5XaXj7EReVpKuuiuTRuUOQFzuSo5b/QV3/O3PmdA2k6o9KxWT9OlO+hA//QfkNlrix0ImL8lL5LfHzz3cEh/XjVNHLp/9h0OULiyC4U=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$EICe8MJfoqBfbaHvy5QfdtLRZhbaM5aRayqAO1ZW2XPn/SJ2H1g+kUk6IiFLyS34u9bUCyhG2e5nJCdCgt9rXatAJLY5LMM7soMPJzNjW5en8LzdVhYwmQJiYQnAobO7mI4vk6GrbT7h3nhiKMJyeGP5zAMtbbeoXdZ7iyl+mcg=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$f/c7RM9wgZFOEFr+Ozw9pzaVJa/3F2uS5tKV1QgMLBl6aZugqwDIl6HOa3ekb4oEhsV5uHTeSciarW+l+CvcAdZ6O1OWq6726xZ4nUtq+QoYY4jPfuPrKgA5+9GOheMNK1tEJQirDEFn+sPWIAfvYPAd59TDd4rzbuFDEYb5/R8=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$RuaZeDl8b5AWeG8aZF9KAuTM2Dxz22LdOGG86NnUM0WtbTcnni3bhAfbEnmWLKch0MZu5K7wOq1FFOO4lGjYl9WdT9RxcNDCgJrp69vY6jiZ1RUvslXKxXku+yoYOWxqm74NB93t8Oli/m+Sapdz97tELlTNEuApmU9bUbIdMMM=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$GrjGYL1QkppyF1YsGfFgF/0JqhtkslbKUjXDHEJF7Sl1RnfmuR15ZXRNI6xRZn+PGeLX/D3zlLVPQDbqX2gqWFkaBNDek5bnyJoW0hWGd8xcqVdE/ze5AJ+lppSD7au5TxIDjgSGdrKeNeJBoyVGGSDW3Y5WeiolTX4tA/TJXOE=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$LDTJUvXpolXp8B6mwG2s8Ni/ipSwinfRqV4AJ2Y9Rfh+3fTimkXezpDqBdyz5wSm1Bl1vOIGQv+5NaI2pMUqrhqxysZQdaJtzF6WKnznSKtS6NR4zuqrkX4kSrOvlR1wcbJzc0+9Uv16qzzxshp4KL3MVRkQgfCN1VR1MVafdow=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$j60/hfV89rJJ/Iz82dceMifGLY8fdmUqllnLLuFxkp9zfjfpy8ordWXaKU6Gh+QYSFYVsa2A1XsijSoC5pv7/qxVNCigWq3rygr/l8/ZbMf1l1vYe4iuiHV4wJsMGBeZWUBzZ8rdTG+lpcc2NLeFOW7neXTYVKavfIdEBVjtb/k=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$OjA/epIcYvlsHxGG6fNvHBC6wJvRd05Jd9sdgA4vCgX17QYYKXzyK+2kmZsSakkFWDQ9hEuqcnHSWA1yvcTWCitFQ3ir+dQK2gpUOniCf9eF7JKuDcPczzfkm4K92207boEz9vYhhckZfVIOn3A9aosKUfZHDguml3o0JaH91Ic=$DINGLJ-ENCODE-END$"]}}}}},window.readConfig||(window.readConfig=function(){return{}}),n(726),n(384),Window.prototype.linkCss=function(t,e){void 0===e&&(e=window.dinglj_home.decrypt());var n=document.createElement("style"),i=window.mergePath(t,e);n.innerHTML=window.get(i),document.head.appendChild(n)},n(374),Window.prototype.get=function(t,e){void 0===e&&(e={callback:null,async:!1});var n=new XMLHttpRequest;return n.open("GET",t,!!e.async),n.send(),4==n.readyState&&200==n.status&&e.callback&&e.callback(n.responseText),n.responseText},Window.prototype.mergePath=function(t,e){return void 0===e&&(e=window.dinglj_home.decrypt()),e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),"".concat(e).concat(t)};var t={},e={};String.prototype.encrypt=function(e){if(void 0===e&&(e=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub),$get(t,this))return $get(t,this);for(var n="'".concat(w.flag_start),i=this;;){if(i.length<100){n+=$rsa.encrypt(i,e);break}var o=i.substring(0,100);i=i.substring(100),n="".concat(n).concat($rsa.encrypt(o,e)).concat(w.flag_split)}return $set(t,this,"".concat(n).concat(w.flag_end,"'")),$get(t,this)},String.prototype.decrypt=function(t){if(void 0===t&&(t=null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri),$get(e,this))return $get(e,this);var n=this.startsWith(w.flag_start);if(n!=this.endsWith(w.flag_end))return $set(e,this,this),this;if(n){for(var i="",o=0,r=this.replace(w.flag_start,"").replace(w.flag_end,"").split(w.flag_split);o<r.length;o++){var s=r[o];i+=$rsa.decrypt(s,t)}return $set(e,this,i),i}return $set(e,this,this),this},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t){void 0===t&&(t=2e3),$tip.info(this,t,"10%")},String.prototype.warn=function(t){void 0===t&&(t=2e3),$tip.warn(this,t,"10%")},String.prototype.err=function(t){void 0===t&&(t=2e3),$tip.err(this,t,"10%")},Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,n){t[e]=n},window.$store={},window.$store.getStorage=function(t,e){void 0===e&&(e=void 0);var n=localStorage.getItem(t);if(n){var i=JSON.parse(n);return i.timeout>0&&Date.now()-i.savetime>i.timeout?("本地缓存".concat(t,"已过期").warn(),e):i.data}return e},window.$store.setStorage=function(t,e,n){void 0===n&&(n=-1);var i={savetime:Date.now(),timeout:n,data:e};localStorage.setItem(t,JSON.stringify(i))},n(836);var i=function(){function t(){}return t.prototype.getImg=function(t){return""},t.prototype.emit=function(t,e){},t}();window.BasicProperty=i;const o=i;var r,s=(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(o);window.AbstractComponent=a;const u=a;var c;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu"}(c||(c={})),window.ComponentType=c;const l=c;var p=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.components={},e.fieldNames=[],e.methodNames=[],e.computes=[],e.watchs=[],e.propMap=new Map,e}return p(e,t),e.prototype.getInstance=function(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null},e.prototype.getFields=function(){var t=this,e=this.getInstance();return function(){for(var n={$class:e,vid:"",name:t.name},i=0,o=t.fieldNames;i<o.length;i++){var r=o[i];$set(n,r,$get(e,r))}return n}},e.prototype.getMethods=function(){for(var t=this.getInstance(),e={getImg:function(t){return window.mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):function(){}},n=0,i=this.methodNames;n<i.length;n++){var o=i[n];e[o]=$get(t,o)}return e},e.prototype.getComputeds=function(){for(var t={},e=0,n=this.computes;e<n.length;e++){var i=n[e];t[i.fieldName]=i.func}return t},e.prototype.setProp=function(t,e){this.propMap.set(t,e)},e.prototype.getProps=function(){var t={};return this.propMap.forEach((function(e,n){$set(t,n,e)})),t},e.prototype.getMounted=function(){return function(){var t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(function(){return t}),t.vid),t.appMounted()}},e.prototype.getTemplate=function(){return $get(this.getInstance(),this.template)},e.prototype.getWatchs=function(){for(var t=this.getInstance(),e={},n=0,i=this.watchs;n<i.length;n++){var o=i[n];e[o.target]={handler:$get(t,o.funcName),deep:o.deep}}return e},e.prototype.getComponents=function(){return this.components},e}(o);window.MetaData=h;const f=h;var d=null,g=new Map;window.$registry={},$registry.getComponent=function(t){return t&&d?(g.set(t,d),d=null,g.get(t)):d||(d=new f)},$registry.buildComponent=function(t){var e=g.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){var e=g.get(t),n=$registry.buildComponent(t);return window.registVue(e.name,n)};window.LangItem=function(t,e){this.en=t,this.zh=e};var y=function(t,e,n){void 0===e&&(e=function(t,e){}),void 0===n&&(n=function(t,e){return!0}),this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=n};window.RightMenu=y;const v=y;var m;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(m||(m={})),window.RsaConst=m;const w=m;n(676),n(894);var b="0123456789abcdefghijklmnopqrstuvwxyz";function T(t){return b.charAt(t)}function S(t,e){return t&e}function C(t,e){return t|e}function x(t,e){return t^e}function E(t,e){return t&~e}function D(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function O(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var k,P="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function N(t){var e,n,i="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),i+=P.charAt(n>>6)+P.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),i+=P.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),i+=P.charAt(n>>2)+P.charAt((3&n)<<4));(3&i.length)>0;)i+="=";return i}function $(t){var e,n="",i=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var r=P.indexOf(t.charAt(e));r<0||(0==i?(n+=T(r>>2),o=3&r,i=1):1==i?(n+=T(o<<2|r>>4),o=15&r,i=2):2==i?(n+=T(o),n+=T(r>>2),o=3&r,i=3):(n+=T(o<<2|r>>4),n+=T(15&r),i=0))}return 1==i&&(n+=T(o<<2)),n}var I,j={decode:function(t){var e;if(void 0===I){for(I=Object.create(null),e=0;e<64;++e)I["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(I["-"]=62,I._=63,e=0;e<9;++e)I["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],i=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=I[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);i|=r,++o>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,o=0):i<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=j.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return j.decode(t)}},R=1e13,A=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,i,o=this.buf,r=o.length;for(n=0;n<r;++n)(i=o[n]*t+e)<R?e=0:i-=(e=0|i/R)*R,o[n]=i;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,i=this.buf,o=i.length;for(e=0;e<o;++e)(n=i[e]-t)<0?(n+=R,t=1):t=0,i[e]=n;for(;0===i[i.length-1];)i.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),i=e.length-2;i>=0;--i)n+=(R+e[i]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*R+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),M=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,V=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function L(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var B,_=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var i="",o=t;o<e;++o)if(i+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:i+="  ";break;case 15:i+="\n";break;default:i+=" "}return i},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var i=this.get(n);if(i<32||i>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",i=t;i<e;++i)n+=String.fromCharCode(this.get(i));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",i=t;i<e;){var o=this.get(i++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(i++)):String.fromCharCode((15&o)<<12|(63&this.get(i++))<<6|63&this.get(i++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,i,o="",r=t;r<e;)n=this.get(r++),i=this.get(r++),o+=String.fromCharCode(n<<8|i);return o},t.prototype.parseTime=function(t,e,n){var i=this.parseStringISO(t,e),o=(n?M:V).exec(i);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),i=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(i+=":"+o[5],o[6]&&(i+=":"+o[6],o[7]&&(i+="."+o[7]))),o[8]&&(i+=" UTC","Z"!=o[8]&&(i+=o[8],o[9]&&(i+=":"+o[9]))),i):"Unrecognized time: "+i},t.prototype.parseInteger=function(t,e){for(var n,i=this.get(t),o=i>127,r=o?255:0,s="";i==r&&++t<e;)i=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(s=i,n<<=3;0==(128&(+s^r));)s=+s<<1,--n;s="("+n+" bit)\n"}o&&(i-=256);for(var a=new A(i),u=t+1;u<e;++u)a.mulAdd(256,this.get(u));return s+a.toString()},t.prototype.parseBitString=function(t,e,n){for(var i=this.get(t),o="("+((e-t-1<<3)-i)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),u=s==e-1?i:0,c=7;c>=u;--c)r+=a>>c&1?"1":"0";if(r.length>n)return o+L(r,n)}return o+r},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return L(this.parseStringISO(t,e),n);var i=e-t,o="("+i+" byte)\n";i>(n/=2)&&(e=t+n);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return i>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var i="",o=new A,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===i)if((o=o.simplify())instanceof A)o.sub(80),i="2."+o.toString();else{var u=o<80?o<40?0:1:2;i=u+"."+(o-40*u)}else i+="."+o.toString();if(i.length>n)return L(i,n);o=new A,r=0}}return r>0&&(i+=".incomplete"),i},t}(),q=function(){function t(t,e,n,i,o){if(!(i instanceof F))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=i,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return L(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return L(this.stream.parseStringISO(e,e+n),t);case 30:return L(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,i=this.sub.length;n<i;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var i=0;i<n;++i)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof _?e:new _(e,0);var i=new _(n),o=new F(n),r=t.decodeLength(n),s=n.pos,a=s-i.pos,u=null,c=function(){var e=[];if(null!==r){for(var i=s+r;n.pos<i;)e[e.length]=t.decode(n);if(n.pos!=i)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}r=s-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)u=c();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");u=c();for(var l=0;l<u.length;++l)if(u[l].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){u=null}if(null===u){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);n.pos=s+Math.abs(r)}return new t(i,a,r,o,u)},t}(),F=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new A;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),K=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],H=(1<<26)/K[K.length-1],z=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,i=(1<<e)-1,o=!1,r="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,r=T(n));s>=0;)a<e?(n=(this[s]&(1<<a)-1)<<e-a,n|=this[--s]>>(a+=this.DB-e)):(n=this[s]>>(a-=e)&i,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(r+=T(n));return o?r:"0"},t.prototype.negate=function(){var e=W();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+ot(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=W();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new G(e):new X(e),this.exp(t,n)},t.prototype.clone=function(){var t=W();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,i=this.DB-t*this.DB%8,o=0;if(t-- >0)for(i<this.DB&&(n=this[t]>>i)!=(this.s&this.DM)>>i&&(e[o++]=n|this.s<<this.DB-i);t>=0;)i<8?(n=(this[t]&(1<<i)-1)<<8-i,n|=this[--t]>>(i+=this.DB-8)):(n=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=W();return this.bitwiseTo(t,S,e),e},t.prototype.or=function(t){var e=W();return this.bitwiseTo(t,C,e),e},t.prototype.xor=function(t){var e=W();return this.bitwiseTo(t,x,e),e},t.prototype.andNot=function(t){var e=W();return this.bitwiseTo(t,E,e),e},t.prototype.not=function(){for(var t=W(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=W();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=W();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+D(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=O(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,C)},t.prototype.clearBit=function(t){return this.changeBit(t,E)},t.prototype.flipBit=function(t){return this.changeBit(t,x)},t.prototype.add=function(t){var e=W();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=W();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=W();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=W();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=W();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=W(),n=W();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,i,o=t.bitLength(),r=it(1);if(o<=0)return r;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new G(e):e.isEven()?new U(e):new X(e);var s=[],a=3,u=n-1,c=(1<<n)-1;if(s[1]=i.convert(this),n>1){var l=W();for(i.sqrTo(s[1],l);a<=c;)s[a]=W(),i.mulTo(l,s[a-2],s[a]),a+=2}var p,h,f=t.t-1,d=!0,g=W();for(o=ot(t[f])-1;f>=0;){for(o>=u?p=t[f]>>o-u&c:(p=(t[f]&(1<<o+1)-1)<<u-o,f>0&&(p|=t[f-1]>>this.DB+o-u)),a=n;0==(1&p);)p>>=1,--a;if((o-=a)<0&&(o+=this.DB,--f),d)s[p].copyTo(r),d=!1;else{for(;a>1;)i.sqrTo(r,g),i.sqrTo(g,r),a-=2;a>0?i.sqrTo(r,g):(h=r,r=g,g=h),i.mulTo(g,s[p],r)}for(;f>=0&&0==(t[f]&1<<o);)i.sqrTo(r,g),h=r,r=g,g=h,--o<0&&(o=this.DB-1,--f)}return i.revert(r)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),r=it(1),s=it(0),a=it(0),u=it(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),n?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),n?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(e,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(o)>=0?(i.subTo(o,i),n&&r.subTo(a,r),s.subTo(u,s)):(o.subTo(i,o),n&&a.subTo(r,a),u.subTo(s,u))}return 0!=o.compareTo(t.ONE)?t.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},t.prototype.pow=function(t){return this.exp(t,new J)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var i=e;e=n,n=i}var o=e.getLowestSetBit(),r=n.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),n.rShiftTo(r,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return r>0&&n.lShiftTo(r,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=K[K.length-1]){for(e=0;e<K.length;++e)if(n[0]==K[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<K.length;){for(var i=K[e],o=e+1;o<K.length&&i<H;)i*=K[o++];for(i=n.modInt(i);e<o;)if(i%K[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var i;if(16==n)i=4;else if(8==n)i=3;else if(256==n)i=8;else if(2==n)i=1;else if(32==n)i=5;else{if(4!=n)return void this.fromRadix(e,n);i=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==i?255&+e[o]:nt(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,i=this.DB-n,o=(1<<i)-1,r=Math.floor(t/this.DB),s=this.s<<n&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>i|s,s=(this[a]&o)<<n;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var i=t%this.DB,o=this.DB-i,r=(1<<i)-1;e[0]=this[n]>>i;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&r)<<o,e[s-n]=this[s]>>i;i>0&&(e[this.t-n-1]|=(this.s&r)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]-t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i-=t[n],e[n++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[n++]=this.DV+i:i>0&&(e[n++]=i),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var i=this.abs(),o=e.abs(),r=i.t;for(n.t=r+o.t;--r>=0;)n[r]=0;for(r=0;r<o.t;++r)n[r+i.t]=i.am(0,o[r],n,r,0,i.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var i=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,i,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,i){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=n&&n.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=W());var s=W(),a=this.s,u=e.s,c=this.DB-ot(o[o.t-1]);c>0?(o.lShiftTo(c,s),r.lShiftTo(c,i)):(o.copyTo(s),r.copyTo(i));var l=s.t,p=s[l-1];if(0!=p){var h=p*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/h,d=(1<<this.F1)/h,g=1<<this.F2,y=i.t,v=y-l,m=null==n?W():n;for(s.dlShiftTo(v,m),i.compareTo(m)>=0&&(i[i.t++]=1,i.subTo(m,i)),t.ONE.dlShiftTo(l,m),m.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--v>=0;){var w=i[--y]==p?this.DM:Math.floor(i[y]*f+(i[y-1]+g)*d);if((i[y]+=s.am(0,w,i,v,0,l))<w)for(s.dlShiftTo(v,m),i.subTo(m,i);i[y]<--w;)i.subTo(m,i)}null!=n&&(i.drShiftTo(l,n),a!=u&&t.ZERO.subTo(n,n)),i.t=l,i.clamp(),c>0&&i.rShiftTo(c,i),a<0&&t.ZERO.subTo(i,i)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var i=W(),o=W(),r=n.convert(this),s=ot(e)-1;for(r.copyTo(i);--s>=0;)if(n.sqrTo(i,o),(e&1<<s)>0)n.mulTo(o,r,i);else{var a=i;i=o,o=a}return n.revert(i)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=it(n),o=W(),r=W(),s="";for(this.divRemTo(i,o,r);o.signum()>0;)s=(n+r.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var i=this.chunkSize(n),o=Math.pow(n,i),r=!1,s=0,a=0,u=0;u<e.length;++u){var c=nt(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(r=!0):(a=n*a+c,++s>=i&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(n,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,i){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),C,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),n.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var i,o,r=Math.min(t.t,this.t);for(i=0;i<r;++i)n[i]=e(this[i],t[i]);if(t.t<this.t){for(o=t.s&this.DM,i=r;i<this.t;++i)n[i]=e(this[i],o);n.t=this.t}else{for(o=this.s&this.DM,i=r;i<t.t;++i)n[i]=e(o,t[i]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,n,i),i},t.prototype.addTo=function(t,e){for(var n=0,i=0,o=Math.min(t.t,this.t);n<o;)i+=this[n]+t[n],e[n++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;n<this.t;)i+=this[n],e[n++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;n<t.t;)i+=t[n],e[n++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[n++]=i:i<-1&&(e[n++]=this.DV+i),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(var o=n.t-this.t;i<o;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(o=Math.min(t.t,e);i<o;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var i=n.t=this.t+t.t-e;for(n.s=0;--i>=0;)n[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)n[this.t+i-e]=this.am(e-i,t[i],n,0,0,this.t+i-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var i=this.t-1;i>=0;--i)n=(e*n+this[i])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),i=n.getLowestSetBit();if(i<=0)return!1;var o=n.shiftRight(i);(e=e+1>>1)>K.length&&(e=K.length);for(var r=W(),s=0;s<e;++s){r.fromInt(K[Math.floor(Math.random()*K.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(n)){for(var u=1;u++<i&&0!=a.compareTo(n);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=W();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(n.compareTo(i)<0){var o=n;n=i,i=o}var r=n.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)e(n);else{r<s&&(s=r),s>0&&(n.rShiftTo(s,n),i.rShiftTo(s,i));var a=function(){(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),n.compareTo(i)>=0?(n.subTo(i,n),n.rShiftTo(1,n)):(i.subTo(n,i),i.rShiftTo(1,i)),n.signum()>0?setTimeout(a,0):(s>0&&i.lShiftTo(s,i),setTimeout((function(){e(i)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,n,i,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),C,this),this.isEven()&&this.dAddOffset(1,0);var r=this,s=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(s,0)};setTimeout(s,0)}else{var a=[],u=7&e;a.length=1+(e>>3),n.nextBytes(a),u>0?a[0]&=(1<<u)-1:a[0]=0,this.fromString(a,256)}},t}(),J=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),G=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),X=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=W();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(z.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=W();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],i=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),U=function(){function t(t){this.m=t,this.r2=W(),this.q3=W(),z.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=W();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function W(){return new z(null)}function Y(t,e){return new z(t,e)}var Z="undefined"!=typeof navigator;Z&&"Microsoft Internet Explorer"==navigator.appName?(z.prototype.am=function(t,e,n,i,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var u=32767&this[t],c=this[t++]>>15,l=a*u+c*s;o=((u=s*u+((32767&l)<<15)+n[i]+(1073741823&o))>>>30)+(l>>>15)+a*c+(o>>>30),n[i++]=1073741823&u}return o},B=30):Z&&"Netscape"!=navigator.appName?(z.prototype.am=function(t,e,n,i,o,r){for(;--r>=0;){var s=e*this[t++]+n[i]+o;o=Math.floor(s/67108864),n[i++]=67108863&s}return o},B=26):(z.prototype.am=function(t,e,n,i,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var u=16383&this[t],c=this[t++]>>14,l=a*u+c*s;o=((u=s*u+((16383&l)<<14)+n[i]+o)>>28)+(l>>14)+a*c,n[i++]=268435455&u}return o},B=28),z.prototype.DB=B,z.prototype.DM=(1<<B)-1,z.prototype.DV=1<<B,z.prototype.FV=Math.pow(2,52),z.prototype.F1=52-B,z.prototype.F2=2*B-52;var Q,tt,et=[];for(Q="0".charCodeAt(0),tt=0;tt<=9;++tt)et[Q++]=tt;for(Q="a".charCodeAt(0),tt=10;tt<36;++tt)et[Q++]=tt;for(Q="A".charCodeAt(0),tt=10;tt<36;++tt)et[Q++]=tt;function nt(t,e){var n=et[t.charCodeAt(e)];return null==n?-1:n}function it(t){var e=W();return e.fromInt(t),e}function ot(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}z.ZERO=it(0),z.ONE=it(1);var rt,st,at=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,i;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,i=this.S[e],this.S[e]=this.S[n],this.S[n]=i;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),ut=null;if(null==ut){ut=[],st=0;var ct=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var lt=new Uint32Array(256);for(window.crypto.getRandomValues(lt),ct=0;ct<lt.length;++ct)ut[st++]=255&lt[ct]}var pt=0,ht=function(t){if((pt=pt||0)>=256||st>=256)window.removeEventListener?window.removeEventListener("mousemove",ht,!1):window.detachEvent&&window.detachEvent("onmousemove",ht);else try{var e=t.x+t.y;ut[st++]=255&e,pt+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",ht,!1):window.attachEvent&&window.attachEvent("onmousemove",ht))}function ft(){if(null==rt){for(rt=new at;st<256;){var t=Math.floor(65536*Math.random());ut[st++]=255&t}for(rt.init(ut),st=0;st<ut.length;++st)ut[st]=0;st=0}return rt.next()}var dt=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=ft()},t}(),gt=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=t.length-1;i>=0&&e>0;){var o=t.charCodeAt(i--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var r=new dt,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);n[--e]=s[0]}return n[--e]=2,n[--e]=0,new z(n)}(t,e);if(null==n)return null;var i=this.doPublic(n);if(null==i)return null;for(var o=i.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16),this.d=Y(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,i,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=Y(t,16),this.e=parseInt(e,16),this.d=Y(n,16),this.p=Y(i,16),this.q=Y(o,16),this.dmp1=Y(r,16),this.dmq1=Y(s,16),this.coeff=Y(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new dt,i=t>>1;this.e=parseInt(e,16);for(var o=new z(e,16);;){for(;this.p=new z(t-i,1,n),0!=this.p.subtract(z.ONE).gcd(o).compareTo(z.ONE)||!this.p.isProbablePrime(10););for(;this.q=new z(i,1,n),0!=this.q.subtract(z.ONE).gcd(o).compareTo(z.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(z.ONE),a=this.q.subtract(z.ONE),u=s.multiply(a);if(0==u.gcd(o).compareTo(z.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(u),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=Y(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),i=0;i<n.length&&0==n[i];)++i;if(n.length-i!=e-1||2!=n[i])return null;for(++i;0!=n[i];)if(++i>=n.length)return null;for(var o="";++i<n.length;){var r=255&n[i];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&n[i+1]),++i):(o+=String.fromCharCode((15&r)<<12|(63&n[i+1])<<6|63&n[i+2]),i+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var i=new dt,o=t>>1;this.e=parseInt(e,16);var r=new z(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(z.ONE),i=s.q.subtract(z.ONE),o=e.multiply(i);0==o.gcd(r).compareTo(z.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(i),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},u=function(){s.q=W(),s.q.fromNumberAsync(o,1,i,(function(){s.q.subtract(z.ONE).gcda(r,(function(t){0==t.compareTo(z.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(u,0)}))}))},c=function(){s.p=W(),s.p.fromNumberAsync(t-o,1,i,(function(){s.p.subtract(z.ONE).gcda(r,(function(t){0==t.compareTo(z.ONE)&&s.p.isProbablePrime(10)?setTimeout(u,0):setTimeout(c,0)}))}))};setTimeout(c,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,n){var i=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,i="",o=0;o<n;o+=2)i+="ff";return Y("0001"+i+"00"+t,16)}((yt[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==i)return null;var o=this.doPrivate(i);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,n){var i=Y(e,16),o=this.doPublic(i);return null==o?null:function(t){for(var e in yt)if(yt.hasOwnProperty(e)){var n=yt[e],i=n.length;if(t.substr(0,i)==n)return t.substr(i)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),yt={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},vt={};vt.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var i=function(){};if(i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var n=s[o],i=e[n];"function"==typeof i&&i!=Object.prototype[n]&&(t[n]=i)}})}catch(t){}r(t.prototype,n)}}};var mt={};void 0!==mt.asn1&&mt.asn1||(mt.asn1={}),mt.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var i="",o=0;o<n;o++)i+="f";e=new z(i,16).xor(t).add(z.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=mt.asn1,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,u=e.DEREnumerated,c=e.DERUTF8String,l=e.DERNumericString,p=e.DERPrintableString,h=e.DERTeletexString,f=e.DERIA5String,d=e.DERUTCTime,g=e.DERGeneralizedTime,y=e.DERSequence,v=e.DERSet,m=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var T=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+T+":"))throw"undefined key: "+T;if("bool"==T)return new n(t[T]);if("int"==T)return new i(t[T]);if("bitstr"==T)return new o(t[T]);if("octstr"==T)return new r(t[T]);if("null"==T)return new s(t[T]);if("oid"==T)return new a(t[T]);if("enum"==T)return new u(t[T]);if("utf8str"==T)return new c(t[T]);if("numstr"==T)return new l(t[T]);if("prnstr"==T)return new p(t[T]);if("telstr"==T)return new h(t[T]);if("ia5str"==T)return new f(t[T]);if("utctime"==T)return new d(t[T]);if("gentime"==T)return new g(t[T]);if("seq"==T){for(var S=t[T],C=[],x=0;x<S.length;x++){var E=w(S[x]);C.push(E)}return new y({array:C})}if("set"==T){for(S=t[T],C=[],x=0;x<S.length;x++)E=w(S[x]),C.push(E);return new v({array:C})}if("tag"==T){var D=t[T];if("[object Array]"===Object.prototype.toString.call(D)&&3==D.length){var O=w(D[2]);return new m({tag:D[0],explicit:D[1],obj:O})}var k={};if(void 0!==D.explicit&&(k.explicit=D.explicit),void 0!==D.tag&&(k.tag=D.tag),void 0===D.obj)throw"obj shall be specified for 'tag'.";return k.obj=w(D.obj),new m(k)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},mt.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),i=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);i+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new z(i,2).toString(10),i="")}return e},mt.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new z(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);return i},mt.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},mt.asn1.DERAbstractString=function(t){mt.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},vt.lang.extend(mt.asn1.DERAbstractString,mt.asn1.ASN1Object),mt.asn1.DERAbstractTime=function(t){mt.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var i=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+i(String(o.getMonth()+1),2)+i(String(o.getDate()),2)+i(String(o.getHours()),2)+i(String(o.getMinutes()),2)+i(String(o.getSeconds()),2);if(!0===n){var a=o.getMilliseconds();if(0!=a){var u=i(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,i,o,r){var s=new Date(Date.UTC(t,e-1,n,i,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},vt.lang.extend(mt.asn1.DERAbstractTime,mt.asn1.ASN1Object),mt.asn1.DERAbstractStructured=function(t){mt.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},vt.lang.extend(mt.asn1.DERAbstractStructured,mt.asn1.ASN1Object),mt.asn1.DERBoolean=function(){mt.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},vt.lang.extend(mt.asn1.DERBoolean,mt.asn1.ASN1Object),mt.asn1.DERInteger=function(t){mt.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=mt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new z(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},vt.lang.extend(mt.asn1.DERInteger,mt.asn1.ASN1Object),mt.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=mt.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}mt.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var i="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),i+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+i},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},vt.lang.extend(mt.asn1.DERBitString,mt.asn1.ASN1Object),mt.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=mt.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}mt.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},vt.lang.extend(mt.asn1.DEROctetString,mt.asn1.DERAbstractString),mt.asn1.DERNull=function(){mt.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},vt.lang.extend(mt.asn1.DERNull,mt.asn1.ASN1Object),mt.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",i=new z(t,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(i=r+i,s=0;s<i.length-1;s+=7){var a=i.substr(s,7);s!=i.length-7&&(a="1"+a),n+=e(parseInt(a,2))}return n};mt.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var i="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);i+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)i+=n(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=i},this.setValueName=function(t){var e=mt.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},vt.lang.extend(mt.asn1.DERObjectIdentifier,mt.asn1.ASN1Object),mt.asn1.DEREnumerated=function(t){mt.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=mt.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new z(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},vt.lang.extend(mt.asn1.DEREnumerated,mt.asn1.ASN1Object),mt.asn1.DERUTF8String=function(t){mt.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},vt.lang.extend(mt.asn1.DERUTF8String,mt.asn1.DERAbstractString),mt.asn1.DERNumericString=function(t){mt.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},vt.lang.extend(mt.asn1.DERNumericString,mt.asn1.DERAbstractString),mt.asn1.DERPrintableString=function(t){mt.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},vt.lang.extend(mt.asn1.DERPrintableString,mt.asn1.DERAbstractString),mt.asn1.DERTeletexString=function(t){mt.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},vt.lang.extend(mt.asn1.DERTeletexString,mt.asn1.DERAbstractString),mt.asn1.DERIA5String=function(t){mt.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},vt.lang.extend(mt.asn1.DERIA5String,mt.asn1.DERAbstractString),mt.asn1.DERUTCTime=function(t){mt.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},vt.lang.extend(mt.asn1.DERUTCTime,mt.asn1.DERAbstractTime),mt.asn1.DERGeneralizedTime=function(t){mt.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},vt.lang.extend(mt.asn1.DERGeneralizedTime,mt.asn1.DERAbstractTime),mt.asn1.DERSequence=function(t){mt.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},vt.lang.extend(mt.asn1.DERSequence,mt.asn1.DERAbstractStructured),mt.asn1.DERSet=function(t){mt.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},vt.lang.extend(mt.asn1.DERSet,mt.asn1.DERAbstractStructured),mt.asn1.DERTaggedObject=function(t){mt.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},vt.lang.extend(mt.asn1.DERTaggedObject,mt.asn1.ASN1Object);var wt,bt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Tt=function(t){function e(n){var i=t.call(this)||this;return n&&("string"==typeof n?i.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&i.parsePropertiesFrom(n)),i}return bt(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,i=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===k){var n="0123456789ABCDEF";for(k={},e=0;e<16;++e)k[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)k[n.charAt(e)]=e;for(e=0;e<8;++e)k[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=k[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(i[i.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return i}(t):j.unarmor(t),o=q.decode(i);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=Y(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var r=o.sub[3].getHexStringValue();this.d=Y(r,16);var s=o.sub[4].getHexStringValue();this.p=Y(s,16);var a=o.sub[5].getHexStringValue();this.q=Y(a,16);var u=o.sub[6].getHexStringValue();this.dmp1=Y(u,16);var c=o.sub[7].getHexStringValue();this.dmq1=Y(c,16);var l=o.sub[8].getHexStringValue();this.coeff=Y(l,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var p=o.sub[1].sub[0];e=p.sub[0].getHexStringValue(),this.n=Y(e,16),n=p.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=Y(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new mt.asn1.DERInteger({int:0}),new mt.asn1.DERInteger({bigint:this.n}),new mt.asn1.DERInteger({int:this.e}),new mt.asn1.DERInteger({bigint:this.d}),new mt.asn1.DERInteger({bigint:this.p}),new mt.asn1.DERInteger({bigint:this.q}),new mt.asn1.DERInteger({bigint:this.dmp1}),new mt.asn1.DERInteger({bigint:this.dmq1}),new mt.asn1.DERInteger({bigint:this.coeff})]};return new mt.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return N(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new mt.asn1.DERSequence({array:[new mt.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new mt.asn1.DERNull]}),e=new mt.asn1.DERSequence({array:[new mt.asn1.DERInteger({bigint:this.n}),new mt.asn1.DERInteger({int:this.e})]}),n=new mt.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new mt.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return N(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(gt),St="undefined"!=typeof process?null===(wt=process.env)||void 0===wt?void 0:wt.npm_package_version:void 0;const Ct=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new Tt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt($(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return N(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return N(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,$(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new Tt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=St,t}();function xt(t,e){return"object"==typeof t?function(t,e){for(let n of Object.keys(t))t[n]=xt(t[n],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const n=new Ct;return n.setPrivateKey(e),n.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const n=new Ct;return n.setPrivateKey(e),n.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return xt(t,e)},n(506),window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,n){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,n){return void 0===n&&(n=!1),function(i,o){$registry.getComponent().propMap.set(o,{type:t,default:e,required:n})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,n){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,n){$registry.getComponent().computes.push({fieldName:n,func:t})}},window.Component=function(t){return function(e,n){$registry.getComponent().components=t}},window.Watch=function(t,e){return void 0===e&&(e=!0),function(n,i){$registry.getComponent().watchs.push({target:t,deep:e,funcName:i})}},window.Service=function(t,e,n){return function(i){var o=$registry.getComponent(e);o.clazz=t,o.name=e,o.setProp("iProps",{type:Object,default:{},required:!!n})}};var Et=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Dt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>',e}Et(e,t),e.prototype.getClass=function(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}},e.prototype.getStyle=function(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}},Dt([Template],e.prototype,"template",void 0),Dt([Method],e.prototype,"getClass",null),Dt([Method],e.prototype,"getStyle",null),Dt([Compute((function(t){return t.iProps.singleClick||function(t){}}))],e.prototype,"$singleClick",void 0),Dt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),Dt([Compute((function(t){return t.iProps.type||"primary"}))],e.prototype,"$type",void 0),e=Dt([Service(e,l.ButtonX,!0)],e)}(u),$registry.buildAndRegist(l.ButtonX);var Ot=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),kt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',e.value="",e}Ot(e,t),e.prototype.mounted=function(){var t=this;$queue.on("dinglj-v-input-text::clear",(function(){t.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(function(){window.byId(t.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""},e.prototype.getStyle=function(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}},e.prototype.setValue=function(t,e){this.value=t;var n={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(n),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(n),this.iProps.onOver&&this.iProps.onOver(n)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(n),this.iProps.onOver&&this.iProps.onOver(n))},kt([Mounted],e.prototype,"mounted",null),kt([Template],e.prototype,"template",void 0),kt([Field],e.prototype,"value",void 0),kt([Method],e.prototype,"getStyle",null),kt([Method],e.prototype,"setValue",null),kt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),kt([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"$caption",void 0),kt([Compute((function(t){return t.iProps.placeholder||"请输入".concat(t.$caption)}))],e.prototype,"$placeholder",void 0),e=kt([Service(e,l.InputX,!0)],e)}(u),$registry.buildAndRegist(l.InputX);var Pt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Nt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',e.active=!1,e}Pt(e,t),e.prototype.getStyle=function(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}},e.prototype.getClass=function(){return{"dinglj-v-switch-btn":!0,active:this.active}},e.prototype.onclicked=function(){this.active=!this.active,this.active?this.postText&&"已切换至: ".concat(this.postText).info():this.preText&&"已切换至: ".concat(this.preText).info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})},Nt([Template],e.prototype,"template",void 0),Nt([Field],e.prototype,"active",void 0),Nt([Method],e.prototype,"getStyle",null),Nt([Method],e.prototype,"getClass",null),Nt([Method],e.prototype,"onclicked",null),Nt([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"xSize",void 0),Nt([Compute((function(t){return t.iProps.preTxt||""}))],e.prototype,"preText",void 0),Nt([Compute((function(t){return t.iProps.postTxt||""}))],e.prototype,"postText",void 0),e=Nt([Service(e,l.SwitchX,!0)],e)}(u),$registry.buildAndRegist(l.SwitchX);var $t=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),It=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        <div class="dinglj-v-combo-selections">\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',e.value=null,e}$t(e,t),e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.$onChange(t))},e.prototype.getStyle=function(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}},e.prototype.$onChange=function(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})},It([Template],e.prototype,"template",void 0),It([Field],e.prototype,"value",void 0),It([Method],e.prototype,"setValue",null),It([Method],e.prototype,"getStyle",null),It([Method],e.prototype,"$onChange",null),It([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"$list",void 0),It([Compute((function(t){return t.iProps.size||"normal"}))],e.prototype,"$size",void 0),It([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"$caption",void 0),It([Compute((function(t){return t.iProps.placeholder||"请选择".concat(t.$caption)}))],e.prototype,"$placeholder",void 0),It([Compute((function(t){return t.iProps.getLabel||function(t){return t}}))],e.prototype,"$getLabel",void 0),It([Compute((function(t){return t.iProps.getValue||function(t){return t}}))],e.prototype,"$getValue",void 0),e=It([Service(e,l.ComboX,!0)],e)}(u),$registry.buildAndRegist(l.ComboX);var jt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Rt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="dinglj-v-navigator">\n        <div class="dinglj-v-navigator-item" \n            v-for="item in list" \n            @click="setValue(item)"\n            :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',e.value=null,e}jt(e,t),e.prototype.mounted=function(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])},e.prototype.setValue=function(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))},Rt([Mounted],e.prototype,"mounted",null),Rt([Template],e.prototype,"template",void 0),Rt([Field],e.prototype,"value",void 0),Rt([Method],e.prototype,"setValue",null),Rt([Compute((function(t){return null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value}))],e.prototype,"validItem",void 0),Rt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),Rt([Compute((function(t){return t.iProps.default||(t.list.length>0?t.list[0]:null)}))],e.prototype,"default",void 0),Rt([Compute((function(t){return t.iProps.getCaption||function(t){return t}}))],e.prototype,"getCaption",void 0),e=Rt([Service(e,l.NavigatorX,!0)],e)}(u),$registry.buildAndRegist(l.NavigatorX);var At=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Mt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}At(e,t),e.prototype.getStyle=function(){return{top:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),height:"".concat(this.size,"00%")}},Mt([Template],e.prototype,"template",void 0),Mt([Compute((function(t){return t.iProps.size||0}))],e.prototype,"size",void 0),Mt([Compute((function(t){return t.iProps.index||0}))],e.prototype,"index",void 0),Mt([Method],e.prototype,"getStyle",null),e=Mt([Service(e,l.ScrollerY,!0)],e)}(u),$registry.buildAndRegist(l.ScrollerY);var Vt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Lt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-navigator-view">\n        \x3c!-- 左侧导航窗格 --\x3e\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n            \x3c!-- 主要内容部分用纵向滚动视图, 并提供插槽 --\x3e\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',e.active=null,e}Vt(e,t),Lt([Template],e.prototype,"template",void 0),Lt([Field],e.prototype,"active",void 0),Lt([Compute((function(t){return{list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}}}))],e.prototype,"navigatorProps",void 0),Lt([Compute((function(t){return{size:t.list.length,index:t.list.indexOf(t.active)}}))],e.prototype,"scrollyProps",void 0),Lt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),e=Lt([Service(e,l.NavigatorView,!0)],e)}(u),$registry.buildAndRegist(l.NavigatorView);var Bt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),_t=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',e.value=null,e}Bt(e,t),e.prototype.mounted=function(){var t=this;Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(function(){var e=(t.index+1+t.list.length)%t.list.length;t.clicked(t.list[e],e)}),this.vid),$queue.on("tab-panel:to",(function(e){var n=t.list.filter((function(t){return JSON.stringify(t)==JSON.stringify(e)}));n.length>0&&t.clicked(n[0],t.list.indexOf(n[0]))}),this.vid)},e.prototype.getClass=function(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}},e.prototype.getId=function(t){return"".concat(this.vid,"-").concat(t)},e.prototype.clicked=function(t,e){var n=this;t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),setTimeout((function(){var t=window.query("#".concat(n.vid," .dinglj-v-tab-float"))[0],i=window.byId(n.getId(e));i&&(t.style.width="".concat(i.offsetWidth,"px"),t.style.left="".concat(i.offsetLeft,"px"))}),50))},_t([Mounted],e.prototype,"mounted",null),_t([Template],e.prototype,"template",void 0),_t([Field],e.prototype,"value",void 0),_t([Method],e.prototype,"getClass",null),_t([Method],e.prototype,"getId",null),_t([Method],e.prototype,"clicked",null),_t([Compute((function(t){return!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value)}))],e.prototype,"index",void 0),_t([Compute((function(t){if(!t.iProps.list)return[];for(var e=!1,n=0,i=t.iProps.list;n<i.length;n++){var o=i[n];if(JSON.stringify(t.value)==JSON.stringify(o)){e=!0;break}}return e||t.clicked(t.iProps.list[0],0),t.iProps.list}))],e.prototype,"list",void 0),_t([Compute((function(t){return t.iProps.getLabel||function(t){return t}}))],e.prototype,"getLabel",void 0),e=_t([Service(e,l.TabPanelX,!0)],e)}(u),$registry.buildAndRegist(l.TabPanelX);var qt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ft=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>',e}qt(e,t),e.prototype.getStyle=function(){return{left:"-".concat(this.index>=0&&this.index<this.size?this.index:0,"00%"),width:"".concat(this.size,"00%")}},Ft([Template],e.prototype,"template",void 0),Ft([Compute((function(t){return t.iProps.size||0}))],e.prototype,"size",void 0),Ft([Compute((function(t){return t.iProps.index||0}))],e.prototype,"index",void 0),Ft([Method],e.prototype,"getStyle",null),e=Ft([Service(e,l.ScrollerX,!0)],e)}(u),$registry.buildAndRegist(l.ScrollerX);var Kt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ht=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-tab-panel-view" :id="vid">\n        \x3c!-- TabView 总容器 --\x3e\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            \x3c!-- TabView 内容 --\x3e\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',e.value=null,e.tabPanelId="",e}Kt(e,t),e.prototype.mounted=function(){var t=this;$queue.on("tab-view:next",(function(){$queue.sendMsg("tab-panel:next",null,t.tabPanelId)}),this.vid),$queue.on("tab-view:to",(function(e){$queue.sendMsg("tab-panel:to",e,t.tabPanelId)}),this.vid)},e.prototype.tabPanelLoaded=function(t){this.tabPanelId=t.value},Ht([Mounted],e.prototype,"mounted",null),Ht([Template],e.prototype,"template",void 0),Ht([Compute((function(t){return{size:t.list.length,index:t.index}}))],e.prototype,"scrollxProps",void 0),Ht([Compute((function(t){return{list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}}}))],e.prototype,"tabPanelProps",void 0),Ht([Field],e.prototype,"value",void 0),Ht([Field],e.prototype,"tabPanelId",void 0),Ht([Method],e.prototype,"tabPanelLoaded",null),Ht([Compute((function(t){return t.list.indexOfIgnoreCase(t.value)}))],e.prototype,"index",void 0),Ht([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),e=Ht([Service(e,l.TabView,!0)],e)}(u),$registry.buildAndRegist(l.TabView);var zt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Jt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div class="dinglj-v-table" :id="vid" :data-title="title">\n        <div class="dinglj-v-thead dinglj-v-tr">\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',e.cache={},e.checkAll=!1,e.checkedList=[],e.bestWidthCache=!1,e}zt(e,t),e.prototype.mounted=function(){var t=this;window.timer((function(){var e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)},e.prototype.genHeadProps=function(t){return{bindId:"".concat(this.vid,"-Col-").concat(this.getColumnKey(t)),data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}},e.prototype.genLineProps=function(t,e){return{bindId:"".concat(this.vid,"-").concat(e),data:t,list:this.rowMenus}},e.prototype.genBodyProps=function(){return{bindId:"".concat(this.vid,"-Body"),data:this.list,list:this.bodyMenus}},e.prototype.checkOne=function(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))},e.prototype.getClass=function(t){var e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];var n=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed",i={"dinglj-v-cell":!0};return i[e]=!0,i[n]=!0,this.cache[e]=i,i},e.prototype.getStyle=function(t){var e;return e=""==t?80:this.getBestWidth()[t],{width:"".concat(e,"px")}},e.prototype.doCheckAll=function(){var t;this.checkedList.length=0,this.checkAll||(t=this.checkedList).push.apply(t,this.list),this.checkAll=!this.checkAll},e.prototype.getBestWidth=function(){var t=this;if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(var e=function(e){var i=n.getColumnKey(e),o=n.getColumnLabel(e),r=[window.calcTxtWidth("".concat(o))];r.push.apply(r,n.list.map((function(e){var n=t.getCell(e,i);return window.calcTxtWidth(n)})));var s=Math.max.apply(Math,r);n.bestWidthCache[i]=s+30},n=this,i=0,o=this.columns;i<o.length;i++)e(o[i]);return this.bestWidthCache},e.prototype.exportToExcel=function(){var t=this;window.timer((function(){var e=window.byId(t.vid);if(!e)return!1;for(var n="",i=0,o=e.children[0].children;i<o.length;i++)(c=o[i]).classList.contains("dinglj-v-table-select")||(n+=c.innerText);n+="\n";for(var r=0,s=e.children[1].children[0].children;r<s.length;r++){for(var a=0,u=s[r].children;a<u.length;a++){var c;(c=u[a]).classList.contains("dinglj-v-table-select")||(n+=c.innerText)}n+="\n"}return console.log(n),!0}))},Jt([Mounted],e.prototype,"mounted",null),Jt([Template],e.prototype,"template",void 0),Jt([Field],e.prototype,"cache",void 0),Jt([Field],e.prototype,"checkAll",void 0),Jt([Field],e.prototype,"checkedList",void 0),Jt([Field],e.prototype,"bestWidthCache",void 0),Jt([Method],e.prototype,"genHeadProps",null),Jt([Method],e.prototype,"genLineProps",null),Jt([Method],e.prototype,"genBodyProps",null),Jt([Method],e.prototype,"checkOne",null),Jt([Method],e.prototype,"getClass",null),Jt([Method],e.prototype,"getStyle",null),Jt([Method],e.prototype,"doCheckAll",null),Jt([Method],e.prototype,"getBestWidth",null),Jt([Method],e.prototype,"exportToExcel",null),Jt([Compute((function(t){return t.iProps.title||""}))],e.prototype,"title",void 0),Jt([Compute((function(t){return t.iProps.flexColumns||[]}))],e.prototype,"flexColumns",void 0),Jt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"list",void 0),Jt([Compute((function(t){return t.iProps.sequenceNum||!0}))],e.prototype,"sequenceNum",void 0),Jt([Compute((function(t){return t.iProps.selectable||!0}))],e.prototype,"selectable",void 0),Jt([Compute((function(t){return t.iProps.columns||[]}))],e.prototype,"columns",void 0),Jt([Compute((function(t){return t.iProps.getColumnKey||function(t){return t}}))],e.prototype,"getColumnKey",void 0),Jt([Compute((function(t){return t.iProps.getColumnLabel||function(t){return t}}))],e.prototype,"getColumnLabel",void 0),Jt([Compute((function(t){return t.iProps.getCell||function(e,n){var i=t.iProps.getColumnKey(n);return $get(e,i)}}))],e.prototype,"getCell",void 0),Jt([Compute((function(t){return t.iProps.rowMenus||[]}))],e.prototype,"rowMenus",void 0),Jt([Compute((function(t){return t.iProps.bodyMenus||[]}))],e.prototype,"bodyMenus",void 0),Jt([Compute((function(t){return t.iProps.titleColumnMenus||[]}))],e.prototype,"titleColumnMenus",void 0),e=Jt([Service(e,l.TableX,!0)],e)}(u),$registry.buildAndRegist(l.TableX);var Gt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Xt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template="<div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>",e}Gt(e,t),e.prototype.getContainerStyle=function(){return{"--bar-height":this.height}},e.prototype.getProgressStyle=function(){var t=this;return setTimeout((function(){window.byId(t.vid).findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent}),100),{width:"0%"}},Xt([Template],e.prototype,"template",void 0),Xt([Method],e.prototype,"getContainerStyle",null),Xt([Method],e.prototype,"getProgressStyle",null),Xt([Compute((function(t){return(t.iProps.height||5)+"px"}))],e.prototype,"height",void 0),Xt([Compute((function(t){return t.iProps.percent||"100%"}))],e.prototype,"percent",void 0),Xt([Compute((function(t){return t.iProps.txtPosition||"TopLeft"}))],e.prototype,"position",void 0),Xt([Compute((function(t){return t.iProps.caption||""}))],e.prototype,"caption",void 0),e=Xt([Service(e,l.ProgressX,!0)],e)}(u),$registry.buildAndRegist(l.ProgressX);var Ut=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Wt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<teleport to="body" v-if="display">\n        <div class="dinglj-v-modal-mask"></div>\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',e.position={x:-1,y:-1},e}Ut(e,t),e.prototype.mounted=function(){window.addEventListener("mouseup",this.cleanXY)},e.prototype.getStyle=function(){return{width:"".concat(this.width,"px"),height:"".concat(this.height,"px")}},e.prototype.closeModal=function(){this.iProps.onClose()},e.prototype.recordXY=function(t){var e=window.byId(this.vid);if(e){var n=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(n.left),y:t.screenY-parseInt(n.top)}}else this.cleanXY()},e.prototype.moveXY=function(t){if(window.getVal(this.position,"x",-1)>=0){var e=window.byId(this.vid);e.style.left="".concat(t.screenX-this.position.x,"px"),e.style.top="".concat(t.screenY-this.position.y,"px")}},e.prototype.cleanXY=function(){this.position={x:-1,y:-1}},Wt([Mounted],e.prototype,"mounted",null),Wt([Template],e.prototype,"template",void 0),Wt([Field],e.prototype,"position",void 0),Wt([Method],e.prototype,"getStyle",null),Wt([Method],e.prototype,"closeModal",null),Wt([Method],e.prototype,"recordXY",null),Wt([Method],e.prototype,"moveXY",null),Wt([Method],e.prototype,"cleanXY",null),Wt([Compute((function(t){return{type:"cancel",singleClick:function(e){t.cancel()}}}))],e.prototype,"cancelProps",void 0),Wt([Compute((function(t){return{singleClick:function(e){t.ok()}}}))],e.prototype,"okProps",void 0),Wt([Compute((function(t){return t.iProps.display||!1}))],e.prototype,"display",void 0),Wt([Compute((function(t){return t.iProps.ok||t.closeModal}))],e.prototype,"ok",void 0),Wt([Compute((function(t){return t.iProps.cancel||t.closeModal}))],e.prototype,"cancel",void 0),Wt([Compute((function(t){return t.iProps.width||600}))],e.prototype,"width",void 0),Wt([Compute((function(t){return t.iProps.height||300}))],e.prototype,"height",void 0),e=Wt([Service(e,l.ModalX,!0)],e)}(u),$registry.buildAndRegist(l.ModalX);var Yt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Zt=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<teleport to="body" v-if="display">\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            <div v-for="item in $list">\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',e.display=!1,e.position={top:"0px",left:"0px",opacity:"0"},e}Yt(e,t),e.prototype.mounted=function(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()},e.prototype.binding=function(){var t=this;window.timer((function(){return!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){$queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){var e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)}))})),!0))}),500)},e.prototype.hidden=function(){this.position.opacity="0",this.display=!1},e.prototype.conditionIfDisplay=function(t){return t.isDisplay(this.$ctx,this.element)},e.prototype.execCommand=function(t){t.event(this.$ctx,this.element),this.hidden()},Zt([Mounted],e.prototype,"mounted",null),Zt([Template],e.prototype,"template",void 0),Zt([Field],e.prototype,"display",void 0),Zt([Field],e.prototype,"element",void 0),Zt([Field],e.prototype,"position",void 0),Zt([Method],e.prototype,"binding",null),Zt([Method],e.prototype,"hidden",null),Zt([Method],e.prototype,"conditionIfDisplay",null),Zt([Method],e.prototype,"execCommand",null),Zt([Compute((function(t){return t.iProps.list||[]}))],e.prototype,"$list",void 0),Zt([Compute((function(t){return t.iProps.data||{}}))],e.prototype,"$ctx",void 0),e=Zt([Service(e,l.ContextMenuX,!0)],e)}(u),$registry.buildAndRegist(l.ContextMenuX),window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css");var Qt={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"},te=(function(){function t(t,e){if(t){t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error("未知的状态 {".concat(t.stats,"}, 结果 {").concat(t.result,"}, 请联系 dinglj 补充")):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error("未知的状态 {".concat(t.stats,"}, 请联系 dinglj 补充")):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error("未知的结果 {".concat(t.result,"}, 请联系 dinglj 补充")),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;var n=t.ticketId||t.log;this.ticket=n?parseInt(n):n,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}}t.getCaption=function(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}},t._fieldMap_=Qt,t._fields_=Object.keys(Qt)}(),function(){function t(){}return t.prototype.exec=function(t,e,n,i,o){if(void 0===o&&(o=""),this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,i):this.func(t,e,n,o);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(o)}return!1},t}());window.defunc("RowFilter",(function(t,e,n){var i=new te;return i.isRow=!0,i.groupRegExp=t,i.tabRegExp=e,i.func=n,i})),window.defunc("ColFilter",(function(t,e,n){var i=new te;return i.isRow=!1,i.groupRegExp=t,i.tabRegExp=e,Array.isArray(n)?(i.ignoreColumns=n,i.type="array"):"function"==typeof n?(i.func=n,i.type="function"):(i.ignoreColumns=[n],i.type="single"),i}));var ee=function(){function t(){}return t.prototype.exec=function(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""},t}();window.defunc("GroupStrategy",(function(t,e,n){var i=new ee;return i.fieldKey=t,i.expectValue=e,i.groupName=n,Array.isArray(e)?i.expectValue=e:i.expectValue=[e],i})),window.defunc("GroupStrategy",(function(t){var e=new ee;return e.func=t,e}));var ne=function(){function t(){}return t.prototype.exec=function(t,e,n,i){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,n,i):window.compareStringByArray(this.expectValue,n.get(this.fieldKey),i.get(this.fieldKey))},t}();window.defunc("OrderTicket",(function(t,e,n,i){var o=new ne;return o.groupRegExp=t,o.tabRegExp=e,o.fieldKey=n,Array.isArray(i)?o.expectValue=i:o.expectValue=[i],o})),window.defunc("OrderTicket",(function(t,e,n){var i=new ne;return i.groupRegExp=t,i.tabRegExp=e,i.func=n,i}));var ie=function(){function t(){}return t.prototype.exec=function(t,e){var n=this.groupRegExp.test(t);if(this.reverse&&(n=!n),n){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""},t}();window.defunc("TabPageStrategy",(function(t,e,n,i){return window.TabPageStrategy(t,e,n,i,!1)})),window.defunc("TabPageStrategy",(function(t,e,n,i,o){var r=new ie;return r.groupRegExp=t,r.fieldKey=e,r.tabName=i,r.reverse=o,Array.isArray(n)?r.expectValue=n:r.expectValue=[n],r})),window.defunc("TabPageStrategy",(function(t,e){return window.TabPageStrategy(t,e,!1)})),window.defunc("TabPageStrategy",(function(t,e,n){var i=new ie;return i.groupRegExp=t,i.func=e,i.reverse=n,i}));var oe={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",dinglj_note:"备注"},re=function(){function t(t){if(void 0===t&&(t=null),null!=t)for(var e=$store.getStorage("dinglj-v-ticket-info",{}),n=0,i=t.children;n<i.length;n++){var o=i[n],r=o.className,s=o.innerText.trim();this.set(r,s),"id".equalsIgnoreCase(r)&&e[s]&&this.set("dinglj_note",e[s].note)}}return t.getCaption=function(e){return t.fieldNames.includesIgnoreCase(e)?t.fields[e]:e},t.forLocalTest=function(e){for(var n=new t,i=$store.getStorage("dinglj-v-ticket-info",{}),o=0,r=Object.keys(e);o<r.length;o++){var s=r[o],a=$get(e,s);n.set(s,a),"id".equalsIgnoreCase(s)&&i[a]&&n.set("dinglj_note",i[a].note)}return n},t.prototype.set=function(e,n){t.fieldNames.includesIgnoreCase(e)?this[e]=n:t.unknownColumn.includesIgnoreCase(e)||("不存在的列: ".concat(e).warn(),t.unknownColumn.push(e))},t.prototype.get=function(t){return $get(this,t)?$get(this,t):""},t.fields=oe,t.fieldNames=Object.keys(oe),t.fieldValues=Object.values(oe),t.unknownColumn=["sel"],t}();window.$ticket={};var se=window.readConfig(),ae=window.defaultConfig();function ue(t,e){for(var n=[],i=[],o=[],r=0,s=e.children[0].children;r<s.length;r++){var a=s[r];if(!a.classList.contains("dinglj-v-table-select")&&!a.classList.contains("dinglj-v-table-sequence")){var u=a.getAttribute("data-key");n.push(u),o.push(re.fields[u])}}i.push(o);for(var c=0,l=t;c<l.length;c++){for(var p=l[c],h=[],f=0,d=n;f<d.length;f++){var g=d[f],y=p.get(g);"time"!=g&&"changetime"!=g||(y=$ticket.parseTime(y)),h.push(y)}i.push(h)}$excel.export("".concat(e.getAttribute("data-title")||e.id," ").concat((new Date).$format().replace(/:/g,""),".xlsx"),i)}$ticket.config=function(){return window.readConfig()},$ticket.defaultConfig=function(){return window.defaultConfig()},$ticket.whoami=function(){return window.getVal(se,"whoami.zh","",!0)},$ticket.readTicket=function(t){void 0===t&&(t="");var e=[],n=window.document;t.trim()&&(n=(new DOMParser).parseFromString(t,"text/html"));for(var i=0,o=["prio1","prio2","prio3"];i<o.length;i++)for(var r=o[i],s=0,a=window.byClass(r,n);s<a.length;s++){var u=a[s];e.push(new re(u))}return e},$ticket.getCellValue=function(t,e,n){var i;return i="string"==typeof n?n:n.en,"summary".equalsIgnoreCase(i)?$ticket.getSummary(t,e):e.get(i)},$ticket.getSummary=function(t,e){var n="";return $ticket.getNewTickets(t).includes(e.get("id"))&&(n+='<span class="ticket-list-new-ticket">[new]</span>'),$ticket.getTops(t).includes(e.get("id"))&&(n+='<span class="ticket-list-top-ticket">[top]</span>'),n+'<span title="'.concat(e.get("summary"),'">').concat(e.get("summary"),"</span>")},$ticket.getTops=function(t){return t.tops||(t.tops=$ticket.getLocalStorage(t).topTickets||[]),t.tops},$ticket.getNewTickets=function(t){if(t.newTickets)return t.newTickets;var e=$ticket.getMyTickets(t);return t.newTickets=t.originData.filter((function(t){return t.get("owner")==$ticket.whoami()&&!e.includesIgnoreCase(t.get("id"))})).map((function(t){return t.get("id")})),t.newTickets},$ticket.getMyTickets=function(t){return t.myTickets||(t.myTickets=$ticket.getLocalStorage(t).myTickets||[]),t.myTickets},$ticket.getLocalStorage=function(t){return t.localStorage||(t.localStorage=$store.getStorage(t.constant.storage,{topTickets:[],myTickets:[]})),t.localStorage},$ticket.parseTicketTime=function(t,e){void 0===e&&(e="changetime");var n=t.get(e);return"刚刚"==n?0:/^\d+分钟 ago$/.test(n)?60*parseInt(n):/^\d+小时 ago$/.test(n)?60*parseInt(n)*60:/^\d+天 ago$/.test(n)?24*parseInt(n)*60*60:/^\d+周 ago$/.test(n)?7*parseInt(n)*24*60*60:/^\d+个月 ago$/.test(n)?30*parseInt(n)*24*60*60:/^\d+年 ago$/.test(n)?365*parseInt(n)*24*60*60:void 0},$ticket.parseTime=function(t){var e=new Date;if("刚刚"==t)return e.$format();var n=-1*parseInt(t);return/^\d+分钟 ago$/.test(t)&&e.$setMinute(n),/^\d+小时 ago$/.test(t)&&e.$setHour(n),/^\d+天 ago$/.test(t)&&e.$setDate(n),/^\d+周 ago$/.test(t)&&e.$setDate(7*n),/^\d+个月 ago$/.test(t)&&e.$setMonth(n),/^\d+年 ago$/.test(t)&&e.$setYear(n),e.$format()},$ticket.sortByTime=function(t,e){var n=$ticket.parseTicketTime(t)-$ticket.parseTicketTime(e);return 0==n?t.get("id")>e.get("id")?-1:t.get("id")<e.get("id")?1:0:n},$ticket.toTicketId=function(t){if(null==t||null==t)return"";var e="";return(e="string"==typeof t?t:t.innerText)&&(e=e.replace(/\n/g,"").trim()),/.*#(\d+).*/.test(e)?/.*#(\d+).*/.exec(e)[1]:/^\d+$/.test(e)?e:""},$ticket.openTicket=function(t,e){for(var n=$ticket.toTicketId(e),i=0,o=window.byClass("ticket-".concat(n));i<o.length;i++){var r=o[i].findChildrenByClass("dinglj-v-table-select");r&&r.length&&(r[0].children[0].checked=!0)}!function(t,e){var n=$ticket.toTicketId(e),i=$ticket.getTicketById(t,n);if(i.get("owner")==$ticket.whoami()&&$ticket.getNewTickets(t).includes("#".concat(n)))$ticket.getNewTickets(t).remove("#".concat(n)),$ticket.updateSummary(t,i),t.localStorage.myTickets.pushNew("#".concat(n)),$store.setStorage(t.constant.storage,t.localStorage)}(t,n);var s=window.getConfigOrDefault(se,ae,"urls.ticket","",!1);s.endsWith("/")||(s+="/"),window.open(s+n)},$ticket.setUnOpen=function(t,e){var n=$ticket.toTicketId(e),i=$ticket.getTicketById(t,n);return i.get("owner")==$ticket.whoami()&&!$ticket.getNewTickets(t).includes("#".concat(n))&&($ticket.getNewTickets(t).pushNew("#".concat(n)),$ticket.updateSummary(t,i),t.localStorage.myTickets.remove("#".concat(n)),$store.setStorage(t.constant.storage,t.localStorage),!0)},$ticket.getTicketById=function(t,e){var n=$ticket.toTicketId(e),i=t.originData.getIfExist("id","#".concat(n));return i&&i.length?i[0]:null},$ticket.updateSummary=function(t,e){window.byClass("dinglj-v-cell id").filter((function(t){return t.innerText==e.get("id")})).forEach((function(n){var i=n.findBroByClass("summary")[0];i&&(i.innerHTML=$ticket.getSummary(t,e))}))},$ticket.afterTableLoad=function(t,e){window.timer((function(){var n=window.query("#".concat(e," .dinglj-v-tbody .dinglj-v-cell.id"));return 0!=n.length&&(n.forEach((function(e){e.parentNode.classList.add("ticket-".concat($ticket.toTicketId(e))),e.addEventListener("click",(function(n){n.stopPropagation(),$ticket.openTicket(t,e)}))})),!0)}),100)},$ticket.isTop=function(t,e){return"string"==typeof e?$ticket.getTops(t).includesIgnoreCase(e):$ticket.getTops(t).includesIgnoreCase(e.get("id"))},$ticket.lineMenu=function(t){return[new v("打开变更",(function(e,n){$ticket.openTicket(t,e.get("id"))})),new v("复制描述",(function(t,e){window.copyTxt(t.get("summary"))})),new v("置顶",(function(e,n){$ticket.toTop(t,e.get("id")),"".concat(e.get("id")," 已置顶").info()}),(function(e,n){return!$ticket.isTop(t,e.get("id"))})),new v("标记为已读",(function(e,n){$ticket.setOpended(t,n.innerText)&&"".concat(e.get("id")," 已标记为已读").info()}),(function(e,n){return $ticket.getNewTickets(t).includes(e.get("id"))})),new v("标记为未读",(function(e,n){$ticket.setUnOpen(t,n.innerText)&&"".concat(e.get("id")," 已取消已读标记").info()}),(function(e,n){return!$ticket.getNewTickets(t).includes(e.get("id"))})),new v("显示更多信息",(function(e,n){t.modal.ticket=e,t.modal.display=!0}))]},$ticket.bodyMenus=function(t){return[new v("导出",(function(t,e){ue(t,e.parentElement)})),new v("清除排序",(function(e,n){t.sort.columnKey=null}))]},$ticket.titleColMenu=function(t){return[new v("按照此列升序",(function(e,n){t.sort.columnKey=e.columnKey,t.sort.type="ASC"})),new v("按照此列降序",(function(e,n){t.sort.columnKey=e.columnKey,t.sort.type="DESC"})),new v("清除排序",(function(e,n){t.sort.columnKey=null})),new v("导出",(function(t,e){ue(t.list,e.parentElement)}))]},$ticket.toTop=function(t,e){var n=$ticket.toTicketId(e);t.localStorage.topTickets.pushNew("#".concat(n)),t.tops=t.localStorage.topTickets,$store.setStorage(t.constant.storage,t.localStorage)},$ticket.cancelTop=function(t,e){var n=$ticket.toTicketId(e);t.localStorage.topTickets.remove("#".concat(n)),t.tops=t.localStorage.topTickets,$store.setStorage(t.constant.storage,t.localStorage)},$ticket.groupData=function(t){if(t.filterData.length<=0)return{};var e={};t.groupColumn?e=window.groupBy(t.filterData,t.groupColumn):"未找到任何用于分组的配置".err();for(var n=window.getConfigOrDefault(se,ae,"strategy.groupBy",[]),i=0,o=t.filterData;i<o.length;i++)for(var r=o[i],s=0,a=re.fieldNames;s<a.length;s++)for(var u=a[s],c=n.length-1;c>=0;c--){var l=n[c].exec(r,u);l&&(e[l]&&e[l].includes(r)||window.unshiftToArrayInObject(e,l,r))}return e},$ticket.groupNames=function(t){if(t.groupData.length<=0)return[];var e=Object.keys(t.groupData),n=window.getConfigOrDefault(se,ae,"strategy.order.group",{},!1);return e.sort((function(e,i){return window.compareStringByArray($get(n,t.groupColumn),e,i)})),e},$ticket.tabData=function(t,e){var n=t.groupData[e],i={};if(!n||0==n.length)return i;for(var o=window.getConfigOrDefault(se,ae,"strategy.tabBy",[]),r=window.getConfigOrDefault(se,ae,"strategy.rowFilter",[]),s=0,a=o;s<a.length;s++)for(var u=a[s],c=0,l=n;c<l.length;c++){var p=l[c],h=u.exec(e,p);if(h){for(var f=!1,d=0,g=r;d<g.length;d++)if(g[d].exec(e,h,n,p)){f=!0;break}f||window.pushToArrayInObject(i,h,p,!0)}}for(var y=window.getConfigOrDefault(se,ae,"strategy.order.ticket",[]),v=function(n){i[n].sort((function(i,o){var r=$ticket.isTop(t,i.get("id")),s=$ticket.isTop(t,o.get("id"));if(r!=s){if(r)return-1;if(s)return 1}if(null==t.sort.columnKey){for(var a=0,u=y;a<u.length;a++)if(0!=(f=u[a].exec(e,n,i,o)))return f;return $ticket.sortByTime(i,o)}var c=i.get(t.sort.columnKey),l=o.get(t.sort.columnKey);if("changetime"==t.sort.columnKey?(c=$ticket.parseTicketTime(i,"changetime"),l=$ticket.parseTicketTime(o,"changetime")):"time"==t.sort.columnKey&&(c=$ticket.parseTicketTime(i,"time"),l=$ticket.parseTicketTime(o,"time")),c<l)return"ASC"==t.sort.type?-1:1;if(c>l)return"ASC"==t.sort.type?1:-1;for(var p=0,h=y;p<h.length;p++){var f;if(0!=(f=h[p].exec(e,n,i,o)))return f}return $ticket.sortByTime(i,o)}))},m=0,w=Object.keys(i);m<w.length;m++)v(w[m]);return i},$ticket.columnsToDisplay=function(t,e,n){var i=$ticket.tabData(t,e);if(!i)return[];var o=i[n];if(!o||0==o.length)return[];for(var r=[],s=window.getConfigOrDefault(se,ae,"strategy.colFilter",[]),a=0,u=re.fieldNames;a<u.length;a++){for(var c=u[a],l=!1,p=0,h=s;p<h.length;p++)if(h[p].exec(e,n,o,null,c)){l=!0;break}l||r.push(c)}return r.map((function(t){return{zh:re.getCaption(t),en:t}}))};var ce=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),le=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.template='<div id="ticket-list-filter">\n        <div class="filter-row">\n            <i-input class="filter-contrl" :i-props="keywordProp"></i-input>\n            <i-combo class="filter-contrl" :i-props="ownerProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="statusProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="reporterProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="componentProp"></i-combo>\n        </div>\n    </div>',e.filter={},e}ce(e,t),e.prototype.getComboData=function(t){var e=Array.from(new Set(this.data.map((function(e){return e.get(t)})))),n=window.getConfigOrDefault(this.config,this.defaultConfig,"strategy.order.group.".concat(t),[],!1);return e.sort((function(t,e){return window.compareStringByArray(n,t,e)})),e},le([Template],e.prototype,"template",void 0),le([Field],e.prototype,"filter",void 0),le([Method],e.prototype,"getComboData",null),le([Compute((function(t){return{caption:"搜索",placeholder:"请输入关键字",onEnter:function(e){t.filter.keyword=e.value,t.emit("on-change",t.filter)},onChange:function(e){t.filter.keyword=e.value,t.emit("on-change",t.filter)}}}))],e.prototype,"keywordProp",void 0),le([Compute((function(t){return{list:t.getComboData("owner"),caption:"属主",onChange:function(e){t.filter.owner=e.value,t.emit("on-change",t.filter)}}}))],e.prototype,"ownerProp",void 0),le([Compute((function(t){return{list:t.getComboData("status"),caption:"状态",onChange:function(e){t.filter.status=e.value,t.emit("on-change",t.filter)}}}))],e.prototype,"statusProp",void 0),le([Compute((function(t){return{list:t.getComboData("reporter"),caption:"报告者",onChange:function(e){t.filter.reporter=e.value,t.emit("on-change",t.filter)}}}))],e.prototype,"reporterProp",void 0),le([Compute((function(t){return{list:t.getComboData("component"),caption:"组件/模块",onChange:function(e){t.filter.component=e.value,t.emit("on-change",t.filter)}}}))],e.prototype,"componentProp",void 0),le([Compute(window.$ticket.config)],e.prototype,"config",void 0),le([Compute(window.$ticket.defaultConfig)],e.prototype,"defaultConfig",void 0),le([Prop(Array,[],!0)],e.prototype,"data",void 0),e=le([Service(e,"ti-filter")],e)}(u);const pe=$registry.buildComponent("ti-filter");var he=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),fe=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s},de=window.byId("main");if(de){window.linkCss("/src/script/ticket-list/index.css");for(var ge=0,ye=de.children;ge<ye.length;ge++)ye[ge].style.display="none";de.innerHTML+='<div id="dinglj-main">\n        <i-nav-view :i-props="{ list: groupNames }">\n            <template v-slot:before>\n                <tifilter :data="originData" @on-change="emit => filter = emit.value"></tifilter>\n            </template>\n            <template class="result-view" v-slot:content>\n                <i-tab-view v-for="groupName in groupNames" :i-props="genTabViewProps(groupName)">\n                    <i-table v-for="tabName in tabNames(groupName)" :i-props="genTableProps(groupName, tabName)"></i-table>\n                </i-tab-view>\n                <i-modal :i-props="modalProps">\n                    <template v-slot:title>\n                        <div>\n                            <span class="ticket-modal-id" @click="openTicketByModal()">\n                                {{ modal.ticket.get(\'id\') }}\n                            </span>\n                            <span>{{ modal.ticket.get(\'summary\') }}</span>\n                        </div>\n                    </template>\n                    <template v-slot:content>\n                        <h1>111</h1>\n                    </template>\n                </i-modal>\n            </template>\n            <template v-slot:after></template>\n        </i-nav-view>\n    </div>'}!function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.sort={columnKey:null,type:"ASC"},e.tableIdList=[],e.filter={},e.tops=[],e.newTickets=[],e.myTickets=[],e.localStorage={topTickets:[],myTickets:[]},e.modal={ticket:null,display:!1},e.constant={storage:"dinglj-v-ticket-list-storage"},e}he(e,t),e.prototype.mounted=function(){var t=this;window.displayData=function(){return t},$ticket.getTops(this);var e=$ticket.getNewTickets(this);if(e.length>0){var n="你有 ".concat(e.length,' 个新变更, 注意查收<div style="margin-top: 10px; display: flex">\n            <div style="flex: 1"></div>\n                <div style="margin-left: 5px; font-weight: bold; color: var(--theme-color); cursor: pointer" onclick="').concat(e.map((function(t){return"$ticket.openTicketById('".concat(t,"');")})).join(""),'">全部打开</div>\n                <div style="margin-left: 10px; font-weight: bold; color: var(--theme-color); cursor: pointer" onclick="').concat(e.map((function(t){return"$ticket.setOpended('".concat(t,"');")})).join("")+"'已全部标记'.info()",'">全部标记为已读</div>\n            </div>');n.info(5e3)}},e.prototype.genTableProps=function(t,e){var n=this;return{list:n.tabData(t)[e],columns:n.columnsToDisplay(t,e),flexColumns:["summary"],getCell:n.getCellValue,getColumnKey:function(t){return t.en},getColumnLabel:function(t){return t.zh},rowMenus:$ticket.lineMenu(n),bodyMenus:$ticket.bodyMenus(n),titleColumnMenus:$ticket.titleColMenu(n),title:"".concat(t,"-").concat(e),loaded:n.tableLoaded}},e.prototype.genTabViewProps=function(t){var e=this;return{list:e.tabNames(t),getLabel:function(n){return"".concat(n," (").concat(e.tabData(t)[n].length,")")}}},e.prototype.openTicketByModal=function(){$ticket.openTicket(this,this.modal.ticket.get("id"))},e.prototype.getCellValue=function(t,e){return $ticket.getCellValue(this,t,e)},e.prototype.tableLoaded=function(t){$ticket.afterTableLoad(this,t.vid)},e.prototype.tabData=function(t){return $ticket.tabData(this,t)},e.prototype.tabNames=function(t){return Object.keys(this.tabData(t))},e.prototype.columnsToDisplay=function(t,e){return $ticket.columnsToDisplay(this,t,e)},fe([Component({tifilter:pe}),Mounted],e.prototype,"mounted",null),fe([Field],e.prototype,"sort",void 0),fe([Field],e.prototype,"tableIdList",void 0),fe([Field],e.prototype,"filter",void 0),fe([Field],e.prototype,"tops",void 0),fe([Field],e.prototype,"newTickets",void 0),fe([Field],e.prototype,"myTickets",void 0),fe([Field],e.prototype,"localStorage",void 0),fe([Field],e.prototype,"modal",void 0),fe([Field],e.prototype,"constant",void 0),fe([Method],e.prototype,"genTableProps",null),fe([Method],e.prototype,"genTabViewProps",null),fe([Method],e.prototype,"openTicketByModal",null),fe([Method],e.prototype,"getCellValue",null),fe([Method],e.prototype,"tableLoaded",null),fe([Method],e.prototype,"tabData",null),fe([Method],e.prototype,"tabNames",null),fe([Method],e.prototype,"columnsToDisplay",null),fe([Compute((function(t){return{display:t.modal.display,width:700,onClose:function(){t.modal.display=!1}}}))],e.prototype,"modalProps",void 0),fe([Compute($ticket.config)],e.prototype,"config",void 0),fe([Compute($ticket.defaultConfig)],e.prototype,"defaultConfig",void 0),fe([Compute((function(t){var e=/[?&]group=([a-zA-Z0-9]+)[?&]?/,n="";e.test(window.location.href)&&(n=e.exec(window.location.href)[1]);var i=["component","owner","status"],o=window.getConfigOrDefault(t.config,t.defaultConfig,"groupBy",n,!0);o&&!i.includesIgnoreCase(o)&&i.unshift(o);for(var r=0,s=i;r<s.length;r++){var a=s[r];if(Object.keys(t.originData[0]).includesIgnoreCase(a))return a}}))],e.prototype,"groupColumn",void 0),fe([Compute((function(){var t=window.isDev()?window.readData():"";return $ticket.readTicket(t)}))],e.prototype,"originData",void 0),fe([Compute((function(t){if(0==t.originData.length)return[];for(var e,n=t.originData,i=0,o=Object.keys(t.originData[0]);i<o.length;i++)e=o[i],t.filter[e]&&(n=n.filter((function(n){return n.get(e)==t.filter[e]})));return n.filter((function(e){return!t.filter.keyword||e.get("summary").includesIgnoreCase(t.filter.keyword)||e.get("id").includesIgnoreCase(t.filter.keyword)}))}))],e.prototype,"filterData",void 0),fe([Compute((function(t){return $ticket.groupData(t)}))],e.prototype,"groupData",void 0),fe([Compute((function(t){return $ticket.groupNames(t)}))],e.prototype,"groupNames",void 0),fe([Compute((function(t){return window.getConfigOrDefault(t.config,t.defaultConfig,"urls.ticket","")}))],e.prototype,"ticketURL",void 0),e=fe([Service(e,"App")],e)}(u),window.createVue($registry.buildComponent("App"),"#dinglj-main")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,