/*! For license information please see index.compile.min.js.LICENSE.txt */
(()=>{var t={176:()=>{function t(t){return"string"==typeof t?t.toLowerCase():JSON.stringify(t).toLowerCase()}Array.prototype.includesIgnoreCase=function(t){return-1!=this.indexOfIgnoreCase(t)},Array.prototype.indexOfIgnoreCase=function(e){const i=t(e);return this.map((e=>t(e))).indexOf(i)},Array.prototype.pushNew=function(t){return!this.includes(t)&&(this.push(t),!0)},Array.prototype.remove=function(t){let e=this.indexOf(t);return-1!=e&&(this.splice(e,1),!0)},Array.prototype.getIfExistByKey=function(t,e){let i=[];for(let n of this)$get(n,t)==e&&i.push(n);return i},Array.prototype.compareBy=function(t,e){if(this.length>0){let i=-1==this.indexOfIgnoreCase(t)?9999:this.indexOfIgnoreCase(t),n=-1==this.indexOfIgnoreCase(e)?9999:this.indexOfIgnoreCase(e);return i==n?t<e?-1:t>e?1:0:i-n}return t<e?-1:t>e?1:0}},228:()=>{Window.prototype.getConfigOrDefault=function(t,e,i=!0){let n=window.getVal($userConfig,t,"NOT_FOUND"),o=window.getVal($systemConfig,t,"NOT_FOUND"),r="NOT_FOUND";if("NOT_FOUND"!=n)if(Array.isArray(n))r=[...n];else{if("object"!=typeof n)return n;r={};for(let t of Object.keys(n))r[t]=n[t]}if("NOT_FOUND"!=o){if("NOT_FOUND"==r)return o;if(Array.isArray(n)&&Array.isArray(o)&&i)r.push(...o);else if("object"==typeof o&&i)for(let t of Object.keys(o))null==r[t]&&(r[t]=o[t])}return"NOT_FOUND"==r&&(r=e,console.error(`${t}: 配置不存在, 请检查脚本`)),r}},816:()=>{Date.prototype.$setMinute=function(t){return this.setMinutes(this.getMinutes()+t),this},Date.prototype.$setHour=function(t){return this.setHours(this.getHours()+t),this},Date.prototype.$setDate=function(t){return this.setDate(this.getDate()+t),this},Date.prototype.$setMonth=function(t){return this.setMonth(this.getMonth()+t),this},Date.prototype.$setYear=function(t){return this.setYear(this.getYear()+t),this},Date.prototype.$format=function(t="yyyy-MM-dd HH:mm:ss"){return t.replace(/yyyy/,`${this.getFullYear()}`).replace(/yy/,""+this.getFullYear()%100).replace(/MM/,this.getMonth()+1>9?this.getMonth()+1:`0${this.getMonth()+1}`).replace(/dd/,this.getDate()>9?this.getDate():`0${this.getDate()}`).replace(/HH/,this.getHours()>9?this.getHours():`0${this.getHours()}`).replace(/mm/,this.getMinutes()>9?this.getMinutes():`0${this.getMinutes()}`).replace(/ss/,this.getSeconds()>9?this.getSeconds():`0${this.getSeconds()}`)}},599:()=>{Window.prototype.byId=function(t){return document.getElementById(t)},Window.prototype.byClass=function(t,e=window.document){const i=[],n=e.getElementsByClassName(t);return n&&i.push(...n),i},Window.prototype.query=function(t){let e=[];const i=document.querySelectorAll(t);return i&&e.push(...i),e},window.defunc(window,"calcTxtWidth",(function(t){if("object"==typeof t){const e=window.getComputedStyle(t);return window.calcTxtWidth(t.innerText,e.fontWeight,e.fontSize,e.fontFamily)}return t+="",window.calcTxtWidth(t,"700","14px","Microsoft YaHei")})),window.defunc(window,"calcTxtWidth",(function(t,e,i,n){const o=document.createElement("canvas").getContext("2d");o.font=`${e} ${i} ${n}`;const{width:r}=o.measureText(t);return Math.floor(r)})),Element.prototype.animate=function(t,e){const i=getComputedStyle(this).transition,n=Object.keys(t);for(let e of n)this.style[e]=t[e][0];setTimeout((()=>{const o=e/1e3+"s";this.style.transition=o;for(let e of n)this.style[e]=t[e][1];setTimeout((()=>{this.style.transition=i}),e)}),50)},Element.prototype.findChildrenByClass=function(t){let e=[],i=this.children;for(let n=0;n<i.length;n++)i[n].classList.contains(t)&&e.push(i[n]);return e},Element.prototype.findBroByClass=function(t){return this.parentElement.findChildrenByClass(t)},Element.prototype.indexByClass=function(t){return this.parentElement.indexByClassInChildren(t)},Element.prototype.indexByClassInChildren=function(t){let e=this.children;for(let i=0;i<e.length;i++)if(e[i].classList.contains(t))return i;return-1}},904:()=>{Window.prototype.$get=function(t,e){return t[e]},Window.prototype.$set=function(t,e,i){t[e]=i},Window.prototype.pushToArray=function(t,e,i,n=!1){if(Array.isArray(t[e])){let o=t[e];n&&o.includes(i)||o.push(i)}else t[e]=[i]},Window.prototype.unshiftToArray=function(t,e,i){Array.isArray(t[e])?t[e].unshift(i):t[e]=[i]},Window.prototype.getVal=function(t,e,i,n=!1){if(null==t||null==t)return i;let o=t;for(let t of e.split("."))if(o=o[t],!o)return n&&console.error(`未能取到 ${e} 的值`),i;return o}},374:()=>{Window.prototype.uuid=function(t="",e=10){return`${t}-${(""+1e7*Math.random()).replace(".","").substring(0,e)}`},Window.prototype.groupBy=function(t,e){let i={};return t.forEach((t=>{let n="";"string"==typeof e?n=t[e]:"function"==typeof e&&(n=e(t)),i[n]?i[n].push(t):i[n]=[t]})),i},Window.prototype.createRegExp=function(t){return t instanceof RegExp?t:(t=t.replace(/\$_/g,"\\"),new RegExp(t))},Window.prototype.copyTxt=function(t){let e=document.createElement("div");e.innerText=t,e.style.opacity="0",document.body.appendChild(e);let i=document.createRange();i.selectNodeContents(e);const n=window.getSelection();n.addRange(i),document.execCommand("Copy",!1,null),n.removeAllRanges(),`已复制: ${t}`.info(),e.remove()};let t=null;Window.prototype.isMatch=function(){if(null!=t)return t;if(window.isDev())return t=!0;let e=window.location.href;const i=window.getConfigOrDefault("enableWebs",[]);if(0==i.length)return t=!0;let n=!1;for(let t of i)if(e.startsWith(t)){n=!0,e=e.replace(t,"");break}if(!n)return"脚本尚未适配当前网址, 请联系 dinglj 修改配置".warn(),t=!1;const o=window.getConfigOrDefault("matchList",[]);for(let i of o)if(window.createRegExp(i).test(e))return t=!0;for(let e of o)if(window.createRegExp(e).test(window.location.href))return t=!0;return console.error("脚本尚未适配当前网址, 请联系 dinglj 修改默认配置, 或自行在油猴脚本中增加 matchList 配置"),t=!1},Window.prototype.StringPool={},Window.prototype.toCache=function(t,e){e=e||window.uuid();const i={};return Window.prototype.StringPool[e]=i,e=>i[e]||(i[e]=t(e))}},506:()=>{function t(t){var e=new ArrayBuffer(t.length),i=new Uint8Array(e);for(let e=0;e!=t.length;e++)i[e]=255&t.charCodeAt(e);return e}window.$excel={},window.$excel.export=function(e,i){window.isEnableExcel||window.enableExcel();let n=function(e,i){let n={SheetNames:[i=i||"sheet1"],Sheets:{}};$set(n.Sheets,i,e);let o=window.XLSX.write(n,{bookType:"xlsx",bookSST:!1,type:"binary"});return new Blob([t(o)],{type:"application/octet-stream"})}(window.XLSX.utils.aoa_to_sheet(i));!function(t,e){let i=t;"object"==typeof i&&i instanceof Blob&&(i=URL.createObjectURL(i));var n=document.createElement("a");n.href=i,n.download=e||"",n.click()}(n,e)}},676:()=>{window.$queue={eventPool:{},eventQueue:{}},$queue.sendMsg=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`);const o=$queue.eventPool[n];if(Array.isArray(o)){if(1==o.length)return o[0](e);let t=[];for(let i of o)t.push(i(e))}else pushToArray($queue.eventQueue,n,e)},$queue.on=function(t,e,i=""){let n=t;i&&(n=`${t}:${i}`),pushToArray($queue.eventPool,n,e);const o=$queue.eventQueue[n];if(Array.isArray(n))for(let t of o)e(t)}},894:()=>{function t(t,e){t&&(t.animate({opacity:["1","0"],height:[getComputedStyle(t).height,"0px"],margin:[getComputedStyle(t).margin,"0px"],padding:[getComputedStyle(t).padding,"0px"]},1e3),setTimeout((()=>{t.remove(),e&&0==e.children.length&&e.remove()}),300))}function e(e,i,n=2e3,o="10%"){let r=window.byId("dinglj-v-pop-msg-container");r||(r=document.createElement("div"),r.id="dinglj-v-pop-msg-container",document.body.appendChild(r)),r.style.top=o;const s=window.byClass("dinglj-v-pop-msg");if(s.length>=5){s.sort(((t,e)=>t.time-e.time));for(let e=0;e<s.length-4;e++)t(s[e],void 0)}const a=document.createElement("div");a.classList.add("dinglj-v-pop-msg",i),a.time=Date.now();const l=document.createElement("div");l.classList.add("dinglj-v-pop-msg-icon",i),l.innerText=i.substring(0,1).toUpperCase(),a.appendChild(l),a.innerHTML+=e,r.appendChild(a),a.animate({height:["0px",getComputedStyle(a).height],padding:["0px 5px","5px 5px"],marginBottom:["0px","5px"],opacity:["0","1"],top:["50px","0px"]},1e3),a.classList.add("active"),setTimeout((()=>{t(a,r)}),n)}window.$tip={},$tip.info=function(t,i=2e3,n="10%"){e(t,"info",i,n)},$tip.warn=function(t,i=2e3,n="10%"){e(t,"warn",i,n)},$tip.err=function(t,i=2e3,n="10%"){e(t,"err",i,n)}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}(()=>{"use strict";window.dinglj_home||(window.dinglj_home="$DINGLJ-ENCODE-START$Wzt2l3B4drVxN5HCGr+/jtg7Cs8abo97RKZWQr747OhF0WhmLSpdoawxL+IjGSi15SnJXSCUPyxyWzeysFeIQXXcnWkUwAupvyw+tqQbFH7nVtW+wSblJZMwus3o3L87WEkw3YA9tLxY3vGHSk5D9Zudkj4ZzVY0a9KXty1lKzg=$DINGLJ-ENCODE-END$"),window.readData||(window.readData=function(){return""}),window.encodeConfig=function(){return{specialUrl:{query:"$DINGLJ-ENCODE-START$GBt7YF6q8jNvUkNRfKuUYOqQlDVjGdr5JdOO9qjOFiQbNypS7MQne6cI0bvt75aqkrawnuouqTiaH7qnAK5qPN+KzX3ylZp/Ac7F3Udcj+vudHJFoPRkBbxtF1QZ8NXD9he3l62Pcmpumoo2BU3UJf2H8VQiqf3XW4dTSxI5dgE=$DINGLJ-ENCODE-END$",flag:"$DINGLJ-ENCODE-START$OK82zDFFrT07ehfcK4gx6eatOLk5ul1WNx20ppeG0Zv8Xua0FpFgr6WqAxrdFo8xaf7gygHLw0sgulMCs0fCnPDU2xL8CPmSFvx4BofhTcGgJrHqbl3NN+1wDv25KRWQiM7eioChFXdmBeM/7rzoqfg2OiZsED/rUsuQCkWR90Y=$DINGLJ-ENCODE-END$",columns:"$DINGLJ-ENCODE-START$lclT7G7V0bNVvZDhNE3Ce3D06JtdeqqonvsDyg8VEUq2YocE8OJWruD0WxjhithJxwilMAs9DYuzfr1pUqWzihtMvD0xrwHn/VOBg9UNI0j5aAJXgej57KUlqqPQp7Hav26ga/jcdvhM2ltpvzDEOQfFI+ek1lzVOOVOUm60f3E=$DINGLJ-SPLIT-FLAG$YwOslMC4EVijC8AeA0wZBSMtBjmey1PC7bcklUbVs4t4mTLLn1YReVXeqStofRB2QduY+1kxouUpFRFYbRTReGyiccCBbnifnIDLWTLAIT8kiVj7WfR3R9moU82RyvSvqDSetAJzIUKZ2dAamYutSiDiB1Js3LuDuLx4FtIlHVE=$DINGLJ-ENCODE-END$"},urls:{ticket:"$DINGLJ-ENCODE-START$VHpev+dmnCrnvWGi0cymxPFhQfugBTrbliS1HWNn5fMn/23dGyC8M7DfAzMVwSYMi3oSr0LVTLhDXPfKFKSnO9lCYC+AD/wwf2pbuXR0Xkf+OLcx5bdhBITBZJ6vjsmxBaWuifG9C9kSp0WWKqIyeG25HTzPM+uG7IAb1MGm4KU=$DINGLJ-ENCODE-END$"},strategy:{groupBy:[window.GroupStrategy(((t,e)=>t.get("$DINGLJ-ENCODE-START$fbVrkZ5XiMJ6DRm3oK3wGjvPCrz5qIm9fmXEUUISpcfLtAb9kEUlaUDzkKZXnRErdznonY0z3dlK0I2Mvess/AUWPexH4Z6CAYUD5aWN4crInDNXkv9cS0Y5YS8b2ivvYx9YxFZyrTt4uAntOHYVOI0uf5T8/P8+0cmUu92GJo4=$DINGLJ-ENCODE-END$".decrypt())=="$DINGLJ-ENCODE-START$M1+jlq/PGEAgYY1ZW6YDEwmJfMKEYilLLzrQuPh0TS5YLonUQt7Cuk1txf8UiR4Ngbsc64U3wTh6liIHGicwXeNq9F7wwbJ99Wr0RGn9W7opwydIV9AwtMhYw4uBeXY7EAxKT/uO0L1wt1vtOjVCvm8rMmTj0Q8E7ZooHnBUJto=$DINGLJ-ENCODE-END$".decrypt()?"$DINGLJ-ENCODE-START$GFoy2WVQHp6UTf9pryoYQcYJ9ZD45hsjPTGKnUfd2X83oWyQe5Fh9/9/simcSncts7WqSWy1pAlKklOpYo0vTJCHo8b/+pAN/QIErIs6u/thQ15SrpQ1z1bKPKOZNVc9R0+KithFidH8zWUdFqLXk42QUlZBOOtSj/OYOBEn2JY=$DINGLJ-ENCODE-END$".decrypt():""))],tabBy:[window.TabPageStrategy(/.*/,"$DINGLJ-ENCODE-START$l7MkhWH08OUgLQKaefBfkFB9hSCY/988YI0mtuSj+Y0xjPkb0agSFcwYYoQ3PUcroC2X9e4zXMRl9jF35RdbfxDr0fw0m0iLrc0R8YAWwuJtG50e6/KtI5V6iDUiqsJLV0eQv/b3Xj+VDuhf/lpb7nJ021VJjh8kE540Kchejlo=$DINGLJ-ENCODE-END$".decrypt(),"$DINGLJ-ENCODE-START$iTYDavyizODngJwywVQuqUPqd7TEX+UcWO3/EX3zkMGYAspFyOFptu4BDR2uciY2eV1BYUBLVPBlK2ZXNyNQelsPtCJJDrZkCFF8IaZo/uEeWxEiaVb/BrWkdLbFxrQTqEBnYWuZm88Xqf1aJNuoo7wp/lasksJneV7MF7b9tas=$DINGLJ-ENCODE-END$".decrypt(),"$DINGLJ-ENCODE-START$XqDkAAKUjui279CMe43M51TyBweQ6prgnYvgwheovmuvZylm/GhvXn171A78UjPW2c0ST1Vuvhke6hBlGSMxVNXJas4l7GIJ3tyYLfcZYoSpAhIMfoIftC/10SGroqDNl62Eb46LEffvv532FY2PdJueDj0+4I6e1UHpEl+XyUE=$DINGLJ-ENCODE-END$".decrypt()),window.TabPageStrategy(new RegExp("$DINGLJ-ENCODE-START$kPOZgWBeth9T9GcD2rGJfT1DX5T20qION9YGbHbvIBCQP9xSDWG5a/0QBZsvmGJVpcRlTpuZxv5bJE7nFPaBPcRl2h51+/uJa8hW5xpgvAFuy2YKwNDuQ8KI2ufTBa1nn+Nr7M0osu/XUzeoOBDno7Rhma1UYNby4rHjMCCWmB0=$DINGLJ-ENCODE-END$".decrypt()),((t,e)=>"$DINGLJ-ENCODE-START$mM3vLtl5gIvr9033RJx9R3nScyt1lmQSyP33Ez8mZGic46j81MTFy0dACHORdTNlll3YI7kNzcGBBOdZwl0cYfxLzLzSiFI5pWKjE/vbf/hYs6u5FtHu5evwyVa7sntScp4mX/Oy+Ysc6qq2m1CN4nOqfn8kM5/4NqWIQtIXcYk=$DINGLJ-ENCODE-END$".decrypt()),!0)],colFilter:[window.ColFilter(new RegExp("$DINGLJ-ENCODE-START$EiIP+QcT7F5DqFI9oyMlXFZ90Xj8nsCT//LnCu5nGyoS3jkr/OgJD8z8+KQ+QmfgJHpCAenJ1g6rghMpS/lZCnRTACicN5cjWMGH8L2f3keXIf76qR2/7V8myTxle/TWWNLoCqOgDWibsCf0CeAyjEkkEKJHYxs4Sa+3jASRjzY=$DINGLJ-ENCODE-END$".decrypt()),/.*/,"$DINGLJ-ENCODE-START$iVFveqGruD5LrIvET/NO/ujn+PByQWHsnheYu47oQp6VkKfUyv4UPvSFUht0VJGZm2Z295hvV6MLmftazXhOfFpPMMSasYiDgV6B7naj0sfwPqBMfOC8eHC/TKvi+HkrAM6725B/FOTOgV1wWwuAVsbJGa1hNsTAaJUd1N7NISE=$DINGLJ-ENCODE-END$".decrypt()),window.ColFilter(/.*/,/.*/,((t,e,i,n)=>0==i.filter((t=>""!=t.get(n).trim())).length))],order:{group:{component:["$DINGLJ-ENCODE-START$BtIGL4FYNjhO04Vf14+cT4UMoPVE4fdT0YgY1s0lXoOzLJyplSDfe+5xUsvlzI5DD+I1CXSv/TncmJtyQQo/ZFlyIrfrcH0cwtUSX+InMeBQXjtCpj78OKQ6U3X5eBXzgFDcEARGiOnMtAot8Gtw/C+cW8BqnMBGkyycX31S5MQ=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$gbb+t1sbICKHjg+isxd90SBezbh3g8ZvD48p6Jv7qjj56eVKGf/K8W9FH+DINR6S1iBBPw7R+rHpDa/bIt4XXq4EfuyX6gym2zWDH2zzbFJenqVxRVIS6N85TGRl2T/CFQveGrKgHx4NqTGrtFUhjAaqyfMTeF0fBC6qQsNh1O0=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$IX3JdlETICPFRQlcZVyWzQxTgpIg9RarkF//b//8G2ZZ6wUQ8SRsB6eSw3M8Zyg4bvqHPVnmxH5ZMuDRkyhRyL79pk9SeLLc+p/pDY7XM0NvvANP43M+WJa+UQJmyvM58O58hCANXo/G02cpDIHK0ps+e5WAszjlTbojkKvQ1ek=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$JKwM9Z5D/E1Y62H5zQDPmTf7HXJAvndRlaEblvYzxsTiz68uLCluwyIv+tTt1vO9Bq60bZySqQwV2U7NeW3Kjzm9XT8s3FgO6nfrMxDhAp3VhizSiaLzweuXUfyrPJettOfSLIlqtGNFqTQqTnpZL/toe0A1oOyGq5UnWnmzZy8=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$P/qR/BHI9w6DRiYJzSon/aWAEy+xWQn/yfuEsZ3GtzbneLz1P4HWgVxN1Q0yVsTzPgH4kifHMVjFjcfVNblPTbkIGLiJzj+c04JWbhF2xLrSgbVqpp8WcQiVQvAf93STwqabxhN7sBIOXLxaGB3ZfsB2VeYr4LuwwwNat0ewljc=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$LjiUYJEmy8tj9f6UbFtqA9ggTOZf5KkB/1dNOVmnGn9a/SoMCXIfESSgt0P81wQ4tY13c3Xh+abVdNMOgF5AuLIegfP+SmU7i8KkdFXtTYMf+J/KKH+IhdoGGxdLGlh5IF1tB8kLr4dRxTWkF6RQo5DQN7Eq2LAHB6dM04jf6mQ=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$f0+5B3nDoBmtl6m0hHXemgjSLG+Mx2M2iiym8QvqL9NvDIsHPvq4AKAsqA9zkCG0PBbIY9c5TlOOKMslChZ+cNRWFNCCsZaVXDmgmmr2rn4ha7F3H2YiSNuWGtoh4CuLkTc9Npmwk/W8ZCukdd90ZFgogIbz32IG/Xv8iGrPojs=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$ACQfoDZylGPQpt8e2Gwby6YT7OWdaSj8ItBgGIxOkBoRRig1MRGAu50UMRmS4coKbpYg1hrkOMNl2vDf/HbPfFol087cTQ15YxF0sao+pwdktn2B8LOpIWruCt1zJkEeglvE2WeDjvJOIFTVbJz3YDw3YT+AGA2e1lGlmKfu4PU=$DINGLJ-ENCODE-END$","$DINGLJ-ENCODE-START$g+9CFzzueDsvDIG6yHqubMyj3NhKj7MlwgZfiRwc4EMND+GYlWzCPrtGm+J3YerQL8zRTRKh0tnhLXbPKYCOzmdZPo6UfguXD4n89hkcnUXBkjOT8CVYMfvWO3WpGID/jYE/JRNZlg2HBfFAgE1y8ONcN+20elO3HpWk6yFUgR0=$DINGLJ-ENCODE-END$"]}}}}},window.readConfig||(window.readConfig=function(){return{}}),i(374),i(904),i(816),i(176);const t={};String.prototype.encrypt=function(e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if($get(t,this))return $get(t,this);let i=`'${xt.flag_start}`,n=this;for(;;){if(n.length<100){i+=$rsa.encrypt(n,e);break}{let t=n.substring(0,100);n=n.substring(100),i=`${i}${$rsa.encrypt(t,e)}${xt.flag_split}`}}return $set(t,this,`${i}${xt.flag_end}'`),$get(t,this)};const e=window.toCache(((t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)())=>{let i=t.startsWith(xt.flag_start);if(i!=t.endsWith(xt.flag_end))return t;if(i){let i=t.replace(xt.flag_start,"").replace(xt.flag_end,""),n="";for(let t of i.split(xt.flag_split))n+=$rsa.decrypt(t,e);return n}return t}),"rsa-decode-map");String.prototype.decrypt=function(){return e(this)},String.prototype.equalsIgnoreCase=function(t){return this.toLowerCase()==t.toLowerCase()},String.prototype.includesIgnoreCase=function(t){return this.toLowerCase().includes(t.toLowerCase())},String.prototype.info=function(t=2e3){$tip.info(this,t,"10%")},String.prototype.warn=function(t=2e3){$tip.warn(this,t,"10%")},String.prototype.err=function(t=2e3){$tip.err(this,t,"10%")},i(599),Window.prototype.mergePath=function(t,e=window.dinglj_home.decrypt()){return e.endsWith("/")||e.endsWith("\\")||(e+="/"),(t.startsWith("/")||t.startsWith("\\"))&&(t=t.substring(1)),`${e}${t}`},Window.prototype.timer=function(t,e){let i=30,n=null;e&&("number"==typeof e?i=e:n=e),i=i<30?30:i;let o=setInterval((()=>{t(n)&&clearInterval(o)}),i)},Window.prototype.linkCss=function(t,e=window.dinglj_home.decrypt()){const i=document.createElement("style"),n=mergePath(t,e);i.innerHTML=$net.get(n),document.head.appendChild(i)};var n="0123456789abcdefghijklmnopqrstuvwxyz";function o(t){return n.charAt(t)}function r(t,e){return t&e}function s(t,e){return t|e}function a(t,e){return t^e}function l(t,e){return t&~e}function c(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function u(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var h,p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function d(t){var e,i,n="";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),n+=p.charAt(i>>6)+p.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),n+=p.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),n+=p.charAt(i>>2)+p.charAt((3&i)<<4));(3&n.length)>0;)n+="=";return n}function f(t){var e,i="",n=0,r=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var s=p.indexOf(t.charAt(e));s<0||(0==n?(i+=o(s>>2),r=3&s,n=1):1==n?(i+=o(r<<2|s>>4),r=15&s,n=2):2==n?(i+=o(r),i+=o(s>>2),r=3&s,n=3):(i+=o(r<<2|s>>4),i+=o(15&s),n=0))}return 1==n&&(i+=o(r<<2)),i}var g,y={decode:function(t){var e;if(void 0===g){for(g=Object.create(null),e=0;e<64;++e)g["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(g["-"]=62,g._=63,e=0;e<9;++e)g["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var i=[],n=0,o=0;for(e=0;e<t.length;++e){var r=t.charAt(e);if("="==r)break;if(-1!=(r=g[r])){if(void 0===r)throw new Error("Illegal character at offset "+e);n|=r,++o>=4?(i[i.length]=n>>16,i[i.length]=n>>8&255,i[i.length]=255&n,n=0,o=0):n<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:i[i.length]=n>>10;break;case 3:i[i.length]=n>>16,i[i.length]=n>>8&255}return i},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=y.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return y.decode(t)}},m=1e13,v=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,n,o=this.buf,r=o.length;for(i=0;i<r;++i)(n=o[i]*t+e)<m?e=0:n-=(e=0|n/m)*m,o[i]=n;e>0&&(o[i]=e)},t.prototype.sub=function(t){var e,i,n=this.buf,o=n.length;for(e=0;e<o;++e)(i=n[e]-t)<0?(i+=m,t=1):t=0,n[e]=i;for(;0===n[n.length-1];)n.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,i=e[e.length-1].toString(),n=e.length-2;n>=0;--n)i+=(m+e[n]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*m+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),w=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,b=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function T(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var x,S=function(){function t(e,i){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var n="",o=t;o<e;++o)if(n+=this.hexByte(this.get(o)),!0!==i)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var n=this.get(i);if(n<32||n>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i="",n=t;n<e;++n)i+=String.fromCharCode(this.get(n));return i},t.prototype.parseStringUTF=function(t,e){for(var i="",n=t;n<e;){var o=this.get(n++);i+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,n,o="",r=t;r<e;)i=this.get(r++),n=this.get(r++),o+=String.fromCharCode(i<<8|n);return o},t.prototype.parseTime=function(t,e,i){var n=this.parseStringISO(t,e),o=(i?w:b).exec(n);return o?(i&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n},t.prototype.parseInteger=function(t,e){for(var i,n=this.get(t),o=n>127,r=o?255:0,s="";n==r&&++t<e;)n=this.get(t);if(0==(i=e-t))return o?-1:0;if(i>4){for(s=n,i<<=3;0==(128&(+s^r));)s=+s<<1,--i;s="("+i+" bit)\n"}o&&(n-=256);for(var a=new v(n),l=t+1;l<e;++l)a.mulAdd(256,this.get(l));return s+a.toString()},t.prototype.parseBitString=function(t,e,i){for(var n=this.get(t),o="("+((e-t-1<<3)-n)+" bit)\n",r="",s=t+1;s<e;++s){for(var a=this.get(s),l=s==e-1?n:0,c=7;c>=l;--c)r+=a>>c&1?"1":"0";if(r.length>i)return o+T(r,i)}return o+r},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return T(this.parseStringISO(t,e),i);var n=e-t,o="("+n+" byte)\n";n>(i/=2)&&(e=t+i);for(var r=t;r<e;++r)o+=this.hexByte(this.get(r));return n>i&&(o+="…"),o},t.prototype.parseOID=function(t,e,i){for(var n="",o=new v,r=0,s=t;s<e;++s){var a=this.get(s);if(o.mulAdd(128,127&a),r+=7,!(128&a)){if(""===n)if((o=o.simplify())instanceof v)o.sub(80),n="2."+o.toString();else{var l=o<80?o<40?0:1:2;n=l+"."+(o-40*l)}else n+="."+o.toString();if(n.length>i)return T(n,i);o=new v,r=0}}return r>0&&(n+=".incomplete"),n},t}(),C=function(){function t(t,e,i,n,o){if(!(n instanceof D))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=i,this.tag=n,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return T(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return T(this.stream.parseStringISO(e,e+i),t);case 30:return T(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var i=0,n=this.sub.length;i<n;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===i)return null;e=0;for(var n=0;n<i;++n)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof S?e:new S(e,0);var n=new S(i),o=new D(i),r=t.decodeLength(i),s=i.pos,a=s-n.pos,l=null,c=function(){var e=[];if(null!==r){for(var n=s+r;i.pos<n;)e[e.length]=t.decode(i);if(i.pos!=n)throw new Error("Content size is not correct for container starting at offset "+s)}else try{for(;;){var o=t.decode(i);if(o.tag.isEOC())break;e[e.length]=o}r=s-i.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)l=c();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=i.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");l=c();for(var u=0;u<l.length;++u)if(l[u].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){l=null}if(null===l){if(null===r)throw new Error("We can't skip over an invalid tag with undefined length at offset "+s);i.pos=s+Math.abs(r)}return new t(n,a,r,o,l)},t}(),D=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new v;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),E=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],$=(1<<26)/E[E.length-1],N=function(){function t(t,e,i){null!=t&&("number"==typeof t?this.fromNumber(t,e,i):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,n=(1<<e)-1,r=!1,s="",a=this.t,l=this.DB-a*this.DB%e;if(a-- >0)for(l<this.DB&&(i=this[a]>>l)>0&&(r=!0,s=o(i));a>=0;)l<e?(i=(this[a]&(1<<l)-1)<<e-l,i|=this[--a]>>(l+=this.DB-e)):(i=this[a]>>(l-=e)&n,l<=0&&(l+=this.DB,--a)),i>0&&(r=!0),r&&(s+=o(i));return r?s:"0"},t.prototype.negate=function(){var e=R();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+F(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=R();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new I(e):new O(e),this.exp(t,i)},t.prototype.clone=function(){var t=R();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,n=this.DB-t*this.DB%8,o=0;if(t-- >0)for(n<this.DB&&(i=this[t]>>n)!=(this.s&this.DM)>>n&&(e[o++]=i|this.s<<this.DB-n);t>=0;)n<8?(i=(this[t]&(1<<n)-1)<<8-n,i|=this[--t]>>(n+=this.DB-8)):(i=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==o&&(128&this.s)!=(128&i)&&++o,(o>0||i!=this.s)&&(e[o++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=R();return this.bitwiseTo(t,r,e),e},t.prototype.or=function(t){var e=R();return this.bitwiseTo(t,s,e),e},t.prototype.xor=function(t){var e=R();return this.bitwiseTo(t,a,e),e},t.prototype.andNot=function(t){var e=R();return this.bitwiseTo(t,l,e),e},t.prototype.not=function(){for(var t=R(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=R();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=R();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+c(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=u(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,s)},t.prototype.clearBit=function(t){return this.changeBit(t,l)},t.prototype.flipBit=function(t){return this.changeBit(t,a)},t.prototype.add=function(t){var e=R();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=R();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=R();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=R();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=R();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=R(),i=R();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,n,o=t.bitLength(),r=q(1);if(o<=0)return r;i=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new I(e):e.isEven()?new P(e):new O(e);var s=[],a=3,l=i-1,c=(1<<i)-1;if(s[1]=n.convert(this),i>1){var u=R();for(n.sqrTo(s[1],u);a<=c;)s[a]=R(),n.mulTo(u,s[a-2],s[a]),a+=2}var h,p,d=t.t-1,f=!0,g=R();for(o=F(t[d])-1;d>=0;){for(o>=l?h=t[d]>>o-l&c:(h=(t[d]&(1<<o+1)-1)<<l-o,d>0&&(h|=t[d-1]>>this.DB+o-l)),a=i;0==(1&h);)h>>=1,--a;if((o-=a)<0&&(o+=this.DB,--d),f)s[h].copyTo(r),f=!1;else{for(;a>1;)n.sqrTo(r,g),n.sqrTo(g,r),a-=2;a>0?n.sqrTo(r,g):(p=r,r=g,g=p),n.mulTo(g,s[h],r)}for(;d>=0&&0==(t[d]&1<<o);)n.sqrTo(r,g),p=r,r=g,g=p,--o<0&&(o=this.DB-1,--d)}return n.revert(r)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var n=e.clone(),o=this.clone(),r=q(1),s=q(0),a=q(0),l=q(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),i?(r.isEven()&&s.isEven()||(r.addTo(this,r),s.subTo(e,s)),r.rShiftTo(1,r)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;o.isEven();)o.rShiftTo(1,o),i?(a.isEven()&&l.isEven()||(a.addTo(this,a),l.subTo(e,l)),a.rShiftTo(1,a)):l.isEven()||l.subTo(e,l),l.rShiftTo(1,l);n.compareTo(o)>=0?(n.subTo(o,n),i&&r.subTo(a,r),s.subTo(l,s)):(o.subTo(n,o),i&&a.subTo(r,a),l.subTo(s,l))}return 0!=o.compareTo(t.ONE)?t.ZERO:l.compareTo(e)>=0?l.subtract(e):l.signum()<0?(l.addTo(e,l),l.signum()<0?l.add(e):l):l},t.prototype.pow=function(t){return this.exp(t,new k)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var n=e;e=i,i=n}var o=e.getLowestSetBit(),r=i.getLowestSetBit();if(r<0)return e;for(o<r&&(r=o),r>0&&(e.rShiftTo(r,e),i.rShiftTo(r,i));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=i.getLowestSetBit())>0&&i.rShiftTo(o,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return r>0&&i.lShiftTo(r,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=E[E.length-1]){for(e=0;e<E.length;++e)if(i[0]==E[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<E.length;){for(var n=E[e],o=e+1;o<E.length&&n<$;)n*=E[o++];for(n=i.modInt(n);e<o;)if(n%E[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var n;if(16==i)n=4;else if(8==i)n=3;else if(256==i)n=8;else if(2==i)n=1;else if(32==i)n=5;else{if(4!=i)return void this.fromRadix(e,i);n=2}this.t=0,this.s=0;for(var o=e.length,r=!1,s=0;--o>=0;){var a=8==n?255&+e[o]:L(e,o);a<0?"-"==e.charAt(o)&&(r=!0):(r=!1,0==s?this[this.t++]=a:s+n>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=n)>=this.DB&&(s-=this.DB))}8==n&&0!=(128&+e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),r&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,n=this.DB-i,o=(1<<n)-1,r=Math.floor(t/this.DB),s=this.s<<i&this.DM,a=this.t-1;a>=0;--a)e[a+r+1]=this[a]>>n|s,s=(this[a]&o)<<i;for(a=r-1;a>=0;--a)e[a]=0;e[r]=s,e.t=this.t+r+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var n=t%this.DB,o=this.DB-n,r=(1<<n)-1;e[0]=this[i]>>n;for(var s=i+1;s<this.t;++s)e[s-i-1]|=(this[s]&r)<<o,e[s-i]=this[s]>>n;n>0&&(e[this.t-i-1]|=(this.s&r)<<o),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]-t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n-=t[i],e[i++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[i++]=this.DV+n:n>0&&(e[i++]=n),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var n=this.abs(),o=e.abs(),r=n.t;for(i.t=r+o.t;--r>=0;)i[r]=0;for(r=0;r<o.t;++r)i[r+n.t]=n.am(0,o[r],i,r,0,n.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var n=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,n,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,n){var o=e.abs();if(!(o.t<=0)){var r=this.abs();if(r.t<o.t)return null!=i&&i.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=R());var s=R(),a=this.s,l=e.s,c=this.DB-F(o[o.t-1]);c>0?(o.lShiftTo(c,s),r.lShiftTo(c,n)):(o.copyTo(s),r.copyTo(n));var u=s.t,h=s[u-1];if(0!=h){var p=h*(1<<this.F1)+(u>1?s[u-2]>>this.F2:0),d=this.FV/p,f=(1<<this.F1)/p,g=1<<this.F2,y=n.t,m=y-u,v=null==i?R():i;for(s.dlShiftTo(m,v),n.compareTo(v)>=0&&(n[n.t++]=1,n.subTo(v,n)),t.ONE.dlShiftTo(u,v),v.subTo(s,s);s.t<u;)s[s.t++]=0;for(;--m>=0;){var w=n[--y]==h?this.DM:Math.floor(n[y]*d+(n[y-1]+g)*f);if((n[y]+=s.am(0,w,n,m,0,u))<w)for(s.dlShiftTo(m,v),n.subTo(v,n);n[y]<--w;)n.subTo(v,n)}null!=i&&(n.drShiftTo(u,i),a!=l&&t.ZERO.subTo(i,i)),n.t=u,n.clamp(),c>0&&n.rShiftTo(c,n),a<0&&t.ZERO.subTo(n,n)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var n=R(),o=R(),r=i.convert(this),s=F(e)-1;for(r.copyTo(n);--s>=0;)if(i.sqrTo(n,o),(e&1<<s)>0)i.mulTo(o,r,n);else{var a=n;n=o,o=a}return i.revert(n)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),i=Math.pow(t,e),n=q(i),o=R(),r=R(),s="";for(this.divRemTo(n,o,r);o.signum()>0;)s=(i+r.intValue()).toString(t).substr(1)+s,o.divRemTo(n,o,r);return r.intValue().toString(t)+s},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var n=this.chunkSize(i),o=Math.pow(i,n),r=!1,s=0,a=0,l=0;l<e.length;++l){var c=L(e,l);c<0?"-"==e.charAt(l)&&0==this.signum()&&(r=!0):(a=i*a+c,++s>=n&&(this.dMultiply(o),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(i,s)),this.dAddOffset(a,0)),r&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,n){if("number"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],r=7&e;o.length=1+(e>>3),i.nextBytes(o),r>0?o[0]&=(1<<r)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,i){var n,o,r=Math.min(t.t,this.t);for(n=0;n<r;++n)i[n]=e(this[n],t[n]);if(t.t<this.t){for(o=t.s&this.DM,n=r;n<this.t;++n)i[n]=e(this[n],o);i.t=this.t}else{for(o=this.s&this.DM,n=r;n<t.t;++n)i[n]=e(o,t[n]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var n=t.ONE.shiftLeft(e);return this.bitwiseTo(n,i,n),n},t.prototype.addTo=function(t,e){for(var i=0,n=0,o=Math.min(t.t,this.t);i<o;)n+=this[i]+t[i],e[i++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;i<this.t;)n+=this[i],e[i++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;i<t.t;)n+=t[i],e[i++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[i++]=n:n<-1&&(e[i++]=this.DV+n),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var n=Math.min(this.t+t.t,e);for(i.s=0,i.t=n;n>0;)i[--n]=0;for(var o=i.t-this.t;n<o;++n)i[n+this.t]=this.am(0,t[n],i,n,0,this.t);for(o=Math.min(t.t,e);n<o;++n)this.am(0,t[n],i,n,0,e-n);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var n=i.t=this.t+t.t-e;for(i.s=0;--n>=0;)i[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)i[this.t+n-e]=this.am(e-n,t[n],i,0,0,this.t+n-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var n=this.t-1;n>=0;--n)i=(e*i+this[n])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),n=i.getLowestSetBit();if(n<=0)return!1;var o=i.shiftRight(n);(e=e+1>>1)>E.length&&(e=E.length);for(var r=R(),s=0;s<e;++s){r.fromInt(E[Math.floor(Math.random()*E.length)]);var a=r.modPow(o,this);if(0!=a.compareTo(t.ONE)&&0!=a.compareTo(i)){for(var l=1;l++<n&&0!=a.compareTo(i);)if(0==(a=a.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=a.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=R();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(i.compareTo(n)<0){var o=i;i=n,n=o}var r=i.getLowestSetBit(),s=n.getLowestSetBit();if(s<0)e(i);else{r<s&&(s=r),s>0&&(i.rShiftTo(s,i),n.rShiftTo(s,n));var a=function(){(r=i.getLowestSetBit())>0&&i.rShiftTo(r,i),(r=n.getLowestSetBit())>0&&n.rShiftTo(r,n),i.compareTo(n)>=0?(i.subTo(n,i),i.rShiftTo(1,i)):(n.subTo(i,n),n.rShiftTo(1,n)),i.signum()>0?setTimeout(a,0):(s>0&&n.lShiftTo(s,n),setTimeout((function(){e(n)}),0))};setTimeout(a,10)}},t.prototype.fromNumberAsync=function(e,i,n,o){if("number"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),s,this),this.isEven()&&this.dAddOffset(1,0);var r=this,a=function(){r.dAddOffset(2,0),r.bitLength()>e&&r.subTo(t.ONE.shiftLeft(e-1),r),r.isProbablePrime(i)?setTimeout((function(){o()}),0):setTimeout(a,0)};setTimeout(a,0)}else{var l=[],c=7&e;l.length=1+(e>>3),i.nextBytes(l),c>0?l[0]&=(1<<c)-1:l[0]=0,this.fromString(l,256)}},t}(),k=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),I=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),O=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=R();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(N.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=R();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],n=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),P=function(){function t(t){this.m=t,this.r2=R(),this.q3=R(),N.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=R();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function R(){return new N(null)}function A(t,e){return new N(t,e)}var j="undefined"!=typeof navigator;j&&"Microsoft Internet Explorer"==navigator.appName?(N.prototype.am=function(t,e,i,n,o,r){for(var s=32767&e,a=e>>15;--r>=0;){var l=32767&this[t],c=this[t++]>>15,u=a*l+c*s;o=((l=s*l+((32767&u)<<15)+i[n]+(1073741823&o))>>>30)+(u>>>15)+a*c+(o>>>30),i[n++]=1073741823&l}return o},x=30):j&&"Netscape"!=navigator.appName?(N.prototype.am=function(t,e,i,n,o,r){for(;--r>=0;){var s=e*this[t++]+i[n]+o;o=Math.floor(s/67108864),i[n++]=67108863&s}return o},x=26):(N.prototype.am=function(t,e,i,n,o,r){for(var s=16383&e,a=e>>14;--r>=0;){var l=16383&this[t],c=this[t++]>>14,u=a*l+c*s;o=((l=s*l+((16383&u)<<14)+i[n]+o)>>28)+(u>>14)+a*c,i[n++]=268435455&l}return o},x=28),N.prototype.DB=x,N.prototype.DM=(1<<x)-1,N.prototype.DV=1<<x,N.prototype.FV=Math.pow(2,52),N.prototype.F1=52-x,N.prototype.F2=2*x-52;var M,B,V=[];for(M="0".charCodeAt(0),B=0;B<=9;++B)V[M++]=B;for(M="a".charCodeAt(0),B=10;B<36;++B)V[M++]=B;for(M="A".charCodeAt(0),B=10;B<36;++B)V[M++]=B;function L(t,e){var i=V[t.charCodeAt(e)];return null==i?-1:i}function q(t){var e=R();return e.fromInt(t),e}function F(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}N.ZERO=q(0),N.ONE=q(1);var G,H,K=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,n;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[i],this.S[i]=n;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),z=null;if(null==z){z=[],H=0;var U=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var W=new Uint32Array(256);for(window.crypto.getRandomValues(W),U=0;U<W.length;++U)z[H++]=255&W[U]}var J=0,X=function(t){if((J=J||0)>=256||H>=256)window.removeEventListener?window.removeEventListener("mousemove",X,!1):window.detachEvent&&window.detachEvent("onmousemove",X);else try{var e=t.x+t.y;z[H++]=255&e,J+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",X,!1):window.attachEvent&&window.attachEvent("onmousemove",X))}function Y(){if(null==G){for(G=new K;H<256;){var t=Math.floor(65536*Math.random());z[H++]=255&t}for(G.init(z),H=0;H<z.length;++H)z[H]=0;H=0}return G.next()}var Z=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Y()},t}(),Q=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=A(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,i=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var i=[],n=t.length-1;n>=0&&e>0;){var o=t.charCodeAt(n--);o<128?i[--e]=o:o>127&&o<2048?(i[--e]=63&o|128,i[--e]=o>>6|192):(i[--e]=63&o|128,i[--e]=o>>6&63|128,i[--e]=o>>12|224)}i[--e]=0;for(var r=new Z,s=[];e>2;){for(s[0]=0;0==s[0];)r.nextBytes(s);i[--e]=s[0]}return i[--e]=2,i[--e]=0,new N(i)}(t,e);if(null==i)return null;var n=this.doPublic(i);if(null==n)return null;for(var o=n.toString(16),r=o.length,s=0;s<2*e-r;s++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=A(t,16),this.e=parseInt(e,16),this.d=A(i,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,i,n,o,r,s,a){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=A(t,16),this.e=parseInt(e,16),this.d=A(i,16),this.p=A(n,16),this.q=A(o,16),this.dmp1=A(r,16),this.dmq1=A(s,16),this.coeff=A(a,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var i=new Z,n=t>>1;this.e=parseInt(e,16);for(var o=new N(e,16);;){for(;this.p=new N(t-n,1,i),0!=this.p.subtract(N.ONE).gcd(o).compareTo(N.ONE)||!this.p.isProbablePrime(10););for(;this.q=new N(n,1,i),0!=this.q.subtract(N.ONE).gcd(o).compareTo(N.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var r=this.p;this.p=this.q,this.q=r}var s=this.p.subtract(N.ONE),a=this.q.subtract(N.ONE),l=s.multiply(a);if(0==l.gcd(o).compareTo(N.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(l),this.dmp1=this.d.mod(s),this.dmq1=this.d.mod(a),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=A(t,16),i=this.doPrivate(e);return null==i?null:function(t,e){for(var i=t.toByteArray(),n=0;n<i.length&&0==i[n];)++n;if(i.length-n!=e-1||2!=i[n])return null;for(++n;0!=i[n];)if(++n>=i.length)return null;for(var o="";++n<i.length;){var r=255&i[n];r<128?o+=String.fromCharCode(r):r>191&&r<224?(o+=String.fromCharCode((31&r)<<6|63&i[n+1]),++n):(o+=String.fromCharCode((15&r)<<12|(63&i[n+1])<<6|63&i[n+2]),n+=2)}return o}(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var n=new Z,o=t>>1;this.e=parseInt(e,16);var r=new N(e,16),s=this,a=function(){var e=function(){if(s.p.compareTo(s.q)<=0){var t=s.p;s.p=s.q,s.q=t}var e=s.p.subtract(N.ONE),n=s.q.subtract(N.ONE),o=e.multiply(n);0==o.gcd(r).compareTo(N.ONE)?(s.n=s.p.multiply(s.q),s.d=r.modInverse(o),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(n),s.coeff=s.q.modInverse(s.p),setTimeout((function(){i()}),0)):setTimeout(a,0)},l=function(){s.q=R(),s.q.fromNumberAsync(o,1,n,(function(){s.q.subtract(N.ONE).gcda(r,(function(t){0==t.compareTo(N.ONE)&&s.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(l,0)}))}))},c=function(){s.p=R(),s.p.fromNumberAsync(t-o,1,n,(function(){s.p.subtract(N.ONE).gcda(r,(function(t){0==t.compareTo(N.ONE)&&s.p.isProbablePrime(10)?setTimeout(l,0):setTimeout(c,0)}))}))};setTimeout(c,0)};setTimeout(a,0)},t.prototype.sign=function(t,e,i){var n=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var i=e-t.length-6,n="",o=0;o<i;o+=2)n+="ff";return A("0001"+n+"00"+t,16)}((_[i]||"")+e(t).toString(),this.n.bitLength()/4);if(null==n)return null;var o=this.doPrivate(n);if(null==o)return null;var r=o.toString(16);return 0==(1&r.length)?r:"0"+r},t.prototype.verify=function(t,e,i){var n=A(e,16),o=this.doPublic(n);return null==o?null:function(t){for(var e in _)if(_.hasOwnProperty(e)){var i=_[e],n=i.length;if(t.substr(0,n)==i)return t.substr(n)}return t}(o.toString(16).replace(/^1f+00/,""))==i(t).toString()},t}(),_={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},tt={};tt.lang={extend:function(t,e,i){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i){var o;for(o in i)t.prototype[o]=i[o];var r=function(){},s=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(r=function(t,e){for(o=0;o<s.length;o+=1){var i=s[o],n=e[i];"function"==typeof n&&n!=Object.prototype[i]&&(t[i]=n)}})}catch(t){}r(t.prototype,i)}}};var et={};void 0!==et.asn1&&et.asn1||(et.asn1={}),et.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var n="",o=0;o<i;o++)n+="f";e=new N(n,16).xor(t).add(N.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=et.asn1,i=e.DERBoolean,n=e.DERInteger,o=e.DERBitString,r=e.DEROctetString,s=e.DERNull,a=e.DERObjectIdentifier,l=e.DEREnumerated,c=e.DERUTF8String,u=e.DERNumericString,h=e.DERPrintableString,p=e.DERTeletexString,d=e.DERIA5String,f=e.DERUTCTime,g=e.DERGeneralizedTime,y=e.DERSequence,m=e.DERSet,v=e.DERTaggedObject,w=e.ASN1Util.newObject,b=Object.keys(t);if(1!=b.length)throw"key of param shall be only one.";var T=b[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+T+":"))throw"undefined key: "+T;if("bool"==T)return new i(t[T]);if("int"==T)return new n(t[T]);if("bitstr"==T)return new o(t[T]);if("octstr"==T)return new r(t[T]);if("null"==T)return new s(t[T]);if("oid"==T)return new a(t[T]);if("enum"==T)return new l(t[T]);if("utf8str"==T)return new c(t[T]);if("numstr"==T)return new u(t[T]);if("prnstr"==T)return new h(t[T]);if("telstr"==T)return new p(t[T]);if("ia5str"==T)return new d(t[T]);if("utctime"==T)return new f(t[T]);if("gentime"==T)return new g(t[T]);if("seq"==T){for(var x=t[T],S=[],C=0;C<x.length;C++){var D=w(x[C]);S.push(D)}return new y({array:S})}if("set"==T){for(x=t[T],S=[],C=0;C<x.length;C++)D=w(x[C]),S.push(D);return new m({array:S})}if("tag"==T){var E=t[T];if("[object Array]"===Object.prototype.toString.call(E)&&3==E.length){var $=w(E[2]);return new v({tag:E[0],explicit:E[1],obj:$})}var N={};if(void 0!==E.explicit&&(N.explicit=E.explicit),void 0!==E.tag&&(N.tag=E.tag),void 0===E.obj)throw"obj shall be specified for 'tag'.";return N.obj=w(E.obj),new v(N)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},et.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",i=parseInt(t.substr(0,2),16),n=(e=Math.floor(i/40)+"."+i%40,""),o=2;o<t.length;o+=2){var r=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);n+=r.substr(1,7),"0"==r.substr(0,1)&&(e=e+"."+new N(n,2).toString(10),n="")}return e},et.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new N(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);return n},et.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var i=e.length/2;if(i>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},et.asn1.DERAbstractString=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},tt.lang.extend(et.asn1.DERAbstractString,et.asn1.ASN1Object),et.asn1.DERAbstractTime=function(t){et.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var n=this.zeroPadding,o=this.localDateToUTC(t),r=String(o.getFullYear());"utc"==e&&(r=r.substr(2,2));var s=r+n(String(o.getMonth()+1),2)+n(String(o.getDate()),2)+n(String(o.getHours()),2)+n(String(o.getMinutes()),2)+n(String(o.getSeconds()),2);if(!0===i){var a=o.getMilliseconds();if(0!=a){var l=n(String(a),3);s=s+"."+(l=l.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,n,o,r){var s=new Date(Date.UTC(t,e-1,i,n,o,r,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},tt.lang.extend(et.asn1.DERAbstractTime,et.asn1.ASN1Object),et.asn1.DERAbstractStructured=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},tt.lang.extend(et.asn1.DERAbstractStructured,et.asn1.ASN1Object),et.asn1.DERBoolean=function(){et.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},tt.lang.extend(et.asn1.DERBoolean,et.asn1.ASN1Object),et.asn1.DERInteger=function(t){et.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new N(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DERInteger,et.asn1.ASN1Object),et.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}et.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var i="0"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+="0";var n="";for(i=0;i<t.length-1;i+=8){var o=t.substr(i,8),r=parseInt(o,2).toString(16);1==r.length&&(r="0"+r),n+=r}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",i=0;i<t.length;i++)1==t[i]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},tt.lang.extend(et.asn1.DERBitString,et.asn1.ASN1Object),et.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}et.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},tt.lang.extend(et.asn1.DEROctetString,et.asn1.DERAbstractString),et.asn1.DERNull=function(){et.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},tt.lang.extend(et.asn1.DERNull,et.asn1.ASN1Object),et.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},i=function(t){var i="",n=new N(t,10).toString(2),o=7-n.length%7;7==o&&(o=0);for(var r="",s=0;s<o;s++)r+="0";for(n=r+n,s=0;s<n.length-1;s+=7){var a=n.substr(s,7);s!=n.length-7&&(a="1"+a),i+=e(parseInt(a,2))}return i};et.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",o=t.split("."),r=40*parseInt(o[0])+parseInt(o[1]);n+=e(r),o.splice(0,2);for(var s=0;s<o.length;s++)n+=i(o[s]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=n},this.setValueName=function(t){var e=et.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},tt.lang.extend(et.asn1.DERObjectIdentifier,et.asn1.ASN1Object),et.asn1.DEREnumerated=function(t){et.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new N(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DEREnumerated,et.asn1.ASN1Object),et.asn1.DERUTF8String=function(t){et.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},tt.lang.extend(et.asn1.DERUTF8String,et.asn1.DERAbstractString),et.asn1.DERNumericString=function(t){et.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},tt.lang.extend(et.asn1.DERNumericString,et.asn1.DERAbstractString),et.asn1.DERPrintableString=function(t){et.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},tt.lang.extend(et.asn1.DERPrintableString,et.asn1.DERAbstractString),et.asn1.DERTeletexString=function(t){et.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},tt.lang.extend(et.asn1.DERTeletexString,et.asn1.DERAbstractString),et.asn1.DERIA5String=function(t){et.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},tt.lang.extend(et.asn1.DERIA5String,et.asn1.DERAbstractString),et.asn1.DERUTCTime=function(t){et.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},tt.lang.extend(et.asn1.DERUTCTime,et.asn1.DERAbstractTime),et.asn1.DERGeneralizedTime=function(t){et.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},tt.lang.extend(et.asn1.DERGeneralizedTime,et.asn1.DERAbstractTime),et.asn1.DERSequence=function(t){et.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},tt.lang.extend(et.asn1.DERSequence,et.asn1.DERAbstractStructured),et.asn1.DERSet=function(t){et.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},tt.lang.extend(et.asn1.DERSet,et.asn1.DERAbstractStructured),et.asn1.DERTaggedObject=function(t){et.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},tt.lang.extend(et.asn1.DERTaggedObject,et.asn1.ASN1Object);var it,nt,ot=(it=function(t,e){return it=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},it(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}it(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),rt=function(t){function e(i){var n=t.call(this)||this;return i&&("string"==typeof i?n.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&n.parsePropertiesFrom(i)),n}return ot(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,n=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===h){var i="0123456789ABCDEF";for(h={},e=0;e<16;++e)h[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)h[i.charAt(e)]=e;for(e=0;e<8;++e)h[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],o=0,r=0;for(e=0;e<t.length;++e){var s=t.charAt(e);if("="==s)break;if(-1!=(s=h[s])){if(void 0===s)throw new Error("Illegal character at offset "+e);o|=s,++r>=2?(n[n.length]=o,o=0,r=0):o<<=4}}if(r)throw new Error("Hex encoding incomplete: 4 bits missing");return n}(t):y.unarmor(t),o=C.decode(n);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=A(e,16),i=o.sub[2].getHexStringValue(),this.e=parseInt(i,16);var r=o.sub[3].getHexStringValue();this.d=A(r,16);var s=o.sub[4].getHexStringValue();this.p=A(s,16);var a=o.sub[5].getHexStringValue();this.q=A(a,16);var l=o.sub[6].getHexStringValue();this.dmp1=A(l,16);var c=o.sub[7].getHexStringValue();this.dmq1=A(c,16);var u=o.sub[8].getHexStringValue();this.coeff=A(u,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var p=o.sub[1].sub[0];e=p.sub[0].getHexStringValue(),this.n=A(e,16),i=p.sub[1].getHexStringValue(),this.e=parseInt(i,16)}else e=o.sub[0].getHexStringValue(),this.n=A(e,16),i=o.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new et.asn1.DERInteger({int:0}),new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e}),new et.asn1.DERInteger({bigint:this.d}),new et.asn1.DERInteger({bigint:this.p}),new et.asn1.DERInteger({bigint:this.q}),new et.asn1.DERInteger({bigint:this.dmp1}),new et.asn1.DERInteger({bigint:this.dmq1}),new et.asn1.DERInteger({bigint:this.coeff})]};return new et.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return d(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new et.asn1.DERSequence({array:[new et.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new et.asn1.DERNull]}),e=new et.asn1.DERSequence({array:[new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e})]}),i=new et.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new et.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return d(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(i,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(Q),st="undefined"!=typeof process?null===(nt=process.env)||void 0===nt?void 0:nt.npm_package_version:void 0;const at=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new rt(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(f(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return d(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,i){try{return d(this.getKey().sign(t,e,i))}catch(t){return!1}},t.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,f(e),i)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new rt,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=st,t}();function lt(t,e){return"object"==typeof t?function(t,e){for(let i of Object.keys(t))t[i]=lt(t[i],e);return t}(t,e):"string"==typeof t?t.decrypt(e):t}window.$rsa={},window.$rsa.encrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pub)()){if(e){const i=new at;return i.setPrivateKey(e),i.encrypt(t)}return t},window.$rsa.decrypt=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){if(e){const i=new at;return i.setPrivateKey(e),i.decrypt(t)}return t},window.$rsa.decryptObject=function(t,e=(()=>null==window.rsa?(alert("请更新脚本, 添加 rsa 密钥的配置"),""):window.rsa.pri)()){return lt(t,e)},i(506),i(676),i(894),window.$net={},window.$net.get=function(t,e={callback:null,async:!1}){const i=new XMLHttpRequest;return i.open("GET",t,!!e.async),i.send(),4==i.readyState&&200==i.status&&e.callback&&e.callback(i.responseText),i.responseText},window.$store={},window.$store.getStorage=function(t,e=void 0){let i=localStorage.getItem(t);if(i){const n=JSON.parse(i);return n.timeout>0&&Date.now()-n.savetime>n.timeout?(`本地缓存${t}已过期`.warn(),e):n.data}return e},window.$store.setStorage=function(t,e,i=-1){let n={savetime:Date.now(),timeout:i,data:e};localStorage.setItem(t,JSON.stringify(n))},i(228);class ct{getImg(t){return""}emit(t,e){}}window.BasicProperty=ct;const ut=ct;class ht extends ut{}window.AbstractComponent=ht;const pt=ht;var dt;!function(t){t.ButtonX="I-Button",t.InputX="I-Input",t.SwitchX="I-Switch",t.ComboX="I-Combo",t.NavigatorX="I-Navigator",t.ScrollerY="I-Scroller-Y",t.TabPanelX="I-Tab-Panel",t.ScrollerX="I-Scroller-X",t.TableX="I-Table",t.TabView="I-Tab-View",t.NavigatorView="I-Nav-View",t.ProgressX="I-Progress",t.ModalX="I-Modal",t.ContextMenuX="I-Context-Menu"}(dt||(dt={})),window.ComponentType=dt;const ft=dt;class gt extends ut{constructor(){super(...arguments),this.components={},this.fieldNames=[],this.methodNames=[],this.computes=[],this.watchs=[],this.propMap=new Map}getInstance(){return this.clazz?(this.instance||(this.instance=new this.clazz),this.instance):null}getFields(){const t=this,e=this.getInstance();return function(){const i={$class:e,vid:"",name:t.name};for(let n of t.fieldNames)$set(i,n,$get(e,n));return i}}getMethods(){const t=this.getInstance(),e={getImg:function(t){return mergePath("/src/assets/img/"+t)},emit:function(t,e){this.$emit(t,{vid:this.vid,value:e})},appMounted:this.mountedName?$get(t,this.mountedName):()=>{}};for(let i of this.methodNames)e[i]=$get(t,i);return e}getComputeds(){let t={};for(let e of this.computes)t[e.fieldName]=e.func;return t}setProp(t,e){this.propMap.set(t,e)}getProps(){const t={};return this.propMap.forEach(((e,i)=>{$set(t,i,e)})),t}getMounted(){return function(){const t=this;t.vid=window.uuid(t.name),t.emit("mounted",t.vid),$queue.on("$vue",(()=>t),t.vid),t.appMounted()}}getTemplate(){return $get(this.getInstance(),this.template)}getWatchs(){const t=this.getInstance();let e={};for(let i of this.watchs)e[i.target]={handler:$get(t,i.funcName),deep:i.deep};return e}getComponents(){return this.components}}window.MetaData=gt;const yt=gt;let mt=null;const vt=new Map;window.$registry={},$registry.getComponent=function(t){return t&&mt?(vt.set(t,mt),mt=null,vt.get(t)):mt||(mt=new yt,mt)},$registry.buildComponent=function(t){const e=vt.get(t);return{data:e.getFields(),mounted:e.getMounted(),template:e.getTemplate(),methods:e.getMethods(),computed:e.getComputeds(),props:e.getProps(),watch:e.getWatchs(),components:e.getComponents()}},$registry.buildAndRegist=function(t){const e=vt.get(t),i=$registry.buildComponent(t);return window.registVue(e.name,i)};window.LangItem=class{constructor(t,e){this.en=t,this.zh=e}};class wt{constructor(t,e=function(t,e){},i=function(t,e){return!0}){this.id=window.uuid("right-click-item"),this.label=t,this.event=e,this.isDisplay=i}}window.RightMenu=wt;const bt=wt;var Tt;!function(t){t.flag_start="$DINGLJ-ENCODE-START$",t.flag_end="$DINGLJ-ENCODE-END$",t.flag_split="$DINGLJ-SPLIT-FLAG$"}(Tt||(Tt={})),window.RsaConst=Tt;const xt=Tt;window.Field=function(t,e){$registry.getComponent().fieldNames.push(e)},window.Method=function(t,e,i){$registry.getComponent().methodNames.push(e)},window.Prop=function(t,e,i=!1){return function(n,o){$registry.getComponent().propMap.set(o,{type:t,default:e,required:i})}},window.Template=function(t,e){$registry.getComponent().template=e},window.Mounted=function(t,e,i){$registry.getComponent().mountedName=e},window.Compute=function(t){return function(e,i){$registry.getComponent().computes.push({fieldName:i,func:t})}},window.Component=function(t){return function(e,i){$registry.getComponent().components=t}},window.Watch=function(t,e=!0){return function(i,n){$registry.getComponent().watchs.push({target:t,deep:e,funcName:n})}},window.Service=function(t,e,i){return function(n){const o=$registry.getComponent(e);o.clazz=t,o.name=e,o.setProp("iProps",{type:Object,default:{},required:!!i})}};var St=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ct=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 按钮 --\x3e\n    <div :class="getClass()" :id="vid" :style="getStyle()" @click="$singleClick">\n        <slot></slot>\n    </div>'}getClass(){return{"dinglj-v-btn":!0,"dinglj-v-ctl":!0,primary:"primary"==this.$type,cancel:"cancel"==this.$type,warn:"warn"==this.$type,error:"error"==this.$type}}getStyle(){return{"--height":this.$size.equalsIgnoreCase("small")?"24px":this.$size.equalsIgnoreCase("normal")?"28px":"32px","--margin-tb":this.$size.equalsIgnoreCase("small")?"1px":this.$size.equalsIgnoreCase("normal")?"2px":"3px"}}};St([Template],Ct.prototype,"template",void 0),St([Method],Ct.prototype,"getClass",null),St([Method],Ct.prototype,"getStyle",null),St([Compute((t=>t.iProps.singleClick||(t=>{})))],Ct.prototype,"$singleClick",void 0),St([Compute((t=>t.iProps.size||"normal"))],Ct.prototype,"$size",void 0),St([Compute((t=>t.iProps.type||"primary"))],Ct.prototype,"$type",void 0),Ct=St([Service(Ct,ft.ButtonX,!0)],Ct),$registry.buildAndRegist(ft.ButtonX);var Dt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Et=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 文本输入框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input text" :caption="$caption" :style="getStyle()" :id="vid">\n        <input type="text" :placeholder="$placeholder" v-model="value" @keyup.enter="setValue(value, \'enter\')" @input="setValue(value, \'input\')" @blur="setValue(value, \'blur\')" @change="setValue(value, \'change\')"/>\n        \x3c!-- 文本输入框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\', \'change\')"/>\n    </div>',this.value=""}mounted(){$queue.on("dinglj-v-input-text::clear",(()=>{this.value=""}),this.vid),$queue.on("dinglj-v-input-text::focus",(()=>{window.byId(this.vid).children[0].focus()}),this.vid),this.value=this.iProps.defaultValue||""}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}setValue(t,e){this.value=t;const i={vid:this.vid,value:t};this.iProps.onChange&&this.iProps.onChange(i),"blur"==e&&(this.iProps.onBlur&&this.iProps.onBlur(i),this.iProps.onOver&&this.iProps.onOver(i)),"enter"==e&&(this.iProps.onEnter&&this.iProps.onEnter(i),this.iProps.onOver&&this.iProps.onOver(i))}};Dt([Mounted],Et.prototype,"mounted",null),Dt([Template],Et.prototype,"template",void 0),Dt([Field],Et.prototype,"value",void 0),Dt([Method],Et.prototype,"getStyle",null),Dt([Method],Et.prototype,"setValue",null),Dt([Compute((t=>t.iProps.size||"normal"))],Et.prototype,"$size",void 0),Dt([Compute((t=>t.iProps.caption||""))],Et.prototype,"$caption",void 0),Dt([Compute((t=>t.iProps.placeholder||`请输入${t.$caption}`))],Et.prototype,"$placeholder",void 0),Et=Dt([Service(Et,ft.InputX,!0)],Et),$registry.buildAndRegist(ft.InputX);var $t=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Nt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 开关 --\x3e\n    <div class="dinglj-v-switch" @click="onclicked" :style="getStyle()">\n        \x3c!-- 开关按钮前的文字 --\x3e\n        <div class="dinglj-v-switch-pre">\n            {{ preText }}\n        </div>\n        \x3c!-- 开关按钮 --\x3e\n        <div :class="getClass()">\n            <div></div>\n        </div>\n        \x3c!-- 开关按钮后的文字 --\x3e\n        <div class="dinglj-v-switch-post">\n            {{ postText }}\n        </div>\n    </div>',this.active=!1}getStyle(){return{"--width":this.xSize.equalsIgnoreCase("small")?"30px":(this.xSize.equalsIgnoreCase("normal"),"40px"),"--height":this.xSize.equalsIgnoreCase("small")?"24px":this.xSize.equalsIgnoreCase("normal")?"28px":"32px","--padding-tb":this.xSize.equalsIgnoreCase("small")?"5px":this.xSize.equalsIgnoreCase("normal")?"3px":"8px"}}getClass(){return{"dinglj-v-switch-btn":!0,active:this.active}}onclicked(){this.active=!this.active,this.active?this.postText&&`已切换至: ${this.postText}`.info():this.preText&&`已切换至: ${this.preText}`.info(),this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:this.active})}};$t([Template],Nt.prototype,"template",void 0),$t([Field],Nt.prototype,"active",void 0),$t([Method],Nt.prototype,"getStyle",null),$t([Method],Nt.prototype,"getClass",null),$t([Method],Nt.prototype,"onclicked",null),$t([Compute((t=>t.iProps.size||"normal"))],Nt.prototype,"xSize",void 0),$t([Compute((t=>t.iProps.preTxt||""))],Nt.prototype,"preText",void 0),$t([Compute((t=>t.iProps.postTxt||""))],Nt.prototype,"postText",void 0),Nt=$t([Service(Nt,ft.SwitchX,!0)],Nt),$registry.buildAndRegist(ft.SwitchX);var kt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let It=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 下拉框 --\x3e\n    <div class="dinglj-v-ctl dinglj-v-input combo" :style="getStyle()" :caption="$caption" :id="vid">\n        <input :placeholder="$placeholder" type="text" :value="$list.includesIgnoreCase(value) ? $getValue(value) : \'\'"/>\n        \x3c!-- 下拉框清空按钮 --\x3e\n        <img :src="getImg(\'delete.png\')" class="clean" @click="setValue(\'\')"/>\n        \x3c!-- 下拉框选项集合 --\x3e\n        <div class="dinglj-v-combo-selections">\n            \x3c!-- 下拉框选项 --\x3e\n            <div class="dinglj-v-combo-selection" v-for="item in $list" @click="setValue(item)">\n                {{ $getLabel(item) }}\n            </div>\n        </div>\n    </div>',this.value=null}setValue(t){this.value!=t&&(this.value=t,this.$onChange(t))}getStyle(){return{"--height":"small"==this.$size?"24px":"normal"==this.$size?"28px":"32px","--width":"small"==this.$size?"180px":"normal"==this.$size?"200px":"220px"}}$onChange(t){this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t})}};kt([Template],It.prototype,"template",void 0),kt([Field],It.prototype,"value",void 0),kt([Method],It.prototype,"setValue",null),kt([Method],It.prototype,"getStyle",null),kt([Method],It.prototype,"$onChange",null),kt([Compute((t=>t.iProps.list||[]))],It.prototype,"$list",void 0),kt([Compute((t=>t.iProps.size||"normal"))],It.prototype,"$size",void 0),kt([Compute((t=>t.iProps.caption||""))],It.prototype,"$caption",void 0),kt([Compute((t=>t.iProps.placeholder||`请选择${t.$caption}`))],It.prototype,"$placeholder",void 0),kt([Compute((t=>t.iProps.getLabel||(t=>t)))],It.prototype,"$getLabel",void 0),kt([Compute((t=>t.iProps.getValue||(t=>t)))],It.prototype,"$getValue",void 0),It=kt([Service(It,ft.ComboX,!0)],It),$registry.buildAndRegist(ft.ComboX);var Ot=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Pt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 导航菜单 --\x3e\n    <div id="dinglj-v-navigator">\n        \x3c!-- 每一个菜单 --\x3e\n        <div class="dinglj-v-navigator-item" v-for="item in list" @click="setValue(item)" :class="{ \'active\': validItem == item }">\n            {{ getCaption(item) }}\n        </div>\n    </div>',this.value=null}mounted(){null!=this.default?this.setValue(this.default):this.list.length>0&&this.setValue(this.list[0])}setValue(t){this.value!=t&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}))}};Ot([Mounted],Pt.prototype,"mounted",null),Ot([Template],Pt.prototype,"template",void 0),Ot([Field],Pt.prototype,"value",void 0),Ot([Method],Pt.prototype,"setValue",null),Ot([Compute((t=>(null!=t.value?!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.setValue(t.list[0]):t.list.length>0&&t.setValue(t.list[0]),t.value)))],Pt.prototype,"validItem",void 0),Ot([Compute((t=>t.iProps.list||[]))],Pt.prototype,"list",void 0),Ot([Compute((t=>t.iProps.default||(t.list.length>0?t.list[0]:null)))],Pt.prototype,"default",void 0),Ot([Compute((t=>t.iProps.getCaption||(t=>t)))],Pt.prototype,"getCaption",void 0),Pt=Ot([Service(Pt,ft.NavigatorX,!0)],Pt),$registry.buildAndRegist(ft.NavigatorX);var Rt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let At=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 纵向滚动视图 --\x3e\n    <div class="dinglj-v-column-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{top:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,height:`${this.size}00%`}}};Rt([Template],At.prototype,"template",void 0),Rt([Compute((t=>t.iProps.size||0))],At.prototype,"size",void 0),Rt([Compute((t=>t.iProps.index||0))],At.prototype,"index",void 0),Rt([Method],At.prototype,"getStyle",null),At=Rt([Service(At,ft.ScrollerY,!0)],At),$registry.buildAndRegist(ft.ScrollerY);var jt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Mt=class extends pt{constructor(){super(...arguments),this.template='<div class="dinglj-v-navigator-view">\n        <i-navigator style="margin-right: 10px" :i-props="navigatorProps"></i-navigator>\n        \x3c!-- 右侧主要内容显示部分 --\x3e\n        <div class="dinglj-v-navigator-right">\n            \x3c!-- 主要内容前的插槽 --\x3e\n            <slot name="before"></slot>\n            <div class="dinglj-v-navigator-content">\n                <i-scroller-y :i-props="scrollyProps">\n                    <slot name="content" :active="active"></slot>\n                </i-scroller-y>\n            </div>\n            \x3c!-- 主要内容后的插槽 --\x3e\n            <slot name="after"></slot>\n        </div>\n    </div>',this.active=null}};jt([Template],Mt.prototype,"template",void 0),jt([Field],Mt.prototype,"active",void 0),jt([Compute((t=>({list:t.list,onChange:function(e){t.active=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value})}})))],Mt.prototype,"navigatorProps",void 0),jt([Compute((t=>({size:t.list.length,index:t.list.indexOf(t.active)})))],Mt.prototype,"scrollyProps",void 0),jt([Compute((t=>t.iProps.list||[]))],Mt.prototype,"list",void 0),Mt=jt([Service(Mt,ft.NavigatorView,!0)],Mt),$registry.buildAndRegist(ft.NavigatorView);var Bt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Vt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- Tab --\x3e\n    <div class="dinglj-v-tab-panel" :id="vid" v-if="list.length > 0">\n        \x3c!-- Tab 页标题 --\x3e\n        <div class="dinglj-v-tabpanel-title">\n            <div class="dinglj-v-tab-float"></div>\x3c!-- Tab 页标题的浮动下划线 --\x3e\n            <div v-for="(item, idx) in list" :class="getClass(item)" :id="getId(idx)" @click="clicked(item, idx)">\n                {{ getLabel(item) }}\n            </div>\n        </div>\n        \x3c!-- Tab 页具体内容 --\x3e\n        <div class="dinglj-v-tabpanel-view">\n            <slot class="tab-panel-content">{{ index }}</slot>\n        </div>\n    </div>\n    <div v-else>\n        <h1>未找到数据</h1>\n    </div>',this.value=null}mounted(){Array.isArray(this.list)&&this.list.length>0&&this.clicked(this.list[0],0),$queue.on("tab-panel:next",(()=>{const t=(this.index+1+this.list.length)%this.list.length;this.clicked(this.list[t],t)}),this.vid),$queue.on("tab-panel:to",(t=>{const e=this.list.filter((e=>JSON.stringify(e)==JSON.stringify(t)));e.length>0&&this.clicked(e[0],this.list.indexOf(e[0]))}),this.vid)}getClass(t){return{"dinglj-v-tabpanel-item":!0,active:JSON.stringify(this.value)==JSON.stringify(t)}}getId(t){return`${this.vid}-${t}`}clicked(t,e){t!=this.value&&(this.value=t,this.iProps.onChange&&this.iProps.onChange({vid:this.vid,value:t}),window.timer((t=>{const i=window.query(`#${t.vid} .dinglj-v-tab-float`);if(!i)return!1;const n=i[0],o=window.byId(t.getId(e));return o&&(n.style.width=`${o.offsetWidth}px`,n.style.left=`${o.offsetLeft}px`),!0}),this))}};Bt([Mounted],Vt.prototype,"mounted",null),Bt([Template],Vt.prototype,"template",void 0),Bt([Field],Vt.prototype,"value",void 0),Bt([Method],Vt.prototype,"getClass",null),Bt([Method],Vt.prototype,"getId",null),Bt([Method],Vt.prototype,"clicked",null),Bt([Compute((t=>(!t.list.includesIgnoreCase(t.value)&&t.list.length>0&&t.clicked(t.list[0],0),t.list.indexOf(t.value))))],Vt.prototype,"index",void 0),Bt([Compute((t=>{if(!t.iProps.list)return[];let e=!1;for(let i of t.iProps.list)if(JSON.stringify(t.value)==JSON.stringify(i)){e=!0;break}return e||t.clicked(t.iProps.list[0],0),t.iProps.list}))],Vt.prototype,"list",void 0),Bt([Compute((t=>t.iProps.getLabel||(t=>t)))],Vt.prototype,"getLabel",void 0),Vt=Bt([Service(Vt,ft.TabPanelX,!0)],Vt),$registry.buildAndRegist(ft.TabPanelX);var Lt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let qt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 横向滚动视图 --\x3e\n    <div class="dinglj-v-row-scroll" :id="vid" :style="getStyle()">\n        <slot></slot>\n    </div>'}getStyle(){return{left:`-${this.index>=0&&this.index<this.size?this.index:0}00%`,width:`${this.size}00%`}}};Lt([Template],qt.prototype,"template",void 0),Lt([Compute((t=>t.iProps.size||0))],qt.prototype,"size",void 0),Lt([Compute((t=>t.iProps.index||0))],qt.prototype,"index",void 0),Lt([Method],qt.prototype,"getStyle",null),qt=Lt([Service(qt,ft.ScrollerX,!0)],qt),$registry.buildAndRegist(ft.ScrollerX);var Ft=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Gt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- Tab 页视图 --\x3e\n    <div class="dinglj-v-tab-panel-view" :id="vid">\n        <i-tab-panel :i-props="tabPanelProps" @mounted="tabPanelLoaded">\n            <i-scroller-x :i-props="scrollxProps">\n                <slot></slot>\n            </i-scroller-x>\n        </i-tab-panel>\n    </div>',this.value=null,this.tabPanelId=""}mounted(){$queue.on("tab-view:next",(()=>{$queue.sendMsg("tab-panel:next",null,this.tabPanelId)}),this.vid),$queue.on("tab-view:to",(t=>{$queue.sendMsg("tab-panel:to",t,this.tabPanelId)}),this.vid)}tabPanelLoaded(t){this.tabPanelId=t.value}};Ft([Mounted],Gt.prototype,"mounted",null),Ft([Template],Gt.prototype,"template",void 0),Ft([Compute((t=>({size:t.list.length,index:t.index})))],Gt.prototype,"scrollxProps",void 0),Ft([Compute((t=>({list:t.list,getLabel:t.iProps.getLabel,onChange:function(e){t.value!=e.value&&(t.value=e.value,t.iProps.onChange&&t.iProps.onChange({vid:t.vid,value:e.value}))}})))],Gt.prototype,"tabPanelProps",void 0),Ft([Field],Gt.prototype,"value",void 0),Ft([Field],Gt.prototype,"tabPanelId",void 0),Ft([Method],Gt.prototype,"tabPanelLoaded",null),Ft([Compute((t=>t.list.indexOfIgnoreCase(t.value)))],Gt.prototype,"index",void 0),Ft([Compute((t=>t.iProps.list||[]))],Gt.prototype,"list",void 0),Gt=Ft([Service(Gt,ft.TabView,!0)],Gt),$registry.buildAndRegist(ft.TabView);var Ht=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Kt=class extends pt{constructor(){super(...arguments),this.template='\x3c!-- 表格 --\x3e\n    <div class="dinglj-v-table" :id="vid" :data-title="title">\n        \x3c!-- 表头 --\x3e\n        <div class="dinglj-v-thead dinglj-v-tr">\n            \x3c!-- 复选框 --\x3e\n            <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select" @click="doCheckAll">\n                <input type="checkbox" :checked="checkAll"/>选择\n            </div>\n            \x3c!-- 序号 --\x3e\n            <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                序号\n            </div>\n            \x3c!-- 表头的每一列 --\x3e\n            <div :style="getStyle(getColumnKey(column))" :data-key="getColumnKey(column)" v-for="column in columns" :class="getClass(column)" :id="vid + \'-Col-\' + getColumnKey(column)">\n                {{ getColumnLabel(column) }}\n                \x3c!-- 表头的右键菜单 --\x3e\n                <i-context-menu :i-props="genHeadProps(column)"></i-context-menu>\n            </div>\n        </div>\n        \x3c!-- 表体 --\x3e\n        <div class="dinglj-v-tbody" :id="vid + \'-Body\'">\n            <div>\n                \x3c!-- 表格的每一行内容 --\x3e\n                <div class="dinglj-v-tr" v-for="(line, idx) in list" @click="checkOne(line)" :id="vid + \'-\' + idx">\n                    \x3c!-- 复选框 --\x3e\n                    <div :style="getStyle(\'\')" v-if="selectable" class="dinglj-v-table-select">\n                        <input type="checkbox" :checked="checkedList.includesIgnoreCase(line)"/>\n                    </div>\n                    \x3c!-- 序号 --\x3e\n                    <div :style="getStyle(\'\')" v-if="sequenceNum" class="dinglj-v-table-sequence">\n                        {{ idx + 1 }}\n                    </div>\n                    \x3c!-- 表格中的每一列 --\x3e\n                    <div :style="getStyle(getColumnKey(column))" :class="getClass(column)" v-for="column in columns">\n                        <div class="dinglj-v-auto-hidden" v-html="getCell(line, getColumnKey(column))"></div>\n                    </div>\n                    \x3c!-- 表格每一行的右键菜单 --\x3e\n                    <i-context-menu :i-props="genLineProps(line, idx)"></i-context-menu>\n                </div>\n                \x3c!-- 表格空白处的右键菜单 --\x3e\n                <i-context-menu :i-props="genBodyProps()"></i-context-menu>\n            </div>\n        </div>\n    </div>',this.cache={},this.checkAll=!1,this.checkedList=[],this.bestWidthCache=!1}mounted(){const t=this;window.timer((()=>{const e=window.byId(t.vid);return!!e&&(t.iProps.loaded&&t.iProps.loaded({vid:t.vid,value:e}),!0)})),$queue.on("export-to-excel",(function(){t.exportToExcel()}),this.vid)}genHeadProps(t){return{bindId:`${this.vid}-Col-${this.getColumnKey(t)}`,data:{columnKey:this.getColumnKey(t),list:this.list},list:this.titleColumnMenus}}genLineProps(t,e){return{bindId:`${this.vid}-${e}`,data:t,list:this.rowMenus}}genBodyProps(){return{bindId:`${this.vid}-Body`,data:this.list,list:this.bodyMenus}}checkOne(t){this.checkedList.includes(t)?(this.checkedList.remove(t),this.checkAll=!1):(this.checkedList.push(t),this.checkedList.length==this.list.length&&(this.checkAll=!0))}getClass(t){const e=this.getColumnKey(t);if(this.cache[e])return this.cache[e];let i=this.flexColumns.includesIgnoreCase(e)?"dinglj-v-flex":"fixed";const n={"dinglj-v-cell":!0};return n[e]=!0,n[i]=!0,this.cache[e]=n,n}getStyle(t){let e;return e=""==t?80:this.getBestWidth()[t],{width:`${e}px`}}doCheckAll(){this.checkedList.length=0,this.checkAll||this.checkedList.push(...this.list),this.checkAll=!this.checkAll}getBestWidth(){if(this.bestWidthCache)return this.bestWidthCache;this.bestWidthCache={};for(let t of this.columns){const e=this.getColumnKey(t),i=this.getColumnLabel(t);let n=[window.calcTxtWidth(`${i}`)];n.push(...this.list.map((t=>{const i=this.getCell(t,e);return window.calcTxtWidth(i)})));const o=Math.max(...n);this.bestWidthCache[e]=o+20}return this.bestWidthCache}exportToExcel(){const t=this;window.timer((function(){const e=window.byId(t.vid);if(!e)return!1;let i="";for(let t of e.children[0].children)t.classList.contains("dinglj-v-table-select")||(i+=t.innerText);i+="\n";for(let t of e.children[1].children[0].children){for(let e of t.children)e.classList.contains("dinglj-v-table-select")||(i+=e.innerText);i+="\n"}return console.log(i),!0}))}};Ht([Mounted],Kt.prototype,"mounted",null),Ht([Template],Kt.prototype,"template",void 0),Ht([Field],Kt.prototype,"cache",void 0),Ht([Field],Kt.prototype,"checkAll",void 0),Ht([Field],Kt.prototype,"checkedList",void 0),Ht([Field],Kt.prototype,"bestWidthCache",void 0),Ht([Method],Kt.prototype,"genHeadProps",null),Ht([Method],Kt.prototype,"genLineProps",null),Ht([Method],Kt.prototype,"genBodyProps",null),Ht([Method],Kt.prototype,"checkOne",null),Ht([Method],Kt.prototype,"getClass",null),Ht([Method],Kt.prototype,"getStyle",null),Ht([Method],Kt.prototype,"doCheckAll",null),Ht([Method],Kt.prototype,"getBestWidth",null),Ht([Method],Kt.prototype,"exportToExcel",null),Ht([Compute((t=>t.iProps.title||""))],Kt.prototype,"title",void 0),Ht([Compute((t=>t.iProps.flexColumns||[]))],Kt.prototype,"flexColumns",void 0),Ht([Compute((t=>t.iProps.list||[]))],Kt.prototype,"list",void 0),Ht([Compute((t=>t.iProps.sequenceNum||!0))],Kt.prototype,"sequenceNum",void 0),Ht([Compute((t=>t.iProps.selectable||!0))],Kt.prototype,"selectable",void 0),Ht([Compute((t=>t.iProps.columns||[]))],Kt.prototype,"columns",void 0),Ht([Compute((t=>t.iProps.getColumnKey||(t=>t)))],Kt.prototype,"getColumnKey",void 0),Ht([Compute((t=>t.iProps.getColumnLabel||(t=>t)))],Kt.prototype,"getColumnLabel",void 0),Ht([Compute((t=>t.iProps.getCell||((e,i)=>{let n=t.iProps.getColumnKey(i);return $get(e,n)})))],Kt.prototype,"getCell",void 0),Ht([Compute((t=>t.iProps.rowMenus||[]))],Kt.prototype,"rowMenus",void 0),Ht([Compute((t=>t.iProps.bodyMenus||[]))],Kt.prototype,"bodyMenus",void 0),Ht([Compute((t=>t.iProps.titleColumnMenus||[]))],Kt.prototype,"titleColumnMenus",void 0),Kt=Ht([Service(Kt,ft.TableX,!0)],Kt),$registry.buildAndRegist(ft.TableX);var zt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Ut=class extends pt{constructor(){super(...arguments),this.template="\x3c!-- 进度条 --\x3e\n    <div class=\"dinglj-v-progress-bar\" :id=\"vid\">\n        \x3c!-- 上方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'top': true, 'right': position == 'TopRight' }\" v-if=\"['TopLeft', 'TopRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n        \x3c!-- 进度条本体 --\x3e\n        <div class=\"dinglj-v-progress-box\" :style=\"getContainerStyle()\">\n            <div class=\"dinglj-v-progress\" :style=\"getProgressStyle()\"></div>\n        </div>\n        \x3c!-- 下方文本 --\x3e\n        <span :class=\"{ 'dinglj-v-progress-caption': true, 'bottom': true, 'right': position == 'BottomRight' }\" v-if=\"['BottomLeft', 'BottomRight'].includesIgnoreCase(position)\">{{ caption }}{{ percent }}</span>\n    </div>"}getContainerStyle(){return{"--bar-height":this.height}}getProgressStyle(){return window.timer((t=>{const e=window.byId(t.vid);return!!e&&(e.findChildrenByClass("dinglj-v-progress-box")[0].children[0].style.width=t.percent,!0)}),this),{width:"0%"}}};zt([Template],Ut.prototype,"template",void 0),zt([Method],Ut.prototype,"getContainerStyle",null),zt([Method],Ut.prototype,"getProgressStyle",null),zt([Compute((t=>(t.iProps.height||5)+"px"))],Ut.prototype,"height",void 0),zt([Compute((t=>t.iProps.percent||"100%"))],Ut.prototype,"percent",void 0),zt([Compute((t=>t.iProps.txtPosition||"TopLeft"))],Ut.prototype,"position",void 0),zt([Compute((t=>t.iProps.caption||""))],Ut.prototype,"caption",void 0),Ut=zt([Service(Ut,ft.ProgressX,!0)],Ut),$registry.buildAndRegist(ft.ProgressX);var Wt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Jt=class extends pt{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 对话框这招背景遮罩 --\x3e\n        <div class="dinglj-v-modal-mask"></div>\n        \x3c!-- 对话框 --\x3e\n        <div class="dinglj-v-modal" :id="vid" @mousemove="moveXY" :style="getStyle()">\n            \x3c!-- 标题 --\x3e\n            <div class="dinglj-v-modal-title" @mousedown="recordXY">\n                <div class="dinglj-v-modal-title-name dinglj-v-auto-hidden">\n                    <slot name="title">对话框</slot>\n                </div>\n                <div class="dinglj-v-flex"></div>\n                <div class="dinglj-v-modal-title-btns">\n                    <img @click="closeModal()" :src="getImg(\'delete.png\')" class="dinglj-v-close-modal"/>\n                </div>\n            </div>\n            \x3c!-- 内容 --\x3e\n            <div class="dinglj-v-modal-content">\n                <slot name="content"></slot>\n            </div>\n            \x3c!-- 按钮 --\x3e\n            <div class="dinglj-v-modal-btns">\n                <div class="dinglj-v-flex"></div>\n                <i-button style="margin-right: 5px;" :i-props="cancelProps">取消</i-button>\n                <i-button style="margin-right: 5px;" :i-props="okProps">确认</i-button>\n            </div>\n        </div>\n    </teleport>',this.position={x:-1,y:-1}}mounted(){window.addEventListener("mouseup",this.cleanXY)}getStyle(){return{width:`${this.width}px`,height:`${this.height}px`}}closeModal(){this.iProps.onClose()}recordXY(t){const e=window.byId(this.vid);if(!e)return void this.cleanXY();let i=getComputedStyle(e);parseInt(getComputedStyle(e).left),this.position={x:t.screenX-parseInt(i.left),y:t.screenY-parseInt(i.top)}}moveXY(t){if(window.getVal(this.position,"x",-1)>=0){const e=window.byId(this.vid);e.style.left=t.screenX-this.position.x+"px",e.style.top=t.screenY-this.position.y+"px"}}cleanXY(){this.position={x:-1,y:-1}}};Wt([Mounted],Jt.prototype,"mounted",null),Wt([Template],Jt.prototype,"template",void 0),Wt([Field],Jt.prototype,"position",void 0),Wt([Method],Jt.prototype,"getStyle",null),Wt([Method],Jt.prototype,"closeModal",null),Wt([Method],Jt.prototype,"recordXY",null),Wt([Method],Jt.prototype,"moveXY",null),Wt([Method],Jt.prototype,"cleanXY",null),Wt([Compute((t=>({type:"cancel",singleClick:function(e){t.cancel()}})))],Jt.prototype,"cancelProps",void 0),Wt([Compute((t=>({singleClick:function(e){t.ok()}})))],Jt.prototype,"okProps",void 0),Wt([Compute((t=>t.iProps.display||!1))],Jt.prototype,"display",void 0),Wt([Compute((t=>t.iProps.ok||t.closeModal))],Jt.prototype,"ok",void 0),Wt([Compute((t=>t.iProps.cancel||t.closeModal))],Jt.prototype,"cancel",void 0),Wt([Compute((t=>t.iProps.width||600))],Jt.prototype,"width",void 0),Wt([Compute((t=>t.iProps.height||300))],Jt.prototype,"height",void 0),Jt=Wt([Service(Jt,ft.ModalX,!0)],Jt),$registry.buildAndRegist(ft.ModalX);var Xt=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let Yt=class extends pt{constructor(){super(...arguments),this.template='<teleport to="body" v-if="display">\n        \x3c!-- 右键菜单 --\x3e\n        <div class="dinglj-v-context-menu" :style="position" :id="vid">\n            \x3c!-- 右键菜单集合 --\x3e\n            <div v-for="item in $list">\n                \x3c!-- 每一个右键菜单 --\x3e\n                <div v-if="conditionIfDisplay(item)" class="dinglj-v-context-menu-item" @click.stop="execCommand(item)">\n                    <div class="text">{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </teleport>',this.display=!1,this.position={top:"0px",left:"0px",opacity:"0"}}mounted(){window.addEventListener("click",this.hidden),$queue.on("hidden-right-context-menu",this.hidden),this.binding()}binding(){const t=this;window.timer((()=>!!t.iProps.bindId&&(t.element=window.byId(t.iProps.bindId),!!t.element&&(t.element.addEventListener("contextmenu",(function(e){t.$list&&0!=t.$list.length&&($queue.sendMsg("hidden-right-context-menu",null),e.stopPropagation(),e.preventDefault(),t.position.left=e.clientX+"px",t.position.top=e.clientY+"px",t.position.opacity="1",t.display=!0,window.timer((function(){let e=window.byId(t.vid);return!!e&&(window.innerHeight-e.offsetTop<e.offsetHeight?e.style.transform="translate(0, -100%)":e.style.removeProperty("transform"),!0)})))})),!0))),500)}hidden(){this.position.opacity="0",this.display=!1}conditionIfDisplay(t){return t.isDisplay(this.$ctx,this.element)}execCommand(t){t.event(this.$ctx,this.element),this.hidden()}};Xt([Mounted],Yt.prototype,"mounted",null),Xt([Template],Yt.prototype,"template",void 0),Xt([Field],Yt.prototype,"display",void 0),Xt([Field],Yt.prototype,"element",void 0),Xt([Field],Yt.prototype,"position",void 0),Xt([Method],Yt.prototype,"binding",null),Xt([Method],Yt.prototype,"hidden",null),Xt([Method],Yt.prototype,"conditionIfDisplay",null),Xt([Method],Yt.prototype,"execCommand",null),Xt([Compute((t=>t.iProps.list||[]))],Yt.prototype,"$list",void 0),Xt([Compute((t=>t.iProps.data||{}))],Yt.prototype,"$ctx",void 0),Yt=Xt([Service(Yt,ft.ContextMenuX,!0)],Yt),$registry.buildAndRegist(ft.ContextMenuX);const Zt={caseName:"用例名称",status:"状态",component:"模块",ticket:"变更号",currentRow:"当前行数",totalRow:"总行数",dbType:"数据库类型",currentStep:"当前结束的步骤",totalStep:"总步骤",percent:"进度",zip:"打包版本",level:"等级",casePath:"用例路径",timeCost:"耗费时间"};class Qt{constructor(t,e){if(!t)return;t.stats?"待发送"==t.stats?this.status=e.NOTSEND:"结束"==t.stats?"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:"ERROR"==t.result?this.status=e.ERROR:console.error(`未知的状态 {${t.stats}}, 结果 {${t.result}}, 请联系 dinglj 补充`):"执行中"==t.stats?this.status=e.RUNNING:"等待资源"==t.stats?this.status=e.WAITTING:"失败"==t.stats?this.status=e.FAILED:"已发送"==t.stats?this.status=e.SENDED:console.error(`未知的状态 {${t.stats}}, 请联系 dinglj 补充`):"TICKET"==t.result?this.status=e.TICKET:"SUCCESS"==t.result?this.status=e.SUCCESS:console.error(`未知的结果 {${t.result}}, 请联系 dinglj 补充`),this.status||console.log(t),this.currentRow=parseInt(t.currentRow||0),this.zip=t.erpVersion,this.level=t.level||t.clevel,this.component=t.module,this.caseName=t.testcaseName||t.testCaseName,this.casePath=t.testcasePath,this.totalRow=parseInt(t.totalRow||0),this.currentStep=parseInt(t.endStepNum||0),this.totalStep=parseInt(t.totalStepNum||0),this.timeCost=t.timeCost;let i=t.ticketId||t.log;this.ticket=i?parseInt(i):i,this.dbType=t.dbType||"",this.totalStep&&(this.percent=(this.currentStep/this.totalStep*100).toFixed(2)+"%")}static getCaption(t){switch(t){case"caseName":return"用例名称";case"status":return"状态";case"component":return"模块";case"ticket":return"变更号";case"currentRow":return"当前行数";case"totalRow":return"总行数";case"currentStep":return"当前结束的步骤";case"totalStep":return"总步骤";case"zip":return"打包版本";case"level":return"等级";case"casePath":return"用例路径";case"timeCost":return"耗费时间";case"percent":return"进度"}}}Qt._fieldMap_=Zt,Qt._fields_=Object.keys(Zt);class _t{exec(t,e,i,n,o=""){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e)){if(this.func)return this.isRow?this.func(t,e,n):this.func(t,e,i,o);if(!this.isRow)return this.ignoreColumns.includesIgnoreCase(o)}return!1}}window.defunc("RowFilter",((t,e,i)=>{let n=new _t;return n.isRow=!0,n.groupRegExp=t,n.tabRegExp=e,n.func=i,n})),window.defunc("ColFilter",((t,e,i)=>{let n=new _t;return n.isRow=!1,n.groupRegExp=t,n.tabRegExp=e,Array.isArray(i)?(n.ignoreColumns=i,n.type="array"):"function"==typeof i?(n.func=i,n.type="function"):(n.ignoreColumns=[i],n.type="single"),n}));class te{exec(t,e){return this.func?this.func(t,e):this.fieldKey==e&&this.expectValue.includesIgnoreCase(t.get(e))?this.groupName:""}}window.defunc("GroupStrategy",((t,e,i)=>{let n=new te;return n.fieldKey=t,n.expectValue=e,n.groupName=i,Array.isArray(e)?n.expectValue=e:n.expectValue=[e],n})),window.defunc("GroupStrategy",(t=>{let e=new te;return e.func=t,e}));class ee{exec(t,e,i,n){if(this.groupRegExp.test(t)&&this.tabRegExp.test(e))return this.func?this.func(t,e,i,n):this.expectValue.compareBy(i.get(this.fieldKey),n.get(this.fieldKey))}}window.defunc("OrderTicket",((t,e,i,n)=>{let o=new ee;return o.groupRegExp=t,o.tabRegExp=e,o.fieldKey=i,Array.isArray(n)?o.expectValue=n:o.expectValue=[n],o})),window.defunc("OrderTicket",((t,e,i)=>{let n=new ee;return n.groupRegExp=t,n.tabRegExp=e,n.func=i,n}));class ie{exec(t,e){let i=this.groupRegExp.test(t);if(this.reverse&&(i=!i),i){if(this.func)return this.func(t,e);if(this.expectValue.includesIgnoreCase(e.get(this.fieldKey)))return this.tabName}return""}}window.defunc("TabPageStrategy",((t,e,i,n)=>window.TabPageStrategy(t,e,i,n,!1))),window.defunc("TabPageStrategy",((t,e,i,n,o)=>{const r=new ie;return r.groupRegExp=t,r.fieldKey=e,r.tabName=n,r.reverse=o,Array.isArray(i)?r.expectValue=i:r.expectValue=[i],r})),window.defunc("TabPageStrategy",((t,e)=>window.TabPageStrategy(t,e,!1))),window.defunc("TabPageStrategy",((t,e,i)=>{const n=new ie;return n.groupRegExp=t,n.func=e,n.reverse=i,n}));const ne={id:"变更号",summary:"概述",status:"状态",reporter:"报告人",owner:"属主",type:"类型",priority:"优先级",component:"组件",resolution:"处理结果",time:"创建时间",changetime:"修改时间",plandate:"计划日期",pingtai:"平台",project:"项目",ticketclass:"分类",testadjust:"测试调整",testreport:"测试调整提出者",testower1:"测试调整处理者",keywords:"关键词",cc:"抄送",version:"版本",needbuild:"需打包",devtype:"开发类型",dinglj_note:"备注"};class oe{static getCaption(t){return oe.fieldNames.includesIgnoreCase(t)?oe.fields[t]:t}constructor(t=null){if(null==t)return;const e=$store.getStorage("dinglj-v-ticket-info",{});for(let i of t.children){const t=i.className,n=i.innerText.trim();this.set(t,n),"id".equalsIgnoreCase(t)&&e[n]&&this.set("dinglj_note",e[n].note)}}static forLocalTest(t){let e=new oe;const i=$store.getStorage("dinglj-v-ticket-info",{});for(let n of Object.keys(t)){const o=$get(t,n);e.set(n,o),"id".equalsIgnoreCase(n)&&i[o]&&e.set("dinglj_note",i[o].note)}return e}set(t,e){oe.fieldNames.includesIgnoreCase(t)?this[t]=e:oe.unknownColumn.includesIgnoreCase(t)||(`不存在的列: ${t}`.warn(),oe.unknownColumn.push(t))}get(t){return $get(this,t)?$get(this,t):""}}function re(t,e){let i=[],n=[],o=[];for(let t of e.children[0].children){if(t.classList.contains("dinglj-v-table-select")||t.classList.contains("dinglj-v-table-sequence"))continue;let e=t.getAttribute("data-key");i.push(e),o.push(oe.fields[e])}n.push(o);for(let e of t){let t=[];for(let n of i){let i=e.get(n);"time"!=n&&"changetime"!=n||(i=$ticket.parseTime(i)),t.push(i)}n.push(t)}$excel.export(`${e.getAttribute("data-title")||e.id} ${(new Date).$format().replace(/:/g,"")}.xlsx`,n)}oe.fields=ne,oe.fieldNames=Object.keys(ne),oe.fieldValues=Object.values(ne),oe.unknownColumn=["sel"],Window.prototype.$systemConfig=window.toCache((()=>$rsa.decryptObject(window.encodeConfig())),"dinglj-system-config")("dinglj-system-config"),Window.prototype.$userConfig=window.toCache((()=>window.readConfig()),"dinglj-user-config")("dinglj-user-config"),window.isMatch&&!window.isMatch()||(window.linkCss("/src/assets/css/contextmenu.css"),window.linkCss("/src/assets/css/common.css"),window.linkCss("/src/assets/css/form.css"),window.linkCss("/src/assets/css/tip.css"),window.linkCss("/src/assets/css/layout.css"),window.linkCss("/src/assets/css/modal.css")),window.$ticket={},$ticket.whoami=function(){return window.getVal($userConfig,"whoami.zh","",!0)},$ticket.urlArgs=function(t){const e={};return function(t){return e[t]||(e[t]=(t=>{const e={},i=["user","status","column"],n=window.location.href.indexOf("?"),o=window.location.href.substring(n+1);for(const t of o.split("&")){if(!t.trim())continue;const n=t.indexOf("=");if(n>=0){const o=t.substring(0,n),r=t.substring(n+1);e[o]=i.includes(o.toLowerCase())?r.split(","):r}}return e})())}}()("url-args"),$ticket.queryTicket=function(){if(window.isDev())return window.readData();const t=window.getVal($systemConfig,"specialUrl.flag","");if(t&&window.location.href.includes(t)){if(!$ticket.urlArgs.user)return void"请至少指定一个用户".err();let t="";$ticket.urlArgs.status&&(t=$ticket.urlArgs.status.map((t=>`status=${t}`)).join("&"));let e=["owner","reporter","cc"].map((e=>{let i=$ticket.urlArgs.user.map((t=>`${e}=${t}`)).join("&");return t?`${i}&${t}`:i})).join("&or&");$ticket.urlArgs.groupby&&(e+=`&group=${$ticket.urlArgs.groupby}`),$ticket.urlArgs.max?e+=`&max=${$ticket.urlArgs.max}`:e+="&max=10000",$ticket.urlArgs.column?"all"==$ticket.urlArgs.column[0]?e+="&"+window.getVal($systemConfig,"specialUrl.columns","").split(",").map((t=>`col=${t}`)).join("&"):e+="&"+$ticket.urlArgs.column.map((t=>`col=${t}`)).join("&"):e+="&"+window.getVal($systemConfig,"specialUrl.columns","").split(",").map((t=>`col=${t}`)).join("&");const i=window.getVal($systemConfig,"specialUrl.query","");if(i)return $net.get(`${i}?${e}`)}return""},$ticket.readTicket=function(){const t=$ticket.queryTicket(),e=[];let i=window.document;t.trim()&&(i=(new DOMParser).parseFromString(t,"text/html"));const n=["prio1","prio2","prio3"];for(let t of n)for(let n of window.byClass(t,i))e.push(new oe(n));return e},$ticket.getCellValue=function(t,e,i){let n;return n="string"==typeof i?i:i.en,"summary".equalsIgnoreCase(n)?$ticket.getSummary(t,e):e.get(n)},$ticket.getSummary=function(t,e){let i="";return $ticket.getNewTickets(t).includes(e.get("id"))&&(i+='<span class="ticket-list-new-ticket">new</span>'),$ticket.getTops(t).includes(e.get("id"))&&(i+='<span class="ticket-list-top-ticket">top</span>'),i+=`<span title="${e.get("summary")}">${e.get("summary")}</span>`,i},$ticket.getTops=function(t){return t.tops||(t.tops=$ticket.getLocalStorage(t).topTickets||[]),t.tops},$ticket.getNewTickets=function(t){if(t.newTickets)return t.newTickets;const e=$ticket.getMyTickets(t);return t.newTickets=t.originData.filter((t=>t.get("owner")==$ticket.whoami()&&!e.includesIgnoreCase(t.get("id")))).map((t=>t.get("id"))),t.newTickets},$ticket.getMyTickets=function(t){return t.myTickets||(t.myTickets=$ticket.getLocalStorage(t).myTickets||[]),t.myTickets},$ticket.getLocalStorage=function(t){return t.localStorage||(t.localStorage=$store.getStorage(t.constant.storage,{topTickets:[],myTickets:[]})),t.localStorage},$ticket.parseTicketTime=function(t,e="changetime"){const i=t.get(e);return"刚刚"==i?0:/^\d+分钟 ago$/.test(i)?60*parseInt(i):/^\d+小时 ago$/.test(i)?60*parseInt(i)*60:/^\d+天 ago$/.test(i)?24*parseInt(i)*60*60:/^\d+周 ago$/.test(i)?7*parseInt(i)*24*60*60:/^\d+个月 ago$/.test(i)?30*parseInt(i)*24*60*60:/^\d+年 ago$/.test(i)?365*parseInt(i)*24*60*60:void 0},$ticket.parseTime=function(t){let e=new Date;if("刚刚"==t)return e.$format();let i=-1*parseInt(t);return/^\d+分钟 ago$/.test(t)&&e.$setMinute(i),/^\d+小时 ago$/.test(t)&&e.$setHour(i),/^\d+天 ago$/.test(t)&&e.$setDate(i),/^\d+周 ago$/.test(t)&&e.$setDate(7*i),/^\d+个月 ago$/.test(t)&&e.$setMonth(i),/^\d+年 ago$/.test(t)&&e.$setYear(i),e.$format()},$ticket.sortByTime=function(t,e){const i=$ticket.parseTicketTime(t)-$ticket.parseTicketTime(e);return 0==i?t.get("id")>e.get("id")?-1:t.get("id")<e.get("id")?1:0:i},$ticket.toTicketId=function(t){if(null==t||null==t)return"";let e="";return e="string"==typeof t?t:t.innerText,e&&(e=e.replace(/\n/g,"").trim()),/.*#(\d+).*/.test(e)?/.*#(\d+).*/.exec(e)[1]:/^\d+$/.test(e)?e:""},$ticket.openTicket=function(t,e){const i=$ticket.toTicketId(e);for(let t of window.byClass(`ticket-${i}`)){const e=t.findChildrenByClass("dinglj-v-table-select");e&&e.length&&(e[0].children[0].checked=!0)}$ticket.setOpended(t,i);let n=window.getConfigOrDefault("urls.ticket","",!1);n.endsWith("/")||(n+="/"),window.open(n+i)},$ticket.setOpended=function(t,e){const i=$ticket.toTicketId(e),n=$ticket.getTicketById(t,i);return!(n.get("owner")!=$ticket.whoami()||!$ticket.getNewTickets(t).includes(`#${i}`)||($ticket.getNewTickets(t).remove(`#${i}`),$ticket.updateSummary(t,n),t.localStorage.myTickets.pushNew(`#${i}`),$store.setStorage(t.constant.storage,t.localStorage),0))},$ticket.setUnOpen=function(t,e){const i=$ticket.toTicketId(e),n=$ticket.getTicketById(t,i);return n.get("owner")==$ticket.whoami()&&!$ticket.getNewTickets(t).includes(`#${i}`)&&($ticket.getNewTickets(t).pushNew(`#${i}`),$ticket.updateSummary(t,n),t.localStorage.myTickets.remove(`#${i}`),$store.setStorage(t.constant.storage,t.localStorage),!0)},$ticket.getTicketById=function(t,e){const i=$ticket.toTicketId(e),n=t.originData.getIfExistByKey("id",`#${i}`);return n&&n.length?n[0]:null},$ticket.updateSummary=function(t,e){window.byClass("dinglj-v-cell id").filter((t=>t.innerText==e.get("id"))).forEach((i=>{let n=i.findBroByClass("summary")[0];n&&(n.innerHTML=$ticket.getSummary(t,e))}))},$ticket.afterTableLoad=function(t,e){window.timer((function(){const i=window.query(`#${e} .dinglj-v-tbody .dinglj-v-cell.id`);return 0!=i.length&&(i.forEach((e=>{e.parentNode.classList.add(`ticket-${$ticket.toTicketId(e)}`),e.addEventListener("click",(i=>{i.stopPropagation(),$ticket.openTicket(t,e)}))})),!0)}),100)},$ticket.isTop=function(t,e){return"string"==typeof e?$ticket.getTops(t).includesIgnoreCase(e):$ticket.getTops(t).includesIgnoreCase(e.get("id"))},$ticket.lineMenu=function(t){return[new bt("打开变更",(function(e,i){$ticket.openTicket(t,e.get("id"))})),new bt("复制描述",(function(t,e){window.copyTxt(t.get("summary"))})),new bt("置顶",(function(e,i){$ticket.toTop(t,e.get("id")),`${e.get("id")} 已置顶`.info()}),(function(e,i){return!$ticket.isTop(t,e.get("id"))})),new bt("取消置顶",(function(e,i){$ticket.cancelTop(t,e.get("id")),`${e.get("id")} 已取消置顶`.info()}),(function(e,i){return $ticket.isTop(t,e.get("id"))})),new bt("标记为已读",(function(e,i){$ticket.setOpended(t,i.innerText)&&`${e.get("id")} 已标记为已读`.info()}),(function(e,i){return $ticket.getNewTickets(t).includes(e.get("id"))})),new bt("标记为未读",(function(e,i){$ticket.setUnOpen(t,i.innerText)&&`${e.get("id")} 已取消已读标记`.info()}),(function(e,i){return!$ticket.getNewTickets(t).includes(e.get("id"))})),new bt("显示更多信息",(function(e,i){t.modal.ticket=e,t.modal.display=!0}))]},$ticket.bodyMenus=function(t){return[new bt("导出",(function(t,e){re(t,e.parentElement)})),new bt("清除排序",(function(e,i){t.sort.columnKey=null}))]},$ticket.titleColMenu=function(t){return[new bt("按照此列升序",(function(e,i){t.sort.columnKey=e.columnKey,t.sort.type="ASC"})),new bt("按照此列降序",(function(e,i){t.sort.columnKey=e.columnKey,t.sort.type="DESC"})),new bt("清除排序",(function(e,i){t.sort.columnKey=null})),new bt("导出",(function(t,e){re(t.list,e.parentElement.parentElement)}))]},$ticket.toTop=function(t,e){const i=$ticket.toTicketId(e);t.localStorage.topTickets.pushNew(`#${i}`),t.tops=t.localStorage.topTickets,$store.setStorage(t.constant.storage,t.localStorage)},$ticket.cancelTop=function(t,e){const i=$ticket.toTicketId(e);t.localStorage.topTickets.remove(`#${i}`),t.tops=t.localStorage.topTickets,$store.setStorage(t.constant.storage,t.localStorage)},$ticket.groupData=function(t){if(t.filterData.length<=0)return{};let e={};t.groupColumn?e=window.groupBy(t.filterData,t.groupColumn):"未找到任何用于分组的配置".err();const i=window.getConfigOrDefault("strategy.groupBy",[]);for(let n of t.filterData)for(let t of oe.fieldNames)for(let o=i.length-1;o>=0;o--){let r=i[o].exec(n,t);r&&(e[r]&&e[r].includes(n)||unshiftToArray(e,r,n))}return e},$ticket.groupNames=function(t){if(t.groupData.length<=0)return[];const e=Object.keys(t.groupData),i=window.getConfigOrDefault("strategy.order.group",{},!1);return e.sort(((e,n)=>$get(i,t.groupColumn).compareBy(e,n))),e},$ticket.tabData=function(t,e){const i=t.groupData[e],n={};if(!i||0==i.length)return n;const o=window.getConfigOrDefault("strategy.tabBy",[]),r=window.getConfigOrDefault("strategy.rowFilter",[]);for(let t of o)for(let o of i){let s=t.exec(e,o);if(s){let t=!1;for(let n of r)if(n.exec(e,s,i,o)){t=!0;break}t||pushToArray(n,s,o,!0)}}const s=window.getConfigOrDefault("strategy.order.ticket",[]);for(let i of Object.keys(n))n[i].sort(((n,o)=>{let r=$ticket.isTop(t,n.get("id")),a=$ticket.isTop(t,o.get("id"));if(r!=a){if(r)return-1;if(a)return 1}if(null==t.sort.columnKey){for(let t of s){let r=t.exec(e,i,n,o);if(0!=r)return r}return $ticket.sortByTime(n,o)}{let r=n.get(t.sort.columnKey),a=o.get(t.sort.columnKey);if("changetime"==t.sort.columnKey?(r=$ticket.parseTicketTime(n,"changetime"),a=$ticket.parseTicketTime(o,"changetime")):"time"==t.sort.columnKey&&(r=$ticket.parseTicketTime(n,"time"),a=$ticket.parseTicketTime(o,"time")),r<a)return"ASC"==t.sort.type?-1:1;if(r>a)return"ASC"==t.sort.type?1:-1;for(let t of s){let r=t.exec(e,i,n,o);if(0!=r)return r}return $ticket.sortByTime(n,o)}}));return n},$ticket.columnsToDisplay=function(t,e,i){const n=$ticket.tabData(t,e);if(!n)return[];const o=n[i];if(!o||0==o.length)return[];let r=[];const s=window.getConfigOrDefault("strategy.colFilter",[]);for(let t of oe.fieldNames){let n=!1;for(const r of s)if(r.exec(e,i,o,null,t)){n=!0;break}n||r.push(t)}return r.map((t=>({zh:oe.getCaption(t),en:t})))};var se=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};let ae=class extends pt{constructor(){super(...arguments),this.template='<div id="ticket-list-filter">\n        <div class="filter-row">\n            <i-input class="filter-contrl" :i-props="keywordProp"></i-input>\n            <i-combo class="filter-contrl" :i-props="ownerProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="statusProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="reporterProp"></i-combo>\n            <i-combo class="filter-contrl" :i-props="componentProp"></i-combo>\n        </div>\n    </div>',this.filter={}}getComboData(t){const e=Array.from(new Set(this.data.map((e=>e.get(t))))),i=window.getConfigOrDefault(`strategy.order.group.${t}`,[],!1);return e.sort(((t,e)=>i.compareBy(t,e))),e}};se([Template],ae.prototype,"template",void 0),se([Field],ae.prototype,"filter",void 0),se([Method],ae.prototype,"getComboData",null),se([Compute((t=>({caption:"搜索",placeholder:"请输入关键字",onEnter(e){t.filter.keyword=e.value,t.emit("on-change",t.filter)},onChange(e){t.filter.keyword=e.value,t.emit("on-change",t.filter)}})))],ae.prototype,"keywordProp",void 0),se([Compute((t=>({list:t.getComboData("owner"),caption:"属主",onChange:function(e){t.filter.owner=e.value,t.emit("on-change",t.filter)}})))],ae.prototype,"ownerProp",void 0),se([Compute((t=>({list:t.getComboData("status"),caption:"状态",onChange:function(e){t.filter.status=e.value,t.emit("on-change",t.filter)}})))],ae.prototype,"statusProp",void 0),se([Compute((t=>({list:t.getComboData("reporter"),caption:"报告者",onChange:function(e){t.filter.reporter=e.value,t.emit("on-change",t.filter)}})))],ae.prototype,"reporterProp",void 0),se([Compute((t=>({list:t.getComboData("component"),caption:"组件/模块",onChange:function(e){t.filter.component=e.value,t.emit("on-change",t.filter)}})))],ae.prototype,"componentProp",void 0),se([Prop(Array,[],!0)],ae.prototype,"data",void 0),ae=se([Service(ae,"ti-filter")],ae);const le=$registry.buildComponent("ti-filter");var ce=function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};const ue=window.byId("main");if(ue){window.linkCss("/src/script/ticket-list/index.css"),window.byId("footer")&&window.byId("footer").remove();for(let t of ue.children)t.style.display="none";ue.innerHTML+='<div id="dinglj-main">\n        <i-nav-view :i-props="{ list: groupNames }">\n            <template v-slot:before>\n                <tifilter :data="originData" @on-change="emit => filter = emit.value"></tifilter>\n            </template>\n            <template class="result-view" #content="{ active }">\n                <i-tab-view v-for="groupName in groupNames" :i-props="genTabViewProps(groupName)">\n                    <template v-for="(tabName, idx) in tabNames(groupName)">\n                        <div style="width: 100%; overflow: hidden">\n                            <i-table v-if="active == groupName || idx == 0" :i-props="genTableProps(groupName, tabName)"></i-table>\n                        </div>\n                    </template>\n                </i-tab-view>\n                <i-modal :i-props="modalProps">\n                    <template v-slot:title>\n                        <div>\n                            <span class="ticket-modal-id" @click="openTicketByModal()">\n                                {{ modal.ticket.get(\'id\') }}\n                            </span>\n                            <span>{{ modal.ticket.get(\'summary\') }}</span>\n                        </div>\n                    </template>\n                    <template v-slot:content>\n                        <h1>111</h1>\n                    </template>\n                </i-modal>\n            </template>\n            <template v-slot:after></template>\n        </i-nav-view>\n    </div>'}let he=class extends pt{constructor(){super(...arguments),this.sort={columnKey:null,type:"ASC"},this.tableIdList=[],this.filter={},this.tops=null,this.newTickets=null,this.myTickets=null,this.localStorage=null,this.modal={ticket:null,display:!1},this.constant={storage:"dinglj-v-ticket-list-storage"}}mounted(){const t=this;window.displayData=function(){return t},$ticket.getTops(this);let e=$ticket.getNewTickets(this);if(e.length>0){let t=`你有 ${e.length} 个新变更, 注意查收<div style="margin-top: 10px; display: flex">\n            <div style="flex: 1"></div>\n                <div style="margin-left: 5px; font-weight: bold; color: var(--theme-color); cursor: pointer" onclick="${e.map((t=>`$ticket.openTicket(window.displayData(), '${t}');`)).join("")}">全部打开</div>\n                <div style="margin-left: 10px; font-weight: bold; color: var(--theme-color); cursor: pointer" onclick="${e.map((t=>`$ticket.setOpended(window.displayData(), '${t}');`)).join("")+"'已全部标记'.info()"}">全部标记为已读</div>\n            </div>`;t.info(5e3)}}genTableProps(t,e){const i=this;return{list:i.tabData(t)[e],columns:i.columnsToDisplay(t,e),flexColumns:["summary"],getCell:i.getCellValue,getColumnKey:t=>t.en,getColumnLabel:t=>t.zh,rowMenus:$ticket.lineMenu(i),bodyMenus:$ticket.bodyMenus(i),titleColumnMenus:$ticket.titleColMenu(i),title:`${t}-${e}`,loaded:i.tableLoaded}}genTabViewProps(t){const e=this;return{list:e.tabNames(t),getLabel:function(i){return`${i} (${e.tabData(t)[i].length})`}}}openTicketByModal(){$ticket.openTicket(this,this.modal.ticket.get("id"))}getCellValue(t,e){return $ticket.getCellValue(this,t,e)}tableLoaded(t){$ticket.afterTableLoad(this,t.vid)}tabData(t){return $ticket.tabData(this,t)}tabNames(t){return Object.keys(this.tabData(t))}columnsToDisplay(t,e){return $ticket.columnsToDisplay(this,t,e)}};ce([Component({tifilter:le}),Mounted],he.prototype,"mounted",null),ce([Field],he.prototype,"sort",void 0),ce([Field],he.prototype,"tableIdList",void 0),ce([Field],he.prototype,"filter",void 0),ce([Field],he.prototype,"tops",void 0),ce([Field],he.prototype,"newTickets",void 0),ce([Field],he.prototype,"myTickets",void 0),ce([Field],he.prototype,"localStorage",void 0),ce([Field],he.prototype,"modal",void 0),ce([Field],he.prototype,"constant",void 0),ce([Method],he.prototype,"genTableProps",null),ce([Method],he.prototype,"genTabViewProps",null),ce([Method],he.prototype,"openTicketByModal",null),ce([Method],he.prototype,"getCellValue",null),ce([Method],he.prototype,"tableLoaded",null),ce([Method],he.prototype,"tabData",null),ce([Method],he.prototype,"tabNames",null),ce([Method],he.prototype,"columnsToDisplay",null),ce([Compute((t=>({display:t.modal.display,width:700,onClose:function(){t.modal.display=!1}})))],he.prototype,"modalProps",void 0),ce([Compute((t=>{let e=/[?&]group=([a-zA-Z0-9]+)[?&]?/,i="";e.test(window.location.href)&&(i=e.exec(window.location.href)[1]),i||(e=/[?&]groupby=([a-zA-Z0-9]+)[?&]?/,e.test(window.location.href)&&(i=e.exec(window.location.href)[1]));const n=["component","owner","status"];let o=window.getConfigOrDefault("groupBy",i,!0);n.includesIgnoreCase(o)&&n.remove(o),n.unshift(o);for(let e of n)if(Object.keys(t.originData[0]).includesIgnoreCase(e))return e}))],he.prototype,"groupColumn",void 0),ce([Compute($ticket.readTicket)],he.prototype,"originData",void 0),ce([Compute((t=>{if(0==t.originData.length)return[];let e,i=t.originData;for(e of Object.keys(t.originData[0]))t.filter[e]&&(i=i.filter((i=>i.get(e)==t.filter[e])));return i=i.filter((e=>!t.filter.keyword||e.get("summary").includesIgnoreCase(t.filter.keyword)||e.get("id").includesIgnoreCase(t.filter.keyword))),i}))],he.prototype,"filterData",void 0),ce([Compute((t=>$ticket.groupData(t)))],he.prototype,"groupData",void 0),ce([Compute((t=>$ticket.groupNames(t)))],he.prototype,"groupNames",void 0),ce([Compute((t=>window.getConfigOrDefault("urls.ticket","")))],he.prototype,"ticketURL",void 0),he=ce([Service(he,"App")],he),window.createVue($registry.buildComponent("App"),"#dinglj-main")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,